load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "autoid",
    srcs = [
        "autoid.go",
        "autoid_service.go",
        "errors.go",
        "memid.go",
    ],
    importpath = "github.com/pingcap/tidb/meta/autoid",
    visibility = ["//visibility:public"],
    deps = [
        "//autoid_service",
        "//errno",
        "//kv",
        "//meta",
        "//metrics",
        "//types",
        "//util/dbterror",
        "//util/execdetails",
        "//util/logutil",
        "//util/mathutil",
        "//vendor/github.com/opentracing/opentracing-go",
        "//vendor/github.com/pingcap/errors",
        "//vendor/github.com/pingcap/failpoint",
        "//vendor/github.com/pingcap/kvproto/pkg/autoid",
        "//vendor/github.com/pingcap/tidb/parser/model",
        "//vendor/github.com/pingcap/tidb/parser/mysql",
        "//vendor/github.com/tikv/client-go/v2/txnkv/txnsnapshot",
        "//vendor/github.com/tikv/client-go/v2/util",
        "//vendor/go.etcd.io/etcd/client/v3:client",
        "//vendor/go.uber.org/zap",
        "//vendor/google.golang.org/grpc",
        "//vendor/google.golang.org/grpc/credentials/insecure",
    ],
)

go_test(
    name = "autoid_test",
    timeout = "short",
    srcs = [
        "autoid_test.go",
        "bench_test.go",
        "main_test.go",
        "memid_test.go",
        "seq_autoid_test.go",
    ],
    flaky = True,
    deps = [
        ":autoid",
        "//kv",
        "//meta",
        "//store/mockstore",
        "//testkit/testsetup",
        "//types",
        "//util",
        "//vendor/github.com/pingcap/errors",
        "//vendor/github.com/pingcap/failpoint",
        "//vendor/github.com/pingcap/tidb/parser/model",
        "//vendor/github.com/pingcap/tidb/parser/mysql",
        "//vendor/github.com/pingcap/tidb/parser/terror",
        "//vendor/github.com/stretchr/testify/require",
        "//vendor/go.uber.org/goleak",
    ],
)
