set tidb_cost_model_version=1;
create table t(a int, b int, c int);
explain format='plan_tree' select a, b, avg(c) from t group by a, b, c having
(a > 1) and (a > 2) and 1 and (b > 2) and (avg(c) > 3);
id	task	access object	operator info
Projection	root		agg_predicate_pushdown.t.a, agg_predicate_pushdown.t.b, Column#5->Column#8
└─Selection	root		gt(Column#5, 3)
  └─HashAgg	root		group by:Column#14, Column#15, Column#16, funcs:avg(Column#13)->Column#5, funcs:firstrow(Column#14)->agg_predicate_pushdown.t.a, funcs:firstrow(Column#15)->agg_predicate_pushdown.t.b
    └─Projection	root		cast(agg_predicate_pushdown.t.c, decimal(10,0) BINARY)->Column#13, agg_predicate_pushdown.t.a->Column#14, agg_predicate_pushdown.t.b->Column#15, agg_predicate_pushdown.t.c->Column#16
      └─TableReader	root		data:Selection
        └─Selection	cop[tikv]		gt(agg_predicate_pushdown.t.a, 1), gt(agg_predicate_pushdown.t.a, 2), gt(agg_predicate_pushdown.t.b, 2)
          └─TableFullScan	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format='plan_tree' select a, b, avg(c) from t group by a, b, c having
(a > 1 or b > 2) and (a > 2 or b < 1) and 1 and (b > 2) and (avg(c) > 3);
id	task	access object	operator info
Projection	root		agg_predicate_pushdown.t.a, agg_predicate_pushdown.t.b, Column#5->Column#8
└─Selection	root		gt(Column#5, 3)
  └─HashAgg	root		group by:Column#14, Column#15, Column#16, funcs:avg(Column#13)->Column#5, funcs:firstrow(Column#14)->agg_predicate_pushdown.t.a, funcs:firstrow(Column#15)->agg_predicate_pushdown.t.b
    └─Projection	root		cast(agg_predicate_pushdown.t.c, decimal(10,0) BINARY)->Column#13, agg_predicate_pushdown.t.a->Column#14, agg_predicate_pushdown.t.b->Column#15, agg_predicate_pushdown.t.c->Column#16
      └─TableReader	root		data:Selection
        └─Selection	cop[tikv]		gt(agg_predicate_pushdown.t.b, 2), or(gt(agg_predicate_pushdown.t.a, 1), gt(agg_predicate_pushdown.t.b, 2)), or(gt(agg_predicate_pushdown.t.a, 2), lt(agg_predicate_pushdown.t.b, 1))
          └─TableFullScan	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format='plan_tree' select a, b, avg(c) from t group by a, b, c having
(a > 1 and b > 2) or (a > 2 and b < 1) or (b > 2 and avg(c) > 3);
id	task	access object	operator info
Projection	root		agg_predicate_pushdown.t.a, agg_predicate_pushdown.t.b, Column#5->Column#8
└─Selection	root		or(and(gt(agg_predicate_pushdown.t.a, 1), gt(agg_predicate_pushdown.t.b, 2)), or(and(gt(agg_predicate_pushdown.t.a, 2), lt(agg_predicate_pushdown.t.b, 1)), and(gt(agg_predicate_pushdown.t.b, 2), gt(Column#5, 3))))
  └─HashAgg	root		group by:Column#14, Column#15, Column#16, funcs:avg(Column#13)->Column#5, funcs:firstrow(Column#14)->agg_predicate_pushdown.t.a, funcs:firstrow(Column#15)->agg_predicate_pushdown.t.b
    └─Projection	root		cast(agg_predicate_pushdown.t.c, decimal(10,0) BINARY)->Column#13, agg_predicate_pushdown.t.a->Column#14, agg_predicate_pushdown.t.b->Column#15, agg_predicate_pushdown.t.c->Column#16
      └─TableReader	root		data:Selection
        └─Selection	cop[tikv]		or(and(gt(agg_predicate_pushdown.t.a, 1), gt(agg_predicate_pushdown.t.b, 2)), or(and(gt(agg_predicate_pushdown.t.a, 2), lt(agg_predicate_pushdown.t.b, 1)), gt(agg_predicate_pushdown.t.b, 2)))
          └─TableFullScan	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format='plan_tree' select a, b, avg(c) from t group by a, b, c having
(a > 1 or avg(c) > 1) and (a < 3);
id	task	access object	operator info
Projection	root		agg_predicate_pushdown.t.a, agg_predicate_pushdown.t.b, Column#5->Column#8
└─Selection	root		or(gt(agg_predicate_pushdown.t.a, 1), gt(Column#5, 1))
  └─HashAgg	root		group by:Column#14, Column#15, Column#16, funcs:avg(Column#13)->Column#5, funcs:firstrow(Column#14)->agg_predicate_pushdown.t.a, funcs:firstrow(Column#15)->agg_predicate_pushdown.t.b
    └─Projection	root		cast(agg_predicate_pushdown.t.c, decimal(10,0) BINARY)->Column#13, agg_predicate_pushdown.t.a->Column#14, agg_predicate_pushdown.t.b->Column#15, agg_predicate_pushdown.t.c->Column#16
      └─TableReader	root		data:Selection
        └─Selection	cop[tikv]		lt(agg_predicate_pushdown.t.a, 3)
          └─TableFullScan	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format='plan_tree' select a, b, avg(c) from t group by a, b, c having
(a > 1 and avg(c) > 1) or (a < 3);
id	task	access object	operator info
Projection	root		agg_predicate_pushdown.t.a, agg_predicate_pushdown.t.b, Column#5->Column#8
└─Selection	root		or(and(gt(agg_predicate_pushdown.t.a, 1), gt(Column#5, 1)), lt(agg_predicate_pushdown.t.a, 3))
  └─HashAgg	root		group by:Column#14, Column#15, Column#16, funcs:avg(Column#13)->Column#5, funcs:firstrow(Column#14)->agg_predicate_pushdown.t.a, funcs:firstrow(Column#15)->agg_predicate_pushdown.t.b
    └─Projection	root		cast(agg_predicate_pushdown.t.c, decimal(10,0) BINARY)->Column#13, agg_predicate_pushdown.t.a->Column#14, agg_predicate_pushdown.t.b->Column#15, agg_predicate_pushdown.t.c->Column#16
      └─TableReader	root		data:Selection
        └─Selection	cop[tikv]		or(gt(agg_predicate_pushdown.t.a, 1), lt(agg_predicate_pushdown.t.a, 3))
          └─TableFullScan	cop[tikv]	table:t	keep order:false, stats:pseudo
