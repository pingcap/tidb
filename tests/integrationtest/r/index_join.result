set tidb_cost_model_version=1;
drop table if exists t1, t2;
create table t1(a bigint, b bigint, index idx(a));
create table t2(a bigint, b bigint, index idx(a));
insert into t1 values(1, 1), (1, 1), (1, 1), (1, 1), (1, 1);
insert into t2 values(1, 1);
analyze table t1, t2;
set session tidb_hashagg_partial_concurrency = 1;
set session tidb_hashagg_final_concurrency = 1;
explain format = 'plan_tree' select /*+ TIDB_INLJ(t1, t2) */ * from t1 join t2 on t1.a=t2.a;
id	task	access object	operator info
Projection	root		index_join.t1.a, index_join.t1.b, index_join.t2.a, index_join.t2.b
└─IndexJoin	root		inner join, inner:IndexLookUp, outer key:index_join.t2.a, inner key:index_join.t1.a, equal cond:eq(index_join.t2.a, index_join.t1.a)
  ├─TableReader(Build)	root		data:Selection
  │ └─Selection	cop[tikv]		not(isnull(index_join.t2.a))
  │   └─TableFullScan	cop[tikv]	table:t2	keep order:false
  └─IndexLookUp(Probe)	root		
    ├─Selection(Build)	cop[tikv]		not(isnull(index_join.t1.a))
    │ └─IndexRangeScan	cop[tikv]	table:t1, index:idx(a)	range: decided by [eq(index_join.t1.a, index_join.t2.a)], keep order:false
    └─TableRowIDScan(Probe)	cop[tikv]	table:t1	keep order:false
explain format = 'plan_tree' select * from t1 join t2 on t1.a=t2.a;
id	task	access object	operator info
Projection	root		index_join.t1.a, index_join.t1.b, index_join.t2.a, index_join.t2.b
└─HashJoin	root		inner join, equal:[eq(index_join.t2.a, index_join.t1.a)]
  ├─TableReader(Build)	root		data:Selection
  │ └─Selection	cop[tikv]		not(isnull(index_join.t2.a))
  │   └─TableFullScan	cop[tikv]	table:t2	keep order:false
  └─TableReader(Probe)	root		data:Selection
    └─Selection	cop[tikv]		not(isnull(index_join.t1.a))
      └─TableFullScan	cop[tikv]	table:t1	keep order:false
drop table if exists t1, t2;
create table t1(a int not null, b int not null);
create table t2(a int not null, b int not null, key a(a));
set @@tidb_opt_insubq_to_join_and_agg=0;
explain format = 'plan_tree' select /*+ TIDB_INLJ(t2@sel_2) */ * from t1 where t1.a in (select t2.a from t2);
id	task	access object	operator info
IndexJoin	root		semi join, inner:IndexReader, left side:TableReader, outer key:index_join.t1.a, inner key:index_join.t2.a, equal cond:eq(index_join.t1.a, index_join.t2.a)
├─TableReader(Build)	root		data:TableFullScan
│ └─TableFullScan	cop[tikv]	table:t1	keep order:false, stats:pseudo
└─IndexReader(Probe)	root		index:IndexRangeScan
  └─IndexRangeScan	cop[tikv]	table:t2, index:a(a)	range: decided by [eq(index_join.t2.a, index_join.t1.a)], keep order:false, stats:pseudo
show warnings;
Level	Code	Message
set @@tidb_opt_insubq_to_join_and_agg=1;
drop table if exists t1, t2;
create table t1(a int not null, b int not null, key a(a));
create table t2(a int not null, b int not null, key a(a));
explain format = 'plan_tree' select /*+ TIDB_INLJ(t1) */ * from t1 where t1.a in (select t2.a from t2);
id	task	access object	operator info
IndexJoin	root		inner join, inner:IndexLookUp, outer key:index_join.t2.a, inner key:index_join.t1.a, equal cond:eq(index_join.t2.a, index_join.t1.a)
├─StreamAgg(Build)	root		group by:index_join.t2.a, funcs:firstrow(index_join.t2.a)->index_join.t2.a
│ └─IndexReader	root		index:IndexFullScan
│   └─IndexFullScan	cop[tikv]	table:t2, index:a(a)	keep order:true, stats:pseudo
└─IndexLookUp(Probe)	root		
  ├─IndexRangeScan(Build)	cop[tikv]	table:t1, index:a(a)	range: decided by [eq(index_join.t1.a, index_join.t2.a)], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	cop[tikv]	table:t1	keep order:false, stats:pseudo
