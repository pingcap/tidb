set session tidb_enable_cascades_planner = 1;
explain select 1;
id	estRows	task	access object	operator info
Projection_3	1.00	root		1->Column#1
└─TableDual_4	1.00	root		rows:1
select 1;
1
1
drop table if exists t;
create table t(a int primary key, b int);
insert into t values(1,2),(3,4),(5,6);
set session tidb_enable_cascades_planner = 1;
explain select b from t where a > 1;
id	estRows	task	access object	operator info
Projection_8	3333.33	root		planner__cascades__integration.t.b
└─TableReader_9	3333.33	root		data:TableRangeScan_10
  └─TableRangeScan_10	3333.33	cop[tikv]	table:t	range:(1,+inf], keep order:false, stats:pseudo
select b from t where a > 1;
b
4
6
explain select b from t where a > 1 and a < 3;
id	estRows	task	access object	operator info
Projection_8	2.00	root		planner__cascades__integration.t.b
└─TableReader_9	2.00	root		data:TableRangeScan_10
  └─TableRangeScan_10	2.00	cop[tikv]	table:t	range:(1,3), keep order:false, stats:pseudo
select b from t where a > 1 and a < 3;
b
explain select b from t where a > 1 and b < 6;
id	estRows	task	access object	operator info
Projection_9	2666.67	root		planner__cascades__integration.t.b
└─TableReader_10	2666.67	root		data:Selection_11
  └─Selection_11	2666.67	cop[tikv]		lt(planner__cascades__integration.t.b, 6)
    └─TableRangeScan_12	3333.33	cop[tikv]	table:t	range:(1,+inf], keep order:false, stats:pseudo
select b from t where a > 1 and b < 6;
b
4
explain select a from t where a * 3 + 1 > 9 and a < 5;
id	estRows	task	access object	operator info
TableReader_9	4.00	root		data:Selection_10
└─Selection_10	4.00	cop[tikv]		gt(plus(mul(planner__cascades__integration.t.a, 3), 1), 9)
  └─TableRangeScan_11	5.00	cop[tikv]	table:t	range:[-inf,5), keep order:false, stats:pseudo
select a from t where a * 3 + 1 > 9 and a < 5;
a
3
explain select a from t group by a having sum(b) > 4;
id	estRows	task	access object	operator info
Projection_13	8000.00	root		planner__cascades__integration.t.a
└─TableReader_14	8000.00	root		data:Selection_15
  └─Selection_15	8000.00	cop[tikv]		gt(cast(planner__cascades__integration.t.b, decimal(32,0) BINARY), 4)
    └─TableFullScan_16	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select a from t group by a having sum(b) > 4;
a
5
drop table if exists t;
create table t(a int primary key, b int, c int, d int, index idx_b(b), index idx_c_b(c, b));
insert into t values(1,2,3,100),(4,5,6,200),(7,8,9,300);
set session tidb_enable_cascades_planner = 1;
explain select b from t;
id	estRows	task	access object	operator info
IndexReader_13	10000.00	root		index:IndexFullScan_14
└─IndexFullScan_14	10000.00	cop[tikv]	table:t, index:idx_b(b)	keep order:false, stats:pseudo
select b from t;
b
2
5
8
explain select a from t order by b;
id	estRows	task	access object	operator info
Projection_11	10000.00	root		planner__cascades__integration.t.a
└─IndexReader_15	10000.00	root		index:IndexFullScan_16
  └─IndexFullScan_16	10000.00	cop[tikv]	table:t, index:idx_b(b)	keep order:true, stats:pseudo
select a from t order by b;
a
1
4
7
explain select c from t;
id	estRows	task	access object	operator info
IndexReader_9	10000.00	root		index:IndexFullScan_10
└─IndexFullScan_10	10000.00	cop[tikv]	table:t, index:idx_c_b(c, b)	keep order:false, stats:pseudo
select c from t;
c
3
6
9
explain select a from t order by c;
id	estRows	task	access object	operator info
Projection_9	10000.00	root		planner__cascades__integration.t.a
└─IndexReader_12	10000.00	root		index:IndexFullScan_13
  └─IndexFullScan_13	10000.00	cop[tikv]	table:t, index:idx_c_b(c, b)	keep order:true, stats:pseudo
select a from t order by c;
a
1
4
7
explain select a, b from t where b > 5 order by b;
id	estRows	task	access object	operator info
IndexReader_18	8000.00	root		index:IndexRangeScan_19
└─IndexRangeScan_19	3333.33	cop[tikv]	table:t, index:idx_b(b)	range:(5,+inf], keep order:true, stats:pseudo
select a, b from t where b > 5 order by b;
a	b
7	8
explain select a, b, c from t where c = 3 and b > 1 order by b;
id	estRows	task	access object	operator info
IndexReader_15	8000.00	root		index:IndexRangeScan_16
└─IndexRangeScan_16	33.33	cop[tikv]	table:t, index:idx_c_b(c, b)	range:(3 1,3 +inf], keep order:true, stats:pseudo
select a, b, c from t where c = 3 and b > 1 order by b;
a	b	c
1	2	3
explain select a, b from t where c > 1 and b > 1 order by c;
id	estRows	task	access object	operator info
Projection_14	8000.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b
└─IndexReader_18	8000.00	root		index:Selection_19
  └─Selection_19	2666.67	cop[tikv]		gt(planner__cascades__integration.t.b, 1)
    └─IndexRangeScan_20	3333.33	cop[tikv]	table:t, index:idx_c_b(c, b)	range:(1,+inf], keep order:true, stats:pseudo
select a, b from t where c > 1 and b > 1 order by c;
a	b
1	2
4	5
7	8
drop table if exists t;
create table t(a int primary key, b int);
set session tidb_enable_cascades_planner = 1;
desc t;
Field	Type	Null	Key	Default	Extra
a	int(11)	NO	PRI	NULL	
b	int(11)	YES		NULL	
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a from t order by a;
id	estRows	task	access object	operator info
TableReader_7	10000.00	root		data:TableFullScan_8
└─TableFullScan_8	10000.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select a from t order by a;
a
1
2
3
4
explain select b from t order by b;
id	estRows	task	access object	operator info
Sort_11	10000.00	root		planner__cascades__integration.t.b
└─TableReader_9	10000.00	root		data:TableFullScan_10
  └─TableFullScan_10	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b from t order by b;
b
11
22
33
44
explain select b from t order by a+b;
id	estRows	task	access object	operator info
Projection_7	10000.00	root		planner__cascades__integration.t.b
└─Projection_12	10000.00	root		planner__cascades__integration.t.b, planner__cascades__integration.t.a
  └─Sort_8	10000.00	root		Column#4
    └─Projection_13	10000.00	root		planner__cascades__integration.t.b, planner__cascades__integration.t.a, plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b)->Column#4
      └─Projection_9	10000.00	root		planner__cascades__integration.t.b, planner__cascades__integration.t.a
        └─TableReader_10	10000.00	root		data:TableFullScan_11
          └─TableFullScan_11	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b from t order by a+b;
b
11
22
33
44
explain select b from t order by b, a+b, a;
id	estRows	task	access object	operator info
Projection_7	10000.00	root		planner__cascades__integration.t.b
└─Projection_12	10000.00	root		planner__cascades__integration.t.b, planner__cascades__integration.t.a
  └─Sort_8	10000.00	root		planner__cascades__integration.t.b, Column#4, planner__cascades__integration.t.a
    └─Projection_13	10000.00	root		planner__cascades__integration.t.b, planner__cascades__integration.t.a, plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b)->Column#4
      └─Projection_9	10000.00	root		planner__cascades__integration.t.b, planner__cascades__integration.t.a
        └─TableReader_10	10000.00	root		data:TableFullScan_11
          └─TableFullScan_11	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b from t order by b, a+b, a;
b
11
22
33
44
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
set session tidb_executor_concurrency = 4;
set @@session.tidb_hash_join_concurrency = 5;
set @@session.tidb_distsql_scan_concurrency = 15;
explain select sum(a) from t;
id	estRows	task	access object	operator info
HashAgg_14	1.00	root		funcs:sum(Column#4)->Column#3
└─TableReader_15	1.00	root		data:HashAgg_16
  └─HashAgg_16	1.00	cop[tikv]		funcs:sum(planner__cascades__integration.t.a)->Column#4
    └─TableFullScan_13	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select sum(a) from t;
sum(a)
10
explain select max(a), min(b) from t;
id	estRows	task	access object	operator info
HashAgg_11	1.00	root		funcs:max(Column#5)->Column#3, funcs:min(Column#6)->Column#4
└─TableReader_12	1.00	root		data:HashAgg_13
  └─HashAgg_13	1.00	cop[tikv]		funcs:max(planner__cascades__integration.t.a)->Column#5, funcs:min(planner__cascades__integration.t.b)->Column#6
    └─TableFullScan_10	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select max(a), min(b) from t;
max(a)	min(b)
4	11
explain select b, avg(a) from t group by b order by b;
id	estRows	task	access object	operator info
Projection_12	8000.00	root		planner__cascades__integration.t.b, Column#3
└─Sort_21	8000.00	root		planner__cascades__integration.t.b
  └─HashAgg_18	8000.00	root		group by:planner__cascades__integration.t.b, funcs:avg(Column#4, Column#5)->Column#3, funcs:firstrow(planner__cascades__integration.t.b)->planner__cascades__integration.t.b
    └─TableReader_19	8000.00	root		data:HashAgg_20
      └─HashAgg_20	8000.00	cop[tikv]		group by:planner__cascades__integration.t.b, funcs:count(planner__cascades__integration.t.a)->Column#4, funcs:sum(planner__cascades__integration.t.a)->Column#5
        └─TableFullScan_17	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b, avg(a) from t group by b order by b;
b	avg(a)
11	1.0000
22	2.0000
33	3.0000
44	4.0000
explain select b, sum(a) from t group by b order by b;
id	estRows	task	access object	operator info
Projection_12	8000.00	root		planner__cascades__integration.t.b, Column#3
└─Sort_21	8000.00	root		planner__cascades__integration.t.b
  └─HashAgg_18	8000.00	root		group by:planner__cascades__integration.t.b, funcs:sum(Column#4)->Column#3, funcs:firstrow(planner__cascades__integration.t.b)->planner__cascades__integration.t.b
    └─TableReader_19	8000.00	root		data:HashAgg_20
      └─HashAgg_20	8000.00	cop[tikv]		group by:planner__cascades__integration.t.b, funcs:sum(planner__cascades__integration.t.a)->Column#4
        └─TableFullScan_17	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b, sum(a) from t group by b order by b;
b	sum(a)
11	1
22	2
33	3
44	4
explain select b, avg(a) from t group by b having sum(a) > 1 order by b;
id	estRows	task	access object	operator info
Projection_14	6400.00	root		planner__cascades__integration.t.b, Column#3->Column#6
└─Projection_16	6400.00	root		planner__cascades__integration.t.b, Column#3, Column#4
  └─Sort_29	6400.00	root		planner__cascades__integration.t.b
    └─Selection_28	6400.00	root		gt(Column#4, 1)
      └─HashAgg_19	8000.00	root		group by:planner__cascades__integration.t.b, funcs:avg(Column#11)->Column#3, funcs:sum(Column#12)->Column#4, funcs:firstrow(planner__cascades__integration.t.b)->planner__cascades__integration.t.b
        └─Projection_20	10000.00	root		cast(planner__cascades__integration.t.a, decimal(10,0) BINARY)->Column#11, cast(planner__cascades__integration.t.a, decimal(10,0) BINARY)->Column#12, planner__cascades__integration.t.b, planner__cascades__integration.t.b
          └─TableReader_21	10000.00	root		data:TableFullScan_22
            └─TableFullScan_22	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b, avg(a) from t group by b having sum(a) > 1 order by b;
b	avg(a)
22	2.0000
33	3.0000
44	4.0000
explain select max(a+b) from t;
id	estRows	task	access object	operator info
HashAgg_68	1.00	root		funcs:max(Column#4)->Column#3
└─TableReader_69	1.00	root		data:HashAgg_70
  └─HashAgg_70	1.00	cop[tikv]		funcs:max(plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b))->Column#4
    └─TableFullScan_41	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select max(a+b) from t;
max(a+b)
48
explain select sum(a) from t group by a, a+b order by a;
id	estRows	task	access object	operator info
Projection_10	10000.00	root		Column#3->Column#4
└─Projection_12	10000.00	root		cast(planner__cascades__integration.t.a, decimal(32,0) BINARY)->Column#3, planner__cascades__integration.t.a
  └─TableReader_13	10000.00	root		data:TableFullScan_14
    └─TableFullScan_14	10000.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select sum(a) from t group by a, a+b order by a;
sum(a)
1
2
3
4
explain select b, sum(a) from t group by b having b > 1 order by b;
id	estRows	task	access object	operator info
Projection_16	6400.00	root		planner__cascades__integration.t.b, Column#3
└─Sort_26	6400.00	root		planner__cascades__integration.t.b
  └─HashAgg_23	6400.00	root		group by:planner__cascades__integration.t.b, funcs:sum(Column#4)->Column#3, funcs:firstrow(planner__cascades__integration.t.b)->planner__cascades__integration.t.b
    └─TableReader_24	6400.00	root		data:HashAgg_25
      └─HashAgg_25	6400.00	cop[tikv]		group by:planner__cascades__integration.t.b, funcs:sum(planner__cascades__integration.t.a)->Column#4
        └─Selection_21	8000.00	cop[tikv]		gt(planner__cascades__integration.t.b, 1)
          └─TableFullScan_22	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b, sum(a) from t group by b having b > 1 order by b;
b	sum(a)
11	1
22	2
33	3
44	4
explain select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c;
id	estRows	task	access object	operator info
Projection_23	6400.00	root		Column#3, Column#4
└─Sort_35	6400.00	root		Column#3
  └─HashAgg_32	6400.00	root		group by:Column#7, funcs:sum(Column#8)->Column#4, funcs:firstrow(Column#7)->Column#3
    └─TableReader_33	6400.00	root		data:HashAgg_34
      └─HashAgg_34	6400.00	cop[tikv]		group by:plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b), funcs:sum(planner__cascades__integration.t.a)->Column#8
        └─Selection_28	8000.00	cop[tikv]		gt(plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b), 1)
          └─TableFullScan_29	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c;
c	sum(a)
12	1
24	2
36	3
48	4
explain select max(a.a) from t a left join t b on a.a = b.a;
id	estRows	task	access object	operator info
HashAgg_36	1.00	root		funcs:max(planner__cascades__integration.t.a)->Column#5
└─Limit_38	1.00	root		offset:0, count:1
  └─TableReader_43	1.00	root		data:Limit_44
    └─Limit_44	1.00	cop[tikv]		offset:0, count:1
      └─TableFullScan_42	1.00	cop[tikv]	table:a	keep order:true, desc, stats:pseudo
select max(a.a) from t a left join t b on a.a = b.a;
max(a.a)
4
explain select avg(a.b) from t a left join t b on a.a = b.a;
id	estRows	task	access object	operator info
HashAgg_17	1.00	root		funcs:avg(Column#6, Column#7)->Column#5
└─TableReader_18	1.00	root		data:HashAgg_19
  └─HashAgg_19	1.00	cop[tikv]		funcs:count(planner__cascades__integration.t.b)->Column#6, funcs:sum(planner__cascades__integration.t.b)->Column#7
    └─TableFullScan_16	10000.00	cop[tikv]	table:a	keep order:false, stats:pseudo
select avg(a.b) from t a left join t b on a.a = b.a;
avg(a.b)
27.5000
explain select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a;
id	estRows	task	access object	operator info
Projection_15	10000.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b->Column#5
└─TableReader_16	10000.00	root		data:TableFullScan_17
  └─TableFullScan_17	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a;
a	max(t1.b)
1	11
2	22
3	33
4	44
explain select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a;
id	estRows	task	access object	operator info
Projection_15	10000.00	root		planner__cascades__integration.t.a, cast(planner__cascades__integration.t.b, decimal(32,0) BINARY)->Column#5
└─TableReader_16	10000.00	root		data:TableFullScan_17
  └─TableFullScan_17	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a;
a	sum(distinct t1.b)
1	11
2	22
3	33
4	44
explain select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a;
id	estRows	task	access object	operator info
Projection_15	10000.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b->Column#5
└─TableReader_16	10000.00	root		data:TableFullScan_17
  └─TableFullScan_17	10000.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a;
a	max(t2.b)
1	11
2	22
3	33
4	44
explain select t3.a, max(t3.b) from (select t1.a, t1.b from t as t1 left join t as t2 on t1.b = t2.b) t3 group by t3.a order by a;
id	estRows	task	access object	operator info
Projection_18	10000.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b->Column#5
└─TableReader_19	10000.00	root		data:TableFullScan_20
  └─TableFullScan_20	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select t3.a, max(t3.b) from (select t1.a, t1.b from t as t1 left join t as t2 on t1.b = t2.b) t3 group by t3.a order by a;
a	max(t3.b)
1	11
2	22
3	33
4	44
explain select max(a) from t;
id	estRows	task	access object	operator info
HashAgg_21	1.00	root		funcs:max(planner__cascades__integration.t.a)->Column#3
└─Limit_23	1.00	root		offset:0, count:1
  └─TableReader_28	1.00	root		data:Limit_29
    └─Limit_29	1.00	cop[tikv]		offset:0, count:1
      └─TableFullScan_27	1.00	cop[tikv]	table:t	keep order:true, desc, stats:pseudo
select max(a) from t;
max(a)
4
explain select sum(case when a > 0 and a <= 1000 then b else 0 end) from t;
id	estRows	task	access object	operator info
HashAgg_18	1.00	root		funcs:sum(Column#4)->Column#3
└─TableReader_19	1.00	root		data:HashAgg_20
  └─HashAgg_20	1.00	cop[tikv]		funcs:sum(planner__cascades__integration.t.b)->Column#4
    └─TableRangeScan_17	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select sum(case when a > 0 and a <= 1000 then b else 0 end) from t;
sum(case when a > 0 and a <= 1000 then b else 0 end)
110
explain select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t;
id	estRows	task	access object	operator info
HashAgg_21	1.00	root		funcs:sum(Column#4)->Column#3
└─TableReader_22	1.00	root		data:HashAgg_23
  └─HashAgg_23	1.00	cop[tikv]		funcs:sum(planner__cascades__integration.t.b)->Column#4
    └─TableRangeScan_20	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t;
sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end)
110
explain select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t;
id	estRows	task	access object	operator info
HashAgg_18	1.00	root		funcs:sum(Column#4)->Column#3
└─TableReader_19	1.00	root		data:HashAgg_20
  └─HashAgg_20	1.00	cop[tikv]		funcs:sum(cast(planner__cascades__integration.t.b, decimal(12,1) BINARY))->Column#4
    └─TableRangeScan_17	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t;
sum(case when a <= 0 or a > 1000 then 0.0 else b end)
110.0
explain select count(case when a > 0 and a <= 1000 then b end) from t;
id	estRows	task	access object	operator info
HashAgg_15	1.00	root		funcs:count(Column#4)->Column#3
└─TableReader_16	1.00	root		data:HashAgg_17
  └─HashAgg_17	1.00	cop[tikv]		funcs:count(planner__cascades__integration.t.b)->Column#4
    └─TableRangeScan_14	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select count(case when a > 0 and a <= 1000 then b end) from t;
count(case when a > 0 and a <= 1000 then b end)
4
explain select count(case when a <= 0 or a > 1000 then null else b end) from t;
id	estRows	task	access object	operator info
HashAgg_15	1.00	root		funcs:count(Column#4)->Column#3
└─TableReader_16	1.00	root		data:HashAgg_17
  └─HashAgg_17	1.00	cop[tikv]		funcs:count(planner__cascades__integration.t.b)->Column#4
    └─TableRangeScan_14	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select count(case when a <= 0 or a > 1000 then null else b end) from t;
count(case when a <= 0 or a > 1000 then null else b end)
4
explain select count(distinct case when a > 0 and a <= 1000 then b end) from t;
id	estRows	task	access object	operator info
HashAgg_10	1.00	root		funcs:count(distinct planner__cascades__integration.t.b)->Column#3
└─TableReader_11	250.00	root		data:TableRangeScan_12
  └─TableRangeScan_12	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select count(distinct case when a > 0 and a <= 1000 then b end) from t;
count(distinct case when a > 0 and a <= 1000 then b end)
4
explain select approx_count_distinct(case when a > 0 and a <= 1000 then b end) from t;
id	estRows	task	access object	operator info
HashAgg_10	1.00	root		funcs:approx_count_distinct(planner__cascades__integration.t.b)->Column#3
└─TableReader_11	250.00	root		data:TableRangeScan_12
  └─TableRangeScan_12	250.00	cop[tikv]	table:t	range:(0,1000], keep order:false, stats:pseudo
select approx_count_distinct(case when a > 0 and a <= 1000 then b end) from t;
approx_count_distinct(case when a > 0 and a <= 1000 then b end)
4
explain select count(b), sum(b), avg(b), b, max(b), min(b), bit_and(b), bit_or(b), bit_xor(b) from t group by a having sum(b) >= 0 and count(b) >= 0 order by b;
id	estRows	task	access object	operator info
Projection_13	8000.00	root		Column#3->Column#11, Column#4->Column#12, Column#5->Column#13, planner__cascades__integration.t.b, Column#6->Column#15, Column#7->Column#16, Column#8->Column#17, Column#9->Column#18, Column#10->Column#19
└─Projection_15	8000.00	root		if(isnull(planner__cascades__integration.t.b), 0, 1)->Column#3, cast(planner__cascades__integration.t.b, decimal(32,0) BINARY)->Column#4, cast(planner__cascades__integration.t.b, decimal(15,4) BINARY)->Column#5, planner__cascades__integration.t.b, planner__cascades__integration.t.b->Column#6, planner__cascades__integration.t.b->Column#7, ifnull(cast(planner__cascades__integration.t.b, bigint(21) UNSIGNED BINARY), 18446744073709551615)->Column#8, ifnull(cast(planner__cascades__integration.t.b, bigint(21) UNSIGNED BINARY), 0)->Column#9, ifnull(cast(planner__cascades__integration.t.b, bigint(21) UNSIGNED BINARY), 0)->Column#10, cast(planner__cascades__integration.t.b, decimal(32,0) BINARY)->Column#4, if(isnull(planner__cascades__integration.t.b), 0, 1)->Column#3
  └─Sort_22	8000.00	root		planner__cascades__integration.t.b
    └─TableReader_19	8000.00	root		data:Selection_20
      └─Selection_20	8000.00	cop[tikv]		ge(cast(planner__cascades__integration.t.b, decimal(32,0) BINARY), 0), ge(if(isnull(planner__cascades__integration.t.b), 0, 1), 0)
        └─TableFullScan_21	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select count(b), sum(b), avg(b), b, max(b), min(b), bit_and(b), bit_or(b), bit_xor(b) from t group by a having sum(b) >= 0 and count(b) >= 0 order by b;
count(b)	sum(b)	avg(b)	b	max(b)	min(b)	bit_and(b)	bit_or(b)	bit_xor(b)
1	11	11.0000	11	11	11	11	11	11
1	22	22.0000	22	22	22	22	22	22
1	33	33.0000	33	33	33	33	33	33
1	44	44.0000	44	44	44	44	44	44
explain select group_concat(a, b), min(b), avg(a / b), a from t group by (a+b), a order by a;
id	estRows	task	access object	operator info
Sort_15	8000.00	root		planner__cascades__integration.t.a
└─HashAgg_11	8000.00	root		group by:Column#9, planner__cascades__integration.t.a, funcs:group_concat(Column#6, Column#7 separator ",")->Column#3, funcs:min(planner__cascades__integration.t.b)->Column#4, funcs:avg(Column#8)->Column#5, funcs:firstrow(planner__cascades__integration.t.a)->planner__cascades__integration.t.a
  └─Projection_12	10000.00	root		cast(planner__cascades__integration.t.a, var_string(20))->Column#6, cast(planner__cascades__integration.t.b, var_string(20))->Column#7, planner__cascades__integration.t.b, div(cast(planner__cascades__integration.t.a, decimal(10,0) BINARY), cast(planner__cascades__integration.t.b, decimal(10,0) BINARY))->Column#8, planner__cascades__integration.t.a, plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b)->Column#9, planner__cascades__integration.t.a
    └─TableReader_13	10000.00	root		data:TableFullScan_14
      └─TableFullScan_14	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select group_concat(a, b), min(b), avg(a / b), a from t group by (a+b), a order by a;
group_concat(a, b)	min(b)	avg(a / b)	a
111	11	0.09090909	1
222	22	0.09090909	2
333	33	0.09090909	3
444	44	0.09090909	4
explain select approx_percentile(a, 50) from t order by b;
id	estRows	task	access object	operator info
Projection_8	1.00	root		Column#3->Column#4
└─Sort_14	1.00	root		planner__cascades__integration.t.b
  └─HashAgg_11	1.00	root		funcs:approx_percentile(planner__cascades__integration.t.a, 50)->Column#3, funcs:firstrow(planner__cascades__integration.t.b)->planner__cascades__integration.t.b
    └─TableReader_12	10000.00	root		data:TableFullScan_13
      └─TableFullScan_13	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select approx_percentile(a, 50) from t order by b;
approx_percentile(a, 50)
2
drop table if exists t;
create table t(a int, b int, c int, index(c));
insert into t values (1, 1, 1), (1, 1, 3), (1, 2, 3), (2, 1, 3), (1, 2, NULL);
set session sql_mode='';
set session tidb_hashagg_partial_concurrency=1;
set session tidb_hashagg_final_concurrency=1;
set session tidb_enable_cascades_planner = 1;
set @@session.tidb_opt_distinct_agg_push_down = 1;
explain select /*+ HASH_AGG() */ avg(distinct a) from t;
id	estRows	task	access object	operator info
HashAgg_16	1.00	root		funcs:avg(distinct Column#7)->Column#5
└─Projection_17	8000.00	root		cast(planner__cascades__integration.t.a, decimal(10,0) BINARY)->Column#7
  └─TableReader_18	8000.00	root		data:HashAgg_19
    └─HashAgg_19	8000.00	cop[tikv]		group by:planner__cascades__integration.t.a, 
      └─TableFullScan_15	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select /*+ HASH_AGG() */ avg(distinct a) from t;
avg(distinct a)
1.5000
explain select /*+ HASH_AGG() */ a, count(distinct a) from t;
id	estRows	task	access object	operator info
Projection_8	1.00	root		planner__cascades__integration.t.a, Column#5
└─HashAgg_12	1.00	root		funcs:count(distinct planner__cascades__integration.t.a)->Column#5, funcs:firstrow(Column#6)->planner__cascades__integration.t.a
  └─TableReader_13	8000.00	root		data:HashAgg_14
    └─HashAgg_14	8000.00	cop[tikv]		group by:planner__cascades__integration.t.a, funcs:firstrow(planner__cascades__integration.t.a)->Column#6
      └─TableFullScan_11	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select /*+ HASH_AGG() */ a, count(distinct a) from t;
a	count(distinct a)
1	2
explain select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
id	estRows	task	access object	operator info
Projection_10	8000.00	root		Column#5, planner__cascades__integration.t.c, Column#5, Column#6, Column#7, Column#8, Column#9
└─HashAgg_15	8000.00	root		group by:planner__cascades__integration.t.c, funcs:avg(Column#10, Column#11)->Column#5, funcs:count(distinct planner__cascades__integration.t.a, planner__cascades__integration.t.b)->Column#6, funcs:count(distinct planner__cascades__integration.t.a)->Column#7, funcs:count(distinct planner__cascades__integration.t.c)->Column#8, funcs:sum(Column#12)->Column#9, funcs:firstrow(planner__cascades__integration.t.c)->planner__cascades__integration.t.c
  └─TableReader_16	8000.00	root		data:HashAgg_17
    └─HashAgg_17	8000.00	cop[tikv]		group by:planner__cascades__integration.t.a, planner__cascades__integration.t.b, planner__cascades__integration.t.c, funcs:count(planner__cascades__integration.t.b)->Column#10, funcs:sum(planner__cascades__integration.t.b)->Column#11, funcs:sum(planner__cascades__integration.t.b)->Column#12
      └─TableFullScan_14	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
avg(b)	c	avg(b)	count(distinct A, B)	count(distinct A)	count(distinct c)	sum(b)
1.0000	1	1.0000	1	1	1	1
1.3333	3	1.3333	3	2	1	4
2.0000	NULL	2.0000	1	1	0	2
explain select /*+ STREAM_AGG() */ count(distinct c) from t group by c;
id	estRows	task	access object	operator info
HashAgg_17	8000.00	root		group by:planner__cascades__integration.t.c, funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_18	8000.00	root		index:HashAgg_19
  └─HashAgg_19	8000.00	cop[tikv]		group by:planner__cascades__integration.t.c, 
    └─IndexFullScan_16	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ STREAM_AGG() */ count(distinct c) from t group by c;
count(distinct c)
0
1
1
explain select /*+ STREAM_AGG() */ count(distinct c) from t;
id	estRows	task	access object	operator info
HashAgg_17	1.00	root		funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_18	8000.00	root		index:HashAgg_19
  └─HashAgg_19	8000.00	cop[tikv]		group by:planner__cascades__integration.t.c, 
    └─IndexFullScan_16	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ STREAM_AGG() */ count(distinct c) from t;
count(distinct c)
2
explain select /*+ HASH_AGG() */ count(distinct c) from t;
id	estRows	task	access object	operator info
HashAgg_17	1.00	root		funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_18	8000.00	root		index:HashAgg_19
  └─HashAgg_19	8000.00	cop[tikv]		group by:planner__cascades__integration.t.c, 
    └─IndexFullScan_16	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ HASH_AGG() */ count(distinct c) from t;
count(distinct c)
2
explain select count(distinct c) from t group by c;
id	estRows	task	access object	operator info
HashAgg_17	8000.00	root		group by:planner__cascades__integration.t.c, funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_18	8000.00	root		index:HashAgg_19
  └─HashAgg_19	8000.00	cop[tikv]		group by:planner__cascades__integration.t.c, 
    └─IndexFullScan_16	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select count(distinct c) from t group by c;
count(distinct c)
0
1
1
explain select count(distinct c) from t;
id	estRows	task	access object	operator info
HashAgg_17	1.00	root		funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_18	8000.00	root		index:HashAgg_19
  └─HashAgg_19	8000.00	cop[tikv]		group by:planner__cascades__integration.t.c, 
    └─IndexFullScan_16	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select count(distinct c) from t;
count(distinct c)
2
drop table if exists t;
create table t(a int, b int, c int, index(c));
insert into t values (1, 1, 1), (1, 1, 3), (1, 2, 3), (2, 1, 3), (1, 2, NULL);
set session sql_mode='';
set session tidb_hashagg_partial_concurrency=1;
set session tidb_hashagg_final_concurrency=1;
set session tidb_enable_cascades_planner = 1;
set @@session.tidb_opt_distinct_agg_push_down = 0;
explain select /*+ HASH_AGG(), AGG_TO_COP() */ avg(distinct a) from t;
id	estRows	task	access object	operator info
HashAgg_8	1.00	root		funcs:avg(distinct Column#6)->Column#5
└─Projection_9	10000.00	root		cast(planner__cascades__integration.t.a, decimal(10,0) BINARY)->Column#6
  └─TableReader_10	10000.00	root		data:TableFullScan_11
    └─TableFullScan_11	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select /*+ HASH_AGG(), AGG_TO_COP() */ avg(distinct a) from t;
avg(distinct a)
1.5000
explain select /*+ HASH_AGG(), AGG_TO_COP() */ a, count(distinct a) from t;
id	estRows	task	access object	operator info
Projection_6	1.00	root		planner__cascades__integration.t.a, Column#5
└─HashAgg_7	1.00	root		funcs:count(distinct planner__cascades__integration.t.a)->Column#5, funcs:firstrow(planner__cascades__integration.t.a)->planner__cascades__integration.t.a
  └─TableReader_8	10000.00	root		data:TableFullScan_9
    └─TableFullScan_9	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select /*+ HASH_AGG(), AGG_TO_COP() */ a, count(distinct a) from t;
a	count(distinct a)
1	2
explain select /*+ HASH_AGG(), AGG_TO_COP() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
id	estRows	task	access object	operator info
Projection_8	8000.00	root		Column#5, planner__cascades__integration.t.c, Column#5, Column#6, Column#7, Column#8, Column#9
└─HashAgg_9	8000.00	root		group by:planner__cascades__integration.t.c, funcs:avg(Column#10)->Column#5, funcs:count(distinct planner__cascades__integration.t.a, planner__cascades__integration.t.b)->Column#6, funcs:count(distinct planner__cascades__integration.t.a)->Column#7, funcs:count(distinct planner__cascades__integration.t.c)->Column#8, funcs:sum(Column#11)->Column#9, funcs:firstrow(planner__cascades__integration.t.c)->planner__cascades__integration.t.c
  └─Projection_10	10000.00	root		cast(planner__cascades__integration.t.b, decimal(10,0) BINARY)->Column#10, planner__cascades__integration.t.a, planner__cascades__integration.t.b, planner__cascades__integration.t.a, planner__cascades__integration.t.c, cast(planner__cascades__integration.t.b, decimal(10,0) BINARY)->Column#11, planner__cascades__integration.t.c, planner__cascades__integration.t.c
    └─TableReader_11	10000.00	root		data:TableFullScan_12
      └─TableFullScan_12	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select /*+ HASH_AGG(), AGG_TO_COP() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
avg(b)	c	avg(b)	count(distinct A, B)	count(distinct A)	count(distinct c)	sum(b)
1.0000	1	1.0000	1	1	1	1
1.3333	3	1.3333	3	2	1	4
2.0000	NULL	2.0000	1	1	0	2
explain select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t group by c;
id	estRows	task	access object	operator info
HashAgg_8	8000.00	root		group by:planner__cascades__integration.t.c, funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_11	10000.00	root		index:IndexFullScan_12
  └─IndexFullScan_12	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t group by c;
count(distinct c)
0
1
1
explain select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t;
id	estRows	task	access object	operator info
HashAgg_8	1.00	root		funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_11	10000.00	root		index:IndexFullScan_12
  └─IndexFullScan_12	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t;
count(distinct c)
2
explain select /*+ HASH_AGG(), AGG_TO_COP() */ count(distinct c) from t;
id	estRows	task	access object	operator info
HashAgg_8	1.00	root		funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_11	10000.00	root		index:IndexFullScan_12
  └─IndexFullScan_12	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ HASH_AGG(), AGG_TO_COP() */ count(distinct c) from t;
count(distinct c)
2
explain select /*+ AGG_TO_COP() */ count(distinct c) from t group by c;
id	estRows	task	access object	operator info
HashAgg_8	8000.00	root		group by:planner__cascades__integration.t.c, funcs:count(distinct planner__cascades__integration.t.c)->Column#5
└─IndexReader_11	10000.00	root		index:IndexFullScan_12
  └─IndexFullScan_12	10000.00	cop[tikv]	table:t, index:c(c)	keep order:false, stats:pseudo
select /*+ AGG_TO_COP() */ count(distinct c) from t group by c;
count(distinct c)
0
1
1
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a from t limit 2;
id	estRows	task	access object	operator info
Limit_7	2.00	root		offset:0, count:2
└─TableReader_8	2.00	root		data:Limit_9
  └─Limit_9	2.00	cop[tikv]		offset:0, count:2
    └─TableFullScan_10	2.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select a from t limit 2;
a
1
2
explain select a from t limit 1 offset 2;
id	estRows	task	access object	operator info
Limit_7	1.00	root		offset:2, count:1
└─TableReader_8	3.00	root		data:Limit_9
  └─Limit_9	3.00	cop[tikv]		offset:0, count:3
    └─TableFullScan_10	3.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select a from t limit 1 offset 2;
a
3
explain select b from t order by b limit 3;
id	estRows	task	access object	operator info
TopN_9	3.00	root		planner__cascades__integration.t.b, offset:0, count:3
└─TableReader_11	3.00	root		data:TopN_12
  └─TopN_12	3.00	cop[tikv]		planner__cascades__integration.t.b, offset:0, count:3
    └─TableFullScan_14	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b from t order by b limit 3;
b
11
22
33
explain select a from t order by a limit 1 offset 2;
id	estRows	task	access object	operator info
Limit_10	1.00	root		offset:2, count:1
└─TableReader_16	3.00	root		data:Limit_17
  └─Limit_17	3.00	cop[tikv]		offset:0, count:3
    └─TableFullScan_15	3.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select a from t order by a limit 1 offset 2;
a
3
explain select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa;
id	estRows	task	access object	operator info
Sort_23	20000.00	root		Column#5
└─Union_16	20000.00	root		
  ├─Projection_17	10000.00	root		planner__cascades__integration.t.a->Column#5
  │ └─TableReader_18	10000.00	root		data:TableFullScan_19
  │   └─TableFullScan_19	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
  └─Projection_20	10000.00	root		planner__cascades__integration.t.b->Column#5
    └─TableReader_21	10000.00	root		data:TableFullScan_22
      └─TableFullScan_22	10000.00	cop[tikv]	table:t2	keep order:false, stats:pseudo
select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa;
aa
1
2
3
4
11
22
33
44
explain select a, b, lag(a,1) over (order by b) from t order by b;
id	estRows	task	access object	operator info
Window_10	10000.00	root		lag(planner__cascades__integration.t.a, 1)->Column#4 over(order by planner__cascades__integration.t.b)
└─Sort_15	10000.00	root		planner__cascades__integration.t.b
  └─TableReader_13	10000.00	root		data:TableFullScan_14
    └─TableFullScan_14	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select a, b, lag(a,1) over (order by b) from t order by b;
a	b	lag(a,1) over (order by b)
1	11	NULL
2	22	1
3	33	2
4	44	3
explain select * from (select a+1 as c, a+b as d from t) as t1 order by c+d limit 10;
id	estRows	task	access object	operator info
Projection_22	10.00	root		plus(planner__cascades__integration.t.a, 1)->Column#3, plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b)->Column#4
└─TopN_23	10.00	root		Column#5, offset:0, count:10
  └─Projection_25	10.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b, plus(plus(planner__cascades__integration.t.a, 1), plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b))->Column#5
    └─TableReader_26	10.00	root		data:TopN_27
      └─TopN_27	10.00	cop[tikv]		plus(plus(planner__cascades__integration.t.a, 1), plus(planner__cascades__integration.t.a, planner__cascades__integration.t.b)), offset:0, count:10
        └─TableFullScan_28	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select * from (select a+1 as c, a+b as d from t) as t1 order by c+d limit 10;
c	d
2	12
3	24
4	36
5	48
explain select t1.a, t1.b from t as t1 left join t as t2 on t1.a = t2.a and t1.b = 3 order by a;
id	estRows	task	access object	operator info
TableReader_26	12500.00	root		data:TableFullScan_27
└─TableFullScan_27	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select t1.a, t1.b from t as t1 left join t as t2 on t1.a = t2.a and t1.b = 3 order by a;
a	b
1	11
2	22
3	33
4	44
set @@session.tidb_executor_concurrency = 4;
set @@session.tidb_hash_join_concurrency = 5;
set @@session.tidb_distsql_scan_concurrency = 15;
drop table if exists t1;
drop table if exists t2;
create table t1(a int primary key, b int);
create table t2(a int primary key, b int);
insert into t1 values (1, 11), (4, 44), (2, 22), (3, 33);
insert into t2 values (1, 111), (2, 222), (3, 333), (5, 555);
set session tidb_enable_cascades_planner = 1;
explain format = 'brief' select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2;
id	estRows	task	access object	operator info
Projection	4166.67	root		planner__cascades__integration.t1.a, planner__cascades__integration.t1.b
└─MergeJoin	4166.67	root		inner join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
  ├─TableReader(Build)	3333.33	root		data:TableRangeScan
  │ └─TableRangeScan	3333.33	cop[tikv]	table:t2	range:(2,+inf], keep order:true, stats:pseudo
  └─TableReader(Probe)	3333.33	root		data:TableRangeScan
    └─TableRangeScan	3333.33	cop[tikv]	table:t1	range:(2,+inf], keep order:true, stats:pseudo
select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2;
a	b
3	33
explain format = 'brief' select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200;
id	estRows	task	access object	operator info
Projection	80000000.00	root		planner__cascades__integration.t1.a, planner__cascades__integration.t1.b
└─HashJoin	80000000.00	root		CARTESIAN inner join, other cond:gt(planner__cascades__integration.t1.a, planner__cascades__integration.t2.a)
  ├─TableReader(Build)	8000.00	root		data:Selection
  │ └─Selection	8000.00	cop[tikv]		gt(planner__cascades__integration.t2.b, 200)
  │   └─TableFullScan	10000.00	cop[tikv]	table:t2	keep order:false, stats:pseudo
  └─TableReader(Probe)	10000.00	root		data:TableFullScan
    └─TableFullScan	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200;
a	b
3	33
4	44
4	44
explain format = 'brief' select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
id	estRows	task	access object	operator info
Projection	3333.33	root		planner__cascades__integration.t1.a, planner__cascades__integration.t1.b
└─Selection	3333.33	root		gt(planner__cascades__integration.t2.b, 200)
  └─MergeJoin	4166.67	root		left outer join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
    ├─TableReader(Build)	3333.33	root		data:TableRangeScan
    │ └─TableRangeScan	3333.33	cop[tikv]	table:t2	range:(2,+inf], keep order:true, stats:pseudo
    └─TableReader(Probe)	3333.33	root		data:TableRangeScan
      └─TableRangeScan	3333.33	cop[tikv]	table:t1	range:(2,+inf], keep order:true, stats:pseudo
select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
a	b
3	33
explain format = 'brief' select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
id	estRows	task	access object	operator info
Projection	8000.00	root		planner__cascades__integration.t2.a, planner__cascades__integration.t2.b
└─Selection	8000.00	root		gt(planner__cascades__integration.t1.a, 2)
  └─MergeJoin	10000.00	root		right outer join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
    ├─TableReader(Build)	10000.00	root		data:TableFullScan
    │ └─TableFullScan	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
    └─TableReader(Probe)	8000.00	root		data:Selection
      └─Selection	8000.00	cop[tikv]		gt(planner__cascades__integration.t2.b, 200)
        └─TableFullScan	10000.00	cop[tikv]	table:t2	keep order:true, stats:pseudo
select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
a	b
3	333
explain format = 'brief' select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a;
id	estRows	task	access object	operator info
Projection	12500.00	root		planner__cascades__integration.t1.a, planner__cascades__integration.t1.b
└─MergeJoin	12500.00	root		inner join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
  ├─TableReader(Build)	10000.00	root		data:TableFullScan
  │ └─TableFullScan	10000.00	cop[tikv]	table:t2	keep order:true, stats:pseudo
  └─TableReader(Probe)	10000.00	root		data:TableFullScan
    └─TableFullScan	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a;
a	b
1	11
2	22
3	33
explain format = 'brief' select * from t1 join t2 on t1.a = t2.a;
id	estRows	task	access object	operator info
MergeJoin	12500.00	root		inner join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
├─TableReader(Build)	10000.00	root		data:TableFullScan
│ └─TableFullScan	10000.00	cop[tikv]	table:t2	keep order:true, stats:pseudo
└─TableReader(Probe)	10000.00	root		data:TableFullScan
  └─TableFullScan	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select * from t1 join t2 on t1.a = t2.a;
a	b	a	b
1	11	1	111
2	22	2	222
3	33	3	333
explain format = 'brief' select * from t1 join t2 on t1.a = t2.a and t1.a > 2;
id	estRows	task	access object	operator info
MergeJoin	4166.67	root		inner join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
├─TableReader(Build)	3333.33	root		data:TableRangeScan
│ └─TableRangeScan	3333.33	cop[tikv]	table:t2	range:(2,+inf], keep order:true, stats:pseudo
└─TableReader(Probe)	3333.33	root		data:TableRangeScan
  └─TableRangeScan	3333.33	cop[tikv]	table:t1	range:(2,+inf], keep order:true, stats:pseudo
select * from t1 join t2 on t1.a = t2.a and t1.a > 2;
a	b	a	b
3	33	3	333
drop table if exists t1, t2;
create table t1(a int primary key, b int);
create table t2(a int primary key, b int);
insert into t1 values (1, 11), (4, 44), (2, 22), (3, 33);
insert into t2 values (1, 11), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1;
id	estRows	task	access object	operator info
Projection_19	10000.00	root		eq(planner__cascades__integration.t1.a, planner__cascades__integration.t2.a)->Column#7
└─Apply_21	10000.00	root		CARTESIAN left outer join
  ├─TableReader_22(Build)	10000.00	root		data:TableFullScan_23
  │ └─TableFullScan_23	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
  └─MaxOneRow_24(Probe)	1.00	root		
    └─Projection_25	1.00	root		planner__cascades__integration.t2.a
      └─Limit_27	1.00	root		offset:0, count:1
        └─TableReader_35	1.00	root		data:Limit_36
          └─Limit_36	1.00	cop[tikv]		offset:0, count:1
            └─Selection_33	1.00	cop[tikv]		eq(planner__cascades__integration.t1.b, planner__cascades__integration.t2.b)
              └─TableFullScan_34	1.00	cop[tikv]	table:t2	keep order:true, stats:pseudo
select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1;
a = (select a from t2 where t1.b = t2.b order by a limit 1)
1
1
1
NULL
explain select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2;
id	estRows	task	access object	operator info
Projection_32	1.00	root		Column#7, planner__cascades__integration.t1.a, planner__cascades__integration.t1.b
└─Apply_34	1.00	root		CARTESIAN left outer join
  ├─Apply_36(Build)	1.00	root		CARTESIAN left outer join
  │ ├─HashAgg_41(Build)	1.00	root		funcs:sum(Column#12)->Column#7, funcs:firstrow(Column#13)->planner__cascades__integration.t2.a, funcs:firstrow(Column#14)->planner__cascades__integration.t2.b
  │ │ └─TableReader_42	1.00	root		data:HashAgg_43
  │ │   └─HashAgg_43	1.00	cop[tikv]		funcs:sum(planner__cascades__integration.t2.a)->Column#12, funcs:firstrow(planner__cascades__integration.t2.a)->Column#13, funcs:firstrow(planner__cascades__integration.t2.b)->Column#14
  │ │     └─TableFullScan_40	10000.00	cop[tikv]	table:t2	keep order:false, stats:pseudo
  │ └─MaxOneRow_44(Probe)	1.00	root		
  │   └─Limit_45	1.00	root		offset:0, count:1
  │     └─TableReader_46	1.00	root		data:Limit_47
  │       └─Limit_47	1.00	cop[tikv]		offset:0, count:1
  │         └─Selection_48	1.00	cop[tikv]		eq(planner__cascades__integration.t1.a, planner__cascades__integration.t2.a)
  │           └─TableFullScan_49	1.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
  └─MaxOneRow_50(Probe)	1.00	root		
    └─Limit_51	1.00	root		offset:0, count:1
      └─TableReader_52	1.00	root		data:Limit_53
        └─Limit_53	1.00	cop[tikv]		offset:0, count:1
          └─Selection_54	1.00	cop[tikv]		eq(planner__cascades__integration.t1.b, planner__cascades__integration.t2.b)
            └─TableFullScan_55	1.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2;
sum(a)	(select t1.a from t1 where t1.a = t2.a limit 1)	(select t1.b from t1 where t1.b = t2.b limit 1)
6	1	11
explain select a from t1 where exists(select 1 from t2 where t1.a = t2.a);
id	estRows	task	access object	operator info
MergeJoin_30	10000.00	root		semi join, left key:planner__cascades__integration.t1.a, right key:planner__cascades__integration.t2.a
├─TableReader_35(Build)	10000.00	root		data:TableFullScan_36
│ └─TableFullScan_36	10000.00	cop[tikv]	table:t2	keep order:true, stats:pseudo
└─TableReader_32(Probe)	10000.00	root		data:TableFullScan_33
  └─TableFullScan_33	10000.00	cop[tikv]	table:t1	keep order:true, stats:pseudo
select a from t1 where exists(select 1 from t2 where t1.a = t2.a);
a
1
2
3
set session tidb_enable_cascades_planner = 1;
explain select USER, DB, COMMAND, TIME, STATE, INFO, `DIGEST` from information_schema.processlist where DB = "planner__cascades__integration";
id	estRows	task	access object	operator info
Projection_4	8000.00	root		Column#2, Column#4, Column#5, Column#6, Column#7, Column#8, Column#9
└─Selection_5	8000.00	root		eq(Column#4, "planner__cascades__integration")
  └─MemTableScan_6	10000.00	root	table:PROCESSLIST	
select USER, DB, COMMAND, TIME, STATE, INFO, `DIGEST` from information_schema.processlist where DB = "planner__cascades__integration";
USER	DB	COMMAND	TIME	STATE	INFO	DIGEST
root	planner__cascades__integration	Query	0	autocommit	select USER, DB, COMMAND, TIME, STATE, INFO, `DIGEST` from information_schema.processlist where DB = "planner__cascades__integration"	769773ab56dd2977858c3c36e76e503323bbbc62257bb2e18e0e10cd9df43973
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1;
id	estRows	task	access object	operator info
Projection_22	2.00	root		planner__cascades__integration.t.a
└─Limit_24	2.00	root		offset:2, count:2
  └─TableReader_32	4.00	root		data:Limit_33
    └─Limit_33	4.00	cop[tikv]		offset:0, count:4
      └─Selection_30	4.00	cop[tikv]		gt(planner__cascades__integration.t.b, 2)
        └─TableFullScan_31	4.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1;
a
3
4
explain select * from (select * from t order by a limit 3) as t1 order by a limit 5;
id	estRows	task	access object	operator info
Limit_15	3.00	root		offset:0, count:3
└─TableReader_21	3.00	root		data:Limit_22
  └─Limit_22	3.00	cop[tikv]		offset:0, count:3
    └─TableFullScan_20	3.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select * from (select * from t order by a limit 3) as t1 order by a limit 5;
a	b
1	11
2	22
3	33
explain select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5;
id	estRows	task	access object	operator info
TopN_14	5.00	root		planner__cascades__integration.t.b, offset:15, count:5
└─TableReader_16	20.00	root		data:TopN_17
  └─TopN_17	20.00	cop[tikv]		planner__cascades__integration.t.b, offset:0, count:20
    └─TableFullScan_19	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5;
b
explain select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5;
id	estRows	task	access object	operator info
TopN_14	3.00	root		planner__cascades__integration.t.b, offset:7, count:3
└─TableReader_16	10.00	root		data:TopN_17
  └─TopN_17	10.00	cop[tikv]		planner__cascades__integration.t.b, offset:0, count:10
    └─TableFullScan_19	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5;
b
explain select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5;
id	estRows	task	access object	operator info
TableDual_11	0.00	root		rows:0
select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5;
a
explain select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1;
id	estRows	task	access object	operator info
Projection_22	2.00	root		planner__cascades__integration.t.a
└─TopN_23	2.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b, offset:2, count:2
  └─TableReader_25	4.00	root		data:TopN_26
    └─TopN_26	4.00	cop[tikv]		planner__cascades__integration.t.a, planner__cascades__integration.t.b, offset:0, count:4
      └─Selection_28	8000.00	cop[tikv]		gt(planner__cascades__integration.t.b, 2)
        └─TableFullScan_29	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1;
a
3
4
explain select * from (select * from t order by a limit 3) as t1 order by a, b limit 5;
id	estRows	task	access object	operator info
Limit_14	3.00	root		offset:0, count:5
└─Sort_26	3.00	root		planner__cascades__integration.t.a, planner__cascades__integration.t.b
  └─Limit_16	3.00	root		offset:0, count:3
    └─TableReader_22	3.00	root		data:Limit_23
      └─Limit_23	3.00	cop[tikv]		offset:0, count:3
        └─TableFullScan_21	3.00	cop[tikv]	table:t	keep order:true, stats:pseudo
select * from (select * from t order by a limit 3) as t1 order by a, b limit 5;
a	b
1	11
2	22
3	33
SET SESSION tidb_opt_fix_control = '44262:ON';
drop table if exists pt1;
create table pt1(a bigint, b bigint) partition by hash(a) partitions 4;
insert into pt1 values(1,10);
insert into pt1 values(2,20);
insert into pt1 values(3,30);
insert into pt1 values(4,40);
insert into pt1 values(5,50);
set @@tidb_enable_cascades_planner = 1;
explain select * from pt1 order by a;
id	estRows	task	access object	operator info
Sort_11	10000.00	root		planner__cascades__integration.pt1.a
└─TableReader_9	10000.00	root	partition:all	data:TableFullScan_10
  └─TableFullScan_10	10000.00	cop[tikv]	table:pt1	keep order:false, stats:pseudo
select * from pt1 order by a;
a	b
1	10
2	20
3	30
4	40
5	50
set session tidb_opt_fix_control = default;
set @@tidb_enable_cascades_planner = default;
