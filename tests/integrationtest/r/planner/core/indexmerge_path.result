drop table if exists t;
create table t(a int, b int, c int, j json,
index(a), index(b),
index idx(a, b, (cast(j as signed array)), c),
index idx2(a, b, (cast(j->'$.str' as char(10) array)), c));
set tidb_analyze_version=2;
analyze table t;
Level	Code	Message
Note	1105	Analyze use auto adjusted sample rate 1.000000 for table planner__core__indexmerge_path.t, reason to use this rate is "use min(1, 110000/10000) as the sample-rate=1"
analyze table t index idx;
Level	Code	Message
Note	1105	Analyze use auto adjusted sample rate 1.000000 for table planner__core__indexmerge_path.t, reason to use this rate is "TiDB assumes that the table is empty, use sample-rate=1"
Warning	1105	The version 2 would collect all statistics not only the selected indexes
set tidb_analyze_version=1;
analyze table t;
Level	Code	Message
Warning	1105	analyzing multi-valued indexes is not supported, skip idx
Warning	1105	analyzing multi-valued indexes is not supported, skip idx2
analyze table t index idx;
Level	Code	Message
Warning	1105	analyzing multi-valued indexes is not supported, skip idx
analyze table t index a;
analyze table t index a, idx, idx2;
Level	Code	Message
Warning	1105	analyzing multi-valued indexes is not supported, skip idx
Warning	1105	analyzing multi-valued indexes is not supported, skip idx2
drop table if exists t;
create table t(
a int, j0 json, j1 json,
index j0_0((cast(j0->'$.path0' as signed array))),
index j0_1((cast(j0->'$.path1' as signed array))),
index j0_string((cast(j0->'$.path_string' as char(10) array))),
index j0_date((cast(j0->'$.path_date' as date array))),
index j1((cast(j1 as signed array))));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where (1 member of (j0->'$.path0'));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_1(cast(json_extract(`j0`, _utf8mb4'$.path1') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.XXX')) and a<10;
id	estRows	task	access object	operator info
TableReader	2658.67	root		data:Selection
└─Selection	2658.67	cop[tikv]		json_memberof(cast(1, json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.XXX")), lt(planner__core__indexmerge_path.t.a, 10)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and (2 member of (j1)) and a<10;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_1(cast(json_extract(`j0`, _utf8mb4'$.path1') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		json_memberof(cast(2, json BINARY), planner__core__indexmerge_path.t.j1), lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, j0_0) */ * from t where (1 member of (j0->'$.path0'));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_1(cast(json_extract(`j0`, _utf8mb4'$.path1') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t use index(j0_0) where (1 member of (j0->'$.path0'));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t use index(j0_1) where (1 member of (j0->'$.path1')) and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_1(cast(json_extract(`j0`, _utf8mb4'$.path1') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t force index(j0_0) where (1 member of (j0->'$.path0'));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t force index(j0_1) where (1 member of (j0->'$.path1')) and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_1(cast(json_extract(`j0`, _utf8mb4'$.path1') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j1) */ * from t where (1 member of (j0->'$.path1')) and (2 member of (j1)) and a<10;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j1(cast(`j1` as signed array))	range:[2,2], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		json_memberof(cast(1, json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path1")), lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '[1, 2, 3]');
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[2,2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[3,3], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '[1, 2, 3]');
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path0"), cast("[1, 2, 3]", json BINARY))
└─IndexMerge	29.97	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('[1, 2, 3]', (j0->'$.path0'));
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(cast("[1, 2, 3]", json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path0"))
└─IndexMerge	29.97	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '[1, 2, 3]') and a<10;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[2,2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[3,3], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '[1, 2, 3]') and a<10;
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path0"), cast("[1, 2, 3]", json BINARY))
└─IndexMerge	9.96	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─Selection(Probe)	9.96	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('[1, 2, 3]', (j0->'$.path0')) and a<10;
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(cast("[1, 2, 3]", json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path0"))
└─IndexMerge	9.96	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─Selection(Probe)	9.96	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '1');
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '1');
id	estRows	task	access object	operator info
Selection	8.00	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path0"), cast("1", json BINARY))
└─IndexMerge	10.00	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('1', (j0->'$.path0'));
id	estRows	task	access object	operator info
Selection	8.00	root		json_overlaps(cast("1", json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path0"))
└─IndexMerge	10.00	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '1') and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '1') and a<10;
id	estRows	task	access object	operator info
Selection	8.00	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path0"), cast("1", json BINARY))
└─IndexMerge	3.32	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  └─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('1', (j0->'$.path0')) and a<10;
id	estRows	task	access object	operator info
Selection	8.00	root		json_overlaps(cast("1", json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path0"))
└─IndexMerge	3.32	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_0(cast(json_extract(`j0`, _utf8mb4'$.path0') as signed array))	range:[1,1], keep order:false, stats:pseudo
  └─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where ("a" member of (j0->'$.path_string'));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["a","a"], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where ("a" member of (j0->'$.path_string')) and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["a","a"], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_contains((j0->'$.path_string'), '["a", "b", "c"]');
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["a","a"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["b","b"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["c","c"], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_contains((j0->'$.path_string'), '["a", "b", "c"]') and a<10;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["a","a"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["b","b"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["c","c"], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_overlaps((j0->'$.path_string'), '["a", "b", "c"]');
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path_string"), cast("["a", "b", "c"]", json BINARY))
└─IndexMerge	29.97	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["a","a"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["b","b"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["c","c"], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_overlaps((j0->'$.path_string'), '["a", "b", "c"]') and a<10;
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path_string"), cast("["a", "b", "c"]", json BINARY))
└─IndexMerge	9.96	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["a","a"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["b","b"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_string(cast(json_extract(`j0`, _utf8mb4'$.path_string') as char(10) array))	range:["c","c"], keep order:false, stats:pseudo
  └─Selection(Probe)	9.96	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where ("2023-01-01" member of (j0->'$.path_date'));
id	estRows	task	access object	operator info
TableReader	8000.00	root		data:Selection
└─Selection	8000.00	cop[tikv]		json_memberof(cast("2023-01-01", json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path_date"))
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where ("2023-01-01" member of (j0->'$.path_date')) and a<10;
id	estRows	task	access object	operator info
TableReader	2658.67	root		data:Selection
└─Selection	2658.67	cop[tikv]		json_memberof(cast("2023-01-01", json BINARY), json_extract(planner__core__indexmerge_path.t.j0, "$.path_date")), lt(planner__core__indexmerge_path.t.a, 10)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_contains((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date)));
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-01,2023-01-01], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-02,2023-01-02], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-03,2023-01-03], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_contains((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date))) and a<10;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-01,2023-01-01], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-02,2023-01-02], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-03,2023-01-03], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_overlaps((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date)));
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path_date"), json_array(cast(2023-01-01, json BINARY), cast(2023-01-02, json BINARY), cast(2023-01-03, json BINARY)))
└─IndexMerge	29.97	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-01,2023-01-01], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-02,2023-01-02], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-03,2023-01-03], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_overlaps((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date))) and a<10;
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j0, "$.path_date"), json_array(cast(2023-01-01, json BINARY), cast(2023-01-02, json BINARY), cast(2023-01-03, json BINARY)))
└─IndexMerge	9.96	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-01,2023-01-01], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-02,2023-01-02], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:j0_date(cast(json_extract(`j0`, _utf8mb4'$.path_date') as date array))	range:[2023-01-03,2023-01-03], keep order:false, stats:pseudo
  └─Selection(Probe)	9.96	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(a int, b int, c int, j json,
index idx1((cast(j as signed array))),
index idx2(a, b, (cast(j as signed array)), c));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (1 member of (j)) or (2 member of (j));
id	estRows	task	access object	operator info
IndexMerge	19.99	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[2,2], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	19.99	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where ((1 member of (j)) or (2 member of (j))) and (a > 10);
id	estRows	task	access object	operator info
IndexMerge	6.66	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[2,2], keep order:false, stats:pseudo
└─Selection(Probe)	6.66	cop[tikv]		gt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	19.99	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (json_overlaps(j, '[1, 2]')) or (json_overlaps(j, '[3, 4]'));
id	estRows	task	access object	operator info
Selection	31.95	root		or(json_overlaps(planner__core__indexmerge_path.t.j, cast("[1, 2]", json BINARY)), json_overlaps(planner__core__indexmerge_path.t.j, cast("[3, 4]", json BINARY)))
└─IndexMerge	39.94	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[3,3], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[4,4], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	39.94	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where ((json_overlaps(j, '[1, 2]')) or (json_overlaps(j, '[3, 4]'))) and (a > 10);
id	estRows	task	access object	operator info
Selection	31.95	root		or(json_overlaps(planner__core__indexmerge_path.t.j, cast("[1, 2]", json BINARY)), json_overlaps(planner__core__indexmerge_path.t.j, cast("[3, 4]", json BINARY)))
└─IndexMerge	13.31	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[3,3], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:idx1(cast(`j` as signed array))	range:[4,4], keep order:false, stats:pseudo
  └─Selection(Probe)	13.31	cop[tikv]		gt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	39.94	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (json_contains(j, '[1, 2]')) or (json_contains(j, '[3, 4]'));
id	estRows	task	access object	operator info
TableReader	0.02	root		data:Selection
└─Selection	0.02	cop[tikv]		or(json_contains(planner__core__indexmerge_path.t.j, cast("[1, 2]", json BINARY)), json_contains(planner__core__indexmerge_path.t.j, cast("[3, 4]", json BINARY)))
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where (a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)));
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(`j` as signed array), c)	range:[1 2 3,1 2 3], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(`j` as signed array), c)	range:[11 12 13,11 12 13], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where (a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)) and c=14);
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(`j` as signed array), c)	range:[1 2 3,1 2 3], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(`j` as signed array), c)	range:[11 12 13 14,11 12 13 14], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where ((a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)))) and (c > 10);
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(`j` as signed array), c)	range:[1 2 3,1 2 3], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(`j` as signed array), c)	range:[11 12 13,11 12 13], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		gt(planner__core__indexmerge_path.t.c, 10)
  └─TableRowIDScan	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(a int, b int , c int, j json,
index idx(a, b, (cast(j as signed array)), c),
index idx2(a, b, (cast(j->'$.str' as char(10) array)), c));
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2 and (3 member of (j)) and c=4;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx(a, b, cast(`j` as signed array), c)	range:[1 2 3 4,1 2 3 4], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2 and (3 member of (j));
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx(a, b, cast(`j` as signed array), c)	range:[1 2 3,1 2 3], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2;
id	estRows	task	access object	operator info
TableReader	0.01	root		data:Selection
└─Selection	0.01	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), eq(planner__core__indexmerge_path.t.b, 2)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1;
id	estRows	task	access object	operator info
TableReader	10.00	root		data:Selection
└─Selection	10.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2 and ('3' member of (j->'$.str')) and c=4;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(json_extract(`j`, _utf8mb4'$.str') as char(10) array), c)	range:[1 2 "3" 4,1 2 "3" 4], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2 and ('3' member of (j->'$.str'));
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx2(a, b, cast(json_extract(`j`, _utf8mb4'$.str') as char(10) array), c)	range:[1 2 "3",1 2 "3"], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2;
id	estRows	task	access object	operator info
TableReader	0.01	root		data:Selection
└─Selection	0.01	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), eq(planner__core__indexmerge_path.t.b, 2)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1;
id	estRows	task	access object	operator info
TableReader	10.00	root		data:Selection
└─Selection	10.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, idx) */ * from t where a=1 and b=2 and (3 member of (j)) and c=4;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx(a, b, cast(`j` as signed array), c)	range:[1 2 3 4,1 2 3 4], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t use index(idx) where a=1 and b=2 and (3 member of (j));
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx(a, b, cast(`j` as signed array), c)	range:[1 2 3,1 2 3], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, idx) */ * from t where a=1 and b=2;
id	estRows	task	access object	operator info
TableReader	0.01	root		data:Selection
└─Selection	0.01	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), eq(planner__core__indexmerge_path.t.b, 2)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t use index(idx) where a=1;
id	estRows	task	access object	operator info
TableReader	10.00	root		data:Selection
└─Selection	10.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t force index(idx) where a=1 and b=2 and (3 member of (j));
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:idx(a, b, cast(`j` as signed array), c)	range:[1 2 3,1 2 3], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t force index(idx) where a=1;
id	estRows	task	access object	operator info
TableReader	10.00	root		data:Selection
└─Selection	10.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(a int, j json,
index i_int((cast(j->'$.int' as signed array))));
explain format = 'brief' select (j->'$.int') from t where (1 member of (j->'$.int'));
id	estRows	task	access object	operator info
Projection	10.00	root		json_extract(planner__core__indexmerge_path.t.j, $.int)->Column#5
└─IndexMerge	10.00	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t where (1 member of (j->'$.int'));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t where (1 member of (j->'$.int')) and a<10;
id	estRows	task	access object	operator info
IndexMerge	3.32	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	3.32	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select (j->'$.int') from t where json_contains((j->'$.int'), '[1, 2, 3]');
id	estRows	task	access object	operator info
Projection	0.00	root		json_extract(planner__core__indexmerge_path.t.j, $.int)->Column#5
└─IndexMerge	0.00	root		type: intersection
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t where json_contains((j->'$.int'), '[1, 2, 3]');
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[2,2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[3,3], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t where json_contains((j->'$.int'), '[1, 2, 3]') and a<10;
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: intersection
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[2,2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[3,3], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select (j->'$.int') from t where json_overlaps((j->'$.int'), '[1, 2, 3]');
id	estRows	task	access object	operator info
Projection	23.98	root		json_extract(planner__core__indexmerge_path.t.j, $.int)->Column#5
└─Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.int"), cast("[1, 2, 3]", json BINARY))
  └─IndexMerge	29.97	root		type: union
    ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
    ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[2,2], keep order:false, stats:pseudo
    ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[3,3], keep order:false, stats:pseudo
    └─TableRowIDScan(Probe)	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t where json_overlaps((j->'$.int'), '[1, 2, 3]');
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.int"), cast("[1, 2, 3]", json BINARY))
└─IndexMerge	29.97	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select * from t where json_overlaps((j->'$.int'), '[1, 2, 3]') and a<10;
id	estRows	task	access object	operator info
Selection	23.98	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.int"), cast("[1, 2, 3]", json BINARY))
└─IndexMerge	9.96	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[1,1], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:i_int(cast(json_extract(`j`, _utf8mb4'$.int') as signed array))	range:[3,3], keep order:false, stats:pseudo
  └─Selection(Probe)	9.96	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
    └─TableRowIDScan	29.97	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
prepare st from 'select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j))';
execute st;
j
execute st;
j
select @@last_plan_from_cache;
@@last_plan_from_cache
1
drop table if exists t;
create table t(j json, unique kj((cast(j as signed array))));
explain select j from t where j=1;
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		eq(planner__core__indexmerge_path.t.j, cast(1, json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain select j from t where j=1 or j=2;
id	estRows	task	access object	operator info
TableReader_7	9600.00	root		data:Selection_6
└─Selection_6	9600.00	cop[tikv]		or(eq(planner__core__indexmerge_path.t.j, cast(1, json BINARY)), eq(planner__core__indexmerge_path.t.j, cast(2, json BINARY)))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain select j from t where j in (1, 2);
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		in(planner__core__indexmerge_path.t.j, cast(1, json BINARY), cast(2, json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(a int, j json, index kj((cast(j as signed array))));
explain format = 'brief' select /*+ use_index(t, kj) */ * from t;
id	estRows	task	access object	operator info
TableReader	10000.00	root		data:TableFullScan
└─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, kj) */ a from t;
id	estRows	task	access object	operator info
TableReader	10000.00	root		data:TableFullScan
└─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where a<10;
id	estRows	task	access object	operator info
TableReader	3323.33	root		data:Selection
└─Selection	3323.33	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:kj(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j)) and a=10;
id	estRows	task	access object	operator info
IndexMerge	0.01	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:kj(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
└─Selection(Probe)	0.01	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 10)
  └─TableRowIDScan	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j)) or a=10;
id	estRows	task	access object	operator info
TableReader	19.99	root		data:Selection
└─Selection	19.99	cop[tikv]		or(json_memberof(cast(1, json BINARY), planner__core__indexmerge_path.t.j), eq(planner__core__indexmerge_path.t.a, 10))
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t;
id	estRows	task	access object	operator info
TableReader	10000.00	root		data:TableFullScan
└─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, kj) */ a from t;
id	estRows	task	access object	operator info
TableReader	10000.00	root		data:TableFullScan
└─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t where a<10;
id	estRows	task	access object	operator info
TableReader	3323.33	root		data:Selection
└─Selection	3323.33	cop[tikv]		lt(planner__core__indexmerge_path.t.a, 10)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j)) or a=10;
id	estRows	task	access object	operator info
TableReader	19.99	root		data:Selection
└─Selection	19.99	cop[tikv]		or(json_memberof(cast(1, json BINARY), planner__core__indexmerge_path.t.j), eq(planner__core__indexmerge_path.t.a, 10))
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(a int, j json, index kj((cast(j as signed array))));
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:kj(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
ALTER TABLE t ALTER INDEX kj INVISIBLE;
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
id	estRows	task	access object	operator info
TableReader	10.00	root		data:Selection
└─Selection	10.00	cop[tikv]		json_memberof(cast(1, json BINARY), planner__core__indexmerge_path.t.j)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format='brief' select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j));
id	estRows	task	access object	operator info
TableReader	10.00	root		data:Selection
└─Selection	10.00	cop[tikv]		json_memberof(cast(1, json BINARY), planner__core__indexmerge_path.t.j)
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
ALTER TABLE t ALTER INDEX kj VISIBLE;
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:kj(cast(`j` as signed array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
insert into t values ('[1]');
insert into t values ('[1, 2]');
insert into t values ('[]');
insert into t values (NULL);
select /*+ use_index_merge(t, kj) */ count(*) from t;
count(*)
4
select /*+ use_index_merge(t, kj) */ count(*) from t where (1 member of (j));
count(*)
2
select /*+ use_index_merge(t, kj) */ count(*) from t where json_contains((j), '[1]');
count(*)
2
select /*+ use_index_merge(t, kj) */ count(*) from t where json_overlaps((j), '[1]');
count(*)
2
select /*+ use_index(t, kj) */ count(*) from t;
count(*)
4
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
insert into t values ('[1]');
insert into t values ('[1, 2]');
insert into t values ('[]');
insert into t values (NULL);
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[]');
j
[1, 2]
[1]
[]
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[]');
j
[1, 2]
[1]
[]
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1]');
j
[1, 2]
[1]
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1]');
j
[1, 2]
[1]
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1, 2]');
j
[1, 2]
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1, 2]');
j
[1, 2]
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1, 10]');
j
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1, 10]');
j
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[]');
j
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[]');
j
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1]');
j
[1, 2]
[1]
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1]');
j
[1, 2]
[1]
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1, 2]');
j
[1, 2]
[1]
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1, 2]');
j
[1, 2]
[1]
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1, 10]');
j
[1, 2]
[1]
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1, 10]');
j
[1, 2]
[1]
drop table if exists t;
create table t(
a int, j0 json, j1 json,
index j0_0((cast(j0->'$.path0' as signed array))));
insert into t values(1, '{"path0" : [1,2,3]}', null );
select /*+ no_index_merge() */ a from t where (1 member of (j0->'$.path0'));
a
1
select /*+ no_index_merge() */ a from t where ('1' member of (j0->'$.path0'));
a
select /*+ use_index_merge(t, j0_0) */ a from t where (1 member of (j0->'$.path0'));
a
1
select /*+ use_index_merge(t, j0_0) */ a from t where ('1' member of (j0->'$.path0'));
a
drop table if exists t;
create table t(a int, b int, c int, d json, index iad(a, (cast(d->'$.b' as signed array))));
insert into t value(1,1,1, '{"b":[1,2,3,4]}');
insert into t value(2,2,2, '{"b":[3,4,5,6]}');
set tidb_analyze_version=2;
analyze table t;
explain select * from t use index (iad) where a = 1;
id	estRows	task	access object	operator info
TableReader_7	1.00	root		data:Selection_6
└─Selection_6	1.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1)
  └─TableFullScan_5	2.00	cop[tikv]	table:t	keep order:false
explain select * from t use index (iad) where a = 1 and (2 member of (d->'$.b'));
id	estRows	task	access object	operator info
IndexMerge_7	1.00	root		type: union
├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t, index:iad(a, cast(json_extract(`d`, _utf8mb4'$.b') as signed array))	range:[1 2,1 2], keep order:false, stats:partial[d:unInitialized]
└─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t	keep order:false, stats:partial[d:unInitialized]
drop table if exists t;
create table t(a int, d json, index iad(a, (cast(d->'$.b' as signed array))));
insert into t value(1,'{"b":[]}'), (2,'{"b":[]}');
select * from t use index (iad) where a = 1;
a	d
1	{"b": []}
select * from t ignore index (iad) where a = 1;
a	d
1	{"b": []}
drop table if exists t;
create table t (j json, key mvi( (cast(j as char(5) array)) ) );
insert into t values ('[]');
insert into t values ('["abc"]');
select * from t use index (mvi) where json_contains(j, '[]');
j
[]
["abc"]
select * from t ignore index (mvi) where json_contains(j, '[]');
j
[]
["abc"]
drop table if exists t;
create table t(a int, b json);
insert into t value (1, '{"a":[1,2,3], "b": [2,3,4]}');
analyze table t;
alter table t add index ibb( (cast(b->'$.b' as signed array)) );
explain select /*+ use_index_merge(t) */ * from t where 10 member of (b->'$.b');
id	estRows	task	access object	operator info
IndexMerge_7	1.00	root		type: union
├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t, index:ibb(cast(json_extract(`b`, _utf8mb4'$.b') as signed array))	range:[10,10], keep order:false, stats:partial[ibb:missing, b:unInitialized]
└─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t	keep order:false, stats:partial[ibb:missing, b:unInitialized]
drop table if exists t, t1;
create table t (j json, i bigint(20) not null primary key, key mvi((cast(j as unsigned array))));
insert into t values ('[1,2,3]', 1);
explain format=brief select * from t force index(mvi) where isnull(i) or json_contains(j, '1');
id	estRows	task	access object	operator info
IndexMerge	10.00	root		type: union
├─TableFullScan(Build)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t, index:mvi(cast(`j` as unsigned array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
select * from t force index(mvi) where isnull(i) or json_contains(j, '1');
j	i
[1, 2, 3]	1
create table t1 (j json, a bigint(20), b int, primary key(a,b), key mvi((cast(j as unsigned array))));
explain format=brief select /*+ use_index_merge(t1, mvi, primary) */ * from t1 where a = 1 or json_contains(j, '1');
id	estRows	task	access object	operator info
IndexMerge	19.99	root		type: union
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:PRIMARY(a, b)	range:[1,1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:mvi(cast(`j` as unsigned array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	19.99	cop[tikv]	table:t1	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t1, mvi, primary) */ * from t1 where (a = 1 and b = 2) or json_contains(j, '1');
id	estRows	task	access object	operator info
IndexMerge	11.00	root		type: union
├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, index:PRIMARY(a, b)	range:[1 2,1 2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:mvi(cast(`j` as unsigned array))	range:[1,1], keep order:false, stats:pseudo
└─TableRowIDScan(Probe)	11.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
drop table if exists t, t1;
create table t (a int, b varchar(30), c float, j json, pk int primary key,
key mvi1(c, (cast(j->'$.a' as unsigned array)), b),
key mvi2(a, (cast(j->'$.c' as unsigned array))),
key mvi3((cast(j->'$.d' as unsigned array)), c),
key idx(b, c)
);
explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
json_overlaps(j->'$.a', '[4,5,6]') or
(2 member of (j->'$.a'))
) and
c = 10 and
a = 20;
id	estRows	task	access object	operator info
Selection	0.01	root		or(json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[4,5,6]", json BINARY)), json_memberof(cast(2, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a")))
└─IndexMerge	0.40	root		type: union
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 4,10 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 5,10 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 6,10 6], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 2,10 2], keep order:false, stats:pseudo
  └─Selection(Probe)	0.40	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 20), eq(planner__core__indexmerge_path.t.c, 10)
    └─TableRowIDScan	0.40	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
c = 1 or
c = 2 or
c = 3
) and
json_overlaps(j->'$.a', '[4,5,6]');
id	estRows	task	access object	operator info
Selection	0.72	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[4,5,6]", json BINARY))
└─IndexMerge	0.90	root		type: union
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[1 4,1 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[1 5,1 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[1 6,1 6], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[2 4,2 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[2 5,2 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[2 6,2 6], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 4,3 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 5,3 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 6,3 6], keep order:false, stats:pseudo
  └─Selection(Probe)	0.90	cop[tikv]		or(eq(planner__core__indexmerge_path.t.c, 1), or(eq(planner__core__indexmerge_path.t.c, 2), eq(planner__core__indexmerge_path.t.c, 3)))
    └─TableRowIDScan	0.90	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
c = 1 or
c = 2 or
c = 3
) and
(json_contains(j->'$.a', '[4,5,6]'));
id	estRows	task	access object	operator info
TableReader	24.00	root		data:Selection
└─Selection	24.00	cop[tikv]		json_contains(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[4,5,6]", json BINARY)), or(eq(planner__core__indexmerge_path.t.c, 1), or(eq(planner__core__indexmerge_path.t.c, 2), eq(planner__core__indexmerge_path.t.c, 3)))
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
c = 1 or
c = 2 or
c = 3
) and
json_contains(j->'$.a', '[2]');
id	estRows	task	access object	operator info
IndexMerge	0.30	root		type: union
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[1 2,1 2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[2 2,2 2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 2,3 2], keep order:false, stats:pseudo
└─Selection(Probe)	0.30	cop[tikv]		json_contains(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[2]", json BINARY)), or(eq(planner__core__indexmerge_path.t.c, 1), or(eq(planner__core__indexmerge_path.t.c, 2), eq(planner__core__indexmerge_path.t.c, 3)))
  └─TableRowIDScan	0.30	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
1 member of (j->'$.a') or
2 member of (j->'$.a')
) and
c = 10 and
a = 20;
id	estRows	task	access object	operator info
IndexMerge	0.20	root		type: union
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 1,10 1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 2,10 2], keep order:false, stats:pseudo
└─Selection(Probe)	0.20	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 20), eq(planner__core__indexmerge_path.t.c, 10), or(json_memberof(cast(1, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a")), json_memberof(cast(2, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a")))
  └─TableRowIDScan	0.20	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
1 member of (j->'$.a') or
2 member of (j->'$.d')
) and
a = 20;
id	estRows	task	access object	operator info
TableReader	8.00	root		data:Selection
└─Selection	8.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 20), or(json_memberof(cast(1, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a")), json_memberof(cast(2, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.d")))
  └─TableFullScan	10000.00	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1, mvi3) */ * from t where
c = 5 and
(
1 member of (j->'$.a') or
2 member of (j->'$.d')
) and
a = 20;
id	estRows	task	access object	operator info
IndexMerge	0.20	root		type: union
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[5 1,5 1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi3(cast(json_extract(`j`, _utf8mb4'$.d') as unsigned array), c)	range:[2 5,2 5], keep order:false, stats:pseudo
└─Selection(Probe)	0.20	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 20), eq(planner__core__indexmerge_path.t.c, 5), or(json_memberof(cast(1, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a")), json_memberof(cast(2, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.d")))
  └─TableRowIDScan	0.20	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, primary) */ * from t where
(
pk = 2 or
json_overlaps(j->'$.a', '[4,5,6]') or
json_contains(j->'$.c', '[3]')
) and
a = 1 and
b = '2' and
c = 3;
id	estRows	task	access object	operator info
Selection	0.00	root		or(eq(planner__core__indexmerge_path.t.pk, 2), or(json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[4,5,6]", json BINARY)), json_contains(json_extract(planner__core__indexmerge_path.t.j, "$.c"), cast("[3]", json BINARY))))
└─IndexMerge	0.00	root		type: union
  ├─TableRangeScan(Build)	1.00	cop[tikv]	table:t	range:[2,2], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 4 "2",3 4 "2"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 5 "2",3 5 "2"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 6 "2",3 6 "2"], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi2(a, cast(json_extract(`j`, _utf8mb4'$.c') as unsigned array))	range:[1 3,1 3], keep order:false, stats:pseudo
  └─Selection(Probe)	0.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), eq(planner__core__indexmerge_path.t.b, "2"), eq(planner__core__indexmerge_path.t.c, 3)
    └─TableRowIDScan	1.10	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, primary) */ * from t where
a = 1 and
b = '2' and
c = 3 and
(
pk = 2 or
(3 member of (j->'$.a')) or
(3 member of (j->'$.c'))
);
id	estRows	task	access object	operator info
IndexMerge	0.00	root		type: union
├─TableRangeScan(Build)	1.00	cop[tikv]	table:t	range:[2,2], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[3 3 "2",3 3 "2"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi2(a, cast(json_extract(`j`, _utf8mb4'$.c') as unsigned array))	range:[1 3,1 3], keep order:false, stats:pseudo
└─Selection(Probe)	0.00	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), eq(planner__core__indexmerge_path.t.b, "2"), eq(planner__core__indexmerge_path.t.c, 3), or(eq(planner__core__indexmerge_path.t.pk, 2), or(json_memberof(cast(3, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a")), json_memberof(cast(3, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.c"))))
  └─TableRowIDScan	1.10	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, idx) */ * from t where
a = 1 and
b = '2' and
(
c = 20 or
(c = 10 and 3 member of (j->'$.a')) or
3 member of (j->'$.c')
);
id	estRows	task	access object	operator info
IndexMerge	0.20	root		type: union
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:idx(b, c)	range:["2" 20,"2" 20], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.00	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 3 "2",10 3 "2"], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi2(a, cast(json_extract(`j`, _utf8mb4'$.c') as unsigned array))	range:[1 3,1 3], keep order:false, stats:pseudo
└─Selection(Probe)	0.20	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), eq(planner__core__indexmerge_path.t.b, "2"), or(eq(planner__core__indexmerge_path.t.c, 20), or(and(eq(planner__core__indexmerge_path.t.c, 10), json_memberof(cast(3, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.a"))), json_memberof(cast(3, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.c"))))
  └─TableRowIDScan	0.20	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, idx) */ * from t where
a = 1 and
(json_overlaps(j->'$.a', '[4,5,6]')) and
(
(b = '2' and c > 20) or
c = 10 or
3 member of (j->'$.c')
);
id	estRows	task	access object	operator info
Selection	6.41	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[4,5,6]", json BINARY))
└─IndexMerge	0.03	root		type: union
  ├─IndexRangeScan(Build)	33.33	cop[tikv]	table:t, index:idx(b, c)	range:("2" 20,"2" +inf], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 4,10 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 5,10 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 6,10 6], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi2(a, cast(json_extract(`j`, _utf8mb4'$.c') as unsigned array))	range:[1 3,1 3], keep order:false, stats:pseudo
  └─Selection(Probe)	0.03	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), or(and(eq(planner__core__indexmerge_path.t.b, "2"), gt(planner__core__indexmerge_path.t.c, 20)), or(eq(planner__core__indexmerge_path.t.c, 10), json_memberof(cast(3, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.c"))))
    └─TableRowIDScan	33.73	cop[tikv]	table:t	keep order:false, stats:pseudo
explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, idx) */ * from t where
a = 1 and
(json_overlaps(j->'$.a', '[4,5,6]')) and
(
(b > '2' and c = 20) or
(c = 10) or
(3 member of (j->'$.c'))
);
id	estRows	task	access object	operator info
Selection	0.56	root		json_overlaps(json_extract(planner__core__indexmerge_path.t.j, "$.a"), cast("[4,5,6]", json BINARY))
└─IndexMerge	0.70	root		type: union
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[20 4,20 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[20 5,20 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[20 6,20 6], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 4,10 4], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 5,10 5], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi1(c, cast(json_extract(`j`, _utf8mb4'$.a') as unsigned array), b)	range:[10 6,10 6], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t, index:mvi2(a, cast(json_extract(`j`, _utf8mb4'$.c') as unsigned array))	range:[1 3,1 3], keep order:false, stats:pseudo
  └─Selection(Probe)	0.70	cop[tikv]		eq(planner__core__indexmerge_path.t.a, 1), or(and(gt(planner__core__indexmerge_path.t.b, "2"), eq(planner__core__indexmerge_path.t.c, 20)), or(eq(planner__core__indexmerge_path.t.c, 10), json_memberof(cast(3, json BINARY), json_extract(planner__core__indexmerge_path.t.j, "$.c"))))
    └─TableRowIDScan	0.70	cop[tikv]	table:t	keep order:false, stats:pseudo
create table t1 (a int, b int, c int, d int, j json, key kb(b, (cast(j as unsigned array))), key(d, c));
explain format=brief select * from t1 where (c=1 or b=1) and (1 member of (j));
id	estRows	task	access object	operator info
TableReader	15.99	root		data:Selection
└─Selection	15.99	cop[tikv]		json_memberof(cast(1, json BINARY), planner__core__indexmerge_path.t1.j), or(eq(planner__core__indexmerge_path.t1.c, 1), eq(planner__core__indexmerge_path.t1.b, 1))
  └─TableFullScan	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
explain format=brief select * from t1 where (c=1 or b=1) and (1 member of (j)) and d=1;
id	estRows	task	access object	operator info
IndexMerge	0.20	root		type: union
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t1, index:d(d, c)	range:[1 1,1 1], keep order:false, stats:pseudo
├─IndexRangeScan(Build)	0.10	cop[tikv]	table:t1, index:kb(b, cast(`j` as unsigned array))	range:[1 1,1 1], keep order:false, stats:pseudo
└─Selection(Probe)	0.20	cop[tikv]		eq(planner__core__indexmerge_path.t1.d, 1), json_memberof(cast(1, json BINARY), planner__core__indexmerge_path.t1.j), or(eq(planner__core__indexmerge_path.t1.c, 1), eq(planner__core__indexmerge_path.t1.b, 1))
  └─TableRowIDScan	0.20	cop[tikv]	table:t1	keep order:false, stats:pseudo
drop table if exists t;
CREATE TABLE `t` (
`col_37` json DEFAULT NULL,
`col_38` timestamp NOT NULL DEFAULT '2010-07-09 00:00:00',
UNIQUE KEY `idx_14` (`col_38`,(cast(`col_37` as unsigned array))),
UNIQUE KEY `idx_15` (`col_38`,(cast(`col_37` as unsigned array))),
PRIMARY KEY (`col_38`) /*T![clustered_index] CLUSTERED */,
UNIQUE KEY `idx_17` ((cast(`col_37` as unsigned array)),`col_38`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
INSERT INTO `t` VALUES('[12474495489656359869, 14407883655486982855, 4221184636468364556, 6110001961631615601, 15150776080990746179]','1970-03-12 00:00:00'),('[6085355592952464235]','1971-01-16 00:00:00'),('[5781707929468111406, 16382828507784518403]','1972-01-16 00:00:00'),('[6085355592952464235]','1972-08-02 00:00:00'),('[6085355592952464235]','1972-12-11 00:00:00'),('[6085355592952464235]','1972-12-21 00:00:00'),('[6085355592952464235]','1973-02-14 00:00:00'),('[6887567370081687232]','1973-05-04 00:00:00'),('[6085355592952464235]','1974-02-01 00:00:00'),('[6085355592952464235]','1974-04-27 00:00:00'),('[16443375232588053566, 15492284538739550474, 2631295588571312304, 15742669945672063486]','1974-06-09 00:00:00'),('[9489266093076991482, 4698969158339636571]','1975-10-26 00:00:00'),('[6085355592952464235]','1977-05-08 00:00:00'),('[898235511450526702, 6252566703278238786, 2261772813075859625]','1978-07-03 00:00:00'),(NULL,'1980-06-27 00:00:00'),('[10831919791216851694, 7541902588294758305, 6034300002828730755]','1980-07-30 00:00:00'),('[6085355592952464235]','1981-09-12 00:00:00'),('[6085355592952464235]','1982-05-30 00:00:00'),('[6085355592952464235]','1982-07-31 00:00:00'),('[4146363158315189712, 2391002653963544762]','1983-07-25 00:00:00'),('[6085355592952464235]','1985-01-26 00:00:00'),('[6085355592952464235]','1985-05-16 00:00:00'),('[9223372036854775807, 9558194088702539102, 6167960273278105650, 14757902754926577696, 16653691901076809579]','1986-03-08 00:00:00'),('[6085355592952464235]','1991-06-27 00:00:00'),('[6085355592952464235]','1991-11-22 00:00:00'),('[742183856683888275, 7870014111942346276, 3252208608007118384, 2554457559079886925, 3461660288536208965]','1991-12-01 00:00:00'),('[0, 7309322092917510049, 8282059475463020025, 9223372036854775807, 8236948484299513601]','1992-01-21 00:00:00'),('[6085355592952464235]','1992-07-30 00:00:00'),('[6085355592952464235]','1995-07-09 00:00:00'),('[4954624538838377461, 9223372036854775807]','1995-11-02 00:00:00'),('[6085355592952464235]','1997-09-24 00:00:00'),('[5541636548306836534]','1997-12-17 00:00:00'),('[2372084030128780091, 0, 8333919059399068469, 9097701366128382209, 12909943251581664025]','1998-03-08 00:00:00'),('[6085355592952464235]','1998-04-13 00:00:00'),('[6085355592952464235]','1999-04-10 00:00:00'),('[6085355592952464235]','1999-07-15 00:00:00'),('[13926602438239746596]','1999-08-08 00:00:00'),('[10622617655435321115, 12031447777564406671, 17187531506212239808, 13120343177240635444, 8528250079171510200]','1999-12-01 00:00:00'),('[3790911999833529022, 2343296225186042787, 6819537424069776784, 13270403636857415720]','2003-08-09 00:00:00'),('[10824194962777929518]','2006-11-05 00:00:00'),('[2689347729697653937, 6029425564270989071, 9613953820717421747, 9437566388707504417]','2008-02-25 00:00:00'),('[6085355592952464235]','2008-03-30 00:00:00'),('[15449121625659667298, 4541516510957888209, 1305529769721308891]','2008-11-07 00:00:00'),('[10699242186188846571, 7856577436586720260, 8851292429056441309, 11943637602148518975, 13317850842658892320]','2010-03-31 00:00:00'),('[1662225601861974430, 18092909239123653024, 11501141468789287862]','2012-04-15 00:00:00'),('[13015616341752575134]','2012-05-12 00:00:00'),('[6085355592952464235]','2012-06-13 00:00:00'),('[9806827176336778774, 6082939478820303687, 12353605732184995966, 17191985691142039533, 9223372036854775808]','2012-08-16 00:00:00'),('[6085355592952464235]','2012-10-14 00:00:00'),('[6085355592952464235]','2012-12-23 00:00:00'),('[6085355592952464235]','2013-04-17 00:00:00'),('[6085355592952464235]','2014-02-20 00:00:00'),('[6085355592952464235]','2015-08-06 00:00:00'),('[6085355592952464235]','2016-01-22 00:00:00'),('[6085355592952464235]','2016-05-27 00:00:00'),('[6085355592952464235]','2016-09-01 00:00:00'),('[6085355592952464235]','2017-01-19 00:00:00'),('[6085355592952464235]','2017-04-25 00:00:00'),('[2496954412283132814]','2017-10-20 00:00:00'),('[6011416056008097080, 8401732621063949750]','2018-10-20 00:00:00'),('[6085355592952464235]','2021-02-25 00:00:00'),('[6085355592952464235]','2021-05-23 00:00:00'),('[4765021307809451011, 166985960251921671, 7945653371704683528]','2021-08-27 00:00:00'),('[6085355592952464235]','2021-10-01 00:00:00'),('[6085355592952464235]','2023-09-08 00:00:00'),('[4298760996497097950, 16695885851907831657, 2, 211742148607907698]','2023-11-12 00:00:00'),('[6085355592952464235]','2024-11-06 00:00:00'),('[6085355592952464235]','2025-11-12 00:00:00'),('[6085355592952464235]','2026-08-05 00:00:00'),('[6085355592952464235]','2031-08-28 00:00:00'),('[6647303358869413442, 10003252368309984244, 3086718564738761942]','2031-10-01 00:00:00'),('[6085355592952464235]','2031-11-24 00:00:00'),('[6085355592952464235]','2032-04-23 00:00:00'),('[9201885267580925888, 9223372036854775808, 5257631883611568331, 11129612187092235508, 6214786545776627889]','2034-03-09 00:00:00'),('[7556387559865010847, 8798123769176200972]','2034-04-13 00:00:00'),('[13333584050314732558, 2379710530233660250, 12902416123543393674, 9259958507508213510, 17541647851839401835]','2035-02-17 00:00:00'),('[6085355592952464235]','2035-08-06 00:00:00'),('[14219119990701343056, 12146509442366889994, 11781375265446394500, 18446744073709551615, 7261133173516561900]','2035-11-08 00:00:00'),('[8809661147955879571, 4218874689382899073]','2035-12-11 00:00:00'),('[10187587245884493942, 9223372036854775807, 2, 928955973542912301]','2036-05-26 00:00:00');
EXPLAIN SELECT /*+ use_index_merge(t)*/ MIN(col_37)  FROM t WHERE col_38 BETWEEN '1984-12-13' AND '1975-01-28' OR JSON_CONTAINS(col_37, '138480458355390957') GROUP BY col_38 HAVING col_38 != '1988-03-22';
id	estRows	task	access object	operator info
Projection_8	6.66	root		planner__core__indexmerge_path.t.col_37->Column#7
└─IndexMerge_13	6.66	root		type: union
  ├─TableFullScan_9(Build)	0.00	cop[tikv]	table:t	keep order:false, stats:pseudo
  ├─IndexRangeScan_10(Build)	10.00	cop[tikv]	table:t, index:idx_17(cast(`col_37` as unsigned array), col_38)	range:[138480458355390957,138480458355390957], keep order:false, stats:pseudo
  └─Selection_12(Probe)	6.66	cop[tikv]		ne(planner__core__indexmerge_path.t.col_38, 1988-03-22 00:00:00.000000)
    └─TableRowIDScan_11	10.00	cop[tikv]	table:t	keep order:false, stats:pseudo
SELECT /*+ use_index_merge(t)*/ MIN(col_37)  FROM t WHERE col_38 BETWEEN '1984-12-13' AND '1975-01-28' OR JSON_CONTAINS(col_37, '138480458355390957') GROUP BY col_38 HAVING col_38 != '1988-03-22';
MIN(col_37)
drop table if exists t1;
CREATE TABLE `t1` (
`col_44` date NOT NULL,
`col_45` json DEFAULT NULL,
`col_46` blob NOT NULL,
PRIMARY KEY (`col_44`) /*T![clustered_index] CLUSTERED */,
UNIQUE KEY `idx_16` (`col_46`(3)),
KEY `idx_17` ((cast(`col_45` as double array)))
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
INSERT INTO `t1` VALUES('1970-06-23','[0.4560478695486992, 0.803651626010387]',x'7536255340506e4c33316848237a35'),('1970-09-25','[0.15199642284684986, 0.6321478001858613, 0.7656785642600782]',x'46257656295764673d4d2879486a7064'),('1970-12-20','[0.1945757596453029, 0.805924917565015, 0.9514989635078432]',x'3237585f587937596440666c'),('1971-01-30','[0.8674221724194489, 0.5874297776348085, 0.953305932613583, 0.3597865188732217, 0.9685946450023771]',x'776435472d306a'),('1971-04-19','[0.3962760654250889, 0.3033630486210956, 0.5788307700170308, 0.45967119199449186, 0.18040912218010932]',x'5f6e595446'),('1971-07-13','[0.5430757366310748, 0.8018899907743144, 0.8380302518531714, 0.13858586403286638]',x'4c2a4a4f71402d476b61796e7975426859'),('1971-09-08','[0.5866539910043066, 0.47465227377222047, 0.3412140234543155, 0.8109510241444171, 0.7217020139220653]',x'21326e4240524d626451467226624d36473264'),('1974-03-11','[0.9692492406521573]',x'7625754e5e55'),('1974-06-21','[0.8026878685767292]',x'7233744b2340285f'),('1975-06-08','[0.9922869004082567, 0.13102472710817054, 0.6557189141392675, 0.7616974552959114, 0.9653986970900055]',x'384261614d'),('1977-10-19','[0.33915755092357786, 0.612813632848902, 0.31310578556186824, 0.7695374222593716, 0.6996560322741089]',x'436d37594d7529734e412d513339'),('1978-01-31','[0.9327357034423996, 0.5066011929178722, 0.35172580278260285]',x'5f2145376d3742284254726971374f6d62'),('1978-08-23','[0.05090948016614748]',x'42485a4e322d2444'),('1980-03-16','[0.49342945147794093, 0.3032388374311525, 0.7358262102414459, 0.28035992762300044, 0.9099270917809736]',x'244863456e506b4024366e7a5f4a4a4645'),('1981-11-13','[0.014281917443517428, 0.31751875796372186, 0.5653893294127147, 0.6252442676826157, 0.6354719008300445]',x'4959463d2d6359796e377854754d2470'),('1983-10-16','[0.6992056327393458, 0.6285491992936737]',x'5175714844556626514743434b7543314249'),('1984-04-16','[0.5253196030542662, 0.3561411260568334, 0.7687615143503639, 0.4271982783883207, 0.20382816433225448]',x'475176'),('1988-07-19','[0.9233398239291353, 0.9396459773262974, 0.540018481999012, 0.181978533893545]',x'652539286c5f7e6b482a7265575a'),('1988-08-27','[0.9206220563718938]',x'475f693338392b646847'),('1989-12-07','[0.7964395106523453, 0.15227139590401054, 0.008643835436697868, 0.49470337240413564, 0.421379488694248]',x'377a767a65517647364856'),('1994-09-19','[0.19716919785297451]',x'3d26'),('1994-10-09',NULL,x'2a475463505136376861'),('1997-01-28','[0.30777386345347096]',x'70335e5e506b34236231476c35465e5e6d7448'),('2003-03-20','[0.23787267537350917, 0.5250550691578201, 0.9997853645717626]',x'404925286e5e726b305e'),('2004-04-12','[0.5368094270222808, 0.5306352503604773]',x'3752686b497448347039462136405a4f7a32'),('2005-02-04','[0.6531851579067487, 0.43849173297844984]',x'7e472a33336e73374558386a47234d5578'),('2005-02-18','[0.6303813789290023, 0.8178417890758697, 0.5354859968496037, 0.8868549026347942, 0.7253817513425349]',x'7e2d426a566329774a566c24217729797824'),('2005-05-09','[0.4155497358943851, 0.7649690762144056, 0.08552617826430448, 0.8054846042993035, 0.40076060531272734]',x''),('2006-02-10','[0.0506631513523112]',x'54416c7752526b55695258'),('2006-05-28','[0.7391997763354717, 0.43722943543743453, 0.8497153956761379, 0.8287059733052305, 0.8111927284482152]',x'38306635334126614d3455717e6b5762'),('2006-12-11','[0.11237614634576035, 0.33642094098687275]',x'57'),('2008-11-15','[0.41624921945334875, 0.7943609327220645, 0.2305392033266452, 0.003126127180805482, 0.08258790143798625]',x'67255f572156'),('2010-04-12','[0.7426240813483267, 0.17460982411968, 0.5062606612544903, 0.8641725521049805, 0.9093439280689491]',x'4557'),('2010-07-01','[0.9644470375249405, 0.14310028546123896, 0.30118256015842687, 0.12793715319326038]',x'6b7279692374524d306955'),('2012-03-29','[0.3808266319303118, 0.7975392670993785, 0.9125172409606002]',x'29'),('2012-08-24','[0.2368334281622129, 0.42370258940822, 0.09738052754248587, 0.6459847041878707]',x'255864432531546d443d263357557665'),('2013-10-14','[0.6366359320820038, 0.5258960185446601, 0.005468600014788019, 0.19002172571117618, 0.797860044965581]',x'58'),('2014-09-11','[0.26022068165495205]',x'6367665a373d53435e'),('2014-12-13','[0.18800960481374288]',x'692a5e4a727a2a41617574427a55406d'),('2016-03-01','[0.25353352722827344, 0.4696086393527653]',x'61'),('2018-12-24','[0.8883173845659126, 0.18078860876275404, 0.782658946181266, 0.2313310335729729]',x'77685f6b2869412a362b51'),('2021-06-26','[0.7528824657017837, 0.5179168006354101]',x'754a5e426f5a'),('2024-09-14','[0.785269452318795, 0.17609269926690957]',x'78252d2a362b4970353d5344584b766a633676'),('2024-12-30','[0.00042683533117783784, 0.26595214790312577, 0.48558040788839835, 0.7869280150674137]',x'6b67723d515756'),('2026-09-06','[0.9365758574340017, 0.035546493857794695, 0.7754058903482861, 0.06044405480634493]',x'77682b6f25313955643539795a345a'),('2027-05-19','[0.8578090694848647]',x'242b766b2d77'),('2027-11-01','[0.24985659225233242, 0.30331796357453394, 0.7477630696060984, 0.2642551752530038]',x'43375f5e6f6a62'),('2029-08-02','[0.7763676611291416]',x'4d6f'),('2030-02-05','[0.009232987106033366, 0.00424470502234362, 0.2340937202479449, 0.796532430692608]',x'793769216c4345516953292b246f4a796a756d'),('2031-11-05','[0.3856369365849062, 0.5724653509287152, 0.10591783536660329, 0.9541071017537033, 0.40942237293930245]',x'2373472b5225524e6141'),('2033-04-19','[0.47756023582738844, 0.591267913674284, 0.8929064352436822]',x'49574372366e'),('2034-06-15','[0.02368921979891078, 0.3785450156472247, 0.7560160881159008]',x'37'),('2035-05-04','[0.9173342769673862, 0.09009465925826006, 0.42919053504258686, 0.9562530025069383]',x'7e5e2645487e563d615944363571413831'),('2036-08-13','[0.618229016298302]',x'6c50396b64334950624343545a716e');
SELECT `t1`.`col_44`, col_45 FROM `t1` WHERE NOT (`t1`.`col_44` BETWEEN '1980-03-18' AND '2011-10-24') GROUP BY `t1`.`col_46`,`t1`.`col_45` HAVING JSON_CONTAINS(`t1`.`col_45`, '0.540018481999012') OR JSON_OVERLAPS(`t1`.`col_45`, '[0.5785147169732324,0.8314968898215304,0.5226516826882698]');
col_44	col_45
EXPLAIN format=brief SELECT /*+ use_index_merge(t1) */ `t1`.`col_44`, col_45 FROM `t1` WHERE NOT (`t1`.`col_44` BETWEEN '1980-03-18' AND '2011-10-24') GROUP BY `t1`.`col_46`,`t1`.`col_45` HAVING JSON_CONTAINS(`t1`.`col_45`, '0.540018481999012') OR JSON_OVERLAPS(`t1`.`col_45`, '[0.5785147169732324,0.8314968898215304,0.5226516826882698]');
id	estRows	task	access object	operator info
Selection	31.95	root		or(json_contains(planner__core__indexmerge_path.t1.col_45, cast(cast("0.540018481999012", json BINARY), json BINARY)), json_overlaps(planner__core__indexmerge_path.t1.col_45, cast(cast("[0.5785147169732324,0.8314968898215304,0.5226516826882698]", json BINARY), json BINARY)))
└─IndexMerge	26.59	root		type: union
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:idx_17(cast(`col_45` as double array))	range:[0.540018481999012,0.540018481999012], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:idx_17(cast(`col_45` as double array))	range:[0.5785147169732324,0.5785147169732324], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:idx_17(cast(`col_45` as double array))	range:[0.8314968898215304,0.8314968898215304], keep order:false, stats:pseudo
  ├─IndexRangeScan(Build)	10.00	cop[tikv]	table:t1, index:idx_17(cast(`col_45` as double array))	range:[0.5226516826882698,0.5226516826882698], keep order:false, stats:pseudo
  └─Selection(Probe)	26.59	cop[tikv]		or(lt(planner__core__indexmerge_path.t1.col_44, 1980-03-18 00:00:00.000000), gt(planner__core__indexmerge_path.t1.col_44, 2011-10-24 00:00:00.000000))
    └─TableRowIDScan	39.94	cop[tikv]	table:t1	keep order:false, stats:pseudo
