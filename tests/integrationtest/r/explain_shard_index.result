set tidb_cost_model_version=1;
drop table if exists test3, test5;
create table test3(id int primary key clustered, a int, b int, unique key uk_expr((tidb_shard(a)),a));
INSERT INTO test3 (id, a, b) VALUES
(1, 100, 100),
(3, 200, 300),
(5, 300, 300);
create table test5(id int primary key clustered, a int, b int, unique key uk_expr((tidb_shard(a)),a,b));
explain format='plan_tree' select * from test3 where a=100;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	
explain format='plan_tree' select * from test3 where a=100 and (b = 100 or b = 200);
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Selection	root		or(eq(explain_shard_index.test3.b, 100), eq(explain_shard_index.test3.b, 200))
  └─Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	
explain format='plan_tree' select * from test3 where tidb_shard(a) = 8;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─IndexLookUp	root		
  ├─IndexRangeScan(Build)	cop[tikv]	table:test3, index:uk_expr(tidb_shard(`a`), a)	range:[8,8], keep order:false, stats:pseudo
  └─TableRowIDScan(Probe)	cop[tikv]	table:test3	keep order:false, stats:pseudo
explain format='plan_tree' select * from test3 where a=100 or b = 200;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Selection	root		or(and(eq(tidb_shard(explain_shard_index.test3.a), 8), eq(explain_shard_index.test3.a, 100)), eq(explain_shard_index.test3.b, 200))
  └─TableReader	root		data:TableFullScan
    └─TableFullScan	cop[tikv]	table:test3	keep order:false, stats:pseudo
explain format='plan_tree' select * from test3 where a=100 or a = 300;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Batch_Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	keep order:false, desc:false
explain format='plan_tree' select * from test3 where a=100 or a = 300 or a > 997;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Selection	root		or(and(eq(tidb_shard(explain_shard_index.test3.a), 8), eq(explain_shard_index.test3.a, 100)), or(and(eq(tidb_shard(explain_shard_index.test3.a), 227), eq(explain_shard_index.test3.a, 300)), gt(explain_shard_index.test3.a, 997)))
  └─TableReader	root		data:TableFullScan
    └─TableFullScan	cop[tikv]	table:test3	keep order:false, stats:pseudo
explain format='plan_tree' select * from test3 where ((a=100 and b = 100) or a = 200) and b = 300;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Selection	root		eq(explain_shard_index.test3.b, 300)
  └─Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	
select * from test3 where ((a=100 and b = 100) or a = 200) and b = 300;
id	a	b
3	200	300
explain format='plan_tree' select * from test3 where a = b;
id	task	access object	operator info
TableReader	root		data:Projection
└─Projection	cop[tikv]		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
  └─Selection	cop[tikv]		eq(explain_shard_index.test3.a, explain_shard_index.test3.b)
    └─TableFullScan	cop[tikv]	table:test3	keep order:false, stats:pseudo
select * from test3 where a = b;
id	a	b
1	100	100
5	300	300
explain format='plan_tree' select * from test3 where a = b and b = 100;
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Selection	root		eq(explain_shard_index.test3.b, 100)
  └─Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	
explain format='plan_tree' select * from test5 where a=100 and b = 100;
id	task	access object	operator info
Projection	root		explain_shard_index.test5.id, explain_shard_index.test5.a, explain_shard_index.test5.b
└─Point_Get	root	table:test5, index:uk_expr(tidb_shard(`a`), a, b)	
explain format='plan_tree' select * from test5 where (a=100 and b = 100) or  (a=200 and b = 200);
id	task	access object	operator info
Projection	root		explain_shard_index.test5.id, explain_shard_index.test5.a, explain_shard_index.test5.b
└─Batch_Point_Get	root	table:test5, index:uk_expr(tidb_shard(`a`), a, b)	keep order:false, desc:false
explain format='plan_tree' select a+b from test5 where (a, b) in ((100, 100), (200, 200));
id	task	access object	operator info
Projection	root		plus(explain_shard_index.test5.a, explain_shard_index.test5.b)->Column#5
└─Batch_Point_Get	root	table:test5, index:uk_expr(tidb_shard(`a`), a, b)	keep order:false, desc:false
explain format='plan_tree' SELECT * FROM test3 WHERE a IN (100);
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	
explain format='plan_tree' SELECT * FROM test3 WHERE a IN (100, 200, 300);
id	task	access object	operator info
Projection	root		explain_shard_index.test3.id, explain_shard_index.test3.a, explain_shard_index.test3.b
└─Batch_Point_Get	root	table:test3, index:uk_expr(tidb_shard(`a`), a)	keep order:false, desc:false
drop table if exists test3, test5;
