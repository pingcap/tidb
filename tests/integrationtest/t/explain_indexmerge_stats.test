set tidb_cost_model_version=1;
drop table if exists t;
create table t (a int primary key, b int, c int, d int, e int, f int);
create index tb on t (b);
create index tc on t (c);
create index td on t (d);
# generate a, b, c, d, e, f from 0 to 5000000 and a = b = c = d = e = f
load stats 's/explain_indexmerge_stats_t.json';
explain format = 'brief' select * from t where a < 50 or b < 50;
explain format = 'brief' select * from t where (a < 50 or b < 50) and f > 100;
explain format = 'brief' select * from t where b < 50 or c < 50;
set session tidb_enable_index_merge = on;
# choose the best plan based on cost
explain format = 'brief' select * from t where a < 50 or b < 50;
explain format = 'brief' select * from t where (a < 50 or b < 50) and f > 100;
explain format = 'brief' select * from t where a < 50 or b < 5000000;
explain format = 'brief' select * from t where b < 50 or c < 50;
explain format = 'brief' select * from t where b < 50 or c < 5000000;
explain format = 'brief' select * from t where a < 50 or b < 50 or c < 50;
explain format = 'brief' select * from t where (b < 10000 or c < 10000) and (a < 10 or d < 10) and f < 10;
explain format="dot" select * from t where (a < 50 or b < 50) and f > 100;
set session tidb_enable_index_merge = off;
# be forced to use IndexMerge
explain format = 'brief' select /*+ use_index_merge(t, primary, tb, tc) */ * from t where a <= 500000 or b <= 1000000 or c <= 3000000;
explain format = 'brief' select /*+ use_index_merge(t, tb, tc) */ * from t where b < 50 or c < 5000000;
explain format = 'brief' select /*+ use_index_merge(t, tb, tc) */ * from t where (b < 10000 or c < 10000) and (a < 10 or d < 10) and f < 10;
explain format = 'brief' select /*+ use_index_merge(t, tb) */ * from t where b < 50 or c < 5000000;
# no_index_merge hint
explain format = 'brief' select /*+ no_index_merge(), use_index_merge(t, tb, tc) */ * from t where b < 50 or c < 5000000;
# tableScan can be a partial path to fetch handle
explain format = 'brief' select /*+ use_index_merge(t, primary, tb) */ * from t where a < 50 or b < 5000000;
# composed index
set session tidb_enable_index_merge = on;
drop table if exists t;
CREATE TABLE t (
  `id` int(11) NOT NULL,
  `aid` bigint,
  `c1` varchar(255) DEFAULT NULL,
  `c2` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `aid_c1` (`aid`,`c1`),
  KEY `aid_c2` (`aid`,`c2`)
);
desc select /*+ USE_INDEX_MERGE(t, aid_c1, aid_c2) */ * from t where (aid = 1 and c1='aaa') or (aid = 2 and c2='bbb');
# test issue 61093
use test;
drop table if exists user_authorization_simple;
CREATE TABLE `user_authorization_simple` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `deleted_at` datetime(3) DEFAULT NULL,
  `auth_type` int NOT NULL DEFAULT '1',
  `auth_value` varchar(255) COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `user_id` varchar(64) COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  PRIMARY KEY (`id`) /*T![clustered_index] NONCLUSTERED */,
  KEY `idx_user_authorization_user_id` (`user_id`),
  KEY `idx_user_authorization_deleted_at` (`deleted_at`),
  KEY `idx_user_authorization_auth_type` (`auth_type`),
  KEY `idx_user_authorization_auth_value` (`auth_value`)
);
set @@tidb_opt_fix_control='52869:ON';
load stats 's/issue_61093.json';
explain format = 'brief'
SELECT
  *
FROM
  `user_authorization_simple`
WHERE
  `user_authorization_simple`.`deleted_at` IS NULL
  AND (
    `user_authorization_simple`.`auth_type` = 2
    AND `user_authorization_simple`.`auth_value` = "310419663029329176"
    OR (
      `user_authorization_simple`.`auth_type` = 1
      AND `user_authorization_simple`.`auth_value` = "just4test@gmail.com"
    )
    OR `user_authorization_simple`.`user_id` = "310419663029329176"
  )
  AND `user_authorization_simple`.`deleted_at` IS NULL
ORDER BY
  `user_authorization_simple`.`id`
LIMIT
  1;
