# TestMultiBatch
drop table if exists t,t0;
create table t0 (i int);
insert into t0 values (1), (1);
create table t (i int unique key);
set @@tidb_dml_batch_size = 1;
insert ignore into t select * from t0;
admin check table t;
drop table if exists t,t0;
set @@tidb_dml_batch_size = default;

# TestInsertSetWithDefault
drop table if exists t1, t2;
create table t1 (a int default 10, b int default 20);
insert into t1 set a=default;
select * from t1;
delete from t1;
insert into t1 set b=default;
select * from t1;
delete from t1;
insert into t1 set b=default, a=1;
select * from t1;
delete from t1;
insert into t1 set a=default(a);
select * from t1;
delete from t1;
insert into t1 set a=default(b), b=default(a);
select * from t1;
delete from t1;
insert into t1 set a=default(b)+default(a);
select * from t1;
create table t2 (a int default 10 primary key, b int generated always as (-a) virtual, c int generated always as (-a) stored);
insert into t2 set a=default;
select * from t2;
delete from t2;
insert into t2 set a=2, b=default;
select * from t2;
delete from t2;
insert into t2 set c=default, a=3;
select * from t2;
delete from t2;
insert into t2 set a=default, b=default, c=default;
select * from t2;
delete from t2;
insert into t2 set a=default(a), b=default, c=default;
select * from t2;
delete from t2;
-- error 3105
insert into t2 set b=default(a);
-- error 3105
insert into t2 set a=default(b), b=default(b);
insert into t2 set a=default(a), c=default(c);
-- error 3105
insert into t2 set a=default(a), c=default(a);
insert into t2 set a=3, b=default, c=default(c) ON DUPLICATE KEY UPDATE b = default(b);
-- error 1062
insert into t2 set a=3, b=default, c=default(c) ON DUPLICATE KEY UPDATE b = default(b);
-- error 3105
insert into t2 set a=3, b=default, c=default(c) ON DUPLICATE KEY UPDATE b = default(a);
--sorted_result
select * from t2;
drop table t1, t2;
create table t1 (a int not null auto_increment,primary key(a), t timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP);
set @@timestamp = 1637541064;
--enable_warnings;
insert into t1 set a=default,t=default;
--disable_warnings;
set @@timestamp = 1637541082;
insert into t1 VALUES (default,default);
--sorted_result
select * from t1;
set @@timestamp = 1637541332;
--enable_warnings;
insert into t1 set a=1,t='2001-02-03 04:05:06' ON DUPLICATE KEY UPDATE t = default;
insert into t1 set a=2,t='2001-02-03 04:05:06' ON DUPLICATE KEY UPDATE t = default(t);
--disable_warnings;
--sorted_result
select * from t1;
DROP TABLE t1;
CREATE TABLE t1 (a int default 1 PRIMARY KEY, b int default 2);
INSERT INTO t1 VALUES (2,2), (3,3);
INSERT INTO t1 VALUES (3,2) ON DUPLICATE KEY UPDATE b = DEFAULT(a);
--enable_warnings;
INSERT INTO t1 SET a = 2, b = 3 ON DUPLICATE KEY UPDATE b = DEFAULT(a);
--disable_warnings;
--sorted_result
select * from t1;
drop table if exists t1;
set @@timestamp = DEFAULT;

# TestInsertOnDupUpdateDefault
drop table if exists t1, t2;
create table t1 (a int unique, b int default 20, c int default 30);
insert into t1 values (1,default,default);
insert into t1 values (1,default,default) on duplicate key update b=default;
select * from t1;
insert into t1 values (1,default,default) on duplicate key update c=default, b=default;
select * from t1;
insert into t1 values (1,default,default) on duplicate key update c=default, a=2;
select * from t1;
insert into t1 values (2,default,default) on duplicate key update c=default(b);
select * from t1;
insert into t1 values (2,default,default) on duplicate key update a=default(b)+default(c);
select * from t1;
create table t2 (a int unique, b int generated always as (-a) virtual, c int generated always as (-a) stored);
insert into t2 values (1,default,default);
insert into t2 values (1,default,default) on duplicate key update a=2, b=default;
select * from t2;
insert into t2 values (2,default,default) on duplicate key update a=3, c=default;
select * from t2;
insert into t2 values (3,default,default) on duplicate key update c=default, b=default, a=4;
select * from t2;
insert into t2 values (4,default,default) on duplicate key update b=default, a=5, c=default;
select * from t2;
-- error 3105
insert into t2 values (5,default,default) on duplicate key update b=default(a);
insert into t2 values (5,default,default) on duplicate key update a=default(a), c=default(c);
select * from t2;
delete from t2;
insert into t2 (a) values (1);
insert into t2 values (1,default,default) on duplicate key update a=default(b), b=default(b);
select * from t2;
delete from t2;
insert into t2 (a) values (1);
-- error 3105
insert into t2 values (1,default,default) on duplicate key update a=default(a), c=default(a);
drop table t1, t2;
set @@tidb_txn_mode = 'pessimistic';
create table t ( c_int int, c_string varchar(40) collate utf8mb4_bin , primary key (c_string), unique key (c_int));
insert into t values (22, 'gold witch'), (24, 'gray singer'), (21, 'silver sight');
begin;
--error 1062
insert into t values (21,'black warlock'), (22, 'dark sloth'), (21,  'cyan song') on duplicate key update c_int = c_int + 1, c_string = concat(c_int, ':', c_string);
commit;
select * from t order by c_int;
drop table t;
set @@tidb_txn_mode = default;

# TestReplaceWithCICollation
drop table if exists t;
create table t (a varchar(20) charset utf8mb4 collate utf8mb4_general_ci primary key);
replace into t(a) values (_binary'A '),(_binary'A');
select a from t use index(primary);
select a from t ignore index(primary);
drop table if exists t;

# TestGeneratedColumnForInsert
drop table if exists t1;
create table t1(id int, id_gen int as(id + 42), b int, unique key id_gen(id_gen));
insert into t1 (id, b) values(1,1),(2,2),(3,3),(4,4),(5,5);
replace into t1 (id, b) values(1,1);
replace into t1 (id, b) values(1,1),(2,2);
replace into t1 (id, b) values(6,16),(7,17),(8,18);
select * from t1;
insert into t1 (id, b) values (6,18) on duplicate key update id = -id;
insert into t1 (id, b) values (7,28) on duplicate key update b = -values(b);
select * from t1;
drop table if exists t;
create table t (i int as(k+1) stored, j int as(k+2) virtual, k int, unique key idx_i(i), unique key idx_j(j));
insert into t (k) values (1), (2);
replace into t (k) values (1), (2);
select * from t;
drop table if exists t;
create table t (i int as(k+1) stored, j int as(k+2) virtual, k int, unique key idx_j(j));
insert into t (k) values (1), (2);
replace into t (k) values (1), (2);
select * from t;
drop table if exists t;
create table t (i int as(k+1) stored, j int as(k+2) virtual, k int, unique key idx_i(i));
insert into t (k) values (1), (2);
replace into t (k) values (1), (2);
select * from t;
drop table if exists t1;
create table t1(f1 json, f2 real as (cast(f1 as decimal(2,1))));
-- error 1690
INSERT INTO t1 (f1) VALUES (CAST(1000 AS JSON));
set @@sql_mode = '';
INSERT INTO t1 (f1) VALUES (CAST(1000 AS JSON));
select * from t1;
set @@sql_mode = default;
drop table if exists t1;

# TestNullDefault
drop table if exists test_null_default;
set timestamp = 1234;
set time_zone = '+08:00';
create table test_null_default (ts timestamp null default current_timestamp);
insert into test_null_default values (null);
select * from test_null_default;
insert into test_null_default values ();
select * from test_null_default;
set timestamp = default;
drop table if exists test_null_default;

# TestNotNullDefault
drop table if exists t1,t2;
create table t1 (a int not null default null default 1);
create table t2 (a int);
alter table  t2 change column a a int not null default null default 1;
drop table t1,t2;

# TestIssue4067
drop table if exists t1, t2;
create table t1(id int);
create table t2(id int);
insert into t1 values(123);
insert into t2 values(123);
delete from t1 where id not in (select id from t2);
select * from t1;
delete from t1 where id in (select id from t2);
select * from t1;
drop table if exists t1, t2;

# TestInsertCalculatedValue
drop table if exists t;
create table t(a int, b int);
insert into t set a=1, b=a+1;
select a, b from t;
drop table if exists t;
create table t(a int default 100, b int);
insert into t set b=a+1, a=1;
select a, b from t;
insert into t (b) value (a);
select * from t where b = 100;
insert into t set a=2, b=a+1;
select * from t where a = 2;
drop table if exists t;
create table t (c int);
insert into t set t.c = '1';
select * from t;
drop table if exists t;
create table t(a int default 1);
insert into t values (a);
select * from t;
drop table if exists t;
create table t (a int, b int, c int, d int);
insert into t value (1, 2, a+1, b+1);
select * from t;
drop table if exists t;
create table t (a int not null);
insert into t values (a+2);
insert into t values (a);
select * from t order by a;
drop table if exists t;
create table t (a bigint not null, b bigint not null);
insert into t value(b + 1, a);
insert into t set a = b + a, b = a + 1;
insert into t value(1000, a);
insert t set b = sqrt(a + 4), a = 10;
select * from t order by a;
drop table if exists t;
create table t(a int);
insert into t values(a);
select * from t;
drop table if exists t;
create table t(a enum('a', 'b'));
insert into t values(a);
select * from t;
drop table if exists t;
create table t(a enum('a', 'b') default 'a');
insert into t values(a);
insert into t values(a+1);
select * from t order by a;
drop table if exists t;
create table t(a blob);
insert into t values(a);
select * from t;
drop table if exists t;
create table t(a varchar(20) default 'a');
insert into t values(a);
insert into t values(upper(a));
select * from t order by a;
drop table if exists t;
create table t(a varchar(20) not null, b varchar(20));
insert into t value (a, b);
select * from t;
drop table if exists t;
create table t(a int, b int);
insert into t values(a*b, b*b);
select * from t;
drop table if exists t;
create table t (a json not null, b int);
-- error 1366
insert into t value (a,a->'$');
drop table if exists t;
create table t (a json not null, b varchar(10));
insert into t value (a,a->'$');
select * from t;
drop table if exists t;
create table t(a json, b int, c int as (a->'$.a'));
insert into t (a, b) value (a, a->'$.a'+1);
insert into t (b) value (a->'$.a'+1);
select * from t;
insert into t (a, b) value ('{"a": 1}', a->'$.a'+1);
select * from t where c = 1;
truncate table t;
insert t set b = c + 1;
select * from t;
truncate table t;
insert t set a = '{"a": 1}', b = c;
select * from t;
drop table if exists t;
create table t(a int auto_increment key, b int);
insert into t (b) value (a);
insert into t value (a, a+1);
set SQL_MODE=NO_AUTO_VALUE_ON_ZERO;
insert into t (b) value (a+1);
select * from t order by a;
set SQL_MODE=STRICT_ALL_TABLES;
drop table if exists t;
create table t(a int not null, b int, c int as (sqrt(a)));
insert t set b = a, a = 4;
select * from t;
set SQL_MODE=default;
drop table t;

# TestDataTooLongErrMsg
drop table if exists t;
create table t(a varchar(2));
--error 1406
insert into t values('123');
insert into t values('12');
--error 1406
update t set a = '123' where a = '12';
drop table t;

# TestDeferConstraintCheckForDelete
set tidb_constraint_check_in_place = 0;
set @@tidb_txn_mode = 'optimistic';
drop table if exists t1, t2, t3, t4, t5;
create table t1(i int primary key, j int);
insert into t1 values(1, 2);
begin;
insert into t1 values(1, 3);
delete from t1 where j = 3;
-- error 1062
commit;
rollback;
create table t2(i int, j int, unique index idx(i));
insert into t2 values(1, 2);
begin;
insert into t2 values(1, 3);
delete from t2 where j = 3;
-- error 1062
commit;
admin check table t2;
create table t3(i int, j int, primary key(i));
begin;
insert into t3 values(1, 3);
delete from t3 where j = 3;
commit;
create table t4(i int, j int, primary key(i));
begin;
insert into t4 values(1, 3);
delete from t4 where j = 3;
insert into t4 values(2, 3);
commit;
admin check table t4;
select * from t4;
create table t5(i int, j int, primary key(i));
begin;
insert into t5 values(1, 3);
delete from t5 where j = 3;
insert into t5 values(1, 4);
commit;
admin check table t5;
select * from t5;
set tidb_constraint_check_in_place = default;
set @@tidb_txn_mode = default;

# TestDefEnumInsert
drop table if exists test;
create table test (id int, prescription_type enum('a','b','c','d','e','f') NOT NULL, primary key(id));
insert into test (id)  values (1);
select prescription_type from test;
drop table if exists test;

# TestIssue11059
drop table if exists t;
create table t (pk int primary key, uk int unique, v int);
insert into t values (2, 11, 215);
insert into t values (3, 7, 2111);
--error 1062
update t set pk = 2 where uk = 7;
drop table if exists t;

# TestSetWithRefGenCol
drop table if exists t, te, tn, t1, t2, t3;
create table t (i int, j int as (i+1) not null);
insert into t set i = j + 1;
select * from t;
insert into t set i = j + 100;
select * from t;
create table te (i int);
insert into te set i = i + 10;
select * from te;
insert into te set i = i;
select * from te;
create table tn (i int not null);
insert into tn set i = i;
select * from tn;
insert into tn set i = i + 10;
select * from tn;
create table t1 (j int(11) GENERATED ALWAYS AS (i + 1) stored, i int(11) DEFAULT '10');
insert into t1 values();
select * from t1;
insert into t1 values();
select * from t1;
create table t2 (j int(11) GENERATED ALWAYS AS (i + 1) stored not null, i int(11) DEFAULT '5');
insert into t2 set i = j + 9;
select * from t2;
--error 3105
insert into t2 set j = i + 1;
insert into t2 set i = j + 100;
select * from t2;
create table t3(j int(11) GENERATED ALWAYS AS (i + 1) stored, i int(11) DEFAULT '5');
insert into t3 set i = j + 100;
select * from t3;
--error 3105
insert into t3 set j = i + 1;
drop table if exists t, te, t1, t2, t3;

# TestSetWithCurrentTimestampAndNow
drop table if exists t1;
create table t1(c1 timestamp default current_timestamp, c2 int, c3 timestamp default current_timestamp);
insert into t1 set c1 = current_timestamp, c2 = sleep(2);
select c1 = c3 from t1;
insert into t1 set c1 = current_timestamp, c2 = sleep(1);
select c1 = c3 from t1;
drop table if exists t1;

# TestApplyWithPointAndBatchPointGet
drop table if exists t;
create table t ( c_int int, c_str varchar(40),c_datetime datetime, c_timestamp timestamp,
c_double double, c_decimal decimal(12, 6) , primary key(c_int, c_str) , unique key(c_int) , unique key(c_str) ,
unique key(c_decimal) , unique key(c_datetime) , key(c_timestamp) );
insert into t values (1, 'zen ardinghelli', '2020-02-03 18:15:17', '2020-03-11 05:47:11', 36.226534, 3.763),
(2, 'suspicious joliot', '2020-01-01 22:56:37', '2020-04-07 06:19:07', 62.756537, 5.567),
(3, 'keen zhukovsky', '2020-01-21 04:09:20', '2020-06-06 08:32:14', 33.115065, 1.381),
(4, 'crazy newton', '2020-02-14 21:37:56', '2020-04-28 08:33:48', 44.146318, 4.249),
(5, 'happy black', '2020-03-12 16:04:14', '2020-01-18 09:17:37', 41.962653, 5.959);
insert into t values (6, 'vigilant swartz', '2020-06-01 07:37:44', '2020-05-25 01:26:43', 56.352233, 2.202),
(7, 'suspicious germain', '2020-04-16 23:25:23', '2020-03-17 05:06:57', 55.897698, 3.460),
(8, 'festive chandrasekhar', '2020-02-11 23:40:29', '2020-04-08 10:13:04', 77.565691, 0.540),
(9, 'vigorous meninsky', '2020-02-17 10:03:17', '2020-01-02 15:02:02', 6.484815, 6.292),
(10, 'heuristic moser', '2020-04-20 12:18:49', '2020-06-20 20:20:18', 28.023822, 2.765);
insert into t values (11, 'sharp carver', '2020-03-01 11:23:41', '2020-03-23 17:59:05', 40.842442, 6.345),
(12, 'trusting noether', '2020-03-28 06:42:34', '2020-01-27 15:33:40', 49.544658, 4.811),
(13, 'objective ishizaka', '2020-01-28 17:30:55', '2020-04-02 17:45:39', 59.523930, 5.015),
(14, 'sad rhodes', '2020-03-30 21:43:37', '2020-06-09 06:53:53', 87.295753, 2.413),
(15, 'wonderful shockley', '2020-04-29 09:17:11', '2020-03-14 04:36:51', 6.778588, 8.497);
begin pessimistic;
insert into t values (13, 'vibrant yalow', '2020-05-15 06:59:05', '2020-05-03 05:58:45', 43.721929, 8.066),
(14, 'xenodochial spence', '2020-02-13 17:28:07', '2020-04-01 12:18:30', 19.981331, 5.774),
(22, 'eloquent neumann', '2020-02-10 16:00:20', '2020-03-28 00:24:42', 10.702532, 7.618)
on duplicate key update c_int=values(c_int), c_str=values(c_str), c_double=values(c_double), c_timestamp=values(c_timestamp);
select sum((select t1.c_str from t t1 where t1.c_int = 11 and t1.c_str > t.c_str order by t1.c_decimal limit 1) is null) nulls
from t order by c_str;
select sum((select t1.c_str from t t1 where t1.c_int in (11, 10086) and t1.c_str > t.c_str order by t1.c_decimal limit 1) is null) nulls
from t order by c_str;
commit;
select sum((select t1.c_str from t t1 where t1.c_int = 11 and t1.c_str > t.c_str order by t1.c_decimal limit 1) is null) nulls
from t order by c_str;
select sum((select t1.c_str from t t1 where t1.c_int in (11, 10086) and t1.c_str > t.c_str order by t1.c_decimal limit 1) is null) nulls
from t order by c_str;
drop table if exists t;

# TestWriteListPartitionTable
set @@session.tidb_enable_list_partition = ON;
drop table if exists t;
create table t (id int, name varchar(10), unique index idx (id)) partition by list  (id) (
    	partition p0 values in (3,5,6,9,17),
    	partition p1 values in (1,2,10,11,19,20),
    	partition p2 values in (4,12,13,14,18),
    	partition p3 values in (7,8,15,16,null)
	);
insert into t values  (1, 'a');
update t set name='b' where id=2;
select * from t;
update t set name='b' where id=1;
select * from t;
replace into t values  (1, 'c');
select * from t;
insert into t values (1, 'd') on duplicate key update name='e';
select * from t;
delete from t where id=1;
select * from t;
insert into t values  (2, 'f');
delete from t where name='f';
select * from t;
insert into t values  (1, 'a');
-- error 1062
insert into t values (1, 'd');
-- error 1526
insert into t values (100, 'd');
admin check table t;
insert into t values  (2,'b'),(3,'c'),(4,'d'),(7,'f'), (null,null);
select * from t partition (p0) order by id;
select * from t partition (p1,p3) order by id;
select * from t partition (p1,p3,p0,p2) order by id;
select * from t order by id;
delete from t partition (p0);
select * from t order by id;
delete from t partition (p3,p2);
select * from t order by id;
set @@session.tidb_enable_list_partition = default;
drop table if exists t;

# TestWriteListColumnsPartitionTable
set @@session.tidb_enable_list_partition = ON;
drop table if exists t;
create table t (id int, name varchar(10), unique index idx (id)) partition by list columns (id) (
    	partition p0 values in (3,5,6,9,17),
    	partition p1 values in (1,2,10,11,19,20),
    	partition p2 values in (4,12,13,14,18),
    	partition p3 values in (7,8,15,16,null)
	);
insert into t values  (1, 'a');
update t set name='b' where id=2;
select * from t;
update t set name='b' where id=1;
select * from t;
replace into t values  (1, 'c');
select * from t;
insert into t values (1, 'd') on duplicate key update name='e';
select * from t;
delete from t where id=1;
select * from t;
insert into t values  (2, 'f');
delete from t where name='f';
select * from t;
insert into t values  (1, 'a');
--error 1062
insert into t values (1, 'd');
--error 1526
insert into t values (100, 'd');
admin check table t;
insert into t values  (2,'b'),(3,'c'),(4,'d'),(7,'f'), (null,null);
select * from t partition (p0) order by id;
select * from t partition (p1,p3) order by id;
select * from t partition (p1,p3,p0,p2) order by id;
select * from t order by id;
delete from t partition (p0);
select * from t order by id;
delete from t partition (p3,p2);
select * from t order by id;
set @@session.tidb_enable_list_partition = default;
drop table if exists t;
