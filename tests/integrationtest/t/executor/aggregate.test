# TestAggPrune
drop table if exists t;
create table t(id int primary key, b varchar(50), c int);
insert into t values(1, '1ff', NULL), (2, '234.02', 1);
select id, sum(b) from t group by id;
select sum(b) from t;
select id, count(c) from t group by id;
drop table if exists t;
create table t(id int primary key, b float, c float);
insert into t values(1, 1, 3), (2, 1, 6);
select sum(b/c) from t group by id;
drop table if exists t;
create table t(id int primary key, b float, c float, d float);
insert into t values(1, 1, 3, NULL), (2, 1, NULL, 6), (3, NULL, 1, 2), (4, NULL, NULL, 1), (5, NULL, 2, NULL), (6, 3, NULL, NULL), (7, NULL, NULL, NULL), (8, 1, 2 ,3);
select count(distinct b, c, d) from t group by id;
select approx_count_distinct( b, c, d) from t group by id order by id;
drop table if exists t;
create table t(a int primary key, b varchar(10));
insert into t value(1, 11),(3, NULL);
SELECT a, MIN(b), MAX(b) FROM t GROUP BY a;

# TestAggPushDown
drop table if exists t;
create table t (a int, b int, c int);
alter table t add index idx(a, b, c);
select count(a) from t group by a;
select count(a) from t;
insert t values(0,0,0);
select distinct b from t;
select count(b) from t group by a;
insert t values(1,1,1),(3,3,6),(3,2,5),(2,1,4),(1,1,3),(1,1,2);
--sorted_result
select count(a) from t where b>0 group by a, b;
select count(a) from t where b>0 group by a, b order by a;
select count(a) from t where b>0 group by a, b order by a limit 1;
drop table if exists t, tt;
create table t(a int primary key, b int, c int);
create table tt(a int primary key, b int, c int);
insert into t values(1, 1, 1), (2, 1, 1);
insert into tt values(1, 2, 1);
select max(a.b), max(b.b) from t a join tt b on a.a = b.a group by a.c;
select a, count(b) from (select * from t union all select * from tt) k group by a order by a;

# TestIssue16279
set sql_mode = 'ONLY_FULL_GROUP_BY';
drop table if exists s;
create table s(a int);
select count(a) , date_format(a, '%Y-%m-%d') from s group by date_format(a, '%Y-%m-%d');
select count(a) , date_format(a, '%Y-%m-%d') as xx from s group by date_format(a, '%Y-%m-%d');
select count(a) , date_format(a, '%Y-%m-%d') as xx from s group by xx;
set sql_mode = default;

# TestAggPushDownPartitionTable
drop table if exists t1;
CREATE TABLE t1 (
		a int(11) DEFAULT NULL,
		b tinyint(4) NOT NULL,
		PRIMARY KEY (b)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
	PARTITION BY RANGE ( b ) (
		PARTITION p0 VALUES LESS THAN (10),
		PARTITION p1 VALUES LESS THAN (20),
		PARTITION p2 VALUES LESS THAN (30),
		PARTITION p3 VALUES LESS THAN (40),
		PARTITION p4 VALUES LESS THAN (MAXVALUE)
	);
insert into t1 values (0, 0), (1, 1), (1, 2), (1, 3), (2, 4), (2, 5), (2, 6), (3, 7), (3, 10), (3, 11), (12, 12), (12, 13), (14, 14), (14, 15), (20, 20), (20, 21), (20, 22), (23, 23), (23, 24), (23, 25), (31, 30), (31, 31), (31, 32), (33, 33), (33, 34), (33, 35), (36, 36), (80, 80), (90, 90), (100, 100);
set @@tidb_opt_agg_push_down = 1;
--sorted_result
select /*+ AGG_TO_COP() */ sum(a), sum(b) from t1 where a < 40 group by a;
set @@tidb_opt_agg_push_down = default;

# TestIssue14947
set sql_mode = 'ONLY_FULL_GROUP_BY';
drop table if exists t;
create table t(a int);
select ((+a+1)) as tmp from t group by tmp;
set @@tidb_opt_agg_push_down = default;

# TestHaving
set sql_mode = 'STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';
drop table if exists t;
create table t (c1 int, c2 int, c3 int);
insert into t values (1,2,3), (2, 3, 1), (3, 1, 2);
select c1 as c2, c3 from t having c2 = 2;
select c1 as c2, c3 from t group by c2 having c2 = 2;
select c1 as c2, c3 from t group by c2 having sum(c2) = 2;
select c1 as c2, c3 from t group by c3 having sum(c2) = 2;
select c1 as c2, c3 from t group by c3 having sum(0) + c2 = 2;
select c1 as a from t having c1 = 1;
select t.c1 from t having c1 = 1;
select a.c1 from t as a having c1 = 1;
select c1 as a from t group by c3 having sum(a) = 1;
select c1 as a from t group by c3 having sum(a) + a = 2;
select a.c1 as c, a.c1 as d from t as a, t as b having c1 = 1 limit 1;
select sum(c1) as s from t group by c1 having sum(c1) order by s;
select sum(c1) - 1 as s from t group by c1 having sum(c1) - 1 order by s;
select 1 from t group by c1 having sum(abs(c2 + c3)) = c1;
set @@tidb_opt_agg_push_down = default;

# TestAggEliminator
create table t(a int primary key, b int);
select min(a), min(a) from t;
insert into t values(1, -1), (2, -2), (3, 1), (4, NULL);
select max(a) from t;
select min(b) from t;
select max(b*b) from t;
select min(b*b) from t;
--sorted_result
select group_concat(b, b) from t group by a;

# TestClusterIndexMaxMinEliminator
drop table if exists t;
set @@tidb_enable_clustered_index = 1;
create table t (a int, b int, c int, primary key(a, b));
insert into t values (0, 0, 0);
insert into t values (1, 1, 1);
insert into t values (2, 2, 2);
insert into t values (3, 3, 3);
insert into t values (4, 4, 4);
insert into t values (5, 5, 5);
insert into t values (6, 6, 6);
insert into t values (7, 7, 7);
insert into t values (8, 8, 8);
insert into t values (9, 9, 9);
insert into t values (10, 10, 10);
select max(a), min(a+b) from t;
select max(a+b), min(a+b) from t;
select min(a), max(a), min(b), max(b) from t;
set @@tidb_enable_clustered_index = default;

# TestMaxMinFloatScalaFunc
DROP TABLE IF EXISTS T;
CREATE TABLE T(A VARCHAR(10), B VARCHAR(10), C FLOAT);
INSERT INTO T VALUES('0', "val_b", 12.191);
SELECT MAX(CASE B WHEN 'val_b'  THEN C ELSE 0 END) val_b FROM T WHERE cast(A as signed) = 0 GROUP BY a;
SELECT MIN(CASE B WHEN 'val_b'  THEN C ELSE 0 END) val_b FROM T WHERE cast(A as signed) = 0 GROUP BY a;

# TestBuildProjBelowAgg
drop table if exists t;
create table t (i int);
insert into t values (1), (1), (1),(2),(3),(2),(3),(2),(3);
select i+1 as a, count(i+2), sum(i+3), group_concat(i+4), bit_or(i+5) from t group by i, hex(i+6) order by a;

# TestFirstRowEnum
drop table if exists t;
create table t(a enum('a', 'b'));
insert into t values('a');
select a from t group by a;

# TestAggJSON
drop table if exists t;
create table t(a datetime, b json, index idx(a));
insert into t values('2019-03-20 21:50:00', '["a", "b", 1]');
insert into t values('2019-03-20 21:50:01', '["a", "b", 1]');
insert into t values('2019-03-20 21:50:02', '["a", "b", 1]');
insert into t values('2019-03-20 21:50:03', '{"k1": "value", "k2": [10, 20]}');
insert into t values('2019-03-20 21:50:04', '{"k1": "value", "k2": [10, 20]}');
insert into t values('2019-03-20 21:50:05', '{"k1": "value", "k2": [10, 20]}');
insert into t values('2019-03-20 21:50:06', '"hello"');
insert into t values('2019-03-20 21:50:07', '"hello"');
insert into t values('2019-03-20 21:50:08', '"hello"');
set @@sql_mode='';
select b from t group by a order by a;
select min(b) from t group by a order by a;
select max(b) from t group by a order by a;
set @@sql_mode=default;

# TestIssue10099
drop table if exists t;
create table t(a char(10), b char(10));
insert into t values('1', '222'), ('12', '22');
select count(distinct a, b) from t;
select approx_count_distinct( a, b) from t;

# TestIssue10098
drop table if exists t;
create table t(a char(10), b char(10));
insert into t values('1', '222'), ('12', '22');
select group_concat(distinct a, b) from t;

# TestIssue10608
drop table if exists t, s;
create table t(a int);
create table s(a int, b int);
insert into s values(100292, 508931), (120002, 508932);
insert into t values(508931), (508932);
select (select  /*+ stream_agg() */ group_concat(concat(123,'-')) from t where t.a = s.b group by t.a) as t from s;
select (select  /*+ hash_agg() */ group_concat(concat(123,'-')) from t where t.a = s.b group by t.a) as t from s;
CREATE TABLE `t49`(`c0` char(1) DEFAULT '1',  `c2` char(1) DEFAULT NULL,  UNIQUE KEY `c2` (`c2`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
INSERT INTO `t49` VALUES ('0','0'),('0','1');
CREATE TABLE `t0` (`c0` blob DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
INSERT INTO `t0` VALUES (_binary ']'),(_binary '777926278'),(_binary '0.2136404982804636'),(_binary '1901362489'),(_binary '1558203848'),(''),(_binary '1830406335'),(''),(_binary '0'),(NULL),(_binary '601930250'),(_binary '1558203848'),(_binary '-122008948'),(_binary '-2053608489'),(_binary 'hb/vt  <7'),(_binary 'RC&2*'),(_binary '1'),(_binary '-1722334316'),(_binary '1830406335'),(_binary '1372126029'),(_binary '882291196'),(NULL),(_binary '-399693596');
CREATE ALGORITHM=TEMPTABLE DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `v0` (`c0`, `c1`, `c2`) AS SELECT NULL AS `NULL`,`t49`.`c2` AS `c2`,(((CASE _UTF8MB4'I되EkfIO퀶' WHEN NULL THEN `t49`.`c0` WHEN `t49`.`c2` THEN `t0`.`c0` ELSE (CASE `t49`.`c0` WHEN _UTF8MB4'%' THEN 1035293362 ELSE _UTF8MB4',' END) END))<<(`t49`.`c0`)) AS `(((CASE 'I되EkfIO퀶' WHEN NULL THEN t49.c0 WHEN t49.c2 THEN t0.c0 ELSE (CASE t49.c0 WHEN '%' THEN 1035293362 ELSE ',' END ) END ))<<(t49.c0))` FROM (`t0`) JOIN `t49` WHERE TRUE;
SELECT /*+ STREAM_AGG()*/v0.c0 FROM t49, v0 LEFT OUTER JOIN t0 ON ('Iw') GROUP BY true;

# TestPR15242ShallowCopy
drop table if exists t;
create table t(a json);
insert into t values ('{"id": 1,"score":23}');
insert into t values ('{"id": 2,"score":23}');
insert into t values ('{"id": 1,"score":233}');
insert into t values ('{"id": 2,"score":233}');
insert into t values ('{"id": 3,"score":233}');
set tidb_max_chunk_size = 2;
select max(JSON_EXTRACT(a, '$.score')) as max_score,JSON_EXTRACT(a,'$.id') as id from t group by id order by id;
set tidb_max_chunk_size = default;

# TestIssue15690
set tidb_max_chunk_size = 2;
drop table if exists t;
create table t(a int);
insert into t values(null),(null);
insert into t values(0),(2),(2),(4),(8);
--enable_warnings
select /*+ stream_agg() */ distinct * from t;
--disable_warnings
drop table if exists t;
create table t(a float);
insert into t values(null),(null),(null),(null);
insert into t values(1.1),(1.1);
--enable_warnings
select /*+ stream_agg() */ distinct * from t;
--disable_warnings
drop table if exists t;
create table t(a decimal(5,1));
insert into t values(null),(null),(null);
insert into t values(1.1),(2.2),(2.2);
--enable_warnings
select /*+ stream_agg() */ distinct * from t;
--disable_warnings
drop table if exists t;
create table t(a datetime);
insert into t values(null);
insert into t values("2019-03-20 21:50:00"),("2019-03-20 21:50:01"), ("2019-03-20 21:50:00");
--enable_warnings
select /*+ stream_agg() */ distinct * from t;
--disable_warnings
drop table if exists t;
create table t(a json);
insert into t values(null),(null),(null),(null);
--enable_warnings
select /*+ stream_agg() */ distinct * from t;
--disable_warnings
drop table if exists t;
create table t(a char);
insert into t values(null),(null),(null),(null);
insert into t values('a'),('b');
--enable_warnings
select /*+ stream_agg() */ distinct * from t;
--disable_warnings
set tidb_max_chunk_size = default;

# TestIssue15958
set tidb_max_chunk_size = 2;
drop table if exists t;
create table t(y year);
insert into t values (2020), (2000), (2050);
select sum(y) from t;
select avg(y) from t;
set tidb_max_chunk_size = default;

# TestIssue17216
drop table if exists t1;
CREATE TABLE t1 (
	  pk int(11) NOT NULL,
	  col1 decimal(40,20) DEFAULT NULL
	);
INSERT INTO t1 VALUES (2084,0.02040000000000000000),(35324,0.02190000000000000000),(43760,0.00510000000000000000),(46084,0.01400000000000000000),(46312,0.00560000000000000000),(61632,0.02730000000000000000),(94676,0.00660000000000000000),(102244,0.01810000000000000000),(113144,0.02140000000000000000),(157024,0.02750000000000000000),(157144,0.01750000000000000000),(182076,0.02370000000000000000),(188696,0.02330000000000000000),(833,0.00390000000000000000),(6701,0.00230000000000000000),(8533,0.01690000000000000000),(13801,0.01360000000000000000),(20797,0.00680000000000000000),(36677,0.00550000000000000000),(46305,0.01290000000000000000),(76113,0.00430000000000000000),(76753,0.02400000000000000000),(92393,0.01720000000000000000),(111733,0.02690000000000000000),(152757,0.00250000000000000000),(162393,0.02760000000000000000),(167169,0.00440000000000000000),(168097,0.01360000000000000000),(180309,0.01720000000000000000),(19918,0.02620000000000000000),(58674,0.01820000000000000000),(67454,0.01510000000000000000),(70870,0.02880000000000000000),(89614,0.02530000000000000000),(106742,0.00180000000000000000),(107886,0.01580000000000000000),(147506,0.02230000000000000000),(148366,0.01340000000000000000),(167258,0.01860000000000000000),(194438,0.00500000000000000000),(10307,0.02850000000000000000),(14539,0.02210000000000000000),(27703,0.00050000000000000000),(32495,0.00680000000000000000),(39235,0.01450000000000000000),(52379,0.01640000000000000000),(54551,0.01910000000000000000),(85659,0.02330000000000000000),(104483,0.02670000000000000000),(109911,0.02040000000000000000),(114523,0.02110000000000000000),(119495,0.02120000000000000000),(137603,0.01910000000000000000),(154031,0.02580000000000000000);
SELECT count(distinct col1) FROM t1;

# TestIssue23277
drop table if exists t;
create table t(a tinyint(1));
insert into t values (-120), (127);
--sorted_result
select avg(a) from t group by a;
drop table t;
create table t(a smallint(1));
insert into t values (-120), (127);
--sorted_result
select avg(a) from t group by a;
drop table t;
create table t(a mediumint(1));
insert into t values (-120), (127);
--sorted_result
select avg(a) from t group by a;
drop table t;
create table t(a int(1));
insert into t values (-120), (127);
--sorted_result
select avg(a) from t group by a;
drop table t;
create table t(a bigint(1));
insert into t values (-120), (127);
--sorted_result
select avg(a) from t group by a;
drop table t;

# TestAvgDecimal
drop table if exists td;
create table td (col_bigint bigint(20), col_smallint smallint(6));
insert into td values (null, 22876);
insert into td values (9220557287087669248, 32767);
insert into td values (28030, 32767);
insert into td values (-3309864251140603904,32767);
insert into td values (4,0);
insert into td values (null,0);
insert into td values (4,-23828);
insert into td values (54720,32767);
insert into td values (0,29815);
insert into td values (10017,-32661);
--sorted_result
SELECT AVG( col_bigint / col_smallint) AS field1 FROM td;
--sorted_result
SELECT AVG(col_bigint) OVER (PARTITION BY col_smallint) as field2 FROM td where col_smallint = -23828;
drop table td;

# TestIssue23314
drop table if exists t1;
create table t1(col1 time(2) NOT NULL);
insert into t1 values("16:40:20.01");
select col1 from t1 group by col1;

# TestIssue35295
drop table if exists t100;
set @@tidb_partition_prune_mode = 'static';
CREATE TABLE t100 (
ID bigint(20) unsigned NOT NULL AUTO_INCREMENT,
col1 int(10) NOT NULL DEFAULT '0' COMMENT 'test',
money bigint(20) NOT NULL COMMENT 'test',
logtime datetime NOT NULL COMMENT '记录时间',
PRIMARY KEY (ID,logtime)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin AUTO_INCREMENT=1 COMMENT='test'
PARTITION BY RANGE COLUMNS(logtime) (
PARTITION p20220608 VALUES LESS THAN ("20220609"),
PARTITION p20220609 VALUES LESS THAN ("20220610"),
PARTITION p20220610 VALUES LESS THAN ("20220611"),
PARTITION p20220611 VALUES LESS THAN ("20220612"),
PARTITION p20220612 VALUES LESS THAN ("20220613"),
PARTITION p20220613 VALUES LESS THAN ("20220614"),
PARTITION p20220614 VALUES LESS THAN ("20220615"),
PARTITION p20220615 VALUES LESS THAN ("20220616"),
PARTITION p20220616 VALUES LESS THAN ("20220617"),
PARTITION p20220617 VALUES LESS THAN ("20220618"),
PARTITION p20220618 VALUES LESS THAN ("20220619"),
PARTITION p20220619 VALUES LESS THAN ("20220620"),
PARTITION p20220620 VALUES LESS THAN ("20220621"),
PARTITION p20220621 VALUES LESS THAN ("20220622"),
PARTITION p20220622 VALUES LESS THAN ("20220623"),
PARTITION p20220623 VALUES LESS THAN ("20220624"),
PARTITION p20220624 VALUES LESS THAN ("20220625")
 );
insert into t100(col1,money,logtime) values (100,10,'2022-06-09 00:00:00');
insert into t100(col1,money,logtime) values (100,10,'2022-06-10 00:00:00');
SELECT /*+STREAM_AGG()*/ col1,sum(money) FROM t100 WHERE logtime>='2022-06-09 00:00:00' AND col1=100 ;
SELECT /*+HASH_AGG()*/ col1,sum(money) FROM t100 WHERE logtime>='2022-06-09 00:00:00' AND col1=100 ;
set @@tidb_partition_prune_mode = default;

# TestIssue27751
drop table if exists t;
create table test.t(nname char(20));
insert into test.t values ('2'),(null),('11'),('2'),(null),('2'),(null),('11'),('33');
set @@group_concat_max_len=0;
select group_concat(nname order by 1 separator '#' ) from t;
select group_concat(nname order by 1 desc separator '#' ) from t;
set @@group_concat_max_len=default;

# TestIssue44795
DROP TABLE IF EXISTS customer, orders;
CREATE TABLE `customer` (  `C_CUSTKEY` bigint(20) NOT NULL,  `C_NAME` varchar(25) NOT NULL,  `C_ADDRESS` varchar(40) NOT NULL,  `C_NATIONKEY` bigint(20) NOT NULL,  `C_PHONE` char(15) NOT NULL,  `C_ACCTBAL` decimal(15,2) NOT NULL,  `C_MKTSEGMENT` char(10) NOT NULL,  `C_COMMENT` varchar(117) NOT NULL,  PRIMARY KEY (`C_CUSTKEY`) /*T![clustered_index] CLUSTERED */) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
CREATE TABLE `orders` (  `O_ORDERKEY` bigint(20) NOT NULL,  `O_CUSTKEY` bigint(20) NOT NULL,  `O_ORDERSTATUS` char(1) NOT NULL,  `O_TOTALPRICE` decimal(15,2) NOT NULL,  `O_ORDERDATE` date NOT NULL,  `O_ORDERPRIORITY` char(15) NOT NULL,  `O_CLERK` char(15) NOT NULL,  `O_SHIPPRIORITY` bigint(20) NOT NULL,  `O_COMMENT` varchar(79) NOT NULL,  PRIMARY KEY (`O_ORDERKEY`) /*T![clustered_index] CLUSTERED */) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
set tidb_opt_agg_push_down=ON;
explain format='brief' SELECT  /*+ hash_join_build(customer) */ c_custkey, count(o_orderkey)  as  c_count  from customer left join orders on c_custkey = o_custkey and o_comment not like '%special%requests%'        group by c_custkey;
set tidb_opt_agg_push_down=default;

# TestIssue26885
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (c1 ENUM('a', '', 'b'));
INSERT INTO t1 (c1) VALUES ('b');
INSERT INTO t1 (c1) VALUES ('');
INSERT INTO t1 (c1) VALUES ('a');
INSERT INTO t1 (c1) VALUES ('');
INSERT INTO t1 (c1) VALUES (0);
select * from t1;
--sorted_result
select c1 + 0 from t1;
SELECT c1 + 0, COUNT(c1) FROM t1 GROUP BY c1 order by c1;
alter table t1 add index idx(c1); ;
--sorted_result
select c1 + 0 from t1;
SELECT c1 + 0, COUNT(c1) FROM t1 GROUP BY c1 order by c1;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (c1 ENUM('a', 'b', 'c'));
INSERT INTO t1 (c1) VALUES ('b');
INSERT INTO t1 (c1) VALUES ('a');
INSERT INTO t1 (c1) VALUES ('b');
INSERT INTO t1 (c1) VALUES ('c');
INSERT INTO t1 (c1) VALUES (0);
select * from t1;
SELECT c1 + 0, COUNT(c1) FROM t1 GROUP BY c1 order by c1;
SET sql_mode = default;
