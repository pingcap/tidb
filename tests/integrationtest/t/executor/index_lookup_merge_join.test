# TestIssue28052
drop table if exists t;
CREATE TABLE `t` (`col_tinyint_key_signed` tinyint(4) DEFAULT NULL,`col_year_key_signed` year(4) DEFAULT NULL,KEY `col_tinyint_key_signed` (`col_tinyint_key_signed`),KEY `col_year_key_signed` (`col_year_key_signed`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
insert into t values(-100,NULL);
select /*+ inl_merge_join(t1, t2) */ count(*) from t t1 right join t t2 on t1. `col_year_key_signed` = t2. `col_tinyint_key_signed`;

# TestIssue18631
drop table if exists t1, t2;
create table t1(a int, b int, c int, d int, primary key(a,b,c));
create table t2(a int, b int, c int, d int, primary key(a,b,c));
insert into t1 values(1,1,1,1),(2,2,2,2),(3,3,3,3);
insert into t2 values(1,1,1,1),(2,2,2,2);
explain format = 'brief' select /*+ inl_merge_join(t1,t2) */ * from t1 left join t2 on t1.a = t2.a and t1.c = t2.c and t1.b = t2.b order by t1.a desc;
select /*+ inl_merge_join(t1,t2) */ * from t1 left join t2 on t1.a = t2.a and t1.c = t2.c and t1.b = t2.b order by t1.a desc;

# TestIssue19408
drop table if exists t1, t2;
create table t1  (c_int int, primary key(c_int));
create table t2  (c_int int, unique key (c_int)) partition by hash (c_int) partitions 4;
insert into t1 values (1), (2), (3), (4), (5);
insert into t2 select * from t1;
begin;
delete from t1 where c_int = 1;
--sorted_result
select /*+ INL_MERGE_JOIN(t1,t2) */ * from t1, t2 where t1.c_int = t2.c_int;
--sorted_result
select /*+ INL_JOIN(t1,t2) */ * from t1, t2 where t1.c_int = t2.c_int;
--sorted_result
select /*+ INL_HASH_JOIN(t1,t2) */ * from t1, t2 where t1.c_int = t2.c_int;
commit;

# TestIssue20137
drop table if exists t1, t2;
create table t1 (id bigint(20) unsigned, primary key(id));
create table t2 (id bigint(20) unsigned);
insert into t1 values (8738875760185212610);
insert into t1 values (9814441339970117597);
insert into t2 values (8738875760185212610);
insert into t2 values (9814441339970117597);
select /*+ INL_MERGE_JOIN(t1, t2) */ * from t2 left join t1 on t1.id = t2.id order by t1.id;

# TestIndexJoinOnSinglePartitionTable
set @@tidb_opt_advanced_join_hint=0;
set @@tidb_partition_prune_mode= 'static';
drop table if exists t1, t2;
create table t1  (c_int int, c_str varchar(40), primary key (c_int) ) partition by range (c_int) ( partition p0 values less than (10), partition p1 values less than maxvalue );
create table t2  (c_int int, c_str varchar(40), primary key (c_int) ) partition by range (c_int) ( partition p0 values less than (10), partition p1 values less than maxvalue );
insert into t1 values (1, 'Alice');
insert into t2 values (1, 'Bob');
analyze table t1, t2;
select /*+ INL_MERGE_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
explain format = 'brief' select /*+ INL_MERGE_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
show warnings;
select /*+ INL_HASH_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
explain format = 'brief' select /*+ INL_HASH_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
select /*+ INL_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
explain format = 'brief' select /*+ INL_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
set @@tidb_partition_prune_mode= 'dynamic';
drop table if exists t1, t2;
create table t1  (c_int int, c_str varchar(40), primary key (c_int) ) partition by range (c_int) ( partition p0 values less than (10), partition p1 values less than maxvalue );
create table t2  (c_int int, c_str varchar(40), primary key (c_int) ) partition by range (c_int) ( partition p0 values less than (10), partition p1 values less than maxvalue );
insert into t1 values (1, 'Alice');
insert into t2 values (1, 'Bob');
analyze table t1, t2;
select /*+ INL_MERGE_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
explain format = 'brief' select /*+ INL_MERGE_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
show warnings;
select /*+ INL_HASH_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
explain format = 'brief' select /*+ INL_HASH_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
select /*+ INL_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
explain format = 'brief' select /*+ INL_JOIN(t1,t2) */ * from t1 join t2 partition(p0) on t1.c_int = t2.c_int and t1.c_str < t2.c_str;
set @@tidb_opt_advanced_join_hint=DEFAULT;
set @@tidb_partition_prune_mode= DEFAULT;

# TestIssue20400
drop table if exists t, s;
create table s(a int, index(a));
create table t(a int);
insert into t values(1);
select /*+ hash_join(t,s)*/ * from t left join s on t.a=s.a and t.a>1;
select /*+ inl_merge_join(t,s)*/ * from t left join s on t.a=s.a and t.a>1;

# TestIssue20549
drop table if exists t1, t2;
CREATE TABLE `t1` (`id` bigint(20) NOT NULL AUTO_INCREMENT, `t2id` bigint(20) DEFAULT NULL, PRIMARY KEY (`id`), KEY `t2id` (`t2id`));
INSERT INTO `t1` VALUES (1,NULL);
CREATE TABLE `t2` (`id` bigint(20) NOT NULL AUTO_INCREMENT, PRIMARY KEY (`id`));
SELECT /*+ INL_MERGE_JOIN(t1,t2)  */ 1 from t1 left outer join t2 on t1.t2id=t2.id;
SELECT /*+ HASH_JOIN(t1,t2)  */ 1 from t1 left outer join t2 on t1.t2id=t2.id;

# TestIssue24473
drop table if exists x;
CREATE TABLE `x` (  `a` enum('y','b','1','x','0','null') DEFAULT NULL,  KEY `a` (`a`));
insert into x values("x"),("x"),("b"),("y");
--sorted_result
SELECT /*+ merge_join (t2,t3) */ t2.a,t3.a FROM x t2 inner join x t3 on t2.a = t3.a;
--sorted_result
SELECT /*+ inl_merge_join (t2,t3) */ t2.a,t3.a FROM x t2 inner join x t3 on t2.a = t3.a;

# TestIssue25669
drop table if exists x;
CREATE TABLE `x` (  `a` set('y','b','1','x','0','null') DEFAULT NULL,  KEY `a` (`a`));
insert into x values("x"),("x"),("b"),("y");
--sorted_result
SELECT /*+ merge_join (t2,t3) */ t2.a,t3.a FROM x t2 inner join x t3 on t2.a = t3.a;
--sorted_result
SELECT /*+ inl_merge_join (t2,t3) */ t2.a,t3.a FROM x t2 inner join x t3 on t2.a = t3.a;

