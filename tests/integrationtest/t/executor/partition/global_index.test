set tidb_enable_global_index=true;

# Prepare data
drop table if exists p;
create table p (id int, c int) partition by range (c) (
partition p0 values less than (4),
partition p1 values less than (7),
partition p2 values less than (10));
alter table p add unique idx(id);
insert into p values (1,3), (3,4), (5,6), (7,9);
analyze table p;
drop table if exists t;
create table t (id int, c int);
insert into t values (1, 3);
analyze table t;

# TestGlobalIndexScan
select id from p use index (idx) order by id;

# TestGlobalIndexDoubleRead
--sorted_result
select * from p use index (idx);

# TestAggWithGlobalIndex
select count(*) from p use index (idx);
select count(*) from p partition(p0) use index (idx);

# TestGlobalIndexSelectSpecifiedPartition
select * from p partition(p0) use index (idx);

# TestGlobalIndexScanSpecifiedPartition
select id from p partition(p0) use index (idx);

# TestGlobalIndexJoin
--sorted_result
select /*+ INL_JOIN(p, t) */ * from p inner join t on p.id = t.id;
select /*+ INL_JOIN(p, t) */ p.id from p inner join t on p.id = t.id;

# TestGlobalIndexJoinSpecifiedPartition
--sorted_result
select /*+ INL_JOIN(p, t) */ * from p partition(p0) inner join t on p.id = t.id;
select /*+ INL_JOIN(p, t) */ p.id from p partition(p0) inner join t on p.id = t.id;


# Prepare tables with clustered index
drop table if exists p, t;
create table p (id int, c int, d int, e int, primary key(d, c) clustered) partition by range (c) (
partition p0 values less than (4),
partition p1 values less than (7),
partition p2 values less than (10));
alter table p add unique idx(id);
insert into p values (1,3,1,1), (3,4,3,3), (5,6,5,5), (7,9,7,7);
analyze table p;
create table t (id int, c int);
insert into t values (1, 3);
analyze table t;

# TestGlobalIndexScanForClusteredSpecifiedPartition
select id from p partition(p0) use index (idx);

# TestGlobalIndexJoinForClusteredSpecifiedPartition
select /*+ INL_JOIN(p, t) */ * from p partition(p0) inner join t on p.id = t.id;
select /*+ INL_JOIN(p, t) */ p.id from p partition(p0) inner join t on p.id = t.id;


# TestIssue21732
drop table if exists p;
create table p (a int, b int GENERATED ALWAYS AS (3*a-2*a) VIRTUAL) partition by hash(b) partitions 2;
alter table p add unique index idx (a);
insert into p (a) values  (1),(2),(3);
analyze table p;
--sorted_result
select * from p use index (idx);


# TestGlobalIndexForIssue40149
drop table if exists test_t1;
CREATE TABLE test_t1 (
	a int(11) NOT NULL,
	b int(11) DEFAULT NULL,
	c int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
PARTITION BY RANGE (c) (
    PARTITION p0 VALUES LESS THAN (10),
    PARTITION p1 VALUES LESS THAN (MAXVALUE)
);
alter table test_t1 add unique  p_a (a);
insert into test_t1 values (1,1,1);

explain format='brief' select * from test_t1 where a = 1;
select * from test_t1 where a = 1;

analyze table test_t1;
explain format='brief' select * from test_t1 where a = 1;
select * from test_t1 where a = 1;


# TestGlobalIndexMerge
SET session tidb_enable_index_merge = ON;
drop table if exists t;
CREATE TABLE t (
	a int(11) NOT NULL,
 	b int(11) DEFAULT NULL,
 	c int(11) DEFAULT NULL,
	d int(11) NOT NULL AUTO_INCREMENT,
	KEY idx_bd (b, c),
	UNIQUE KEY uidx_ac(a)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
PARTITION BY RANGE (c) (
 	PARTITION p0 VALUES LESS THAN (10),
 	PARTITION p1 VALUES LESS THAN (MAXVALUE)
);
insert into t values (1,1,1,1),(2,2,2,2),(3,3,3,3),(4,4,4,4),(5,5,5,5),(6,6,6,6),(7,7,7,7),(8,8,8,8);
analyze table t;
--echo # when index_merge has global index as its partial path, ignore it.
explain select /*+ use_index_merge(t, uidx_ac, idx_bc) */ * from t where a=1 or b=2;
--sorted_result
select /*+ use_index_merge(t, uidx_ac, idx_bc) */ * from t where a=1 or b=2;

SET session tidb_enable_index_merge = DEFAULT;


# TestListColumnsPartitionWithGlobalIndex
## Test generated column with global index
drop table if exists t;
## Test for virtual generated column with global index
create table t (a varchar(10), b varchar(1) GENERATED ALWAYS AS (substr(a,1,1)) VIRTUAL) partition by list columns(b) (partition p0 values in ('a','c'), partition p1 values in ('b','d'));
alter table t add unique index (a);
insert into t (a) values  ('aaa'),('abc'),('acd');
analyze table t;
select a from t partition (p0) order by a;
select * from t where a = 'abc' order by a;
update t set a='bbb' where a = 'aaa';
admin check table t;
select a from t order by a;
select a from t partition (p0) order by a;
select a from t partition (p1) order by a;
select * from t where a = 'bbb' order by a;
-- error 1062
insert into t (a) values  ('abc');
insert into t (a) values ('abc') on duplicate key update a='bbc';
select a from t order by a;
select * from t where a = 'bbc';
select a from t partition (p0) order by a;
select a from t partition (p1) order by a;
explain format = 'brief' select a from t partition (p1) order by a;

drop table if exists t;
## Test for stored generated column with global index
create table t (a varchar(10), b varchar(1) GENERATED ALWAYS AS (substr(a,1,1)) STORED) partition by list columns(b) (partition p0 values in ('a','c'), partition p1 values in ('b','d'));
alter table t add unique index (a);
insert into t (a) values  ('aaa'),('abc'),('acd');
analyze table t;
select a from t partition (p0) order by a;
select * from t where a = 'abc' order by a;
update t set a='bbb' where a = 'aaa';
admin check table t;
select a from t order by a;
select a from t partition (p0) order by a;
select a from t partition (p1) order by a;
select * from t where a = 'bbb' order by a;
-- error 1062
insert into t (a) values  ('abc');
insert into t (a) values ('abc') on duplicate key update a='bbc';
select a from t order by a;
select * from t where a = 'bbc';
select a from t partition (p0) order by a;
select a from t partition (p1) order by a;
explain format = 'brief' select a from t partition (p1) order by a;

