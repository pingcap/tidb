# TestAnalyzeMVIndexWarnings
drop table if exists t;
create table t(a int, b int, c int, j json,
index(a), index(b),
index idx(a, b, (cast(j as signed array)), c),
index idx2(a, b, (cast(j->'$.str' as char(10) array)), c));
set tidb_analyze_version=2;
--enable_warnings
analyze table t;
analyze table t index idx;
set tidb_analyze_version=1;
analyze table t;
analyze table t index idx;
analyze table t index a;
analyze table t index a, idx, idx2;
--disable_warnings


# TestIndexMergeJSONMemberOf
drop table if exists t;
create table t(
a int, j0 json, j1 json,
index j0_0((cast(j0->'$.path0' as signed array))),
index j0_1((cast(j0->'$.path1' as signed array))),
index j0_string((cast(j0->'$.path_string' as char(10) array))),
index j0_date((cast(j0->'$.path_date' as date array))),
index j1((cast(j1 as signed array))));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where (1 member of (j0->'$.path0'));
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.XXX')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and (2 member of (j1)) and a<10;
explain format = 'brief' select /*+ use_index(t, j0_0) */ * from t where (1 member of (j0->'$.path0'));
explain format = 'brief' select /*+ use_index(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select * from t use index(j0_0) where (1 member of (j0->'$.path0'));
explain format = 'brief' select * from t use index(j0_1) where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select * from t force index(j0_0) where (1 member of (j0->'$.path0'));
explain format = 'brief' select * from t force index(j0_1) where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j1) */ * from t where (1 member of (j0->'$.path1')) and (2 member of (j1)) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '[1, 2, 3]');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '[1, 2, 3]');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('[1, 2, 3]', (j0->'$.path0'));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '[1, 2, 3]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '[1, 2, 3]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('[1, 2, 3]', (j0->'$.path0')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '1');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '1');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('1', (j0->'$.path0'));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '1') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '1') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('1', (j0->'$.path0')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where ("a" member of (j0->'$.path_string'));
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where ("a" member of (j0->'$.path_string')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_contains((j0->'$.path_string'), '["a", "b", "c"]');
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_contains((j0->'$.path_string'), '["a", "b", "c"]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_overlaps((j0->'$.path_string'), '["a", "b", "c"]');
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_overlaps((j0->'$.path_string'), '["a", "b", "c"]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where ("2023-01-01" member of (j0->'$.path_date'));
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where ("2023-01-01" member of (j0->'$.path_date')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_contains((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date)));
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_contains((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date))) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_overlaps((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date)));
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_overlaps((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date))) and a<10;


# TestDNFOnMVIndex
drop table if exists t;
create table t(a int, b int, c int, j json,
index idx1((cast(j as signed array))),
index idx2(a, b, (cast(j as signed array)), c));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (1 member of (j)) or (2 member of (j));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where ((1 member of (j)) or (2 member of (j))) and (a > 10);
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (json_overlaps(j, '[1, 2]')) or (json_overlaps(j, '[3, 4]'));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where ((json_overlaps(j, '[1, 2]')) or (json_overlaps(j, '[3, 4]'))) and (a > 10);
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (json_contains(j, '[1, 2]')) or (json_contains(j, '[3, 4]'));
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where (a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)));
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where (a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)) and c=14);
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where ((a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)))) and (c > 10);


# TestCompositeMVIndex
drop table if exists t;
create table t(a int, b int , c int, j json,
index idx(a, b, (cast(j as signed array)), c),
index idx2(a, b, (cast(j->'$.str' as char(10) array)), c));
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2 and (3 member of (j)) and c=4;
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2 and (3 member of (j));
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2;
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1;
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2 and ('3' member of (j->'$.str')) and c=4;
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2 and ('3' member of (j->'$.str'));
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2;
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1;
explain format = 'brief' select /*+ use_index(t, idx) */ * from t where a=1 and b=2 and (3 member of (j)) and c=4;
explain format = 'brief' select * from t use index(idx) where a=1 and b=2 and (3 member of (j));
explain format = 'brief' select /*+ use_index(t, idx) */ * from t where a=1 and b=2;
explain format = 'brief' select * from t use index(idx) where a=1;
explain format = 'brief' select * from t force index(idx) where a=1 and b=2 and (3 member of (j));
explain format = 'brief' select * from t force index(idx) where a=1;


# TestMVIndexSelection
drop table if exists t;
create table t(a int, j json,
index i_int((cast(j->'$.int' as signed array))));
explain format = 'brief' select (j->'$.int') from t where (1 member of (j->'$.int'));
explain format = 'brief' select * from t where (1 member of (j->'$.int'));
explain format = 'brief' select * from t where (1 member of (j->'$.int')) and a<10;
explain format = 'brief' select (j->'$.int') from t where json_contains((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_contains((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_contains((j->'$.int'), '[1, 2, 3]') and a<10;
explain format = 'brief' select (j->'$.int') from t where json_overlaps((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_overlaps((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_overlaps((j->'$.int'), '[1, 2, 3]') and a<10;


# TestMVIndexIndexMergePlanCache
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
--enable_warnings
prepare st from 'select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j))';
--disable_warnings
execute st;
execute st;
select @@last_plan_from_cache;


# TestMVIndexPointGet
drop table if exists t;
create table t(j json, unique kj((cast(j as signed array))));
explain select j from t where j=1;
explain select j from t where j=1 or j=2;
explain select j from t where j in (1, 2);


# TestEnforceMVIndex
drop table if exists t;
create table t(a int, j json, index kj((cast(j as signed array))));
explain format = 'brief' select /*+ use_index(t, kj) */ * from t;
explain format = 'brief' select /*+ use_index(t, kj) */ a from t;
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where a<10;
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j)) and a=10;
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j)) or a=10;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ a from t;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t where a<10;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j)) or a=10;


# TestMVIndexInvisible
drop table if exists t;
create table t(a int, j json, index kj((cast(j as signed array))));
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
ALTER TABLE t ALTER INDEX kj INVISIBLE;
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
explain format='brief' select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j));
ALTER TABLE t ALTER INDEX kj VISIBLE;
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));


# TestMVIndexFullScan
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
insert into t values ('[1]');
insert into t values ('[1, 2]');
insert into t values ('[]');
insert into t values (NULL);
select /*+ use_index_merge(t, kj) */ count(*) from t;
select /*+ use_index_merge(t, kj) */ count(*) from t where (1 member of (j));
select /*+ use_index_merge(t, kj) */ count(*) from t where json_contains((j), '[1]');
select /*+ use_index_merge(t, kj) */ count(*) from t where json_overlaps((j), '[1]');
select /*+ use_index(t, kj) */ count(*) from t;


# TestMVIndexEmptyArray
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
insert into t values ('[1]');
insert into t values ('[1, 2]');
insert into t values ('[]');
insert into t values (NULL);
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1, 2]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1, 2]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1, 10]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1, 10]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1, 2]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1, 2]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1, 10]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1, 10]');


# TestIndexMergeJSONMemberOf2
drop table if exists t;
create table t(
a int, j0 json, j1 json,
index j0_0((cast(j0->'$.path0' as signed array))));
insert into t values(1, '{"path0" : [1,2,3]}', null );
select /*+ no_index_merge() */ a from t where (1 member of (j0->'$.path0'));
select /*+ no_index_merge() */ a from t where ('1' member of (j0->'$.path0'));
select /*+ use_index_merge(t, j0_0) */ a from t where (1 member of (j0->'$.path0'));
select /*+ use_index_merge(t, j0_0) */ a from t where ('1' member of (j0->'$.path0'));

drop table if exists t;
create table t(a int, b int, c int, d json, index iad(a, (cast(d->'$.b' as signed array))));
insert into t value(1,1,1, '{"b":[1,2,3,4]}');
insert into t value(2,2,2, '{"b":[3,4,5,6]}');
set tidb_analyze_version=2;
analyze table t;
explain select * from t use index (iad) where a = 1;
explain select * from t use index (iad) where a = 1 and (2 member of (d->'$.b'));

# TestMultiValuedIndexWithoutRelatedColumnCondition
drop table if exists t;
create table t(a int, d json, index iad(a, (cast(d->'$.b' as signed array))));
insert into t value(1,'{"b":[]}'), (2,'{"b":[]}');
select * from t use index (iad) where a = 1;
select * from t ignore index (iad) where a = 1;
drop table if exists t;
create table t (j json, key mvi( (cast(j as char(5) array)) ) );
insert into t values ('[]');
insert into t values ('["abc"]');
select * from t use index (mvi) where json_contains(j, '[]');
select * from t ignore index (mvi) where json_contains(j, '[]');

# TestIssue50298
drop table if exists t;
create table t(a int, b json);
insert into t value (1, '{"a":[1,2,3], "b": [2,3,4]}');
analyze table t;
alter table t add index ibb( (cast(b->'$.b' as signed array)) );
explain select /*+ use_index_merge(t) */ * from t where 10 member of (b->'$.b');

# TestIssue50420
drop table if exists t, t1;
create table t (j json, i bigint(20) not null primary key, key mvi((cast(j as unsigned array))));
insert into t values ('[1,2,3]', 1);
explain format=brief select * from t force index(mvi) where isnull(i) or json_contains(j, '1');
select * from t force index(mvi) where isnull(i) or json_contains(j, '1');
create table t1 (j json, a bigint(20), b int, primary key(a,b), key mvi((cast(j as unsigned array))));
explain format=brief select /*+ use_index_merge(t1, mvi, primary) */ * from t1 where a = 1 or json_contains(j, '1');
explain format=brief select /*+ use_index_merge(t1, mvi, primary) */ * from t1 where (a = 1 and b = 2) or json_contains(j, '1');

# TestExpandANDListWithNestedORList
drop table if exists t, t1;
create table t (a int, b varchar(30), c float, j json, pk int primary key,
key mvi1(c, (cast(j->'$.a' as unsigned array)), b),
key mvi2(a, (cast(j->'$.c' as unsigned array))),
key mvi3((cast(j->'$.d' as unsigned array)), c),
key idx(b, c)
);

explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
 json_overlaps(j->'$.a', '[4,5,6]') or
 (2 member of (j->'$.a'))
) and
c = 10 and
a = 20;

explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
 c = 1 or
 c = 2 or
 c = 3
) and
json_overlaps(j->'$.a', '[4,5,6]');

explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
 c = 1 or
 c = 2 or
 c = 3
) and
(json_contains(j->'$.a', '[4,5,6]'));

explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
 c = 1 or
 c = 2 or
 c = 3
) and
json_contains(j->'$.a', '[2]');

explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
 1 member of (j->'$.a') or
 2 member of (j->'$.a')
) and
c = 10 and
a = 20;

explain format=brief select /*+ use_index_merge(t, mvi1) */ * from t where
(
 1 member of (j->'$.a') or
 2 member of (j->'$.d')
) and
a = 20;

explain format=brief select /*+ use_index_merge(t, mvi1, mvi3) */ * from t where
c = 5 and
(
 1 member of (j->'$.a') or
 2 member of (j->'$.d')
) and
a = 20;

explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, primary) */ * from t where
(
 pk = 2 or
 json_overlaps(j->'$.a', '[4,5,6]') or
 json_contains(j->'$.c', '[3]')
) and
a = 1 and
b = '2' and
c = 3;

explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, primary) */ * from t where
a = 1 and
b = '2' and
c = 3 and
(
 pk = 2 or
 (3 member of (j->'$.a')) or
 (3 member of (j->'$.c'))
);

explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, idx) */ * from t where
a = 1 and
b = '2' and
(
 c = 20 or
 (c = 10 and 3 member of (j->'$.a')) or
 3 member of (j->'$.c')
);

explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, idx) */ * from t where
a = 1 and
(json_overlaps(j->'$.a', '[4,5,6]')) and
(
 (b = '2' and c > 20) or
 c = 10 or
 3 member of (j->'$.c')
);

explain format=brief select /*+ use_index_merge(t, mvi1, mvi2, idx) */ * from t where
a = 1 and
(json_overlaps(j->'$.a', '[4,5,6]')) and
(
 (b > '2' and c = 20) or
 (c = 10) or
 (3 member of (j->'$.c'))
);

create table t1 (a int, b int, c int, d int, j json, key kb(b, (cast(j as unsigned array))), key(d, c));
explain format=brief select * from t1 where (c=1 or b=1) and (1 member of (j));
explain format=brief select * from t1 where (c=1 or b=1) and (1 member of (j)) and d=1;

# TestIssue52395
drop table if exists t;
CREATE TABLE `t` (
  `col_37` json DEFAULT NULL,
  `col_38` timestamp NOT NULL DEFAULT '2010-07-09 00:00:00',
  UNIQUE KEY `idx_14` (`col_38`,(cast(`col_37` as unsigned array))),
  UNIQUE KEY `idx_15` (`col_38`,(cast(`col_37` as unsigned array))),
  PRIMARY KEY (`col_38`) /*T![clustered_index] CLUSTERED */,
  UNIQUE KEY `idx_17` ((cast(`col_37` as unsigned array)),`col_38`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
INSERT INTO `t` VALUES('[12474495489656359869, 14407883655486982855, 4221184636468364556, 6110001961631615601, 15150776080990746179]','1970-03-12 00:00:00'),('[6085355592952464235]','1971-01-16 00:00:00'),('[5781707929468111406, 16382828507784518403]','1972-01-16 00:00:00'),('[6085355592952464235]','1972-08-02 00:00:00'),('[6085355592952464235]','1972-12-11 00:00:00'),('[6085355592952464235]','1972-12-21 00:00:00'),('[6085355592952464235]','1973-02-14 00:00:00'),('[6887567370081687232]','1973-05-04 00:00:00'),('[6085355592952464235]','1974-02-01 00:00:00'),('[6085355592952464235]','1974-04-27 00:00:00'),('[16443375232588053566, 15492284538739550474, 2631295588571312304, 15742669945672063486]','1974-06-09 00:00:00'),('[9489266093076991482, 4698969158339636571]','1975-10-26 00:00:00'),('[6085355592952464235]','1977-05-08 00:00:00'),('[898235511450526702, 6252566703278238786, 2261772813075859625]','1978-07-03 00:00:00'),(NULL,'1980-06-27 00:00:00'),('[10831919791216851694, 7541902588294758305, 6034300002828730755]','1980-07-30 00:00:00'),('[6085355592952464235]','1981-09-12 00:00:00'),('[6085355592952464235]','1982-05-30 00:00:00'),('[6085355592952464235]','1982-07-31 00:00:00'),('[4146363158315189712, 2391002653963544762]','1983-07-25 00:00:00'),('[6085355592952464235]','1985-01-26 00:00:00'),('[6085355592952464235]','1985-05-16 00:00:00'),('[9223372036854775807, 9558194088702539102, 6167960273278105650, 14757902754926577696, 16653691901076809579]','1986-03-08 00:00:00'),('[6085355592952464235]','1991-06-27 00:00:00'),('[6085355592952464235]','1991-11-22 00:00:00'),('[742183856683888275, 7870014111942346276, 3252208608007118384, 2554457559079886925, 3461660288536208965]','1991-12-01 00:00:00'),('[0, 7309322092917510049, 8282059475463020025, 9223372036854775807, 8236948484299513601]','1992-01-21 00:00:00'),('[6085355592952464235]','1992-07-30 00:00:00'),('[6085355592952464235]','1995-07-09 00:00:00'),('[4954624538838377461, 9223372036854775807]','1995-11-02 00:00:00'),('[6085355592952464235]','1997-09-24 00:00:00'),('[5541636548306836534]','1997-12-17 00:00:00'),('[2372084030128780091, 0, 8333919059399068469, 9097701366128382209, 12909943251581664025]','1998-03-08 00:00:00'),('[6085355592952464235]','1998-04-13 00:00:00'),('[6085355592952464235]','1999-04-10 00:00:00'),('[6085355592952464235]','1999-07-15 00:00:00'),('[13926602438239746596]','1999-08-08 00:00:00'),('[10622617655435321115, 12031447777564406671, 17187531506212239808, 13120343177240635444, 8528250079171510200]','1999-12-01 00:00:00'),('[3790911999833529022, 2343296225186042787, 6819537424069776784, 13270403636857415720]','2003-08-09 00:00:00'),('[10824194962777929518]','2006-11-05 00:00:00'),('[2689347729697653937, 6029425564270989071, 9613953820717421747, 9437566388707504417]','2008-02-25 00:00:00'),('[6085355592952464235]','2008-03-30 00:00:00'),('[15449121625659667298, 4541516510957888209, 1305529769721308891]','2008-11-07 00:00:00'),('[10699242186188846571, 7856577436586720260, 8851292429056441309, 11943637602148518975, 13317850842658892320]','2010-03-31 00:00:00'),('[1662225601861974430, 18092909239123653024, 11501141468789287862]','2012-04-15 00:00:00'),('[13015616341752575134]','2012-05-12 00:00:00'),('[6085355592952464235]','2012-06-13 00:00:00'),('[9806827176336778774, 6082939478820303687, 12353605732184995966, 17191985691142039533, 9223372036854775808]','2012-08-16 00:00:00'),('[6085355592952464235]','2012-10-14 00:00:00'),('[6085355592952464235]','2012-12-23 00:00:00'),('[6085355592952464235]','2013-04-17 00:00:00'),('[6085355592952464235]','2014-02-20 00:00:00'),('[6085355592952464235]','2015-08-06 00:00:00'),('[6085355592952464235]','2016-01-22 00:00:00'),('[6085355592952464235]','2016-05-27 00:00:00'),('[6085355592952464235]','2016-09-01 00:00:00'),('[6085355592952464235]','2017-01-19 00:00:00'),('[6085355592952464235]','2017-04-25 00:00:00'),('[2496954412283132814]','2017-10-20 00:00:00'),('[6011416056008097080, 8401732621063949750]','2018-10-20 00:00:00'),('[6085355592952464235]','2021-02-25 00:00:00'),('[6085355592952464235]','2021-05-23 00:00:00'),('[4765021307809451011, 166985960251921671, 7945653371704683528]','2021-08-27 00:00:00'),('[6085355592952464235]','2021-10-01 00:00:00'),('[6085355592952464235]','2023-09-08 00:00:00'),('[4298760996497097950, 16695885851907831657, 2, 211742148607907698]','2023-11-12 00:00:00'),('[6085355592952464235]','2024-11-06 00:00:00'),('[6085355592952464235]','2025-11-12 00:00:00'),('[6085355592952464235]','2026-08-05 00:00:00'),('[6085355592952464235]','2031-08-28 00:00:00'),('[6647303358869413442, 10003252368309984244, 3086718564738761942]','2031-10-01 00:00:00'),('[6085355592952464235]','2031-11-24 00:00:00'),('[6085355592952464235]','2032-04-23 00:00:00'),('[9201885267580925888, 9223372036854775808, 5257631883611568331, 11129612187092235508, 6214786545776627889]','2034-03-09 00:00:00'),('[7556387559865010847, 8798123769176200972]','2034-04-13 00:00:00'),('[13333584050314732558, 2379710530233660250, 12902416123543393674, 9259958507508213510, 17541647851839401835]','2035-02-17 00:00:00'),('[6085355592952464235]','2035-08-06 00:00:00'),('[14219119990701343056, 12146509442366889994, 11781375265446394500, 18446744073709551615, 7261133173516561900]','2035-11-08 00:00:00'),('[8809661147955879571, 4218874689382899073]','2035-12-11 00:00:00'),('[10187587245884493942, 9223372036854775807, 2, 928955973542912301]','2036-05-26 00:00:00');

EXPLAIN SELECT /*+ use_index_merge(t)*/ MIN(col_37)  FROM t WHERE col_38 BETWEEN '1984-12-13' AND '1975-01-28' OR JSON_CONTAINS(col_37, '138480458355390957') GROUP BY col_38 HAVING col_38 != '1988-03-22';
SELECT /*+ use_index_merge(t)*/ MIN(col_37)  FROM t WHERE col_38 BETWEEN '1984-12-13' AND '1975-01-28' OR JSON_CONTAINS(col_37, '138480458355390957') GROUP BY col_38 HAVING col_38 != '1988-03-22';

# TestIssue52609
drop table if exists t1;
CREATE TABLE `t1` (
  `col_44` date NOT NULL,
  `col_45` json DEFAULT NULL,
  `col_46` blob NOT NULL,
  PRIMARY KEY (`col_44`) /*T![clustered_index] CLUSTERED */,
  UNIQUE KEY `idx_16` (`col_46`(3)),
  KEY `idx_17` ((cast(`col_45` as double array)))
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
INSERT INTO t1 VALUES('1988-07-19','[0.9233398239291353, 0.9396459773262974, 0.540018481999012, 0.181978533893545]',x'652539286c5f7e6b482a7265575a');
SELECT col_44, col_45 FROM t1 WHERE NOT (col_44 BETWEEN '1980-03-18' AND '2011-10-24') GROUP BY col_46,col_45 HAVING JSON_CONTAINS(col_45, '0.540018481999012') OR JSON_OVERLAPS(col_45, '[0.5785147169732324,0.8314968898215304,0.5226516826882698]');
EXPLAIN format=brief SELECT /*+ use_index_merge(t1) */ col_44, col_45 FROM t1 WHERE NOT (col_44 BETWEEN '1980-03-18' AND '2011-10-24') GROUP BY col_46,col_45 HAVING JSON_CONTAINS(col_45, '0.540018481999012') OR JSON_OVERLAPS(col_45, '[0.5785147169732324,0.8314968898215304,0.5226516826882698]');
