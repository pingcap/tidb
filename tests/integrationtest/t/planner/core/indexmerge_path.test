# TestAnalyzeMVIndexWarnings
drop table if exists t;
create table t(a int, b int, c int, j json,
index(a), index(b),
index idx(a, b, (cast(j as signed array)), c),
index idx2(a, b, (cast(j->'$.str' as char(10) array)), c));
set tidb_analyze_version=2;
--enable_warnings
analyze table t;
analyze table t index idx;
set tidb_analyze_version=1;
analyze table t;
analyze table t index idx;
analyze table t index a;
analyze table t index a, idx, idx2;
--disable_warnings


# TestIndexMergeJSONMemberOf
drop table if exists t;
create table t(
a int, j0 json, j1 json,
index j0_0((cast(j0->'$.path0' as signed array))),
index j0_1((cast(j0->'$.path1' as signed array))),
index j0_string((cast(j0->'$.path_string' as char(10) array))),
index j0_date((cast(j0->'$.path_date' as date array))),
index j1((cast(j1 as signed array))));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where (1 member of (j0->'$.path0'));
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.XXX')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and (2 member of (j1)) and a<10;
explain format = 'brief' select /*+ use_index(t, j0_0) */ * from t where (1 member of (j0->'$.path0'));
explain format = 'brief' select /*+ use_index(t, j0_1) */ * from t where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select * from t use index(j0_0) where (1 member of (j0->'$.path0'));
explain format = 'brief' select * from t use index(j0_1) where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select * from t force index(j0_0) where (1 member of (j0->'$.path0'));
explain format = 'brief' select * from t force index(j0_1) where (1 member of (j0->'$.path1')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j1) */ * from t where (1 member of (j0->'$.path1')) and (2 member of (j1)) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '[1, 2, 3]');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '[1, 2, 3]');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('[1, 2, 3]', (j0->'$.path0'));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '[1, 2, 3]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '[1, 2, 3]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('[1, 2, 3]', (j0->'$.path0')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '1');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '1');
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('1', (j0->'$.path0'));
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_contains((j0->'$.path0'), '1') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps((j0->'$.path0'), '1') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_0) */ * from t where json_overlaps('1', (j0->'$.path0')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where ("a" member of (j0->'$.path_string'));
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where ("a" member of (j0->'$.path_string')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_contains((j0->'$.path_string'), '["a", "b", "c"]');
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_contains((j0->'$.path_string'), '["a", "b", "c"]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_overlaps((j0->'$.path_string'), '["a", "b", "c"]');
explain format = 'brief' select /*+ use_index_merge(t, j0_string) */ * from t where json_overlaps((j0->'$.path_string'), '["a", "b", "c"]') and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where ("2023-01-01" member of (j0->'$.path_date'));
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where ("2023-01-01" member of (j0->'$.path_date')) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_contains((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date)));
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_contains((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date))) and a<10;
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_overlaps((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date)));
explain format = 'brief' select /*+ use_index_merge(t, j0_date) */ * from t where json_overlaps((j0->'$.path_date'), json_array(cast('2023-01-01' as date), cast('2023-01-02' as date), cast('2023-01-03' as date))) and a<10;


# TestDNFOnMVIndex
drop table if exists t;
create table t(a int, b int, c int, j json,
index idx1((cast(j as signed array))),
index idx2(a, b, (cast(j as signed array)), c));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (1 member of (j)) or (2 member of (j));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where ((1 member of (j)) or (2 member of (j))) and (a > 10);
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (json_overlaps(j, '[1, 2]')) or (json_overlaps(j, '[3, 4]'));
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where ((json_overlaps(j, '[1, 2]')) or (json_overlaps(j, '[3, 4]'))) and (a > 10);
explain format = 'brief' select /*+ use_index_merge(t, idx1) */ * from t where (json_contains(j, '[1, 2]')) or (json_contains(j, '[3, 4]'));
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where (a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)));
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where (a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)) and c=14);
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where ((a=1 and b=2 and (3 member of (j))) or (a=11 and b=12 and (13 member of (j)))) and (c > 10);


# TestCompositeMVIndex
drop table if exists t;
create table t(a int, b int , c int, j json,
index idx(a, b, (cast(j as signed array)), c),
index idx2(a, b, (cast(j->'$.str' as char(10) array)), c));
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2 and (3 member of (j)) and c=4;
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2 and (3 member of (j));
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1 and b=2;
explain format = 'brief' select /*+ use_index_merge(t, idx) */ * from t where a=1;
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2 and ('3' member of (j->'$.str')) and c=4;
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2 and ('3' member of (j->'$.str'));
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1 and b=2;
explain format = 'brief' select /*+ use_index_merge(t, idx2) */ * from t where a=1;
explain format = 'brief' select /*+ use_index(t, idx) */ * from t where a=1 and b=2 and (3 member of (j)) and c=4;
explain format = 'brief' select * from t use index(idx) where a=1 and b=2 and (3 member of (j));
explain format = 'brief' select /*+ use_index(t, idx) */ * from t where a=1 and b=2;
explain format = 'brief' select * from t use index(idx) where a=1;
explain format = 'brief' select * from t force index(idx) where a=1 and b=2 and (3 member of (j));
explain format = 'brief' select * from t force index(idx) where a=1;


# TestMVIndexSelection
drop table if exists t;
create table t(a int, j json,
index i_int((cast(j->'$.int' as signed array))));
explain format = 'brief' select (j->'$.int') from t where (1 member of (j->'$.int'));
explain format = 'brief' select * from t where (1 member of (j->'$.int'));
explain format = 'brief' select * from t where (1 member of (j->'$.int')) and a<10;
explain format = 'brief' select (j->'$.int') from t where json_contains((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_contains((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_contains((j->'$.int'), '[1, 2, 3]') and a<10;
explain format = 'brief' select (j->'$.int') from t where json_overlaps((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_overlaps((j->'$.int'), '[1, 2, 3]');
explain format = 'brief' select * from t where json_overlaps((j->'$.int'), '[1, 2, 3]') and a<10;


# TestMVIndexIndexMergePlanCache
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
--enable_warnings
prepare st from 'select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j))';
--disable_warnings
execute st;
execute st;
select @@last_plan_from_cache;


# TestMVIndexPointGet
drop table if exists t;
create table t(j json, unique kj((cast(j as signed array))));
explain select j from t where j=1;
explain select j from t where j=1 or j=2;
explain select j from t where j in (1, 2);


# TestEnforceMVIndex
drop table if exists t;
create table t(a int, j json, index kj((cast(j as signed array))));
explain format = 'brief' select /*+ use_index(t, kj) */ * from t;
explain format = 'brief' select /*+ use_index(t, kj) */ a from t;
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where a<10;
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j)) and a=10;
explain format = 'brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j)) or a=10;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ a from t;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t where a<10;
explain format = 'brief' select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j)) or a=10;


# TestMVIndexInvisible
drop table if exists t;
create table t(a int, j json, index kj((cast(j as signed array))));
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
ALTER TABLE t ALTER INDEX kj INVISIBLE;
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));
explain format='brief' select /*+ use_index_merge(t, kj) */ * from t where (1 member of (j));
ALTER TABLE t ALTER INDEX kj VISIBLE;
explain format='brief' select /*+ use_index(t, kj) */ * from t where (1 member of (j));


# TestMVIndexFullScan
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
insert into t values ('[1]');
insert into t values ('[1, 2]');
insert into t values ('[]');
insert into t values (NULL);
select /*+ use_index_merge(t, kj) */ count(*) from t;
select /*+ use_index_merge(t, kj) */ count(*) from t where (1 member of (j));
select /*+ use_index_merge(t, kj) */ count(*) from t where json_contains((j), '[1]');
select /*+ use_index_merge(t, kj) */ count(*) from t where json_overlaps((j), '[1]');
select /*+ use_index(t, kj) */ count(*) from t;


# TestMVIndexEmptyArray
drop table if exists t;
create table t(j json, index kj((cast(j as signed array))));
insert into t values ('[1]');
insert into t values ('[1, 2]');
insert into t values ('[]');
insert into t values (NULL);
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1, 2]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1, 2]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_contains(j, '[1, 10]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_contains(j, '[1, 10]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1, 2]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1, 2]');
-- sorted_result
select /*+ use_index_merge(t) */ * from t where json_overlaps(j, '[1, 10]');
-- sorted_result
select /*+ ignore_index(t, kj) */ * from t where json_overlaps(j, '[1, 10]');


# TestIndexMergeJSONMemberOf2
drop table if exists t;
create table t(
a int, j0 json, j1 json,
index j0_0((cast(j0->'$.path0' as signed array))));
insert into t values(1, '{"path0" : [1,2,3]}', null );
select /*+ no_index_merge() */ a from t where (1 member of (j0->'$.path0'));
select /*+ no_index_merge() */ a from t where ('1' member of (j0->'$.path0'));
select /*+ use_index_merge(t, j0_0) */ a from t where (1 member of (j0->'$.path0'));
select /*+ use_index_merge(t, j0_0) */ a from t where ('1' member of (j0->'$.path0'));

drop table if exists t;
create table t(a int, b int, c int, d json, index iad(a, (cast(d->'$.b' as signed array))));
insert into t value(1,1,1, '{"b":[1,2,3,4]}');
insert into t value(2,2,2, '{"b":[3,4,5,6]}');
set tidb_analyze_version=2;
analyze table t;
explain select * from t use index (iad) where a = 1;
explain select * from t use index (iad) where a = 1 and (2 member of (d->'$.b'));

# TestMultiValuedIndexWithoutRelatedColumnCondition
drop table if exists t;
create table t(a int, d json, index iad(a, (cast(d->'$.b' as signed array))));
insert into t value(1,'{"b":[]}'), (2,'{"b":[]}');
select * from t use index (iad) where a = 1;
select * from t ignore index (iad) where a = 1;
drop table if exists t;
create table t (j json, key mvi( (cast(j as char(5) array)) ) );
insert into t values ('[]');
insert into t values ('["abc"]');
select * from t use index (mvi) where json_contains(j, '[]');
select * from t ignore index (mvi) where json_contains(j, '[]');

# TestIssue50298
drop table if exists t;
create table t(a int, b json);
insert into t value (1, '{"a":[1,2,3], "b": [2,3,4]}');
analyze table t;
alter table t add index ibb( (cast(b->'$.b' as signed array)) );
explain select /*+ use_index_merge(t) */ * from t where 10 member of (b->'$.b');

# TestIssue50420
drop table if exists t, t1;
create table t (j json, i bigint(20) not null primary key, key mvi((cast(j as unsigned array))));
insert into t values ('[1,2,3]', 1);
explain format=brief select * from t force index(mvi) where isnull(i) or json_contains(j, '1');
select * from t force index(mvi) where isnull(i) or json_contains(j, '1');
create table t1 (j json, a bigint(20), b int, primary key(a,b), key mvi((cast(j as unsigned array))));
explain format=brief select /*+ use_index_merge(t1, mvi, primary) */ * from t1 where a = 1 or json_contains(j, '1');
explain format=brief select /*+ use_index_merge(t1, mvi, primary) */ * from t1 where (a = 1 and b = 2) or json_contains(j, '1');
