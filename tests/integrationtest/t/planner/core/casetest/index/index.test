# TestIndexJoinUniqueCompositeIndex
set tidb_cost_model_version=2;
drop table if exists t1, t2;
set tidb_enable_clustered_index=int_only;
create table t1(a int not null, c int not null);
create table t2(a int not null, b int not null, c int not null, primary key(a,b));
insert into t1 values(1,1);
insert into t2 values(1,1,1),(1,2,1);
analyze table t1,t2;
## Row count of IndexScan should be 2.
explain format = 'brief' select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t1.c = t2.c;
## Row count of IndexScan should be 2.
explain format = 'brief' select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t1.c <= t2.b;
## Row count of IndexScan should be 1.
explain format = 'brief' select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t2.b = 1;
set tidb_enable_clustered_index=default;


# TestIndexMergeFromComposedDNFCondition
drop table if exists t2;
create table t2(pk int primary key, a json, b json, c int, d int, e int, index idx(c, (cast(a as signed array))), index idx2((cast(b as signed array)), c), index idx3(c, d), index idx4(d));
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and c=1) or (2 member of (b) and c=1); -- 1: OR index merge from multi complicated mv index (memberof);
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and c=1) or (2 member of (b) and c=1); -- 2: OR index merge from multi complicated mv index (memberof);
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and c=1 and d=2) or (2 member of (b) and c=3 and d=2); -- 3: OR index merge from multi complicated mv index (memberof)，while each DNF item contains redundant condition, which should be remained as table filters;
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where ( json_contains(a, '[1, 2, 3]') and c=1 and d=2) or (2 member of (b) and c=3 and d=2); -- 4: OR index merge from multi complicated mv index (memberof)，make full use of DNF item's condition even if the predicate is intersection case (json_contains);
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where ( json_overlaps(a, '[1, 2, 3]') and c=1 and d=2) or (2 member of (b) and c=3 and d=2); -- 5: OR index merge from multi complicated mv index (memberof)，make full use of DNF item's condition even if the predicate is intersection case (json_contains);
explain select /*+ use_index_merge(t2, idx2, idx, idx4) */ * from t2 where ( json_contains(a, '[1, 2, 3]') and d=2) or (2 member of (b) and c=3 and d=2); -- 6: OR index merge from multi complicated mv index (memberof)，make full use of other DNF items even if one of the DNF items fails;
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and 1 member of (b) and c=3) or (3 member of (b) and c=4); -- 7: OR index merge from multi complicated mv index (memberof)，each DNF item can be more complicated like a another embedded CNF member-of composition.;
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and 1 member of (b) and c=3) or (3 member of (b) and c=4) or e=1; -- 8: OR index merge from multi complicated mv index (memberof), each DNF item should be strict or lax used as index partial path.;
explain select /*+ use_index_merge(t2, idx2, idx, idx4) */ * from t2 where (1 member of (a) and 1 member of (b) and c=3) or (3 member of (b) and c=4) or d=1; -- 9: OR index merge from multi complicated mv index (memberof), each DNF item should be strict or lax used as index partial path, specify the index in index merge hint;


# TestIndexMergeFromComposedCNFCondition
drop table if exists t1, t2;
create table t1(pk int primary key, a json, b json, c int, d int, index idx((cast(a as signed array))), index idx2((cast(b as signed array))));
create table t2(pk int primary key, a json, b json, c int, d int, index idx(c, (cast(a as signed array))), index idx2((cast(b as signed array)), c), index idx3(c, d), index idx4(d));
explain select /*+ use_index_merge(t1, idx2, idx) */ * from t1 where 1 member of (a) and 2 member of (b); -- 1: AND index merge from multi member mv index predicate, since member of is single partial path, it can be merged with outer index merge.;
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where 1 member of (a) and c=1 and 2 member of (b); -- 2: AND index merge from multi complicated mv index;
explain select /*+ use_index_merge(t2, idx2, idx, idx4) */ * from t2 where 1 member of (a) and c=1 and 2 member of (b) and d=3; -- 3: AND index merge from multi complicated mv indexes and normal indexes;
explain select /*+ use_index_merge(t2, idx2, idx, idx3) */ * from t2 where json_contains(a, '[1, 2, 3]') and c=1 and 2 member of (b) and d=3; -- 4: AND index merge from multi complicated mv indexes (json_contains (intersection))and normal indexes;
explain select /*+ use_index_merge(t2, idx2, idx, idx3) */ * from t2 where json_overlaps(a, '[1, 2, 3]') and c=1 and 2 member of (b) and d=3; -- 5: AND index merge from multi complicated mv indexes (json_overlap (intersection))and normal indexes;
explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where 1 member of (a) and c=1 and c=2; -- 6: AND index merge from multi complicated mv indexes (empty range);


# TestIndexMerge
drop table if exists t;
create table t(a int, b int, c int, unique index(a), unique index(b), primary key(c));
explain format = 'brief' select /*+ USE_INDEX_MERGE(t, a, b) */ * from t where a = 1 or b = 2;
explain format = 'brief' select /*+ USE_INDEX_MERGE(t, A, B) */ * from t where a = 1 or b = 2;
explain format = 'brief' select /*+ USE_INDEX_MERGE(t, primary) */ * from t where 1 or t.c;
explain format = 'brief' select /*+ USE_INDEX_MERGE(t, a, b, c) */ * from t where 1 or t.a = 1 or t.b = 2;


# TestIndexJoinTableRange
## for issue #14822 and #38258
drop table if exists t1, t2, t3, t4;
create table t1(a int, b int, primary key (a), key idx_t1_b (b));
create table t2(a int, b int, primary key (a), key idx_t1_b (b));
create table t3(a int, b int, c int);
create table t4(a int, b int, c int, primary key (a, b) clustered);
desc format = 'brief' select /*+ TIDB_INLJ(t2)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.b;
desc format = 'brief' select /*+ TIDB_INLJ(t2)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.a and t1.b = t2.b;
desc format = 'brief' select /*+ INL_JOIN(t4) */ * from t3 join t4 on t3.a = t4.a where t4.b = 1;
desc format = 'brief' select /*+ INL_JOIN(t4) */ * from t3 join t4 on t3.b = t4.b where t4.a = 1;


# TestIndexJoinInnerIndexNDV
set tidb_cost_model_version=2;
drop table if exists t1, t2;
create table t1(a int not null, b int not null, c int not null);
create table t2(a int not null, b int not null, c int not null, index idx1(a,b), index idx2(c));
insert into t1 values(1,1,1),(1,1,1),(1,1,1);
insert into t2 values(1,1,1),(1,1,2),(1,1,3);
analyze table t1, t2;
## t2 should use idx2 instead of idx1, since idx2 has larger NDV.
explain format = 'brief' select /*+ inl_join(t2) */ * from t1, t2 where t1.a = t2.a and t1.b = t2.b and t1.c = t2.c;
set tidb_cost_model_version=default;


# TestIndexMergeSerial
drop table if exists t;
create table t (a int, b int, unique key(a), unique key(b));
insert into t value (1, 5), (2, 4), (3, 3), (4, 2), (5, 1);
insert into t value (6, 0), (7, -1), (8, -2), (9, -3), (10, -4);
analyze table t;
desc format='brief' select /*+ use_index_merge(t) */ * from t where a =1 or (b=1 and b+2>1);
show warnings;
desc format='brief' select /*+ use_index_merge(t) */ * from t where a =1 or (b=1 and length(b)=1);
show warnings;
desc format='brief' select /*+ use_index_merge(t) */ * from t where (a=1 and length(a)=1) or (b=1 and length(b)=1);
show warnings;
desc format='brief' select /*+ use_index_merge(t) */ * from t where (a=1 and length(b)=1) or (b=1 and length(a)=1);
show warnings;


# TestIndexJoinOnClusteredIndex
set tidb_cost_model_version=2;
set tidb_enable_clustered_index=on;
drop table if exists t;
create table t (a int, b varchar(20), c decimal(40,10), d int, primary key(a,b), key(c));
insert into t values (1,"111",1.1,11), (2,"222",2.2,12), (3,"333",3.3,13);
analyze table t;
explain  format = 'brief'select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a;
select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a;
explain  format = 'brief'select /*+ inl_merge_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a;
select /*+ inl_merge_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a;
explain  format = 'brief'select /*+ inl_hash_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a;
select /*+ inl_hash_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a;
explain  format = 'brief'select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a and t1.b = t2.b;
select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a and t1.b = t2.b;
explain  format = 'brief'select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.c = t2.c;
select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.c = t2.c;
explain  format = 'brief'select /*+ inl_merge_join(t1,t2) */ t2.a, t2.c, t2.d from t t1 left join t t2 on t1.a = t2.c;
select /*+ inl_merge_join(t1,t2) */ t2.a, t2.c, t2.d from t t1 left join t t2 on t1.a = t2.c;
set tidb_enable_clustered_index=default;
set tidb_cost_model_version=default;


# TestIndexMergeWithCorrelatedColumns
set tidb_cost_model_version=2;
drop table if exists t1, t2;
create table t1(c1 int, c2 int, c3 int, primary key(c1), key(c2));
insert into t1 values(1, 1, 1);
insert into t1 values(2, 2, 2);
create table t2(c1 int, c2 int, c3 int);
insert into t2 values(1, 1, 1);
insert into t2 values(2, 2, 2);
drop table if exists tt1, tt2;
create table tt1  (c_int int, c_str varchar(40), c_datetime datetime, c_decimal decimal(12, 6), primary key(c_int), key(c_int), key(c_str), unique key(c_decimal), key(c_datetime));
create table tt2  like tt1 ;
insert into tt1 (c_int, c_str, c_datetime, c_decimal) values (6, 'sharp payne', '2020-06-07 10:40:39', 6.117000) ,
			    (7, 'objective kare', '2020-02-05 18:47:26', 1.053000) ,
			    (8, 'thirsty pasteur', '2020-01-02 13:06:56', 2.506000) ,
			    (9, 'blissful wilbur', '2020-06-04 11:34:04', 9.144000) ,
			    (10, 'reverent mclean', '2020-02-12 07:36:26', 7.751000) ;
insert into tt2 (c_int, c_str, c_datetime, c_decimal) values (6, 'beautiful joliot', '2020-01-16 01:44:37', 5.627000) ,
			    (7, 'hopeful blackburn', '2020-05-23 21:44:20', 7.890000) ,
			    (8, 'ecstatic davinci', '2020-02-01 12:27:17', 5.648000) ,
			    (9, 'hopeful lewin', '2020-05-05 05:58:25', 7.288000) ,
			    (10, 'sharp jennings', '2020-01-28 04:35:03', 9.758000) ;
explain format=brief select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 = 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and substring(c3, 10)) order by c1;
select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 = 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and substring(c3, 10)) order by c1;
explain format=brief select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 = 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and reverse(c3)) order by c1;
select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 = 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and reverse(c3)) order by c1;
explain format=brief select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 >= 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and substring(c3, 10)) order by c1;
select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 >= 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and substring(c3, 10)) order by c1;

## Test correlated column in IndexPath.TableFilters.
explain format=brief select c_int from tt1 where c_decimal < all (select /*+ use_index_merge(tt2) */ c_decimal from tt2 where tt1.c_int = tt2.c_int and tt1.c_datetime > tt2.c_datetime and tt2.c_decimal = 9.060 or tt2.c_str <= 'interesting shtern' and tt1.c_int = tt2.c_int) order by 1;
select c_int from tt1 where c_decimal < all (select /*+ use_index_merge(tt2) */ c_decimal from tt2 where tt1.c_int = tt2.c_int and tt1.c_datetime > tt2.c_datetime and tt2.c_decimal = 9.060 or tt2.c_str <= 'interesting shtern' and tt1.c_int = tt2.c_int) order by 1;

## Test correlated column in TablePath.TableFilters.
explain format=brief select c_int from tt1 where c_decimal > all (select /*+ use_index_merge(tt2) */ c_decimal from tt2 where tt2.c_int = 7 and tt2.c_int < tt1.c_decimal or tt2.c_str >= 'zzzzzzzzzzzzzzzzzzz' and tt1.c_int = tt2.c_int) order by 1;
select c_int from tt1 where c_decimal > all (select /*+ use_index_merge(tt2) */ c_decimal from tt2 where tt2.c_int = 7 and tt2.c_int < tt1.c_decimal or tt2.c_str >= 'zzzzzzzzzzzzzzzzzzz' and tt1.c_int = tt2.c_int) order by 1;
set tidb_cost_model_version=default;


# TestIndexJoinRangeFallback
drop table if exists t1, t2;
create table t1(a int, b int, c varchar(10), d varchar(10), index idx_a_b_c_d(a, b, c(2), d(2)));
create table t2(e int, f int, g varchar(10), h varchar(10));
set @@tidb_opt_range_max_size = 0;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb');
show warnings;
set @@tidb_opt_range_max_size = 2900;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb');
show warnings;
set @@tidb_opt_range_max_size = 2300;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb');
show warnings;
set @@tidb_opt_range_max_size = 700;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb');
show warnings;
set @@tidb_opt_range_max_size = 0;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > 1 and t1.b < 10;
show warnings;
set @@tidb_opt_range_max_size = 300;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > 1 and t1.b < 10;
show warnings;
set @@tidb_opt_range_max_size = 0;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > t2.f and t1.b < t2.f + 10;
show warnings;
set @@tidb_opt_range_max_size = 300;
explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > t2.f and t1.b < t2.f + 10;
show warnings;
set @@tidb_opt_range_max_size = default;


# TestHeuristicIndexSelection
set tidb_cost_model_version=2;
drop table if exists t1, t2, t3, t4;
create table t1(a int, b int, c int, d int, e int, f int, g int, primary key (a), unique key c_d_e (c, d, e), unique key f (f), unique key f_g (f, g), key g (g));
create table t2(a int, b int, c int, d int, unique index idx_a (a), unique index idx_b_c (b, c), unique index idx_b_c_a_d (b, c, a, d));
create table t3(a bigint, b varchar(255), c bigint, primary key(a, b) clustered);
create table t4(a bigint, b varchar(255), c bigint, primary key(a, b) nonclustered);
set @@tidb_enable_chunk_rpc = on;
explain format = 'verbose' select * from t1 where a = 3 or a = 5;
show warnings;
explain format = 'verbose' select f, g from t1 where f = 2 and g in (3, 4, 5);
show warnings;
explain format = 'verbose' select * from t1 where c = 1 and (d = 2 or d = 3) and e in (4, 5);
show warnings;
explain format = 'verbose' select f, g from t1 where f = 2 and g > 3;
show warnings;
explain format = 'verbose' select a, b, c from t2 where a = 1 and b = 2 and c in (1, 2, 3, 4, 5);
show warnings;
explain format = 'verbose' select * from t3 where (a = 1 or a = 3) and b = 'xx';
show warnings;
explain format = 'verbose' select * from t4 where (a = 1 or a = 3) and b = 'xx';
show warnings;
explain format = 'verbose' select a, b from t3 where (a = 1 or a = 3) and b = 'xx';
show warnings;
explain format = 'verbose' select a, b from t4 where (a = 1 or a = 3) and b = 'xx';
show warnings;
explain format = 'verbose' update t1 set b = 2 where a = 4 or a = 6;
show warnings;
explain format = 'verbose' delete from t1 where f = 2 and g in (3, 4);
show warnings;
explain format = 'verbose' insert into t3 select a, b, c from t1 where f = 2;
show warnings;
explain format = 'verbose' replace into t3 select a, b, c from t1 where a = 3;
show warnings;
set @@tidb_enable_chunk_rpc = default;
set tidb_cost_model_version=default;


# TestLimitIndexLookUpKeepOrder
set tidb_cost_model_version=2;
drop table if exists t;
create table t(a int, b int, c int, d int, index idx(a,b,c));
desc format = 'brief' select * from t where a = 1 and b > 2 and b < 10 and d = 10 order by b,c limit 10;
desc format = 'brief' select * from t where a = 1 and b > 2 and b < 10 and d = 10 order by b desc, c desc limit 10;
set tidb_cost_model_version=default;


# TestAccessPathOnClusterIndex
set tidb_enable_clustered_index=on;
drop table if exists t1;
create table t1 (a int, b varchar(20), c decimal(40,10), d int, primary key(a,b), key(c));
insert into t1 values (1,"111",1.1,11), (2,"222",2.2,12), (3,"333",3.3,13);
analyze table t1;
explain format='brief' select * from t1;
--sorted_result
select * from t1;
explain format='brief' select * from t1 where t1.a >= 1 and t1.a < 4;
--sorted_result
select * from t1 where t1.a >= 1 and t1.a < 4;
explain format='brief' select * from t1 where t1.a = 1 and t1.b < "333";
--sorted_result
select * from t1 where t1.a = 1 and t1.b < "333";
explain format='brief' select t1.a, t1.b, t1.c from t1 where t1.c = 3.3;
--sorted_result
select t1.a, t1.b, t1.c from t1 where t1.c = 3.3;
explain format='brief' select t1.b, t1.c from t1 where t1.c = 2.2;
--sorted_result
select t1.b, t1.c from t1 where t1.c = 2.2;
explain format='brief' select /*+ use_index(t1, c) */ * from t1;
--sorted_result
select /*+ use_index(t1, c) */ * from t1;
explain format='brief' select * from t1 use index(c) where t1.c in (2.2, 3.3);
--sorted_result
select * from t1 use index(c) where t1.c in (2.2, 3.3);
explain format='brief' select * from t1 where t1.a = 1 order by b;
--sorted_result
select * from t1 where t1.a = 1 order by b;
explain format='brief' select * from t1 order by a, b limit 1;
--sorted_result
select * from t1 order by a, b limit 1;
explain format='brief' select /*+ use_index_merge(t1 primary, c) */ * from t1 where t1.a >= 1 or t1.c = 2.2;
--sorted_result
select /*+ use_index_merge(t1 primary, c) */ * from t1 where t1.a >= 1 or t1.c = 2.2;
explain format='brief' select /*+ use_index_merge(t1 primary, c) */ * from t1 where t1.a = 1 and t1.b = '111' or t1.c = 3.3;
--sorted_result
select /*+ use_index_merge(t1 primary, c) */ * from t1 where t1.a = 1 and t1.b = '111' or t1.c = 3.3;
set tidb_enable_clustered_index=default;

