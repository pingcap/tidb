# TestListPartitionPushDown
create database list_push_down;
use list_push_down;
set tidb_cost_model_version=2;
drop table if exists tlist;
set tidb_enable_list_partition = 1;
create table tlist (a int) partition by list (a) (
    partition p0 values in (0, 1, 2),
    partition p1 values in (3, 4, 5));
create table tcollist (a int) partition by list columns(a) (
    partition p0 values in (0, 1, 2),
    partition p1 values in (3, 4, 5));
set @@tidb_partition_prune_mode = 'static';
explain format='brief' select a from tlist where a>=0 and a<=10;
explain format='brief' select avg(a) from tlist;
explain format='brief' select a from tlist limit 10;
explain format='brief' select a from tlist order by a limit 10;
explain format='brief' select a from tcollist where a>=0 and a<=10;
explain format='brief' select avg(a) from tcollist;
explain format='brief' select a from tcollist limit 10;
explain format='brief' select a from tcollist order by a limit 10;

# TestListColVariousTypes
create database list_col_partition_types;
use list_col_partition_types;
drop table if exists tlist;
set tidb_enable_list_partition = 1;
create table tint (a int) partition by list columns(a) (partition p0 values in (0, 1), partition p1 values in (2, 3));
create table tdate (a date) partition by list columns(a) (partition p0 values in ('2000-01-01', '2000-01-02'), partition p1 values in ('2000-01-03', '2000-01-04'));
create table tstring (a varchar(32)) partition by list columns(a) (partition p0 values in ('a', 'b'), partition p1 values in ('c', 'd'));
-- error 1659
create table tdouble (a double) partition by list columns(a) (partition p0 values in (0, 1), partition p1 values in (2, 3));
-- error 1659
create table tdecimal (a decimal(30, 10)) partition by list columns(a) (partition p0 values in (0, 1), partition p1 values in (2, 3));
insert into tint values (0), (1), (2), (3);
insert into tdate values ('2000-01-01'), ('2000-01-02'), ('2000-01-03'), ('2000-01-04');
insert into tstring values ('a'), ('b'), ('c'), ('d');
analyze table tint;
analyze table tdate;
analyze table tstring;
explain format = 'brief' select * from tint where a<=1;
explain format = 'brief' select * from tint where a in (0, 1);
select * from tint where a<=1 order by a;
select * from tint where a in (0, 1) order by a;
explain format = 'brief' select * from tdate where a<='2000-01-01';
explain format = 'brief' select * from tdate where a in ('2000-01-01', '2000-01-02');
select * from tdate where a<='2000-01-01' order by a;
select * from tdate where a in ('2000-01-01', '2000-01-02') order by a;
explain format = 'brief' select * from tstring where a<='b';
explain format = 'brief' select * from tstring where a in ('a', 'b');
select * from tstring where a<='b' order by a;
select * from tstring where a in ('a', 'b') order by a;

# TestListPartitionFunctions
create database list_partition_pruning;
use list_partition_pruning;
set tidb_enable_list_partition = 1;
set @@tidb_partition_prune_mode = 'static';
create table tabs (a int, b int) partition by list (ABS(a - b)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tabs values (1, 1), (2, 2), (2, 1), (1, 2), (4, 8), (8, 4), (5, 10), (10, 5);
--sorted_result
select * from tabs;
--sorted_result
select * from tabs partition(p0);
create table tceil (a int, b int) partition by list (CEILING(a)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tceil values (0.23, 1), (3.14, 4.33), (1.2, 30), (5.1, 4.23);
--sorted_result
select * from tceil;
--sorted_result
select * from tceil partition(p0);
create table tdatediff (a date, b datetime) partition by list (DATEDIFF(a, b)) (partition p0 values in (0, 10, 20), partition p1 values in (30, 40, 50));
insert into tdatediff values ('2019-02-01', '2019-02-01 18:00:00'), ('2019-03-30', '2019-03-20 23:59:59'), ('2020-06-01', '2020-04-12 18:00:00');
--sorted_result
select * from tdatediff;
--sorted_result
select * from tdatediff partition(p0);
create table tday (a date, b datetime) partition by list (DAY(a)) (partition p0 values in (0, 1, 2), partition p1 values in (3, 4, 5));
insert into tday values ('2008-01-01', '1990-01-01 22:00:01'), ('2008-01-03', '2008-01-03 23:59:30'), ('2019-02-01', '2017-03-30 23:59:30'), ('2019-04-05', '2019-04-01 23:59:59'), ('2020-07-01', '2020-04-15 18:00:00');
--sorted_result
select * from tday;
--sorted_result
select * from tday partition(p0);
create table tdayofmonth (a date, b datetime) partition by list (DAYOFMONTH(a)) (partition p0 values in (0, 1, 2), partition p1 values in (3, 4, 5));
insert into tdayofmonth values ('2008-01-01', '1990-01-01 22:00:01'), ('2008-01-03', '2008-01-03 23:59:30'), ('2019-02-01', '2017-03-30 23:59:30'), ('2019-04-05', '2019-04-01 23:59:59'), ('2020-07-01', '2020-04-15 18:00:00');
--sorted_result
select * from tdayofmonth;
--sorted_result
select * from tdayofmonth partition(p0);
create table tdayofweek (a date, b datetime) partition by list (DAYOFWEEK(a)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tdayofweek values ('2008-01-01', '1990-01-01 22:00:01'), ('2008-01-03', '2008-01-03 23:59:30'), ('2019-02-01', '2017-03-30 23:59:30'), ('2019-04-05', '2019-04-01 23:59:59'), ('2020-07-01', '2020-04-15 18:00:00');
--sorted_result
select * from tdayofweek;
--sorted_result
select * from tdayofweek partition(p0);
create table tfloor (a int, b int) partition by list (FLOOR(a)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tfloor values (0.23, 1), (3.14, 4.33), (6.2, 30), (7.1, 4.23);
--sorted_result
select * from tfloor;
--sorted_result
select * from tfloor partition(p0);
create table thour (a time, b time) partition by list (HOUR(a)) (partition p0 values in (0, 1, 2, 3, 4), partition p1 values in (5, 6, 7, 8));
insert into thour values ('03:09:34', '00:00:00'), ('01:23:34', '32:03:34'), ('08:39:20', '23:09:43'), ('03:00:00', '20:00:00');
--sorted_result
select * from thour;
--sorted_result
select * from thour partition(p0);
create table tminute (a datetime, b datetime) partition by list (MINUTE(a)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tminute values ('2019-12-31 12:00:00', '2019-12-31 23:59:59'), ('2019-12-31 23:06:59', '2019-12-31 12:00:00');
--sorted_result
select * from tminute;
--sorted_result
select * from tminute partition(p0);
create table tmod (a int, b int) partition by list (MOD(a, b)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tmod values (3, 1), (10, 3), (4, 4), (13, 7);
--sorted_result
select * from tmod;
--sorted_result
select * from tmod partition(p0);
create table tmonth (a date, b date) partition by list (MONTH(a)) (partition p0 values in (0, 1, 2, 3), partition p1 values in (4, 5, 6, 7));
insert into tmonth values ('2000-02-23', '2008-02-01'), ('2019-01-01', '2018-03-10'), ('2020-06-12', '2021-04-05'), ('2019-05-20', '2017-02-21');
--sorted_result
select * from tmonth;
--sorted_result
select * from tmonth partition(p0);
create table tquarter (a date, b date) partition by list (QUARTER(a)) (partition p0 values in (0, 1, 2), partition p1 values in (3, 4, 5));
insert into tquarter values ('2019-02-01', '2008-01-02'), ('2019-01-01', '2018-03-10'), ('2020-11-12', '2021-04-05'), ('2019-05-20', '2017-02-21');
--sorted_result
select * from tquarter;
--sorted_result
select * from tquarter partition(p0);
create table tto_seconds (a date, b datetime) partition by list (TO_SECONDS(a)) (partition p0 values in (0, 1, 2, 3, 63740649600), partition p1 values in (4, 5, 6, 7, 63744969600));
insert into tto_seconds values ('2019-12-31 12:00:00', '2019-12-31 23:59:59'), ('2019-11-11 23:06:59', '2019-12-31 12:00:00');
--sorted_result
select * from tto_seconds;
--sorted_result
select * from tto_seconds partition(p0);

# TestEstimationForTopNPushToDynamicPartition
set tidb_cost_model_version=2;
drop table if exists tlist;
set tidb_enable_list_partition = 1;
create table trange (a int, b int, c int, index ia(a), primary key (b) clustered)
    partition by range(b) (
    partition p1 values less than(100),
    partition p2 values less than(200),
    partition p3 values less than maxvalue);
create table tlist (a int, b int, c int, index ia(a), primary key (b) clustered)
    partition by list (b) (
    partition p0 values in (0, 1, 2),
    partition p1 values in (3, 4, 5));
create table thash (a int, b int, c int, index ia(a), primary key (b) clustered)
    partition by hash(b) partitions 4;
create table t (a int, b int, c int, index ia(a), primary key (b) clustered);
analyze table trange;
analyze table tlist;
analyze table thash;
analyze table t;
explain format='brief' select a from t use index (ia) where a > 10 order by a limit 10;
explain format='brief' select a from trange use index (ia) where a > 10 order by a limit 10;
explain format='brief' select a from tlist use index (ia) where a > 10 order by a limit 10;
explain format='brief' select a from thash use index (ia) where a > 10 order by a limit 10;
explain format='brief' select * from t use index (ia) where a > 10 order by a limit 10;
explain format='brief' select * from trange use index (ia) where a > 10 order by a limit 10;
explain format='brief' select * from tlist use index (ia) where a > 10 order by a limit 10;
explain format='brief' select * from thash use index (ia) where a > 10 order by a limit 10;
explain format='brief' select * from t use index (ia) where a + 1 > 10 order by a limit 10;
explain format='brief' select * from trange use index (ia) where a + 1 > 10 order by a limit 10;
explain format='brief' select * from tlist use index (ia) where a + 1 > 10 order by a limit 10;
explain format='brief' select * from thash use index (ia) where a + 1 > 10 order by a limit 10;
explain format='brief' select a from t use index (ia) where a > 10 and c = 10 order by a limit 10;
explain format='brief' select a from trange use index (ia) where a > 10 and c = 10 order by a limit 10;
explain format='brief' select a from tlist use index (ia) where a > 10 and c = 10 order by a limit 10;
explain format='brief' select a from thash use index (ia) where a > 10 and c = 10 order by a limit 10;
explain format='brief' select a from t use index () where b > 10 order by b limit 10;
explain format='brief' select a from trange use index () where b > 10 order by b limit 10;
explain format='brief' select a from tlist use index () where b > 10 order by b limit 10;
explain format='brief' select a from thash use index () where b > 10 order by b limit 10;
explain format='brief' select a from t use index () where a > 10 order by b limit 10;
explain format='brief' select a from trange use index () where a > 10 order by b limit 10;
explain format='brief' select a from tlist use index () where a > 10 order by b limit 10;
explain format='brief' select a from thash use index () where a > 10 order by b limit 10;

