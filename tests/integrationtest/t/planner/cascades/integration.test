# TestSimpleProjDual
set session tidb_enable_cascades_planner = 1;
explain select 1;
select 1;

# TestPKIsHandleRangeScan
drop table if exists t;
create table t(a int primary key, b int);
insert into t values(1,2),(3,4),(5,6);
set session tidb_enable_cascades_planner = 1;
explain select b from t where a > 1;
select b from t where a > 1;
explain select b from t where a > 1 and a < 3;
select b from t where a > 1 and a < 3;
explain select b from t where a > 1 and b < 6;
select b from t where a > 1 and b < 6;
explain select a from t where a * 3 + 1 > 9 and a < 5;
select a from t where a * 3 + 1 > 9 and a < 5;
explain select a from t group by a having sum(b) > 4;
select a from t group by a having sum(b) > 4;

# TestIndexScan
drop table if exists t;
create table t(a int primary key, b int, c int, d int, index idx_b(b), index idx_c_b(c, b));
insert into t values(1,2,3,100),(4,5,6,200),(7,8,9,300);
set session tidb_enable_cascades_planner = 1;
explain select b from t;
select b from t;
explain select a from t order by b;
select a from t order by b;
explain select c from t;
select c from t;
explain select a from t order by c;
select a from t order by c;
explain select a, b from t where b > 5 order by b;
select a, b from t where b > 5 order by b;
explain select a, b, c from t where c = 3 and b > 1 order by b;
select a, b, c from t where c = 3 and b > 1 order by b;
explain select a, b from t where c > 1 and b > 1 order by c;
select a, b from t where c > 1 and b > 1 order by c;

# TestBasicShow
drop table if exists t;
create table t(a int primary key, b int);
set session tidb_enable_cascades_planner = 1;
desc t;

# TestSort
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a from t order by a;
select a from t order by a;
explain select b from t order by b;
select b from t order by b;
explain select b from t order by a+b;
select b from t order by a+b;
explain select b from t order by b, a+b, a;
select b from t order by b, a+b, a;

# TestAggregation
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
set session tidb_executor_concurrency = 4;
set @@session.tidb_hash_join_concurrency = 5;
set @@session.tidb_distsql_scan_concurrency = 15;
explain select sum(a) from t;
select sum(a) from t;
explain select max(a), min(b) from t;
select max(a), min(b) from t;
explain select b, avg(a) from t group by b order by b;
select b, avg(a) from t group by b order by b;
explain select b, sum(a) from t group by b order by b;
select b, sum(a) from t group by b order by b;
explain select b, avg(a) from t group by b having sum(a) > 1 order by b;
select b, avg(a) from t group by b having sum(a) > 1 order by b;
explain select max(a+b) from t;
select max(a+b) from t;
explain select sum(a) from t group by a, a+b order by a;
select sum(a) from t group by a, a+b order by a;
explain select b, sum(a) from t group by b having b > 1 order by b;
select b, sum(a) from t group by b having b > 1 order by b;
explain select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c;
select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c;
explain select max(a.a) from t a left join t b on a.a = b.a;
select max(a.a) from t a left join t b on a.a = b.a;
explain select avg(a.b) from t a left join t b on a.a = b.a;
select avg(a.b) from t a left join t b on a.a = b.a;
explain select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a;
select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a;
explain select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a;
select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a;
explain select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a;
select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a;
explain select t3.a, max(t3.b) from (select t1.a, t1.b from t as t1 left join t as t2 on t1.b = t2.b) t3 group by t3.a order by a;
select t3.a, max(t3.b) from (select t1.a, t1.b from t as t1 left join t as t2 on t1.b = t2.b) t3 group by t3.a order by a;
explain select max(a) from t;
select max(a) from t;
explain select sum(case when a > 0 and a <= 1000 then b else 0 end) from t;
select sum(case when a > 0 and a <= 1000 then b else 0 end) from t;
explain select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t;
select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t;
explain select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t;
select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t;
explain select count(case when a > 0 and a <= 1000 then b end) from t;
select count(case when a > 0 and a <= 1000 then b end) from t;
explain select count(case when a <= 0 or a > 1000 then null else b end) from t;
select count(case when a <= 0 or a > 1000 then null else b end) from t;
explain select count(distinct case when a > 0 and a <= 1000 then b end) from t;
select count(distinct case when a > 0 and a <= 1000 then b end) from t;
explain select approx_count_distinct(case when a > 0 and a <= 1000 then b end) from t;
select approx_count_distinct(case when a > 0 and a <= 1000 then b end) from t;
explain select count(b), sum(b), avg(b), b, max(b), min(b), bit_and(b), bit_or(b), bit_xor(b) from t group by a having sum(b) >= 0 and count(b) >= 0 order by b;
select count(b), sum(b), avg(b), b, max(b), min(b), bit_and(b), bit_or(b), bit_xor(b) from t group by a having sum(b) >= 0 and count(b) >= 0 order by b;
explain select group_concat(a, b), min(b), avg(a / b), a from t group by (a+b), a order by a;
select group_concat(a, b), min(b), avg(a / b), a from t group by (a+b), a order by a;
explain select approx_percentile(a, 50) from t order by b;
select approx_percentile(a, 50) from t order by b;

# TestPushdownDistinctEnable
drop table if exists t;
create table t(a int, b int, c int, index(c));
insert into t values (1, 1, 1), (1, 1, 3), (1, 2, 3), (2, 1, 3), (1, 2, NULL);
set session sql_mode='';
set session tidb_hashagg_partial_concurrency=1;
set session tidb_hashagg_final_concurrency=1;
set session tidb_enable_cascades_planner = 1;
set @@session.tidb_opt_distinct_agg_push_down = 1;
explain select /*+ HASH_AGG() */ avg(distinct a) from t;
select /*+ HASH_AGG() */ avg(distinct a) from t;
explain select /*+ HASH_AGG() */ a, count(distinct a) from t;
--replace_column 1 1
select /*+ HASH_AGG() */ a, count(distinct a) from t;
explain select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
--sorted_result
select /*+ HASH_AGG() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
explain select /*+ STREAM_AGG() */ count(distinct c) from t group by c;
--sorted_result
select /*+ STREAM_AGG() */ count(distinct c) from t group by c;
explain select /*+ STREAM_AGG() */ count(distinct c) from t;
select /*+ STREAM_AGG() */ count(distinct c) from t;
explain select /*+ HASH_AGG() */ count(distinct c) from t;
select /*+ HASH_AGG() */ count(distinct c) from t;
explain select count(distinct c) from t group by c;
--sorted_result
select count(distinct c) from t group by c;
explain select count(distinct c) from t;
select count(distinct c) from t;

# TestPushdownDistinctDisable
drop table if exists t;
create table t(a int, b int, c int, index(c));
insert into t values (1, 1, 1), (1, 1, 3), (1, 2, 3), (2, 1, 3), (1, 2, NULL);
set session sql_mode='';
set session tidb_hashagg_partial_concurrency=1;
set session tidb_hashagg_final_concurrency=1;
set session tidb_enable_cascades_planner = 1;
set @@session.tidb_opt_distinct_agg_push_down = 0;
explain select /*+ HASH_AGG(), AGG_TO_COP() */ avg(distinct a) from t;
select /*+ HASH_AGG(), AGG_TO_COP() */ avg(distinct a) from t;
explain select /*+ HASH_AGG(), AGG_TO_COP() */ a, count(distinct a) from t;
select /*+ HASH_AGG(), AGG_TO_COP() */ a, count(distinct a) from t;
explain select /*+ HASH_AGG(), AGG_TO_COP() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
select /*+ HASH_AGG(), AGG_TO_COP() */ avg(b), c, avg(b), count(distinct A, B),  count(distinct A), count(distinct c), sum(b) from t group by c;
explain select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t group by c;
select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t group by c;
explain select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t;
select /*+ STREAM_AGG(), AGG_TO_COP() */ count(distinct c) from t;
explain select /*+ HASH_AGG(), AGG_TO_COP() */ count(distinct c) from t;
select /*+ HASH_AGG(), AGG_TO_COP() */ count(distinct c) from t;
explain select /*+ AGG_TO_COP() */ count(distinct c) from t group by c;
select /*+ AGG_TO_COP() */ count(distinct c) from t group by c;

# TestSimplePlans
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a from t limit 2;
select a from t limit 2;
explain select a from t limit 1 offset 2;
select a from t limit 1 offset 2;
explain select b from t order by b limit 3;
select b from t order by b limit 3;
explain select a from t order by a limit 1 offset 2;
select a from t order by a limit 1 offset 2;
explain select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa;
select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa;
explain select a, b, lag(a,1) over (order by b) from t order by b;
select a, b, lag(a,1) over (order by b) from t order by b;
explain select * from (select a+1 as c, a+b as d from t) as t1 order by c+d limit 10;
select * from (select a+1 as c, a+b as d from t) as t1 order by c+d limit 10;
explain select t1.a, t1.b from t as t1 left join t as t2 on t1.a = t2.a and t1.b = 3 order by a;
select t1.a, t1.b from t as t1 left join t as t2 on t1.a = t2.a and t1.b = 3 order by a;

# TestJoin
set @@session.tidb_executor_concurrency = 4;
set @@session.tidb_hash_join_concurrency = 5;
set @@session.tidb_distsql_scan_concurrency = 15;
drop table if exists t1;
drop table if exists t2;
create table t1(a int primary key, b int);
create table t2(a int primary key, b int);
insert into t1 values (1, 11), (4, 44), (2, 22), (3, 33);
insert into t2 values (1, 111), (2, 222), (3, 333), (5, 555);
set session tidb_enable_cascades_planner = 1;
explain format = 'brief' select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2;
select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2;
explain format = 'brief' select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200;
select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200;
explain format = 'brief' select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
explain format = 'brief' select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200;
explain format = 'brief' select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a;
select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a;
explain format = 'brief' select * from t1 join t2 on t1.a = t2.a;
select * from t1 join t2 on t1.a = t2.a;
explain format = 'brief' select * from t1 join t2 on t1.a = t2.a and t1.a > 2;
select * from t1 join t2 on t1.a = t2.a and t1.a > 2;

# TestApply
drop table if exists t1, t2;
create table t1(a int primary key, b int);
create table t2(a int primary key, b int);
insert into t1 values (1, 11), (4, 44), (2, 22), (3, 33);
insert into t2 values (1, 11), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1;
select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1;
explain select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2;
select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2;
explain select a from t1 where exists(select 1 from t2 where t1.a = t2.a);
select a from t1 where exists(select 1 from t2 where t1.a = t2.a);

# TestMemTableScan
set session tidb_enable_cascades_planner = 1;
explain select USER, DB, COMMAND, TIME, STATE, INFO, `DIGEST` from information_schema.processlist where DB = "planner__cascades__integration";
select USER, DB, COMMAND, TIME, STATE, INFO, `DIGEST` from information_schema.processlist where DB = "planner__cascades__integration";

# TestTopN
drop table if exists t;
create table t(a int primary key, b int);
insert into t values (1, 11), (4, 44), (2, 22), (3, 33);
set session tidb_enable_cascades_planner = 1;
explain select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1;
select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1;
explain select * from (select * from t order by a limit 3) as t1 order by a limit 5;
select * from (select * from t order by a limit 3) as t1 order by a limit 5;
explain select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5;
select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5;
explain select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5;
select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5;
explain select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5;
select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5;
explain select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1;
select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1;
explain select * from (select * from t order by a limit 3) as t1 order by a, b limit 5;
select * from (select * from t order by a limit 3) as t1 order by a, b limit 5;


# TestCascadePlannerHashedPartTable
SET SESSION tidb_opt_fix_control = '44262:ON';
drop table if exists pt1;
create table pt1(a bigint, b bigint) partition by hash(a) partitions 4;
insert into pt1 values(1,10);
insert into pt1 values(2,20);
insert into pt1 values(3,30);
insert into pt1 values(4,40);
insert into pt1 values(5,50);
set @@tidb_enable_cascades_planner = 1;
explain select * from pt1 order by a;
select * from pt1 order by a;

set session tidb_opt_fix_control = default;
set @@tidb_enable_cascades_planner = default;


