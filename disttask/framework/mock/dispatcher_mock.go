// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/disttask/framework/dispatcher (interfaces: Dispatcher,CleanUpRoutine)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/pingcap/tidb/disttask/framework/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockDispatcher is a mock of Dispatcher interface.
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher.
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance.
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDispatcher) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDispatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDispatcher)(nil).Close))
}

// ExecuteTask mocks base method.
func (m *MockDispatcher) ExecuteTask() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteTask")
}

// ExecuteTask indicates an expected call of ExecuteTask.
func (mr *MockDispatcherMockRecorder) ExecuteTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTask", reflect.TypeOf((*MockDispatcher)(nil).ExecuteTask))
}

// Init mocks base method.
func (m *MockDispatcher) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockDispatcherMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDispatcher)(nil).Init))
}

// MockCleanUpRoutine is a mock of CleanUpRoutine interface.
type MockCleanUpRoutine struct {
	ctrl     *gomock.Controller
	recorder *MockCleanUpRoutineMockRecorder
}

// MockCleanUpRoutineMockRecorder is the mock recorder for MockCleanUpRoutine.
type MockCleanUpRoutineMockRecorder struct {
	mock *MockCleanUpRoutine
}

// NewMockCleanUpRoutine creates a new mock instance.
func NewMockCleanUpRoutine(ctrl *gomock.Controller) *MockCleanUpRoutine {
	mock := &MockCleanUpRoutine{ctrl: ctrl}
	mock.recorder = &MockCleanUpRoutineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleanUpRoutine) EXPECT() *MockCleanUpRoutineMockRecorder {
	return m.recorder
}

// CleanUp mocks base method.
func (m *MockCleanUpRoutine) CleanUp(arg0 context.Context, arg1 *proto.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUp indicates an expected call of CleanUp.
func (mr *MockCleanUpRoutineMockRecorder) CleanUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockCleanUpRoutine)(nil).CleanUp), arg0, arg1)
}
