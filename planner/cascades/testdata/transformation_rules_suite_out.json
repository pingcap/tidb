[
  {
    "Name": "TestPredicatePushDown",
    "Cases": [
      {
        "SQL": "select a, b from (select a, b from t as t1 order by a) as t2 where t2.b > 10",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    Projection_5 input:[Group#1], test.t.a, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b]",
          "    Sort_3 input:[Group#2], test.t.a:asc",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    Projection_2 input:[Group#3], test.t.a, test.t.b",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_7 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    Selection_9 input:[Group#5], gt(test.t.b, 10)",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TableScan_6 table:t1, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select a, b from (select a, b from t as t1 order by a) as t2 where t2.a > 10",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    Projection_5 input:[Group#1], test.t.a, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b]",
          "    Sort_3 input:[Group#2], test.t.a:asc",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    Projection_2 input:[Group#3], test.t.a, test.t.b",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_7 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    TableScan_10 table:t1, pk col:test.t.a, cond:[gt(test.t.a, 10)]"
        ]
      },
      {
        "SQL": "select a, b from (select a, b, a+b as a_b from t as t1) as t2 where a_b > 10 and b = 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b,Column#13]",
          "    Projection_2 input:[Group#2], test.t.a, test.t.b, plus(test.t.a, test.t.b)->Column#13",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_6 input:[Group#3], table:t1",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    Selection_8 input:[Group#4], eq(test.t.b, 1), gt(plus(test.t.a, test.t.b), 10)",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    TableScan_5 table:t1, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select b, @i:=@i+1 as ii from (select b, @i:=0 from t as t1) as t2 where @i < 10",
        "Result": [
          "Group#0 Schema:[test.t.b,Column#14]",
          "    Projection_4 input:[Group#1], test.t.b, setvar(i, cast(plus(cast(getvar(i)), 1)))->Column#14",
          "Group#1 Schema:[test.t.b,Column#13]",
          "    Selection_3 input:[Group#2], lt(cast(getvar(\"i\")), 10)",
          "Group#2 Schema:[test.t.b,Column#13]",
          "    Projection_2 input:[Group#3], test.t.b, setvar(i, 0)->Column#13",
          "Group#3 Schema:[test.t.b]",
          "    TiKVSingleGather_6 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.b]",
          "    TableScan_5 table:t1"
        ]
      },
      {
        "SQL": "select b, @i:=@i+1 as ii from (select a, b, @i:=0 from t as t1) as t2 where @i < 10 and a > 10",
        "Result": [
          "Group#0 Schema:[test.t.b,Column#14]",
          "    Projection_4 input:[Group#1], test.t.b, setvar(i, cast(plus(cast(getvar(i)), 1)))->Column#14",
          "Group#1 Schema:[test.t.a,test.t.b,Column#13]",
          "    Selection_8 input:[Group#2], lt(cast(getvar(\"i\")), 10)",
          "Group#2 Schema:[test.t.a,test.t.b,Column#13]",
          "    Projection_2 input:[Group#3], test.t.a, test.t.b, setvar(i, 0)->Column#13",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_6 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    TableScan_10 table:t1, pk col:test.t.a, cond:[gt(test.t.a, 10)]"
        ]
      },
      {
        "SQL": "select a, max(b) from t group by a having a > 1",
        "Result": [
          "Group#0 Schema:[test.t.a,Column#13]",
          "    Projection_3 input:[Group#1], test.t.a, Column#13",
          "Group#1 Schema:[Column#13,test.t.a]",
          "    Aggregation_2 input:[Group#2], group by:test.t.a, funcs:max(test.t.b), firstrow(test.t.a)",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_6 input:[Group#3], table:t",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TableScan_10 table:t, pk col:test.t.a, cond:[gt(test.t.a, 1)]"
        ]
      },
      {
        "SQL": "select a, avg(b) from t group by a having a > 1 and max(b) > 10",
        "Result": [
          "Group#0 Schema:[test.t.a,Column#16]",
          "    Projection_5 input:[Group#1], test.t.a, Column#13",
          "Group#1 Schema:[test.t.a,Column#13,Column#14]",
          "    Projection_3 input:[Group#2], test.t.a, Column#13, Column#14",
          "Group#2 Schema:[Column#13,Column#14,test.t.a]",
          "    Selection_10 input:[Group#3], gt(Column#14, 10)",
          "Group#3 Schema:[Column#13,Column#14,test.t.a]",
          "    Aggregation_2 input:[Group#4], group by:test.t.a, funcs:avg(test.t.b), max(test.t.b), firstrow(test.t.a)",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_7 input:[Group#5], table:t",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TableScan_12 table:t, pk col:test.t.a, cond:[gt(test.t.a, 1)]"
        ]
      },
      {
        "SQL": "select t1.a, t1.b, t2.b from t t1, t t2 where t1.a = t2.a and t2.b = t1.b and t1.a > 10 and t2.b > 10 and t1.a > t2.b",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.b]",
          "    Projection_5 input:[Group#1], test.t.a, test.t.b, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.a,test.t.b]",
          "    Join_3 input:[Group#2,Group#3], inner join, equal:[eq(test.t.a, test.t.a) eq(test.t.b, test.t.b)], other cond:gt(test.t.a, test.t.b)",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_7 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    Selection_14 input:[Group#5], gt(test.t.a, test.t.b), gt(test.t.b, 10)",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TableScan_13 table:t1, pk col:test.t.a, cond:[gt(test.t.a, 10)]",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_9 input:[Group#6], table:t2",
          "Group#6 Schema:[test.t.a,test.t.b]",
          "    Selection_17 input:[Group#7], gt(test.t.a, test.t.b), gt(test.t.b, 10)",
          "Group#7 Schema:[test.t.a,test.t.b]",
          "    TableScan_16 table:t2, pk col:test.t.a, cond:[gt(test.t.a, 10)]"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t t1, t t2 where t1.a = t2.a and t1.a = 10 and t2.a = 5",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    Projection_5 input:[Group#1], test.t.a, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.a]",
          "    TableDual_22 rowcount:0"
        ]
      },
      {
        "SQL": "select a, f from t where f > 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.f]",
          "    Projection_3 input:[Group#1], test.t.a, test.t.f",
          "Group#1 Schema:[test.t.a,test.t.f]",
          "    TiKVSingleGather_5 input:[Group#2], table:t",
          "    TiKVSingleGather_7 input:[Group#3], table:t, index:f",
          "    TiKVSingleGather_9 input:[Group#4], table:t, index:f_g",
          "Group#2 Schema:[test.t.a,test.t.f]",
          "    Selection_10 input:[Group#5], gt(test.t.f, 1)",
          "Group#5 Schema:[test.t.a,test.t.f]",
          "    TableScan_4 table:t, pk col:test.t.a",
          "Group#3 Schema:[test.t.a,test.t.f]",
          "    IndexScan_13 table:t, index:f, cond:[gt(test.t.f, 1)]",
          "Group#4 Schema:[test.t.a,test.t.f]",
          "    IndexScan_14 table:t, index:f, g, cond:[gt(test.t.f, 1)]"
        ]
      },
      {
        "SQL": "select a, f from (select a, f, g from t where f = 1) t1 where g > 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.f]",
          "    Projection_5 input:[Group#1], test.t.a, test.t.f",
          "Group#1 Schema:[test.t.a,test.t.f,test.t.g]",
          "    Projection_3 input:[Group#2], test.t.a, test.t.f, test.t.g",
          "Group#2 Schema:[test.t.a,test.t.f,test.t.g]",
          "    TiKVSingleGather_7 input:[Group#3], table:t",
          "    TiKVSingleGather_9 input:[Group#4], table:t, index:f_g",
          "Group#3 Schema:[test.t.a,test.t.f,test.t.g]",
          "    Selection_16 input:[Group#5], eq(test.t.f, 1), gt(test.t.g, 1)",
          "Group#5 Schema:[test.t.a,test.t.f,test.t.g]",
          "    TableScan_6 table:t, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.f,test.t.g]",
          "    IndexScan_17 table:t, index:f, g, cond:[eq(test.t.f, 1) gt(test.t.g, 1)]"
        ]
      },
      {
        "SQL": "select a, f from t where g > 1 and f > 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.f]",
          "    Projection_3 input:[Group#1], test.t.a, test.t.f",
          "Group#1 Schema:[test.t.a,test.t.f,test.t.g]",
          "    TiKVSingleGather_5 input:[Group#2], table:t",
          "    TiKVSingleGather_7 input:[Group#3], table:t, index:f_g",
          "Group#2 Schema:[test.t.a,test.t.f,test.t.g]",
          "    Selection_8 input:[Group#4], gt(test.t.f, 1), gt(test.t.g, 1)",
          "Group#4 Schema:[test.t.a,test.t.f,test.t.g]",
          "    TableScan_4 table:t, pk col:test.t.a",
          "Group#3 Schema:[test.t.a,test.t.f,test.t.g]",
          "    Selection_11 input:[Group#5], gt(test.t.g, 1)",
          "Group#5 Schema:[test.t.a,test.t.f,test.t.g]",
          "    IndexScan_10 table:t, index:f, g, cond:[gt(test.t.f, 1)]"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t t1, t t2 where t1.a = t2.a and t1.a = 10 and t2.a = 5",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    Projection_5 input:[Group#1], test.t.a, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.a]",
          "    TableDual_22 rowcount:0"
        ]
      },
      {
        "SQL": "select a, b from ((select a, b from t) union all(select c as a, d as b from t)) as t1 where a > 1",
        "Result": [
          "Group#0 Schema:[Column#25,Column#26]",
          "    Projection_9 input:[Group#1], Column#25, Column#26",
          "Group#1 Schema:[Column#25,Column#26]",
          "    Union_5 input:[Group#2,Group#3]",
          "Group#2 Schema:[Column#25,Column#26]",
          "    Projection_6 input:[Group#4], test.t.a, test.t.b",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    Projection_4 input:[Group#5], test.t.a, test.t.b",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_11 input:[Group#6], table:t",
          "Group#6 Schema:[test.t.a,test.t.b]",
          "    TableScan_19 table:t, pk col:test.t.a, cond:[gt(test.t.a, 1)]",
          "Group#3 Schema:[Column#25,Column#26]",
          "    Projection_7 input:[Group#7], test.t.c, test.t.d",
          "Group#7 Schema:[test.t.c,test.t.d]",
          "    Projection_2 input:[Group#8], test.t.c, test.t.d",
          "Group#8 Schema:[test.t.c,test.t.d]",
          "    TiKVSingleGather_13 input:[Group#9], table:t",
          "    TiKVSingleGather_15 input:[Group#10], table:t, index:c_d_e",
          "Group#9 Schema:[test.t.c,test.t.d]",
          "    Selection_22 input:[Group#11], gt(test.t.c, 1)",
          "Group#11 Schema:[test.t.c,test.t.d]",
          "    TableScan_12 table:t",
          "Group#10 Schema:[test.t.c,test.t.d]",
          "    IndexScan_24 table:t, index:c, d, e, cond:[gt(test.t.c, 1)]"
        ]
      },
      {
        "SQL": "select a, b from (select a, b, min(a) over(partition by b) as min_a from t)as tt where a < 10 and b > 10 and b = min_a",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    Projection_7 input:[Group#1], test.t.a, test.t.b",
          "Group#1 Schema:[test.t.a,test.t.b,Column#14]",
          "    Projection_5 input:[Group#2], test.t.a, test.t.b, Column#14",
          "Group#2 Schema:[test.t.a,test.t.b,Column#14]",
          "    Selection_12 input:[Group#3], eq(test.t.b, Column#14), lt(test.t.a, 10)",
          "Group#3 Schema:[test.t.a,test.t.b,Column#14]",
          "    Window_4 input:[Group#4]",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    Projection_3 input:[Group#5], test.t.a, test.t.b",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    Projection_2 input:[Group#6], test.t.a, test.t.b",
          "Group#6 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_9 input:[Group#7], table:t",
          "Group#7 Schema:[test.t.a,test.t.b]",
          "    Selection_15 input:[Group#8], gt(test.t.b, 10)",
          "Group#8 Schema:[test.t.a,test.t.b]",
          "    TableScan_8 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select b, c from (select b, c from t where b > 1 and c > 1) as t1 where b > 2 and c > 2",
        "Result": [
          "Group#0 Schema:[test.t.b,test.t.c]",
          "    Projection_5 input:[Group#1], test.t.b, test.t.c",
          "Group#1 Schema:[test.t.b,test.t.c]",
          "    Projection_3 input:[Group#2], test.t.b, test.t.c",
          "Group#2 Schema:[test.t.b,test.t.c]",
          "    TiKVSingleGather_7 input:[Group#3], table:t",
          "Group#3 Schema:[test.t.b,test.t.c]",
          "    Selection_11 input:[Group#4], gt(test.t.b, 1), gt(test.t.b, 2), gt(test.t.c, 1), gt(test.t.c, 2)",
          "Group#4 Schema:[test.t.b,test.t.c]",
          "    TableScan_6 table:t"
        ]
      }
    ]
  },
  {
    "Name": "TestAggPushDownGather",
    "Cases": [
      {
        "SQL": "select b, sum(a) from t group by b",
        "Result": [
          "Group#0 Schema:[test.t.b,Column#13], UniqueKey:[test.t.b]",
          "    Projection_3 input:[Group#1], test.t.b, Column#13",
          "Group#1 Schema:[Column#13,test.t.b], UniqueKey:[test.t.b]",
          "    Aggregation_2 input:[Group#2], group by:test.t.b, funcs:sum(test.t.a), firstrow(test.t.b)",
          "    Aggregation_7 input:[Group#3], group by:test.t.b, funcs:sum(Column#14), firstrow(test.t.b)",
          "Group#2 Schema:[test.t.a,test.t.b], UniqueKey:[test.t.a]",
          "    TiKVSingleGather_5 input:[Group#4], table:t",
          "Group#4 Schema:[test.t.a,test.t.b], UniqueKey:[test.t.a]",
          "    TableScan_4 table:t, pk col:test.t.a",
          "Group#3 Schema:[Column#14,test.t.b]",
          "    TiKVSingleGather_5 input:[Group#5], table:t",
          "Group#5 Schema:[Column#14,test.t.b]",
          "    Aggregation_6 input:[Group#4], group by:test.t.b, funcs:sum(test.t.a)"
        ]
      },
      {
        "SQL": "select b, sum(a) from t group by c, b",
        "Result": [
          "Group#0 Schema:[test.t.b,Column#13]",
          "    Projection_3 input:[Group#1], test.t.b, Column#13",
          "Group#1 Schema:[Column#13,test.t.b]",
          "    Aggregation_2 input:[Group#2], group by:test.t.b, test.t.c, funcs:sum(test.t.a), firstrow(test.t.b)",
          "    Aggregation_7 input:[Group#3], group by:test.t.b, test.t.c, funcs:sum(Column#14), firstrow(test.t.b)",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c], UniqueKey:[test.t.a]",
          "    TiKVSingleGather_5 input:[Group#4], table:t",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c], UniqueKey:[test.t.a]",
          "    TableScan_4 table:t, pk col:test.t.a",
          "Group#3 Schema:[Column#14,test.t.c,test.t.b]",
          "    TiKVSingleGather_5 input:[Group#5], table:t",
          "Group#5 Schema:[Column#14,test.t.c,test.t.b]",
          "    Aggregation_6 input:[Group#4], group by:test.t.b, test.t.c, funcs:sum(test.t.a)"
        ]
      },
      {
        "SQL": "select b, sum(a) from t group by sin(b)+sin(c), b",
        "Result": [
          "Group#0 Schema:[test.t.b,Column#13]",
          "    Projection_3 input:[Group#1], test.t.b, Column#13",
          "Group#1 Schema:[Column#13,test.t.b]",
          "    Aggregation_2 input:[Group#2], group by:plus(sin(cast(test.t.b)), sin(cast(test.t.c))), test.t.b, funcs:sum(test.t.a), firstrow(test.t.b)",
          "    Aggregation_7 input:[Group#3], group by:Column#16, test.t.b, funcs:sum(Column#14), firstrow(test.t.b)",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c], UniqueKey:[test.t.a]",
          "    TiKVSingleGather_5 input:[Group#4], table:t",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c], UniqueKey:[test.t.a]",
          "    TableScan_4 table:t, pk col:test.t.a",
          "Group#3 Schema:[Column#14,Column#16,test.t.b]",
          "    TiKVSingleGather_5 input:[Group#5], table:t",
          "Group#5 Schema:[Column#14,Column#16,test.t.b]",
          "    Aggregation_6 input:[Group#4], group by:plus(sin(cast(test.t.b)), sin(cast(test.t.c))), test.t.b, funcs:sum(test.t.a)"
        ]
      }
    ]
  },
  {
    "Name": "TestTopNRules",
    "Cases": [
      {
        "SQL": "select b from t order by a limit 2",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_5 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b,test.t.a]",
          "    Projection_2 input:[Group#2], test.t.b, test.t.a",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    TopN_9 input:[Group#3], test.t.a:asc, offset:0, count:2",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_7 input:[Group#4], table:t",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    TopN_10 input:[Group#5], test.t.a:asc, offset:0, count:2",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TableScan_6 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select b from t limit 2",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_2 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Limit_3 input:[Group#2], offset:0, count:2",
          "Group#2 Schema:[test.t.b]",
          "    TiKVSingleGather_5 input:[Group#3], table:t",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_4 table:t"
        ]
      },
      {
        "SQL": "select a+b from t order by a limit 1 offset 2",
        "Result": [
          "Group#0 Schema:[Column#14]",
          "    Projection_5 input:[Group#1], Column#13",
          "Group#1 Schema:[Column#13,test.t.a]",
          "    Projection_2 input:[Group#2], plus(test.t.a, test.t.b)->Column#13, test.t.a",
          "Group#2 Schema:[test.t.a,test.t.b]",
          "    TopN_9 input:[Group#3], test.t.a:asc, offset:2, count:1",
          "Group#3 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_7 input:[Group#4], table:t",
          "Group#4 Schema:[test.t.a,test.t.b]",
          "    TopN_10 input:[Group#5], test.t.a:asc, offset:0, count:3",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TableScan_6 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select c from t order by t.a limit 1",
        "Result": [
          "Group#0 Schema:[test.t.c]",
          "    Projection_5 input:[Group#1], test.t.c",
          "Group#1 Schema:[test.t.c,test.t.a]",
          "    Projection_2 input:[Group#2], test.t.c, test.t.a",
          "Group#2 Schema:[test.t.a,test.t.c]",
          "    TopN_11 input:[Group#3], test.t.a:asc, offset:0, count:1",
          "    TopN_11 input:[Group#4], test.t.a:asc, offset:0, count:1",
          "Group#3 Schema:[test.t.a,test.t.c]",
          "    TiKVSingleGather_9 input:[Group#5], table:t, index:c_d_e",
          "Group#5 Schema:[test.t.a,test.t.c]",
          "    TopN_13 input:[Group#6], test.t.a:asc, offset:0, count:1",
          "Group#6 Schema:[test.t.a,test.t.c]",
          "    IndexScan_8 table:t, index:c, d, e",
          "Group#4 Schema:[test.t.a,test.t.c]",
          "    TiKVSingleGather_7 input:[Group#7], table:t",
          "Group#7 Schema:[test.t.a,test.t.c]",
          "    TopN_12 input:[Group#8], test.t.a:asc, offset:0, count:1",
          "Group#8 Schema:[test.t.a,test.t.c]",
          "    TableScan_6 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select c from t order by t.a + t.b limit 1",
        "Result": [
          "Group#0 Schema:[test.t.c]",
          "    Projection_5 input:[Group#1], test.t.c",
          "Group#1 Schema:[test.t.c,test.t.a,test.t.b]",
          "    Projection_2 input:[Group#2], test.t.c, test.t.a, test.t.b",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TopN_9 input:[Group#3], plus(test.t.a, test.t.b):asc, offset:0, count:1",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TiKVSingleGather_7 input:[Group#4], table:t",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TopN_10 input:[Group#5], plus(test.t.a, test.t.b):asc, offset:0, count:1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TableScan_6 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select a, b, c from t t1 where t1.a in (select t2.a as a from t t2 where t2.b > t1.b order by t1.b limit 1)",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c]",
          "    Projection_9 input:[Group#1], test.t.a, test.t.b, test.t.c",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c]",
          "    Apply_8 input:[Group#2,Group#3], semi join, equal:[eq(test.t.a, test.t.a)]",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TiKVSingleGather_11 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TableScan_10 table:t1, pk col:test.t.a",
          "Group#3 Schema:[test.t.a]",
          "    Projection_5 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a,test.t.b]",
          "    TopN_15 input:[Group#6], , offset:0, count:1",
          "Group#6 Schema:[test.t.a,test.t.b]",
          "    Selection_4 input:[Group#7], gt(test.t.b, test.t.b)",
          "Group#7 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_13 input:[Group#8], table:t2",
          "Group#8 Schema:[test.t.a,test.t.b]",
          "    TableScan_12 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select a, b, c from t t1 where t1.a in (select a from (select t2.a as a, t1.b as b from t t2 where t2.b > t1.b) x order by b limit 1)",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c]",
          "    Projection_11 input:[Group#1], test.t.a, test.t.b, test.t.c",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c]",
          "    Apply_10 input:[Group#2,Group#3], semi join, equal:[eq(test.t.a, test.t.a)]",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TiKVSingleGather_13 input:[Group#4], table:t1",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c]",
          "    TableScan_12 table:t1, pk col:test.t.a",
          "Group#3 Schema:[test.t.a]",
          "    Projection_9 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a,Column#25]",
          "    Projection_6 input:[Group#6], test.t.a, Column#25",
          "Group#6 Schema:[test.t.a,Column#25]",
          "    Projection_5 input:[Group#7], test.t.a, test.t.b",
          "Group#7 Schema:[test.t.a,test.t.b]",
          "    TopN_18 input:[Group#8], test.t.b:asc, offset:0, count:1",
          "Group#8 Schema:[test.t.a,test.t.b]",
          "    Selection_4 input:[Group#9], gt(test.t.b, test.t.b)",
          "Group#9 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_15 input:[Group#10], table:t2",
          "Group#10 Schema:[test.t.a,test.t.b]",
          "    TableScan_14 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select a, b from (select @i as a, @i := @i+1 as b from t) t order by a desc limit 1",
        "Result": [
          "Group#0 Schema:[Column#13,Column#14]",
          "    Projection_3 input:[Group#1], Column#13, Column#14",
          "Group#1 Schema:[Column#13,Column#14]",
          "    TopN_21 input:[Group#2], Column#13:desc, offset:0, count:1",
          "Group#2 Schema:[Column#13,Column#14]",
          "    Projection_2 input:[Group#3], getvar(i)->Column#13, setvar(i, cast(plus(cast(getvar(i)), 1)))->Column#14",
          "Group#3 Schema:[test.t.a]",
          "    TiKVSingleGather_7 input:[Group#4], table:t",
          "    TiKVSingleGather_19 input:[Group#5], table:t, index:e_d_c_str_prefix",
          "    TiKVSingleGather_17 input:[Group#6], table:t, index:c_d_e_str",
          "    TiKVSingleGather_15 input:[Group#7], table:t, index:f_g",
          "    TiKVSingleGather_13 input:[Group#8], table:t, index:g",
          "    TiKVSingleGather_11 input:[Group#9], table:t, index:f",
          "    TiKVSingleGather_9 input:[Group#10], table:t, index:c_d_e",
          "Group#4 Schema:[test.t.a]",
          "    TableScan_6 table:t, pk col:test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    IndexScan_18 table:t, index:e_str, d_str, c_str",
          "Group#6 Schema:[test.t.a]",
          "    IndexScan_16 table:t, index:c_str, d_str, e_str",
          "Group#7 Schema:[test.t.a]",
          "    IndexScan_14 table:t, index:f, g",
          "Group#8 Schema:[test.t.a]",
          "    IndexScan_12 table:t, index:g",
          "Group#9 Schema:[test.t.a]",
          "    IndexScan_10 table:t, index:f",
          "Group#10 Schema:[test.t.a]",
          "    IndexScan_8 table:t, index:c, d, e"
        ]
      },
      {
        "SQL": "select * from t t1 left join t t2 on t1.b = t2.b order by t1.b limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.b:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], left outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_13 input:[Group#5], test.t.b:asc, offset:0, count:1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#6], table:t1",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_14 input:[Group#7], test.t.b:asc, offset:0, count:1",
          "Group#7 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#8], table:t2",
          "Group#8 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select * from t t1 left join t t2 on t1.b = t2.b order by t1.a, t1.c limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], left outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_13 input:[Group#5], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#6], table:t1",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_14 input:[Group#7], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#7 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#8], table:t2",
          "Group#8 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select * from t t1 left join t t2 on t1.b = t2.b order by t2.a, t2.c limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], left outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#5], table:t1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#6], table:t2",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select * from t t1 left join t t2 on t1.b = t2.b order by t1.a, t2.c limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], left outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#5], table:t1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#6], table:t2",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select * from t t1 right join t t2 on t1.b = t2.b order by t1.a, t1.c limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], right outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#5], table:t1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#6], table:t2",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select * from t t1 right join t t2 on t1.b = t2.b order by t2.a, t2.c limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], right outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#5], table:t1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_13 input:[Group#6], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#7], table:t2",
          "Group#7 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_14 input:[Group#8], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#8 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "select * from t t1 right join t t2 on t1.b = t2.b order by t1.a, t2.c limit 1",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Projection_4 input:[Group#1], test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date, test.t.a, test.t.b, test.t.c, test.t.d, test.t.e, test.t.c_str, test.t.d_str, test.t.e_str, test.t.f, test.t.g, test.t.h, test.t.i_date",
          "Group#1 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TopN_12 input:[Group#2], test.t.a:asc, test.t.c:asc, offset:0, count:1",
          "Group#2 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date,test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    Join_3 input:[Group#3,Group#4], right outer join, equal:[eq(test.t.b, test.t.b)]",
          "Group#3 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_8 input:[Group#5], table:t1",
          "Group#5 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_7 table:t1, pk col:test.t.a",
          "Group#4 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TiKVSingleGather_10 input:[Group#6], table:t2",
          "Group#6 Schema:[test.t.a,test.t.b,test.t.c,test.t.d,test.t.e,test.t.c_str,test.t.d_str,test.t.e_str,test.t.f,test.t.g,test.t.h,test.t.i_date]",
          "    TableScan_9 table:t2, pk col:test.t.a"
        ]
      },
      {
        "SQL": "(select a from t) union all (select b from t) order by a limit 2;",
        "Result": [
          "Group#0 Schema:[Column#25]",
          "    TopN_26 input:[Group#1], Column#25:asc, offset:0, count:2",
          "Group#1 Schema:[Column#25]",
          "    Union_5 input:[Group#2,Group#3]",
          "Group#2 Schema:[Column#25]",
          "    Projection_6 input:[Group#4], test.t.a",
          "Group#4 Schema:[test.t.a]",
          "    Projection_4 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    TopN_29 input:[Group#6], test.t.a:asc, offset:0, count:2",
          "    TopN_29 input:[Group#7], test.t.a:asc, offset:0, count:2",
          "    TopN_29 input:[Group#8], test.t.a:asc, offset:0, count:2",
          "    TopN_29 input:[Group#9], test.t.a:asc, offset:0, count:2",
          "    TopN_29 input:[Group#10], test.t.a:asc, offset:0, count:2",
          "    TopN_29 input:[Group#11], test.t.a:asc, offset:0, count:2",
          "    TopN_29 input:[Group#12], test.t.a:asc, offset:0, count:2",
          "Group#6 Schema:[test.t.a]",
          "    TiKVSingleGather_13 input:[Group#13], table:t, index:c_d_e",
          "Group#13 Schema:[test.t.a]",
          "    TopN_36 input:[Group#14], test.t.a:asc, offset:0, count:2",
          "Group#14 Schema:[test.t.a]",
          "    IndexScan_12 table:t, index:c, d, e",
          "Group#7 Schema:[test.t.a]",
          "    TiKVSingleGather_15 input:[Group#15], table:t, index:f",
          "Group#15 Schema:[test.t.a]",
          "    TopN_35 input:[Group#16], test.t.a:asc, offset:0, count:2",
          "Group#16 Schema:[test.t.a]",
          "    IndexScan_14 table:t, index:f",
          "Group#8 Schema:[test.t.a]",
          "    TiKVSingleGather_17 input:[Group#17], table:t, index:g",
          "Group#17 Schema:[test.t.a]",
          "    TopN_34 input:[Group#18], test.t.a:asc, offset:0, count:2",
          "Group#18 Schema:[test.t.a]",
          "    IndexScan_16 table:t, index:g",
          "Group#9 Schema:[test.t.a]",
          "    TiKVSingleGather_19 input:[Group#19], table:t, index:f_g",
          "Group#19 Schema:[test.t.a]",
          "    TopN_33 input:[Group#20], test.t.a:asc, offset:0, count:2",
          "Group#20 Schema:[test.t.a]",
          "    IndexScan_18 table:t, index:f, g",
          "Group#10 Schema:[test.t.a]",
          "    TiKVSingleGather_21 input:[Group#21], table:t, index:c_d_e_str",
          "Group#21 Schema:[test.t.a]",
          "    TopN_32 input:[Group#22], test.t.a:asc, offset:0, count:2",
          "Group#22 Schema:[test.t.a]",
          "    IndexScan_20 table:t, index:c_str, d_str, e_str",
          "Group#11 Schema:[test.t.a]",
          "    TiKVSingleGather_23 input:[Group#23], table:t, index:e_d_c_str_prefix",
          "Group#23 Schema:[test.t.a]",
          "    TopN_31 input:[Group#24], test.t.a:asc, offset:0, count:2",
          "Group#24 Schema:[test.t.a]",
          "    IndexScan_22 table:t, index:e_str, d_str, c_str",
          "Group#12 Schema:[test.t.a]",
          "    TiKVSingleGather_11 input:[Group#25], table:t",
          "Group#25 Schema:[test.t.a]",
          "    TopN_30 input:[Group#26], test.t.a:asc, offset:0, count:2",
          "Group#26 Schema:[test.t.a]",
          "    TableScan_10 table:t, pk col:test.t.a",
          "Group#3 Schema:[Column#25]",
          "    Projection_7 input:[Group#27], test.t.b",
          "Group#27 Schema:[test.t.b]",
          "    Projection_2 input:[Group#28], test.t.b",
          "Group#28 Schema:[test.t.b]",
          "    TopN_38 input:[Group#29], test.t.b:asc, offset:0, count:2",
          "Group#29 Schema:[test.t.b]",
          "    TiKVSingleGather_25 input:[Group#30], table:t",
          "Group#30 Schema:[test.t.b]",
          "    TopN_39 input:[Group#31], test.t.b:asc, offset:0, count:2",
          "Group#31 Schema:[test.t.b]",
          "    TableScan_24 table:t"
        ]
      },
      {
        "SQL": "(select a from t) union all (select b from t) limit 2;",
        "Result": [
          "Group#0 Schema:[Column#25]",
          "    Limit_8 input:[Group#1], offset:0, count:2",
          "Group#1 Schema:[Column#25]",
          "    Union_5 input:[Group#2,Group#3]",
          "Group#2 Schema:[Column#25]",
          "    Projection_6 input:[Group#4], test.t.a",
          "Group#4 Schema:[test.t.a]",
          "    Projection_4 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    Limit_25 input:[Group#6], offset:0, count:2",
          "Group#6 Schema:[test.t.a]",
          "    TiKVSingleGather_10 input:[Group#7], table:t",
          "    TiKVSingleGather_22 input:[Group#8], table:t, index:e_d_c_str_prefix",
          "    TiKVSingleGather_20 input:[Group#9], table:t, index:c_d_e_str",
          "    TiKVSingleGather_18 input:[Group#10], table:t, index:f_g",
          "    TiKVSingleGather_16 input:[Group#11], table:t, index:g",
          "    TiKVSingleGather_14 input:[Group#12], table:t, index:f",
          "    TiKVSingleGather_12 input:[Group#13], table:t, index:c_d_e",
          "Group#7 Schema:[test.t.a]",
          "    TableScan_9 table:t, pk col:test.t.a",
          "Group#8 Schema:[test.t.a]",
          "    IndexScan_21 table:t, index:e_str, d_str, c_str",
          "Group#9 Schema:[test.t.a]",
          "    IndexScan_19 table:t, index:c_str, d_str, e_str",
          "Group#10 Schema:[test.t.a]",
          "    IndexScan_17 table:t, index:f, g",
          "Group#11 Schema:[test.t.a]",
          "    IndexScan_15 table:t, index:g",
          "Group#12 Schema:[test.t.a]",
          "    IndexScan_13 table:t, index:f",
          "Group#13 Schema:[test.t.a]",
          "    IndexScan_11 table:t, index:c, d, e",
          "Group#3 Schema:[Column#25]",
          "    Projection_7 input:[Group#14], test.t.b",
          "Group#14 Schema:[test.t.b]",
          "    Projection_2 input:[Group#15], test.t.b",
          "Group#15 Schema:[test.t.b]",
          "    Limit_25 input:[Group#16], offset:0, count:2",
          "Group#16 Schema:[test.t.b]",
          "    TiKVSingleGather_24 input:[Group#17], table:t",
          "Group#17 Schema:[test.t.b]",
          "    TableScan_23 table:t"
        ]
      },
      {
        "SQL": "(select a from t) union all (select b from t) limit 2 offset 5;",
        "Result": [
          "Group#0 Schema:[Column#25]",
          "    Limit_8 input:[Group#1], offset:5, count:2",
          "Group#1 Schema:[Column#25]",
          "    Union_5 input:[Group#2,Group#3]",
          "Group#2 Schema:[Column#25]",
          "    Projection_6 input:[Group#4], test.t.a",
          "Group#4 Schema:[test.t.a]",
          "    Projection_4 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    Limit_25 input:[Group#6], offset:0, count:7",
          "Group#6 Schema:[test.t.a]",
          "    TiKVSingleGather_10 input:[Group#7], table:t",
          "    TiKVSingleGather_22 input:[Group#8], table:t, index:e_d_c_str_prefix",
          "    TiKVSingleGather_20 input:[Group#9], table:t, index:c_d_e_str",
          "    TiKVSingleGather_18 input:[Group#10], table:t, index:f_g",
          "    TiKVSingleGather_16 input:[Group#11], table:t, index:g",
          "    TiKVSingleGather_14 input:[Group#12], table:t, index:f",
          "    TiKVSingleGather_12 input:[Group#13], table:t, index:c_d_e",
          "Group#7 Schema:[test.t.a]",
          "    TableScan_9 table:t, pk col:test.t.a",
          "Group#8 Schema:[test.t.a]",
          "    IndexScan_21 table:t, index:e_str, d_str, c_str",
          "Group#9 Schema:[test.t.a]",
          "    IndexScan_19 table:t, index:c_str, d_str, e_str",
          "Group#10 Schema:[test.t.a]",
          "    IndexScan_17 table:t, index:f, g",
          "Group#11 Schema:[test.t.a]",
          "    IndexScan_15 table:t, index:g",
          "Group#12 Schema:[test.t.a]",
          "    IndexScan_13 table:t, index:f",
          "Group#13 Schema:[test.t.a]",
          "    IndexScan_11 table:t, index:c, d, e",
          "Group#3 Schema:[Column#25]",
          "    Projection_7 input:[Group#14], test.t.b",
          "Group#14 Schema:[test.t.b]",
          "    Projection_2 input:[Group#15], test.t.b",
          "Group#15 Schema:[test.t.b]",
          "    Limit_25 input:[Group#16], offset:0, count:7",
          "Group#16 Schema:[test.t.b]",
          "    TiKVSingleGather_24 input:[Group#17], table:t",
          "Group#17 Schema:[test.t.b]",
          "    TableScan_23 table:t"
        ]
      },
      {
        "SQL": "(select a from t) union all (select sum(a) from t where a > 2 group by b) order by a limit 2;",
        "Result": [
          "Group#0 Schema:[Column#26]",
          "    TopN_28 input:[Group#1], Column#26:asc, offset:0, count:2",
          "Group#1 Schema:[Column#26]",
          "    Union_7 input:[Group#2,Group#3]",
          "Group#2 Schema:[Column#26]",
          "    Projection_8 input:[Group#4], cast(test.t.a)->Column#26",
          "Group#4 Schema:[test.t.a]",
          "    Projection_6 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    TopN_31 input:[Group#6], cast(test.t.a):asc, offset:0, count:2",
          "    TopN_31 input:[Group#7], cast(test.t.a):asc, offset:0, count:2",
          "    TopN_31 input:[Group#8], cast(test.t.a):asc, offset:0, count:2",
          "    TopN_31 input:[Group#9], cast(test.t.a):asc, offset:0, count:2",
          "    TopN_31 input:[Group#10], cast(test.t.a):asc, offset:0, count:2",
          "    TopN_31 input:[Group#11], cast(test.t.a):asc, offset:0, count:2",
          "    TopN_31 input:[Group#12], cast(test.t.a):asc, offset:0, count:2",
          "Group#6 Schema:[test.t.a]",
          "    TiKVSingleGather_15 input:[Group#13], table:t, index:c_d_e",
          "Group#13 Schema:[test.t.a]",
          "    TopN_38 input:[Group#14], cast(test.t.a):asc, offset:0, count:2",
          "Group#14 Schema:[test.t.a]",
          "    IndexScan_14 table:t, index:c, d, e",
          "Group#7 Schema:[test.t.a]",
          "    TiKVSingleGather_17 input:[Group#15], table:t, index:f",
          "Group#15 Schema:[test.t.a]",
          "    TopN_37 input:[Group#16], cast(test.t.a):asc, offset:0, count:2",
          "Group#16 Schema:[test.t.a]",
          "    IndexScan_16 table:t, index:f",
          "Group#8 Schema:[test.t.a]",
          "    TiKVSingleGather_19 input:[Group#17], table:t, index:g",
          "Group#17 Schema:[test.t.a]",
          "    TopN_36 input:[Group#18], cast(test.t.a):asc, offset:0, count:2",
          "Group#18 Schema:[test.t.a]",
          "    IndexScan_18 table:t, index:g",
          "Group#9 Schema:[test.t.a]",
          "    TiKVSingleGather_21 input:[Group#19], table:t, index:f_g",
          "Group#19 Schema:[test.t.a]",
          "    TopN_35 input:[Group#20], cast(test.t.a):asc, offset:0, count:2",
          "Group#20 Schema:[test.t.a]",
          "    IndexScan_20 table:t, index:f, g",
          "Group#10 Schema:[test.t.a]",
          "    TiKVSingleGather_23 input:[Group#21], table:t, index:c_d_e_str",
          "Group#21 Schema:[test.t.a]",
          "    TopN_34 input:[Group#22], cast(test.t.a):asc, offset:0, count:2",
          "Group#22 Schema:[test.t.a]",
          "    IndexScan_22 table:t, index:c_str, d_str, e_str",
          "Group#11 Schema:[test.t.a]",
          "    TiKVSingleGather_25 input:[Group#23], table:t, index:e_d_c_str_prefix",
          "Group#23 Schema:[test.t.a]",
          "    TopN_33 input:[Group#24], cast(test.t.a):asc, offset:0, count:2",
          "Group#24 Schema:[test.t.a]",
          "    IndexScan_24 table:t, index:e_str, d_str, c_str",
          "Group#12 Schema:[test.t.a]",
          "    TiKVSingleGather_13 input:[Group#25], table:t",
          "Group#25 Schema:[test.t.a]",
          "    TopN_32 input:[Group#26], cast(test.t.a):asc, offset:0, count:2",
          "Group#26 Schema:[test.t.a]",
          "    TableScan_12 table:t, pk col:test.t.a",
          "Group#3 Schema:[Column#26]",
          "    Projection_9 input:[Group#27], cast(Column#13)->Column#26",
          "Group#27 Schema:[Column#13]",
          "    Projection_4 input:[Group#28], Column#13",
          "Group#28 Schema:[Column#13]",
          "    TopN_40 input:[Group#29], cast(Column#13):asc, offset:0, count:2",
          "Group#29 Schema:[Column#13]",
          "    Aggregation_3 input:[Group#30], group by:test.t.b, funcs:sum(test.t.a)",
          "Group#30 Schema:[test.t.a,test.t.b]",
          "    Selection_2 input:[Group#31], gt(test.t.a, 2)",
          "Group#31 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_27 input:[Group#32], table:t",
          "Group#32 Schema:[test.t.a,test.t.b]",
          "    TableScan_26 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "(select a from t) union all (select sum(a) from t where a > 2 group by b) order by a limit 1, 2;",
        "Result": [
          "Group#0 Schema:[Column#26]",
          "    TopN_28 input:[Group#1], Column#26:asc, offset:1, count:2",
          "Group#1 Schema:[Column#26]",
          "    Union_7 input:[Group#2,Group#3]",
          "Group#2 Schema:[Column#26]",
          "    Projection_8 input:[Group#4], cast(test.t.a)->Column#26",
          "Group#4 Schema:[test.t.a]",
          "    Projection_6 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    TopN_31 input:[Group#6], cast(test.t.a):asc, offset:0, count:3",
          "    TopN_31 input:[Group#7], cast(test.t.a):asc, offset:0, count:3",
          "    TopN_31 input:[Group#8], cast(test.t.a):asc, offset:0, count:3",
          "    TopN_31 input:[Group#9], cast(test.t.a):asc, offset:0, count:3",
          "    TopN_31 input:[Group#10], cast(test.t.a):asc, offset:0, count:3",
          "    TopN_31 input:[Group#11], cast(test.t.a):asc, offset:0, count:3",
          "    TopN_31 input:[Group#12], cast(test.t.a):asc, offset:0, count:3",
          "Group#6 Schema:[test.t.a]",
          "    TiKVSingleGather_15 input:[Group#13], table:t, index:c_d_e",
          "Group#13 Schema:[test.t.a]",
          "    TopN_38 input:[Group#14], cast(test.t.a):asc, offset:0, count:3",
          "Group#14 Schema:[test.t.a]",
          "    IndexScan_14 table:t, index:c, d, e",
          "Group#7 Schema:[test.t.a]",
          "    TiKVSingleGather_17 input:[Group#15], table:t, index:f",
          "Group#15 Schema:[test.t.a]",
          "    TopN_37 input:[Group#16], cast(test.t.a):asc, offset:0, count:3",
          "Group#16 Schema:[test.t.a]",
          "    IndexScan_16 table:t, index:f",
          "Group#8 Schema:[test.t.a]",
          "    TiKVSingleGather_19 input:[Group#17], table:t, index:g",
          "Group#17 Schema:[test.t.a]",
          "    TopN_36 input:[Group#18], cast(test.t.a):asc, offset:0, count:3",
          "Group#18 Schema:[test.t.a]",
          "    IndexScan_18 table:t, index:g",
          "Group#9 Schema:[test.t.a]",
          "    TiKVSingleGather_21 input:[Group#19], table:t, index:f_g",
          "Group#19 Schema:[test.t.a]",
          "    TopN_35 input:[Group#20], cast(test.t.a):asc, offset:0, count:3",
          "Group#20 Schema:[test.t.a]",
          "    IndexScan_20 table:t, index:f, g",
          "Group#10 Schema:[test.t.a]",
          "    TiKVSingleGather_23 input:[Group#21], table:t, index:c_d_e_str",
          "Group#21 Schema:[test.t.a]",
          "    TopN_34 input:[Group#22], cast(test.t.a):asc, offset:0, count:3",
          "Group#22 Schema:[test.t.a]",
          "    IndexScan_22 table:t, index:c_str, d_str, e_str",
          "Group#11 Schema:[test.t.a]",
          "    TiKVSingleGather_25 input:[Group#23], table:t, index:e_d_c_str_prefix",
          "Group#23 Schema:[test.t.a]",
          "    TopN_33 input:[Group#24], cast(test.t.a):asc, offset:0, count:3",
          "Group#24 Schema:[test.t.a]",
          "    IndexScan_24 table:t, index:e_str, d_str, c_str",
          "Group#12 Schema:[test.t.a]",
          "    TiKVSingleGather_13 input:[Group#25], table:t",
          "Group#25 Schema:[test.t.a]",
          "    TopN_32 input:[Group#26], cast(test.t.a):asc, offset:0, count:3",
          "Group#26 Schema:[test.t.a]",
          "    TableScan_12 table:t, pk col:test.t.a",
          "Group#3 Schema:[Column#26]",
          "    Projection_9 input:[Group#27], cast(Column#13)->Column#26",
          "Group#27 Schema:[Column#13]",
          "    Projection_4 input:[Group#28], Column#13",
          "Group#28 Schema:[Column#13]",
          "    TopN_40 input:[Group#29], cast(Column#13):asc, offset:0, count:3",
          "Group#29 Schema:[Column#13]",
          "    Aggregation_3 input:[Group#30], group by:test.t.b, funcs:sum(test.t.a)",
          "Group#30 Schema:[test.t.a,test.t.b]",
          "    Selection_2 input:[Group#31], gt(test.t.a, 2)",
          "Group#31 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_27 input:[Group#32], table:t",
          "Group#32 Schema:[test.t.a,test.t.b]",
          "    TableScan_26 table:t, pk col:test.t.a"
        ]
      },
      {
        "SQL": "(select a from t where a = 1) union all (select b from t where a = 2) union all (select c from t where a = 3) order by a limit 2;",
        "Result": [
          "Group#0 Schema:[Column#37]",
          "    TopN_36 input:[Group#1], Column#37:asc, offset:0, count:2",
          "Group#1 Schema:[Column#37]",
          "    Union_10 input:[Group#2,Group#3,Group#4]",
          "Group#2 Schema:[Column#37]",
          "    Projection_11 input:[Group#5], test.t.a",
          "Group#5 Schema:[test.t.a]",
          "    Projection_9 input:[Group#6], test.t.a",
          "Group#6 Schema:[test.t.a]",
          "    TopN_39 input:[Group#7], test.t.a:asc, offset:0, count:2",
          "Group#7 Schema:[test.t.a]",
          "    Selection_8 input:[Group#8], eq(test.t.a, 1)",
          "Group#8 Schema:[test.t.a]",
          "    TiKVSingleGather_17 input:[Group#9], table:t",
          "    TiKVSingleGather_29 input:[Group#10], table:t, index:e_d_c_str_prefix",
          "    TiKVSingleGather_27 input:[Group#11], table:t, index:c_d_e_str",
          "    TiKVSingleGather_25 input:[Group#12], table:t, index:f_g",
          "    TiKVSingleGather_23 input:[Group#13], table:t, index:g",
          "    TiKVSingleGather_21 input:[Group#14], table:t, index:f",
          "    TiKVSingleGather_19 input:[Group#15], table:t, index:c_d_e",
          "Group#9 Schema:[test.t.a]",
          "    TableScan_16 table:t, pk col:test.t.a",
          "Group#10 Schema:[test.t.a]",
          "    IndexScan_28 table:t, index:e_str, d_str, c_str",
          "Group#11 Schema:[test.t.a]",
          "    IndexScan_26 table:t, index:c_str, d_str, e_str",
          "Group#12 Schema:[test.t.a]",
          "    IndexScan_24 table:t, index:f, g",
          "Group#13 Schema:[test.t.a]",
          "    IndexScan_22 table:t, index:g",
          "Group#14 Schema:[test.t.a]",
          "    IndexScan_20 table:t, index:f",
          "Group#15 Schema:[test.t.a]",
          "    IndexScan_18 table:t, index:c, d, e",
          "Group#3 Schema:[Column#37]",
          "    Projection_12 input:[Group#16], test.t.b",
          "Group#16 Schema:[test.t.b]",
          "    Projection_6 input:[Group#17], test.t.b",
          "Group#17 Schema:[test.t.a,test.t.b]",
          "    TopN_41 input:[Group#18], test.t.b:asc, offset:0, count:2",
          "Group#18 Schema:[test.t.a,test.t.b]",
          "    Selection_5 input:[Group#19], eq(test.t.a, 2)",
          "Group#19 Schema:[test.t.a,test.t.b]",
          "    TiKVSingleGather_31 input:[Group#20], table:t",
          "Group#20 Schema:[test.t.a,test.t.b]",
          "    TableScan_30 table:t, pk col:test.t.a",
          "Group#4 Schema:[Column#37]",
          "    Projection_13 input:[Group#21], test.t.c",
          "Group#21 Schema:[test.t.c]",
          "    Projection_3 input:[Group#22], test.t.c",
          "Group#22 Schema:[test.t.a,test.t.c]",
          "    TopN_43 input:[Group#23], test.t.c:asc, offset:0, count:2",
          "Group#23 Schema:[test.t.a,test.t.c]",
          "    Selection_2 input:[Group#24], eq(test.t.a, 3)",
          "Group#24 Schema:[test.t.a,test.t.c]",
          "    TiKVSingleGather_33 input:[Group#25], table:t",
          "    TiKVSingleGather_35 input:[Group#26], table:t, index:c_d_e",
          "Group#25 Schema:[test.t.a,test.t.c]",
          "    TableScan_32 table:t, pk col:test.t.a",
          "Group#26 Schema:[test.t.a,test.t.c]",
          "    IndexScan_34 table:t, index:c, d, e"
        ]
      }
    ]
  },
  {
    "Name": "TestProjectionElimination",
    "Cases": [
      {
        "SQL": "select a, b from (select a, b from t) as t2",
        "Result": [
          "Group#0 Schema:[test.t.a,test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select a+b from (select a, b from t) as t2",
        "Result": [
          "Group#0 Schema:[Column#13]",
          "    Projection_3 input:[Group#1], plus(test.t.a, test.t.b)->Column#13",
          "Group#1 Schema:[test.t.a,test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select a from (select floor(a) as a from t) as t2",
        "Result": [
          "Group#0 Schema:[Column#13]",
          "    Projection_4 input:[Group#1], floor(test.t.a)->Column#13",
          "    Projection_2 input:[Group#1], floor(test.t.a)->Column#13",
          "Group#1 Schema:[test.t.a]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select a from (select a, b from (select a, b, c from t) as t2) as t3",
        "Result": [
          "Group#0 Schema:[test.t.a]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select a+c from (select floor(a) as a, b, c from t) as t2",
        "Result": [
          "Group#0 Schema:[Column#14]",
          "    Projection_4 input:[Group#1], plus(floor(test.t.a), test.t.c)->Column#14",
          "Group#1 Schema:[test.t.a,test.t.c]",
          "    TableScan_1 table:t"
        ]
      }
    ]
  },
  {
    "Name": "TestMergeAggregationProjection",
    "Cases": [
      {
        "SQL": "select b, max(a) from (select a, c+d as b from t as t1) as t2 group by b",
        "Result": [
          "Group#0 Schema:[Column#13,Column#14]",
          "    Projection_4 input:[Group#1], Column#13, Column#14",
          "Group#1 Schema:[Column#14,Column#13]",
          "    Aggregation_5 input:[Group#2], group by:plus(test.t.c, test.t.d), funcs:max(test.t.a), firstrow(plus(test.t.c, test.t.d))",
          "Group#2 Schema:[test.t.a,test.t.c,test.t.d]",
          "    TableScan_1 table:t1"
        ]
      },
      {
        "SQL": "select max(a) from (select c+d as b, a+c as a from t as t1) as t2",
        "Result": [
          "Group#0 Schema:[Column#15]",
          "    Projection_4 input:[Group#1], Column#15",
          "Group#1 Schema:[Column#15]",
          "    Aggregation_5 input:[Group#2], funcs:max(plus(test.t.a, test.t.c))",
          "Group#2 Schema:[test.t.a,test.t.c]",
          "    TableScan_1 table:t1"
        ]
      },
      {
        "SQL": "select b, max(a) from (select a, c+d as b, @i:=0 from t as t1) as t2 group by b",
        "Result": [
          "Group#0 Schema:[Column#13,Column#15]",
          "    Projection_4 input:[Group#1], Column#13, Column#15",
          "Group#1 Schema:[Column#15,Column#13]",
          "    Aggregation_3 input:[Group#2], group by:Column#13, funcs:max(test.t.a), firstrow(Column#13)",
          "Group#2 Schema:[test.t.a,Column#13,Column#14]",
          "    Projection_2 input:[Group#3], test.t.a, plus(test.t.c, test.t.d)->Column#13, setvar(i, 0)->Column#14",
          "Group#3 Schema:[test.t.a,test.t.c,test.t.d]",
          "    TableScan_1 table:t1"
        ]
      }
    ]
  },
  {
    "Name": "TestMergeAdjacentLimit",
    "Cases": [
      {
        "SQL": "select b from (select b from t limit 5) as t1 limit 10",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_4 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Projection_2 input:[Group#2], test.t.b",
          "Group#2 Schema:[test.t.b]",
          "    Limit_6 input:[Group#3], offset:0, count:5",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select b from (select b from t limit 20) as t1 limit 10",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_4 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Projection_2 input:[Group#2], test.t.b",
          "Group#2 Schema:[test.t.b]",
          "    Limit_6 input:[Group#3], offset:0, count:10",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select b from (select b from t limit 10) as t1 limit 10",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_4 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Projection_2 input:[Group#2], test.t.b",
          "Group#2 Schema:[test.t.b]",
          "    Limit_6 input:[Group#3], offset:0, count:10",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select b from (select b from t limit 10 offset 10) as t1 limit 10 offset 5",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_4 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Projection_2 input:[Group#2], test.t.b",
          "Group#2 Schema:[test.t.b]",
          "    Limit_6 input:[Group#3], offset:15, count:5",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select b from (select b from t limit 10 offset 2) as t1 limit 3 offset 5",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_4 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Projection_2 input:[Group#2], test.t.b",
          "Group#2 Schema:[test.t.b]",
          "    Limit_6 input:[Group#3], offset:7, count:3",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select b from (select b from t limit 10 offset 5) as t1 limit 5 offset 5",
        "Result": [
          "Group#0 Schema:[test.t.b]",
          "    Projection_4 input:[Group#1], test.t.b",
          "Group#1 Schema:[test.t.b]",
          "    Projection_2 input:[Group#2], test.t.b",
          "Group#2 Schema:[test.t.b]",
          "    Limit_6 input:[Group#3], offset:10, count:5",
          "Group#3 Schema:[test.t.b]",
          "    TableScan_1 table:t"
        ]
      },
      {
        "SQL": "select a from (select a from t limit 3 offset 5) t1 limit 3 offset 5",
        "Result": [
          "Group#0 Schema:[test.t.a]",
          "    Projection_4 input:[Group#1], test.t.a",
          "Group#1 Schema:[test.t.a]",
          "    Projection_2 input:[Group#2], test.t.a",
          "Group#2 Schema:[test.t.a]",
          "    TableDual_6 rowcount:0"
        ]
      }
    ]
  }
]
