[
  {
    "Name": "TestPKIsHandleRangeScan",
    "Cases": [
      {
        "SQL": "select b from t where a > 1",
        "Plan": [
          "Projection_8 3333.33 root test.t.b",
          "└─TableReader_9 3333.33 root data:TableScan_10",
          "  └─TableScan_10 3333.33 cop[tikv] table:t, range:(1,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4",
          "6"
        ]
      },
      {
        "SQL": "select b from t where a > 1 and a < 3",
        "Plan": [
          "Projection_8 2.00 root test.t.b",
          "└─TableReader_9 2.00 root data:TableScan_10",
          "  └─TableScan_10 2.00 cop[tikv] table:t, range:(1,3), keep order:false, stats:pseudo"
        ],
        "Result": null
      },
      {
        "SQL": "select b from t where a > 1 and b < 6",
        "Plan": [
          "Projection_9 2666.67 root test.t.b",
          "└─TableReader_10 2666.67 root data:Selection_11",
          "  └─Selection_11 2666.67 cop[tikv] lt(test.t.b, 6)",
          "    └─TableScan_12 3333.33 cop[tikv] table:t, range:(1,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select a from t where a * 3 + 1 > 9 and a < 5",
        "Plan": [
          "TableReader_9 4.00 root data:Selection_10",
          "└─Selection_10 4.00 cop[tikv] gt(plus(mul(test.t.a, 3), 1), 9)",
          "  └─TableScan_11 5.00 cop[tikv] table:t, range:[-inf,5), keep order:false, stats:pseudo"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "SQL": "select a from t group by a having sum(b) > 4",
        "Plan": [
          "Projection_12 6400.00 root test.t.a",
          "└─Selection_13 6400.00 root gt(Column#3, 4)",
          "  └─HashAgg_18 8000.00 root group by:test.t.a, funcs:sum(Column#5)->Column#3, funcs:firstrow(test.t.a)->test.t.a",
          "    └─TableReader_19 8000.00 root data:HashAgg_20",
          "      └─HashAgg_20 8000.00 cop[tikv] group by:test.t.a, funcs:sum(test.t.b)->Column#5",
          "        └─TableScan_16 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "5"
        ]
      }
    ]
  },
  {
    "Name": "TestSort",
    "Cases": [
      {
        "SQL": "select a from t order by a",
        "Plan": [
          "TableReader_7 10000.00 root data:TableScan_8",
          "└─TableScan_8 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      {
        "SQL": "select b from t order by b",
        "Plan": [
          "Sort_11 10000.00 root test.t.b:asc",
          "└─TableReader_9 10000.00 root data:TableScan_10",
          "  └─TableScan_10 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "SQL": "select b from t order by a+b",
        "Plan": [
          "Projection_7 10000.00 root test.t.b",
          "└─Projection_12 10000.00 root test.t.b, test.t.a",
          "  └─Sort_8 10000.00 root Column#4:asc",
          "    └─Projection_13 10000.00 root test.t.b, test.t.a, plus(test.t.a, test.t.b)->Column#4",
          "      └─Projection_9 10000.00 root test.t.b, test.t.a",
          "        └─TableReader_10 10000.00 root data:TableScan_11",
          "          └─TableScan_11 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "SQL": "select b from t order by b, a+b, a",
        "Plan": [
          "Projection_7 10000.00 root test.t.b",
          "└─Projection_12 10000.00 root test.t.b, test.t.a",
          "  └─Sort_8 10000.00 root test.t.b:asc, Column#4:asc, test.t.a:asc",
          "    └─Projection_13 10000.00 root test.t.b, test.t.a, plus(test.t.a, test.t.b)->Column#4",
          "      └─Projection_9 10000.00 root test.t.b, test.t.a",
          "        └─TableReader_10 10000.00 root data:TableScan_11",
          "          └─TableScan_11 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33",
          "44"
        ]
      }
    ]
  },
  {
    "Name": "TestAggregation",
    "Cases": [
      {
        "SQL": "select sum(a) from t",
        "Plan": [
          "HashAgg_12 1.00 root funcs:sum(Column#4)->Column#3",
          "└─TableReader_13 1.00 root data:HashAgg_14",
          "  └─HashAgg_14 1.00 cop[tikv] funcs:sum(test.t.a)->Column#4",
          "    └─TableScan_10 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "10"
        ]
      },
      {
        "SQL": "select max(a), min(b) from t",
        "Plan": [
          "HashAgg_11 1.00 root funcs:max(Column#5)->Column#3, funcs:min(Column#6)->Column#4",
          "└─TableReader_12 1.00 root data:HashAgg_13",
          "  └─HashAgg_13 1.00 cop[tikv] funcs:max(test.t.a)->Column#5, funcs:min(test.t.b)->Column#6",
          "    └─TableScan_10 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4 11"
        ]
      },
      {
        "SQL": "select b, avg(a) from t group by b order by b",
        "Plan": [
          "Projection_10 8000.00 root test.t.b, Column#3",
          "└─Sort_19 8000.00 root test.t.b:asc",
          "  └─HashAgg_12 8000.00 root group by:Column#9, funcs:avg(Column#7)->Column#3, funcs:firstrow(Column#8)->test.t.b",
          "    └─Projection_15 10000.00 root cast(test.t.a)->Column#7, test.t.b, test.t.b",
          "      └─TableReader_13 10000.00 root data:TableScan_14",
          "        └─TableScan_14 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11 1.0000",
          "22 2.0000",
          "33 3.0000",
          "44 4.0000"
        ]
      },
      {
        "SQL": "select b, sum(a) from t group by b order by b",
        "Plan": [
          "Projection_10 8000.00 root test.t.b, Column#3",
          "└─Sort_19 8000.00 root test.t.b:asc",
          "  └─HashAgg_16 8000.00 root group by:test.t.b, funcs:sum(Column#4)->Column#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─TableReader_17 8000.00 root data:HashAgg_18",
          "      └─HashAgg_18 8000.00 cop[tikv] group by:test.t.b, funcs:sum(test.t.a)->Column#4",
          "        └─TableScan_14 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11 1",
          "22 2",
          "33 3",
          "44 4"
        ]
      },
      {
        "SQL": "select b, avg(a) from t group by b having sum(a) > 1 order by b",
        "Plan": [
          "Projection_12 6400.00 root test.t.b, Column#3",
          "└─Projection_14 6400.00 root test.t.b, Column#3, Column#4",
          "  └─Sort_27 6400.00 root test.t.b:asc",
          "    └─Selection_26 6400.00 root gt(Column#4, 1)",
          "      └─HashAgg_17 8000.00 root group by:Column#14, funcs:avg(Column#11)->Column#3, funcs:sum(Column#12)->Column#4, funcs:firstrow(Column#13)->test.t.b",
          "        └─Projection_20 10000.00 root cast(test.t.a)->Column#11, cast(test.t.a)->Column#12, test.t.b, test.t.b",
          "          └─TableReader_18 10000.00 root data:TableScan_19",
          "            └─TableScan_19 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "22 2.0000",
          "33 3.0000",
          "44 4.0000"
        ]
      },
      {
        "SQL": "select max(a+b) from t",
        "Plan": [
          "HashAgg_16 1.00 root funcs:max(Column#4)->Column#3",
          "└─TableReader_17 1.00 root data:HashAgg_18",
          "  └─HashAgg_18 1.00 cop[tikv] funcs:max(plus(test.t.a, test.t.b))->Column#4",
          "    └─TableScan_14 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "48"
        ]
      },
      {
        "SQL": "select sum(a) from t group by a, a+b order by a",
        "Plan": [
          "Projection_10 8000.00 root Column#3",
          "└─Sort_20 8000.00 root test.t.a:asc",
          "  └─HashAgg_13 8000.00 root group by:Column#10, Column#11, funcs:sum(Column#8)->Column#3, funcs:firstrow(Column#9)->test.t.a",
          "    └─Projection_16 10000.00 root cast(test.t.a)->Column#8, test.t.a, test.t.a, plus(test.t.a, test.t.b)->Column#11",
          "      └─TableReader_14 10000.00 root data:TableScan_15",
          "        └─TableScan_15 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4"
        ]
      },
      {
        "SQL": "select b, sum(a) from t group by b having b > 1 order by b",
        "Plan": [
          "Projection_19 6400.00 root test.t.b, Column#3",
          "└─Sort_33 6400.00 root test.t.b:asc",
          "  └─HashAgg_26 6400.00 root group by:test.t.b, funcs:sum(Column#6)->Column#3, funcs:firstrow(test.t.b)->test.t.b",
          "    └─TableReader_27 6400.00 root data:HashAgg_28",
          "      └─HashAgg_28 6400.00 cop[tikv] group by:test.t.b, funcs:sum(test.t.a)->Column#6",
          "        └─Selection_23 8000.00 cop[tikv] gt(test.t.b, 1)",
          "          └─TableScan_24 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11 1",
          "22 2",
          "33 3",
          "44 4"
        ]
      },
      {
        "SQL": "select c, sum(a) from (select a+b as c, a from t) t1 group by c having c > 1 order by c",
        "Plan": [
          "Projection_20 6400.00 root Column#3, Column#4",
          "└─Sort_32 6400.00 root Column#3:asc",
          "  └─HashAgg_28 6400.00 root group by:Column#10, funcs:sum(Column#8)->Column#4, funcs:firstrow(Column#10)->Column#3",
          "    └─TableReader_29 6400.00 root data:HashAgg_30",
          "      └─HashAgg_30 6400.00 cop[tikv] group by:plus(test.t.a, test.t.b), funcs:sum(test.t.a)->Column#8",
          "        └─Selection_25 8000.00 cop[tikv] gt(plus(test.t.a, test.t.b), 1)",
          "          └─TableScan_26 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "12 1",
          "24 2",
          "36 3",
          "48 4"
        ]
      },
      {
        "SQL": "select max(a.a) from t a left join t b on a.a = b.a",
        "Plan": [
          "HashAgg_53 1.00 root funcs:max(test.t.a)->Column#5",
          "└─Limit_55 1.00 root offset:0, count:1",
          "  └─TableReader_59 1.00 root data:Limit_60",
          "    └─Limit_60 1.00 cop[tikv] offset:0, count:1",
          "      └─TableScan_31 1.00 cop[tikv] table:a, range:[-inf,+inf], keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select avg(a.b) from t a left join t b on a.a = b.a",
        "Plan": [
          "HashAgg_16 1.00 root funcs:avg(Column#6, Column#7)->Column#5",
          "└─TableReader_17 1.00 root data:HashAgg_18",
          "  └─HashAgg_18 1.00 cop[tikv] funcs:avg(test.t.b)->Column#6",
          "    └─TableScan_14 10000.00 cop[tikv] table:a, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "27.5000"
        ]
      },
      {
        "SQL": "select t1.a, max(t1.b) from t as t1 left join (select * from t) as t2 on t1.a = t2.a and t1.b = 3 group by t1.a order by a",
        "Plan": [
          "Projection_15 8000.00 root test.t.a, Column#5",
          "└─Sort_23 8000.00 root test.t.a:asc",
          "  └─HashAgg_20 8000.00 root group by:test.t.a, funcs:max(Column#6)->Column#5, funcs:firstrow(test.t.a)->test.t.a",
          "    └─TableReader_21 8000.00 root data:HashAgg_22",
          "      └─HashAgg_22 8000.00 cop[tikv] group by:test.t.a, funcs:max(test.t.b)->Column#6",
          "        └─TableScan_19 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select t1.a, sum(distinct t1.b) from t as t1 left join (select * from t) as t2 on t1.b = t2.b group by t1.a order by a",
        "Plan": [
          "Projection_13 8000.00 root test.t.a, Column#5",
          "└─Sort_19 8000.00 root test.t.a:asc",
          "  └─HashAgg_15 8000.00 root group by:Column#8, funcs:sum(distinct Column#6)->Column#5, funcs:firstrow(Column#7)->test.t.a",
          "    └─Projection_18 10000.00 root cast(test.t.b)->Column#6, test.t.a, test.t.a",
          "      └─TableReader_16 10000.00 root data:TableScan_17",
          "        └─TableScan_17 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select t2.a, max(t2.b) from t as t1 right join (select * from t) as t2 on t1.a = t2.a group by t2.a order by a",
        "Plan": [
          "Projection_15 8000.00 root test.t.a, Column#5",
          "└─Sort_23 8000.00 root test.t.a:asc",
          "  └─HashAgg_20 8000.00 root group by:test.t.a, funcs:max(Column#6)->Column#5, funcs:firstrow(test.t.a)->test.t.a",
          "    └─TableReader_21 8000.00 root data:HashAgg_22",
          "      └─HashAgg_22 8000.00 cop[tikv] group by:test.t.a, funcs:max(test.t.b)->Column#6",
          "        └─TableScan_19 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33",
          "4 44"
        ]
      },
      {
        "SQL": "select max(a) from t",
        "Plan": [
          "HashAgg_16 1.00 root funcs:max(test.t.a)->Column#3",
          "└─Limit_18 1.00 root offset:0, count:1",
          "  └─TableReader_23 1.00 root data:Limit_24",
          "    └─Limit_24 1.00 cop[tikv] offset:0, count:1",
          "      └─TableScan_22 1.00 cop[tikv] table:t, range:[-inf,+inf], keep order:true, desc, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select sum(case when a > 0 and a <= 1000 then b else 0 end) from t",
        "Plan": [
          "HashAgg_22 1.00 root funcs:sum(Column#5)->Column#3",
          "└─TableReader_23 1.00 root data:HashAgg_24",
          "  └─HashAgg_24 1.00 cop[tikv] funcs:sum(test.t.b)->Column#5",
          "    └─TableScan_16 250.00 cop[tikv] table:t, range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "110"
        ]
      },
      {
        "SQL": "select sum(case when a > 0 then (case when a <= 1000 then b end) else 0 end) from t",
        "Plan": [
          "HashAgg_32 1.00 root funcs:sum(Column#6)->Column#3",
          "└─TableReader_33 1.00 root data:HashAgg_34",
          "  └─HashAgg_34 1.00 cop[tikv] funcs:sum(test.t.b)->Column#6",
          "    └─TableScan_22 250.00 cop[tikv] table:t, range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "110"
        ]
      },
      {
        "SQL": "select sum(case when a <= 0 or a > 1000 then 0.0 else b end) from t",
        "Plan": [
          "HashAgg_22 1.00 root funcs:sum(Column#5)->Column#3",
          "└─TableReader_23 1.00 root data:HashAgg_24",
          "  └─HashAgg_24 1.00 cop[tikv] funcs:sum(cast(test.t.b))->Column#5",
          "    └─TableScan_16 250.00 cop[tikv] table:t, range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "110.0"
        ]
      },
      {
        "SQL": "select count(case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "HashAgg_21 1.00 root funcs:count(Column#5)->Column#3",
          "└─TableReader_22 1.00 root data:HashAgg_23",
          "  └─HashAgg_23 1.00 cop[tikv] funcs:count(test.t.b)->Column#5",
          "    └─TableScan_16 250.00 cop[tikv] table:t, range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select count(case when a <= 0 or a > 1000 then null else b end) from t",
        "Plan": [
          "HashAgg_21 1.00 root funcs:count(Column#5)->Column#3",
          "└─TableReader_22 1.00 root data:HashAgg_23",
          "  └─HashAgg_23 1.00 cop[tikv] funcs:count(test.t.b)->Column#5",
          "    └─TableScan_16 250.00 cop[tikv] table:t, range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      },
      {
        "SQL": "select count(distinct case when a > 0 and a <= 1000 then b end) from t",
        "Plan": [
          "HashAgg_10 1.00 root funcs:count(distinct test.t.b)->Column#3",
          "└─TableReader_11 250.00 root data:TableScan_12",
          "  └─TableScan_12 250.00 cop[tikv] table:t, range:(0,1000], keep order:false, stats:pseudo"
        ],
        "Result": [
          "4"
        ]
      }
    ]
  },
  {
    "Name": "TestSimplePlans",
    "Cases": [
      {
        "SQL": "select a from t limit 2",
        "Plan": [
          "Limit_6 2.00 root offset:0, count:2",
          "└─TableReader_7 2.00 root data:TableScan_8",
          "  └─TableScan_8 2.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "2"
        ]
      },
      {
        "SQL": "select a from t limit 1 offset 2",
        "Plan": [
          "Limit_6 1.00 root offset:2, count:1",
          "└─TableReader_7 3.00 root data:TableScan_8",
          "  └─TableScan_8 3.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "SQL": "select b from t order by b limit 3",
        "Plan": [
          "TopN_9 3.00 root test.t.b:asc, offset:0, count:3",
          "└─TableReader_11 3.00 root data:TopN_12",
          "  └─TopN_12 3.00 cop[tikv] test.t.b:asc, offset:0, count:3",
          "    └─TableScan_14 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "11",
          "22",
          "33"
        ]
      },
      {
        "SQL": "select a from t order by a limit 1 offset 2",
        "Plan": [
          "Limit_10 1.00 root offset:2, count:1",
          "└─TableReader_16 3.00 root data:Limit_17",
          "  └─Limit_17 3.00 cop[tikv] offset:0, count:3",
          "    └─TableScan_15 3.00 cop[tikv] table:t, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3"
        ]
      },
      {
        "SQL": "select * from ((select a as aa from t t1) union all (select b as aa from t t2)) as t3 order by aa",
        "Plan": [
          "Sort_23 20000.00 root Column#5:asc",
          "└─Union_16 20000.00 root ",
          "  ├─Projection_17 10000.00 root test.t.a",
          "  │ └─TableReader_18 10000.00 root data:TableScan_19",
          "  │   └─TableScan_19 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo",
          "  └─Projection_20 10000.00 root test.t.b",
          "    └─TableReader_21 10000.00 root data:TableScan_22",
          "      └─TableScan_22 10000.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1",
          "2",
          "3",
          "4",
          "11",
          "22",
          "33",
          "44"
        ]
      },
      {
        "SQL": "select a, b, lag(a,1) over (order by b) from t order by b",
        "Plan": [
          "Window_10 10000.00 root lag(test.t.a, 1)->Column#4 over(order by test.t.b asc)",
          "└─Sort_15 10000.00 root test.t.b:asc",
          "  └─TableReader_13 10000.00 root data:TableScan_14",
          "    └─TableScan_14 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "1 11 <nil>",
          "2 22 1",
          "3 33 2",
          "4 44 3"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexScan",
    "Cases": [
      {
        "SQL": "select b from t",
        "Plan": [
          "IndexReader_11 10000.00 root index:IndexScan_12",
          "└─IndexScan_12 10000.00 cop[tikv] table:t, index:b, range:[NULL,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "2",
          "5",
          "8"
        ]
      },
      {
        "SQL": "select a from t order by b",
        "Plan": [
          "Projection_11 10000.00 root test.t.a",
          "└─IndexReader_14 10000.00 root index:IndexScan_15",
          "  └─IndexScan_15 10000.00 cop[tikv] table:t, index:b, range:[NULL,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "4",
          "7"
        ]
      },
      {
        "SQL": "select c from t",
        "Plan": [
          "IndexReader_9 10000.00 root index:IndexScan_10",
          "└─IndexScan_10 10000.00 cop[tikv] table:t, index:c, b, range:[NULL,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "3",
          "6",
          "9"
        ]
      },
      {
        "SQL": "select a from t order by c",
        "Plan": [
          "Projection_9 10000.00 root test.t.a",
          "└─IndexReader_12 10000.00 root index:IndexScan_13",
          "  └─IndexScan_13 10000.00 cop[tikv] table:t, index:c, b, range:[NULL,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "4",
          "7"
        ]
      },
      {
        "SQL": "select a, b from t where b > 5 order by b",
        "Plan": [
          "IndexReader_20 8000.00 root index:IndexScan_21",
          "└─IndexScan_21 3333.33 cop[tikv] table:t, index:b, range:(5,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "7 8"
        ]
      },
      {
        "SQL": "select a, b, c from t where c = 3 and b > 1 order by b",
        "Plan": [
          "IndexReader_15 8000.00 root index:IndexScan_16",
          "└─IndexScan_16 33.33 cop[tikv] table:t, index:c, b, range:(3 1,3 +inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 2 3"
        ]
      },
      {
        "SQL": "select a, b from t where c > 1 and b > 1 order by c",
        "Plan": [
          "Projection_14 8000.00 root test.t.a, test.t.b",
          "└─IndexReader_18 8000.00 root index:Selection_19",
          "  └─Selection_19 2666.67 cop[tikv] gt(test.t.b, 1)",
          "    └─IndexScan_20 3333.33 cop[tikv] table:t, index:c, b, range:(1,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 2",
          "4 5",
          "7 8"
        ]
      }
    ]
  },
  {
    "Name": "TestJoin",
    "Cases": [
      {
        "SQL": "select t1.a, t1.b from t1, t2 where t1.a = t2.a and t1.a > 2",
        "Plan": [
          "Projection_16 4166.67 root test.t1.a, test.t1.b",
          "└─MergeJoin_19 4166.67 root inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─TableReader_24 3333.33 root data:TableScan_25",
          "  │ └─TableScan_25 3333.33 cop[tikv] table:t1, range:(2,+inf], keep order:true, stats:pseudo",
          "  └─TableReader_27 3333.33 root data:TableScan_28",
          "    └─TableScan_28 3333.33 cop[tikv] table:t2, range:(2,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3 33"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t1, t2 where t1.a > t2.a and t2.b > 200",
        "Plan": [
          "Projection_12 80000000.00 root test.t1.a, test.t1.b",
          "└─HashLeftJoin_14 80000000.00 root CARTESIAN inner join, inner:TableReader_17, other cond:gt(test.t1.a, test.t2.a)",
          "  ├─TableReader_15 10000.00 root data:TableScan_16",
          "  │ └─TableScan_16 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo",
          "  └─TableReader_17 8000.00 root data:Selection_18",
          "    └─Selection_18 8000.00 cop[tikv] gt(test.t2.b, 200)",
          "      └─TableScan_19 10000.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "3 33",
          "4 44",
          "4 44"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t1 left join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200",
        "Plan": [
          "Projection_17 3333.33 root test.t1.a, test.t1.b",
          "└─Selection_18 3333.33 root gt(test.t2.b, 200)",
          "  └─MergeJoin_21 4166.67 root left outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─TableReader_26 3333.33 root data:TableScan_27",
          "    │ └─TableScan_27 3333.33 cop[tikv] table:t1, range:(2,+inf], keep order:true, stats:pseudo",
          "    └─TableReader_29 3333.33 root data:TableScan_30",
          "      └─TableScan_30 3333.33 cop[tikv] table:t2, range:(2,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3 33"
        ]
      },
      {
        "SQL": "select t2.a, t2.b from t1 right join t2 on t1.a = t2.a where t1.a > 2 and t2.b > 200",
        "Plan": [
          "Projection_13 8000.00 root test.t2.a, test.t2.b",
          "└─Selection_14 8000.00 root gt(test.t1.a, 2)",
          "  └─MergeJoin_17 10000.00 root right outer join, left key:test.t1.a, right key:test.t2.a",
          "    ├─TableReader_23 10000.00 root data:TableScan_24",
          "    │ └─TableScan_24 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:true, stats:pseudo",
          "    └─TableReader_26 8000.00 root data:Selection_27",
          "      └─Selection_27 8000.00 cop[tikv] gt(test.t2.b, 200)",
          "        └─TableScan_28 10000.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3 333"
        ]
      },
      {
        "SQL": "select t1.a, t1.b from t1, t2 where t1.a = t2.a order by t1.a",
        "Plan": [
          "Projection_12 12500.00 root test.t1.a, test.t1.b",
          "└─MergeJoin_13 12500.00 root inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─TableReader_14 10000.00 root data:TableScan_15",
          "  │ └─TableScan_15 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:true, stats:pseudo",
          "  └─TableReader_19 10000.00 root data:TableScan_20",
          "    └─TableScan_20 10000.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      },
      {
        "SQL": "select * from t1 join t2 on t1.a = t2.a",
        "Plan": [
          "MergeJoin_11 12500.00 root inner join, left key:test.t1.a, right key:test.t2.a",
          "├─TableReader_16 10000.00 root data:TableScan_17",
          "│ └─TableScan_17 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:true, stats:pseudo",
          "└─TableReader_19 10000.00 root data:TableScan_20",
          "  └─TableScan_20 10000.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11 1 111",
          "2 22 2 222",
          "3 33 3 333"
        ]
      }
    ]
  },
  {
    "Name": "TestApply",
    "Cases": [
      {
        "SQL": "select a = (select a from t2 where t1.b = t2.b order by a limit 1) from t1",
        "Plan": [
          "Projection_18 10000.00 root eq(test.t1.a, test.t2.a)->Column#5",
          "└─Apply_20 10000.00 root CARTESIAN left outer join, inner:MaxOneRow_23",
          "  ├─TableReader_21 10000.00 root data:TableScan_22",
          "  │ └─TableScan_22 10000.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo",
          "  └─MaxOneRow_23 1.00 root ",
          "    └─Projection_24 1.00 root test.t2.a",
          "      └─Limit_26 1.00 root offset:0, count:1",
          "        └─TableReader_34 1.00 root data:Limit_35",
          "          └─Limit_35 1.00 cop[tikv] offset:0, count:1",
          "            └─Selection_32 1.00 cop[tikv] eq(test.t1.b, test.t2.b)",
          "              └─TableScan_33 1.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1",
          "1",
          "1",
          "<nil>"
        ]
      },
      {
        "SQL": "select sum(a), (select t1.a from t1 where t1.a = t2.a limit 1), (select t1.b from t1 where t1.b = t2.b limit 1) from t2",
        "Plan": [
          "Projection_26 1.00 root Column#3, test.t1.a, test.t1.b",
          "└─Apply_28 1.00 root CARTESIAN left outer join, inner:MaxOneRow_43",
          "  ├─Apply_30 1.00 root CARTESIAN left outer join, inner:MaxOneRow_38",
          "  │ ├─HashAgg_35 1.00 root funcs:sum(Column#8)->Column#3, funcs:firstrow(Column#9)->test.t2.a, funcs:firstrow(Column#10)->test.t2.b",
          "  │ │ └─TableReader_36 1.00 root data:HashAgg_37",
          "  │ │   └─HashAgg_37 1.00 cop[tikv] funcs:sum(test.t2.a)->Column#8, funcs:firstrow(test.t2.a)->Column#9, funcs:firstrow(test.t2.b)->Column#10",
          "  │ │     └─TableScan_33 10000.00 cop[tikv] table:t2, range:[-inf,+inf], keep order:false, stats:pseudo",
          "  │ └─MaxOneRow_38 1.00 root ",
          "  │   └─Limit_39 1.00 root offset:0, count:1",
          "  │     └─TableReader_40 1.00 root data:Selection_41",
          "  │       └─Selection_41 1.00 cop[tikv] eq(test.t1.a, test.t2.a)",
          "  │         └─TableScan_42 1.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo",
          "  └─MaxOneRow_43 1.00 root ",
          "    └─Limit_44 1.00 root offset:0, count:1",
          "      └─TableReader_45 1.00 root data:Selection_46",
          "        └─Selection_46 1.00 cop[tikv] eq(test.t1.b, test.t2.b)",
          "          └─TableScan_47 1.00 cop[tikv] table:t1, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "6 1 11"
        ]
      }
    ]
  },
  {
    "Name": "TestMemTableScan",
    "Cases": [
      {
        "SQL": "select * from information_schema.processlist",
        "Plan": [
          "MemTableScan_3 10000.00 root "
        ],
        "Result": null
      }
    ]
  },
  {
    "Name": "TestTopN",
    "Cases": [
      {
        "SQL": "select a from (select a from t where b > 2 order by a limit 3 offset 1) as t1 order by a limit 2 offset 1",
        "Plan": [
          "Projection_25 2.00 root test.t.a",
          "└─Limit_27 2.00 root offset:2, count:2",
          "  └─TableReader_35 4.00 root data:Limit_36",
          "    └─Limit_36 4.00 cop[tikv] offset:0, count:4",
          "      └─Selection_33 4.00 cop[tikv] gt(test.t.b, 2)",
          "        └─TableScan_34 4.00 cop[tikv] table:t, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "3",
          "4"
        ]
      },
      {
        "SQL": "select * from (select * from t order by a limit 3) as t1 order by a limit 5",
        "Plan": [
          "Limit_17 3.00 root offset:0, count:3",
          "└─TableReader_23 3.00 root data:Limit_24",
          "  └─Limit_24 3.00 cop[tikv] offset:0, count:3",
          "    └─TableScan_22 3.00 cop[tikv] table:t, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      },
      {
        "SQL": "select b from (select b from t order by b limit 10 offset 10) as t1 order by b limit 10 offset 5",
        "Plan": [
          "TopN_16 5.00 root test.t.b:asc, offset:15, count:5",
          "└─TableReader_18 20.00 root data:TopN_19",
          "  └─TopN_19 20.00 cop[tikv] test.t.b:asc, offset:0, count:20",
          "    └─TableScan_21 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": null
      },
      {
        "SQL": "select b from (select b from t order by b limit 10 offset 2) as t1 order by b limit 3 offset 5",
        "Plan": [
          "TopN_16 3.00 root test.t.b:asc, offset:7, count:3",
          "└─TableReader_18 10.00 root data:TopN_19",
          "  └─TopN_19 10.00 cop[tikv] test.t.b:asc, offset:0, count:10",
          "    └─TableScan_21 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": null
      },
      {
        "SQL": "select a from (select a from t order by a limit 3 offset 5) as t1 order by a limit 3 offset 5",
        "Plan": [
          "TableDual_14 0.00 root rows:0"
        ],
        "Result": null
      },
      {
        "SQL": "select a from (select a from t where b > 2 order by a, b limit 3 offset 1) as t1 order by a limit 2 offset 1",
        "Plan": [
          "Projection_25 2.00 root test.t.a",
          "└─TopN_26 2.00 root test.t.a:asc, test.t.b:asc, offset:2, count:2",
          "  └─TableReader_28 4.00 root data:TopN_29",
          "    └─TopN_29 4.00 cop[tikv] test.t.a:asc, test.t.b:asc, offset:0, count:4",
          "      └─Selection_31 8000.00 cop[tikv] gt(test.t.b, 2)",
          "        └─TableScan_32 10000.00 cop[tikv] table:t, range:[-inf,+inf], keep order:false, stats:pseudo"
        ],
        "Result": [
          "3",
          "4"
        ]
      },
      {
        "SQL": "select * from (select * from t order by a limit 3) as t1 order by a, b limit 5",
        "Plan": [
          "Limit_14 3.00 root offset:0, count:5",
          "└─Sort_26 3.00 root test.t.a:asc, test.t.b:asc",
          "  └─Limit_16 3.00 root offset:0, count:3",
          "    └─TableReader_22 3.00 root data:Limit_23",
          "      └─Limit_23 3.00 cop[tikv] offset:0, count:3",
          "        └─TableScan_21 3.00 cop[tikv] table:t, range:[-inf,+inf], keep order:true, stats:pseudo"
        ],
        "Result": [
          "1 11",
          "2 22",
          "3 33"
        ]
      }
    ]
  }
]
