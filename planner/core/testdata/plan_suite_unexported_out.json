[
  {
    "Name": "TestEagerAggregation",
    "Cases": [
      "DataScan(t)->Aggr(sum(Column#1),sum(plus(Column#1, 1)),count(Column#1))->Projection",
      "DataScan(t)->Aggr(sum(plus(Column#1, Column#2)),sum(plus(Column#1, Column#3)),count(Column#1))->Sel([gt(Column#13, 0)])->Projection->Sort->Projection",
      "Join{DataScan(a)->Aggr(sum(Column#1),firstrow(Column#3))->DataScan(b)}(Column#3,Column#15)->Aggr(sum(Column#26))->Projection",
      "Join{DataScan(a)->DataScan(b)->Aggr(sum(Column#13),firstrow(Column#15))}(Column#3,Column#15)->Aggr(sum(Column#26))->Projection",
      "Join{DataScan(a)->DataScan(b)->Aggr(sum(Column#13),firstrow(Column#15))}(Column#3,Column#15)->Aggr(sum(Column#26),firstrow(Column#1))->Projection",
      "Join{DataScan(a)->Aggr(sum(Column#1),firstrow(Column#3))->DataScan(b)}(Column#3,Column#15)->Aggr(sum(Column#26),firstrow(Column#13))->Projection",
      "Join{DataScan(a)->DataScan(b)}(Column#3,Column#15)->Aggr(sum(Column#1),sum(Column#13))->Projection",
      "Join{DataScan(a)->Aggr(sum(Column#1),firstrow(Column#3))->DataScan(b)}(Column#3,Column#15)->Aggr(sum(Column#27),max(Column#13))->Projection",
      "Join{DataScan(a)->DataScan(b)->Aggr(sum(Column#13),firstrow(Column#15))}(Column#3,Column#15)->Aggr(max(Column#1),sum(Column#27))->Projection",
      "Join{Join{DataScan(a)->DataScan(b)}(Column#3,Column#15)->DataScan(c)}(Column#15,Column#27)->Aggr(sum(Column#1))->Projection",
      "Join{DataScan(a)->DataScan(b)->Aggr(sum(Column#13),firstrow(Column#15))}(Column#3,Column#15)->Aggr(sum(Column#26))->Projection",
      "Join{DataScan(a)->Aggr(sum(Column#1),firstrow(Column#3))->DataScan(b)}(Column#3,Column#15)->Aggr(sum(Column#26))->Projection",
      "Join{DataScan(a)->Aggr(sum(Column#1),firstrow(Column#3))->DataScan(b)}(Column#3,Column#15)->Aggr(sum(Column#26))->Projection",
      "DataScan(t)->Aggr(sum(Column#1))->Projection",
      "UnionAll{DataScan(a)->Projection->Aggr(sum(Column#27),firstrow(Column#28))->DataScan(b)->Projection->Aggr(sum(Column#13),firstrow(Column#14))->DataScan(c)->Projection->Aggr(sum(Column#2),firstrow(Column#5))}->Aggr(sum(Column#40))->Projection",
      "Join{DataScan(a)->DataScan(b)->Aggr(max(Column#14),firstrow(Column#15))}(Column#3,Column#15)->Projection->Projection",
      "Join{DataScan(a)->DataScan(b)}(Column#1,Column#13)->Aggr(max(Column#2),max(Column#14))->Projection",
      "UnionAll{DataScan(a)->Projection->Projection->Projection->DataScan(b)->Projection->Projection->Projection}->Aggr(max(Column#38))->Projection",
      "Join{DataScan(a)->DataScan(b)}(Column#1,Column#13)(Column#2,Column#14)->Aggr(max(Column#3))->Projection",
      "Join{DataScan(t1)->DataScan(t2)}(Column#1,Column#13)->Projection->Projection"
    ]
  },
  {
    "Name": "TestPlanBuilder",
    "Cases": [
      "DataScan(t)->Lock->Projection",
      "TableReader(Table(t)->Limit)->Limit->Update",
      "TableReader(Table(t)->Limit)->Limit->Delete",
      "*core.Explain",
      "*core.Explain",
      "*core.Explain",
      "*core.Explain",
      "*core.Explain",
      "*core.Explain",
      "*core.Explain",
      "*core.Explain",
      "TableReader(Table(t))->Insert",
      "Show->Sel([eq(cast(Column#4), 0)])->Projection",
      "Dual->Projection",
      "Dual->Projection",
      "Dual->Projection",
      "Join{DataScan(t1)->DataScan(t2)}->Projection",
      "Join{DataScan(t1)->DataScan(t2)}->Projection",
      "LeftHashJoin{LeftHashJoin{TableReader(Table(t))->IndexLookUp(Index(t.c_d_e)[[666,666]], Table(t))}(Column#1,Column#14)->IndexReader(Index(t.c_d_e)[[42,42]])}(Column#2,Column#26)->Sel([or(Column#25, Column#38)])->Projection->Delete",
      "LeftHashJoin{TableReader(Table(t))->IndexReader(Index(t.c_d_e)[[NULL,+inf]])->HashAgg}(Column#2,Column#15)->Projection->Update"
    ]
  },
  {
    "Name": "TestPredicatePushDown",
    "Cases": [
      "Join{DataScan(a)->DataScan(b)}(Column#1,Column#13)->Aggr(count(1))->Projection",
      "DataScan(t)->Projection->Projection",
      "DataScan(t)->Projection->Projection",
      "DataScan(t)->Projection->Projection",
      "DataScan(t)->Projection->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#14)(Column#1,Column#15)->Projection",
      "Join{DataScan(t1)->Sel([like(cast(Column#4), abc, 92)])->DataScan(t2)->Sel([like(cast(Column#16), abc, 92)])}(Column#1,Column#14)(Column#4,Column#16)->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#16)->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#16)->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#16)->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#16)->Projection",
      "Join{DataScan(ta)->DataScan(tb)}->Projection",
      "Join{DataScan(ta)->DataScan(tb)}->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#16)->Projection",
      "Join{Join{DataScan(ta)->DataScan(tb)}(Column#1,Column#13)->DataScan(tc)}(Column#14,Column#26)->Projection",
      "Join{Join{DataScan(ta)->DataScan(tb)}(Column#1,Column#13)->DataScan(tc)}(Column#2,Column#26)->Projection",
      "Join{DataScan(ta)->Join{DataScan(tb)->DataScan(tc)}(Column#14,Column#26)}(Column#1,Column#13)->Projection",
      "Join{Join{DataScan(ta)->DataScan(tb)}(Column#1,Column#13)->Join{DataScan(tc)->DataScan(td)}(Column#26,Column#38)}(Column#3,Column#39)->Projection",
      "Join{DataScan(ta)->Join{DataScan(tb)->DataScan(tc)}(Column#14,Column#26)}(Column#1,Column#13)(Column#3,Column#27)->Sel([or(gt(Column#28, 0), gt(Column#4, 0))])->Projection",
      "Join{DataScan(ta)->DataScan(tb)}(Column#4,Column#16)->Sel([or(ifnull(Column#16, 1), isnull(Column#16))])->Projection",
      "UnionAll{DataScan(t)->Projection->Projection->DataScan(t)->Projection->Projection->DataScan(t)->Projection->Projection}->Projection",
      "Apply{DataScan(k)->DataScan(t)->Aggr(count(1))->Projection->MaxOneRow}->Projection",
      "Join{DataScan(t)->DataScan(x)}->Projection",
      "Join{DataScan(t)->DataScan(x)}(Column#1,Column#13)->Projection",
      "Join{DataScan(t)->DataScan(x)}(Column#1,Column#13)->Projection",
      "Join{Join{DataScan(t)->DataScan(x)}(Column#1,Column#13)->DataScan(x)}(Column#1,Column#26)->Projection",
      "DataScan(t)->Aggr(sum(Column#3),firstrow(Column#1),firstrow(Column#2))->Projection->Projection",
      "DataScan(t)->Aggr(sum(Column#3),firstrow(Column#1),firstrow(Column#2))->Projection->Projection",
      "DataScan(t)->Aggr(sum(Column#2),firstrow(Column#1))->Projection->Aggr(sum(Column#13),firstrow(Column#1))->Projection->Projection",
      "DataScan(t)->Aggr(sum(Column#2),firstrow(Column#1))->Sel([gt(cast(Column#1), Column#13)])->Projection->Projection",
      "DataScan(t)->Aggr(sum(Column#2),firstrow(Column#1))->Sel([gt(Column#1, 1)])->Projection->Projection",
      "Dual->Sel([gt(Column#1, 1)])->Projection",
      "DataScan(t)->Aggr(count(Column#1),firstrow(Column#1))->Sel([lt(Column#13, 1)])->Projection",
      "Join{DataScan(t1)->DataScan(t2)}(Column#1,Column#13)->Projection",
      "Dual->Projection",
      "DataScan(t)->Projection->Projection->Window(min(Column#1))->Sel([lt(Column#1, 10) eq(Column#2, Column#14)])->Projection->Projection",
      "DataScan(t)->Projection->Projection->Window(sum(cast(Column#1)))->Sel([gt(Column#14, cast(Column#2))])->Projection->Projection"
    ]
  },
  {
    "Name": "TestSubquery",
    "Cases": [
      "Join{DataScan(t)->DataScan(s)}(Column#1,Column#13)->Projection",
      "Join{DataScan(t)->Aggr(count(Column#3),firstrow(Column#1))->DataScan(s)}(Column#1,Column#14)->Projection->Projection",
      "Join{DataScan(t)->Aggr(count(Column#3),firstrow(Column#1))->DataScan(s)}(Column#1,Column#14)->Aggr(firstrow(Column#13),firstrow(Column#1),count(Column#15))->Projection->Projection",
      "Apply{DataScan(t)->DataScan(s)->Sel([eq(Column#13, Column#1)])->Aggr(count(Column#14))}->Projection",
      "Join{DataScan(t)->DataScan(s)->Aggr(count(Column#14),firstrow(Column#13))}(Column#1,Column#13)->Projection->Projection->Projection",
      "Join{Join{DataScan(t1)->DataScan(t2)}->DataScan(s)->Aggr(count(Column#26),firstrow(Column#25))}(Column#1,Column#25)->Projection->Projection->Projection",
      "Join{DataScan(t)->DataScan(s)->Aggr(count(1),firstrow(Column#13))}(Column#1,Column#13)->Projection->Projection->Projection",
      "Join{DataScan(t)->DataScan(s)->Aggr(firstrow(Column#13))->Projection}(Column#1,Column#13)->Projection",
      "Join{DataScan(t)->DataScan(s)}(Column#1,Column#13)->Projection",
      "Join{DataScan(t)->DataScan(s)}(Column#1,Column#13)->Projection->Sel([in(10, Column#14, 10)])->Projection",
      "Join{DataScan(t)->DataScan(s)->Aggr(sum(Column#13))->Projection}->Projection",
      "Join{DataScan(t1)->DataScan(t)->Projection->Limit}(Column#2,Column#14)->Projection->Projection",
      "Join{DataScan(t)->Join{DataScan(s)->DataScan(k)}(Column#16,Column#28)(Column#15,Column#27)->Aggr(sum(Column#13))->Projection}->Projection",
      "Join{DataScan(t1)->DataScan(t2)->Aggr(max(Column#13),firstrow(Column#14))}(Column#2,Column#14)->Projection->Sel([eq(Column#2, Column#25)])->Projection",
      "Apply{DataScan(t1)->DataScan(t2)->Sel([eq(Column#10, Column#22) or(eq(Column#2, 4), eq(Column#14, 2))])->Aggr(avg(Column#13))}->Projection->Sel([eq(cast(Column#2), Column#25)])->Projection",
      "Join{DataScan(t1)->DataScan(t2)->Aggr(max(Column#13),firstrow(Column#14))}(Column#2,Column#14)->Projection->Sel([eq(Column#2, Column#25)])->Projection",
      "Join{DataScan(t1)->DataScan(t2)}(Column#1,Column#13)(Column#2,Column#14)->Projection",
      "Join{DataScan(t1)->DataScan(t2)}(Column#1,Column#13)->Projection",
      "Apply{DataScan(t1)->DataScan(t2)->Sel([eq(Column#13, Column#1)])->Projection->Sort->Limit}->Projection->Sel([eq(Column#2, Column#25)])->Projection"
    ]
  },
  {
    "Name": "TestTopNPushDown",
    "Cases": [
      "DataScan(t)->TopN([Column#2],0,5)->Projection",
      "DataScan(t)->Limit->Projection",
      "DataScan(t)->Aggr(count(Column#2),firstrow(Column#1))->Limit->Projection",
      "DataScan(t)->Aggr(count(Column#2),firstrow(Column#1),firstrow(Column#3))->TopN([Column#3],0,5)->Projection",
      "Join{DataScan(t)->DataScan(s)}->TopN([Column#1],0,5)->Projection",
      "Join{DataScan(t)->DataScan(s)}->Limit->Projection",
      "Join{DataScan(t)->TopN([Column#1],0,5)->DataScan(s)}(Column#1,Column#13)->TopN([Column#1],0,5)->Projection",
      "Join{DataScan(t)->TopN([Column#1],0,10)->DataScan(s)}(Column#1,Column#13)->TopN([Column#1],5,5)->Projection",
      "Join{DataScan(t)->Limit->DataScan(s)}(Column#1,Column#13)->Limit->Projection",
      "Join{DataScan(t)->Limit->DataScan(s)}(Column#1,Column#13)->Limit->Projection",
      "Join{DataScan(t)->TopN([Column#1],0,5)->DataScan(s)}(Column#1,Column#13)->TopN([Column#1],0,5)->Projection",
      "Join{DataScan(t)->TopN([Column#1],0,5)->DataScan(s)}(Column#1,Column#13)->TopN([Column#1],0,5)->Projection",
      "Join{DataScan(t)->DataScan(s)}(Column#1,Column#13)->TopN([Column#1],0,5)->Projection",
      "Join{DataScan(t)->DataScan(s)->TopN([Column#13],0,5)}(Column#1,Column#13)->TopN([Column#13],0,5)->Projection",
      "Join{DataScan(t)->DataScan(s)}(Column#1,Column#13)->TopN([Column#13 Column#2],0,5)->Projection",
      "UnionAll{DataScan(t)->TopN([Column#13 Column#14],0,5)->Projection->DataScan(s)->TopN([Column#1 Column#2],0,5)->Projection}->TopN([Column#25 Column#26],0,5)",
      "UnionAll{DataScan(t)->TopN([Column#13 Column#14],0,10)->Projection->DataScan(s)->TopN([Column#1 Column#2],0,10)->Projection}->TopN([Column#25 Column#26],5,5)",
      "UnionAll{DataScan(t)->Limit->Projection->DataScan(s)->TopN([Column#1],0,5)->Projection}->Limit",
      "Join{DataScan(t1)->TopN([Column#2],0,5)->DataScan(t2)}(Column#5,Column#17)->TopN([Column#2],0,5)->Projection",
      "Join{DataScan(t1)->DataScan(t2)}(Column#5,Column#17)->TopN([ifnull(Column#11, Column#14)],0,5)->Projection->Projection"
    ]
  },
  {
    "Name": "TestUnion",
    "Cases": [
      {
        "Best": "UnionAll{DataScan(t)->Projection->DataScan(t)->Projection}->Aggr(firstrow(Column#25))",
        "Err": false
      },
      {
        "Best": "UnionAll{DataScan(t)->Projection->DataScan(t)->Projection}",
        "Err": false
      },
      {
        "Best": "UnionAll{UnionAll{DataScan(t)->Projection->DataScan(t)->Projection}->Aggr(firstrow(Column#37))->Projection->DataScan(t)->Projection}",
        "Err": false
      },
      {
        "Best": "UnionAll{DataScan(t)->Projection->DataScan(t)->Projection->DataScan(t)->Projection->DataScan(t)->Projection->DataScan(t)->Projection}->Aggr(firstrow(Column#61))",
        "Err": false
      },
      {
        "Best": "",
        "Err": true
      },
      {
        "Best": "UnionAll{UnionAll{Dual->Projection->Dual->Projection}->Aggr(firstrow(Column#4))->Projection->Dual->Projection}->Projection->Sort",
        "Err": false
      },
      {
        "Best": "Apply{UnionAll{UnionAll{Dual->Projection->Dual->Projection}->Aggr(firstrow(Column#4))->Projection->Dual->Projection}->Dual->Projection->MaxOneRow}->Sort->Projection",
        "Err": false
      }
    ]
  },
  {
    "Name": "TestWindowFunction",
    "Cases": [
      "TableReader(Table(t))->Window(avg(cast(Column#1)) over(partition by Column#1))->Projection",
      "TableReader(Table(t))->Sort->Window(avg(cast(Column#1)) over(partition by Column#2))->Projection",
      "IndexReader(Index(t.f)[[NULL,+inf]])->Projection->Sort->Window(avg(cast(Column#16)) over(partition by Column#15))->Projection",
      "TableReader(Table(t))->Sort->Window(avg(cast(Column#1)) over(order by Column#1 asc, Column#2 desc range between unbounded preceding and current row))->Projection",
      "TableReader(Table(t))->Window(avg(cast(Column#1)) over(partition by Column#1))->Projection",
      "[planner:1054]Unknown column 'z' in 'field list'",
      "TableReader(Table(t))->Window(sum(cast(Column#2)) over())->Sort->Projection",
      "IndexReader(Index(t.f)[[NULL,+inf]]->StreamAgg)->StreamAgg->Window(sum(Column#13) over())->Projection",
      "TableReader(Table(t))->Window(sum(cast(Column#1)) over())->Sort->Projection",
      "TableReader(Table(t))->Window(sum(cast(Column#1)) over(partition by Column#1))->Sort->Projection",
      "TableReader(Table(t)->StreamAgg)->StreamAgg->Window(sum(Column#13) over())->Sort->Projection",
      "Apply{IndexReader(Index(t.f)[[NULL,+inf]])->IndexReader(Index(t.f)[[NULL,+inf]]->Sel([gt(Column#13, Column#1)]))->Window(sum(cast(Column#13)) over())->MaxOneRow->Sel([Column#26])}->Projection",
      "[planner:3594]You cannot use the alias 'w' of an expression containing a window function in this context.'",
      "[planner:1247]Reference 'sum_a' not supported (reference to window function)",
      "[planner:3579]Window name 'w2' is not defined.",
      "[planner:3579]Window name 'w' is not defined.",
      "[planner:3580]There is a circularity in the window dependency graph.",
      "[planner:3581]A window which depends on another cannot define partitioning.",
      "[planner:3581]A window which depends on another cannot define partitioning.",
      "[planner:3582]Window 'w' has a frame definition, so cannot be referenced by another window.",
      "IndexReader(Index(t.f)[[NULL,+inf]])->Window(sum(cast(Column#1)) over(rows between 1 preceding and 1 following))->Projection",
      "[planner:3583]Window '<unnamed window>' cannot inherit 'w' since both contain an ORDER BY clause.",
      "[planner:3591]Window 'w1' is defined twice.",
      "TableReader(Table(t))->Window(avg(cast(Column#1)) over(partition by Column#1))->Projection",
      "TableReader(Table(t))->Window(sum(cast(Column#1)) over(partition by Column#1))->Sort->Projection",
      "[planner:1235]This version of TiDB doesn't yet support 'GROUPS'",
      "[planner:3584]Window '<unnamed window>': frame start cannot be UNBOUNDED FOLLOWING.",
      "[planner:3585]Window '<unnamed window>': frame end cannot be UNBOUNDED PRECEDING.",
      "[planner:3596]Window '<unnamed window>': INTERVAL can only be used with RANGE frames.",
      "[planner:3586]Window '<unnamed window>': frame start or end is negative, NULL or of non-integral type",
      "[planner:3587]Window '<unnamed window>' with RANGE N PRECEDING/FOLLOWING frame requires exactly one ORDER BY expression, of numeric or temporal type",
      "[planner:3587]Window '<unnamed window>' with RANGE N PRECEDING/FOLLOWING frame requires exactly one ORDER BY expression, of numeric or temporal type",
      "[planner:3589]Window '<unnamed window>' with RANGE frame has ORDER BY expression of numeric type, INTERVAL bound value not allowed.",
      "[planner:3590]Window '<unnamed window>' has a non-constant frame bound.",
      "[planner:3586]Window '<unnamed window>': frame start or end is negative, NULL or of non-integral type",
      "[planner:3588]Window '<unnamed window>' with RANGE frame has ORDER BY expression of datetime type. Only INTERVAL bound value allowed.",
      "TableReader(Table(t))->Window(sum(cast(Column#1)) over(order by Column#1 asc range between 1.0 preceding and 1 following))->Projection",
      "IndexReader(Index(t.f)[[NULL,+inf]])->Window(row_number() over())->Projection",
      "TableReader(Table(t))->HashAgg->Window(max(Column#13) over(rows between 1 preceding and 1 following))->Projection",
      "[planner:1210]Incorrect arguments to nth_value",
      "[planner:1210]Incorrect arguments to nth_value",
      "[planner:1210]Incorrect arguments to nth_value",
      "[planner:1210]Incorrect arguments to ntile",
      "IndexReader(Index(t.f)[[NULL,+inf]])->Window(ntile(<nil>) over())->Projection",
      "TableReader(Table(t))->Sort->Window(avg(cast(Column#1)) over(partition by Column#2))->Projection",
      "TableReader(Table(t))->Window(nth_value(Column#12, 1) over())->Projection",
      "TableReader(Table(t))->Window(sum(cast(Column#2)), sum(cast(Column#3)) over(order by Column#1 asc range between unbounded preceding and current row))->Projection",
      "[planner:3593]You cannot use the window function 'sum' in this context.'",
      "[planner:3593]You cannot use the window function 'sum' in this context.'",
      "[planner:3593]You cannot use the window function 'row_number' in this context.'",
      "TableReader(Table(t))->Sort->Window(sum(cast(Column#3)) over(partition by Column#1 order by Column#3 asc range between unbounded preceding and current row))->Sort->Window(sum(cast(Column#2)) over(order by Column#1 asc, Column#2 asc, Column#3 asc range between unbounded preceding and current row))->Window(sum(cast(Column#1)) over(partition by Column#1 order by Column#2 asc range between unbounded preceding and current row))->Window(sum(cast(Column#4)) over())->Projection",
      "[planner:3587]Window 'w1' with RANGE N PRECEDING/FOLLOWING frame requires exactly one ORDER BY expression, of numeric or temporal type",
      "TableReader(Table(t))->Sort->Window(dense_rank() over(partition by Column#2 order by Column#1 desc, Column#2 desc))->Projection",
      "[planner:3587]Window 'w1' with RANGE N PRECEDING/FOLLOWING frame requires exactly one ORDER BY expression, of numeric or temporal type",
      "[planner:3585]Window 'w1': frame end cannot be UNBOUNDED PRECEDING.",
      "[planner:3584]Window 'w1': frame start cannot be UNBOUNDED FOLLOWING.",
      "[planner:3586]Window 'w1': frame start or end is negative, NULL or of non-integral type",
      "[planner:1235]This version of TiDB doesn't yet support 'IGNORE NULLS'",
      "[planner:1235]This version of TiDB doesn't yet support '<window function>(DISTINCT ..)'",
      "[planner:1235]This version of TiDB doesn't yet support 'FROM LAST'",
      "[planner:1235]This version of TiDB doesn't yet support 'IGNORE NULLS'",
      "[planner:1210]Incorrect arguments to nth_value",
      "[planner:1210]Incorrect arguments to nth_value",
      "[planner:3586]Window 'w': frame start or end is negative, NULL or of non-integral type",
      "[planner:3586]Window 'w': frame start or end is negative, NULL or of non-integral type",
      "[planner:3586]Window 'w': frame start or end is negative, NULL or of non-integral type",
      "TableReader(Table(t))->Sort->Window(row_number() over(partition by Column#2))->Projection"
    ]
  },
  {
    "Name": "TestUniqueKeyInfo",
    "Cases": [
      {
        "1": [
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#1"
          ]
        ],
        "3": [
          [
            "Column#1"
          ]
        ]
      },
      {
        "1": [
          [
            "Column#9"
          ],
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#1"
          ],
          [
            "Column#2"
          ]
        ],
        "3": [
          [
            "Column#1"
          ],
          [
            "Column#2"
          ]
        ]
      },
      {
        "1": [
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#3",
            "Column#4",
            "Column#5"
          ]
        ],
        "3": [
          [
            "Column#3",
            "Column#4",
            "Column#5"
          ]
        ]
      },
      {
        "1": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ],
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ]
        ],
        "3": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ]
        ]
      },
      {
        "1": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ],
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#21"
          ],
          [
            "Column#21",
            "Column#22"
          ],
          [
            "Column#13"
          ]
        ],
        "3": [
          [
            "Column#21"
          ],
          [
            "Column#21",
            "Column#22"
          ],
          [
            "Column#13"
          ]
        ],
        "4": [
          [
            "Column#21"
          ],
          [
            "Column#21",
            "Column#22"
          ],
          [
            "Column#13"
          ]
        ]
      },
      {
        "1": [
          [
            "Column#9"
          ],
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#9"
          ]
        ],
        "3": [
          [
            "Column#9"
          ]
        ],
        "5": [
          [
            "Column#14"
          ]
        ],
        "6": [
          [
            "Column#9"
          ]
        ]
      },
      {
        "1": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ],
          [
            "Column#1"
          ]
        ],
        "2": [
          [
            "Column#21"
          ],
          [
            "Column#21",
            "Column#22"
          ],
          [
            "Column#13"
          ]
        ],
        "3": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ],
          [
            "Column#1"
          ]
        ],
        "4": [
          [
            "Column#9"
          ],
          [
            "Column#9",
            "Column#10"
          ],
          [
            "Column#1"
          ]
        ]
      }
    ]
  }
]
