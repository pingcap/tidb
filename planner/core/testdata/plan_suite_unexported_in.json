[
  {
    "name": "TestEagerAggregation",
    "cases": [
      "select sum(t.a), sum(t.a+1), sum(t.a), count(t.a), sum(t.a) + count(t.a) from t",
      "select sum(t.a + t.b), sum(t.a + t.c), sum(t.a + t.b), count(t.a) from t having sum(t.a + t.b) > 0 order by sum(t.a + t.c)",
      "select sum(a.a) from t a, t b where a.c = b.c",
      "select sum(b.a) from t a, t b where a.c = b.c",
      "select sum(b.a), a.a from t a, t b where a.c = b.c",
      "select sum(a.a), b.a from t a, t b where a.c = b.c",
      "select sum(a.a), sum(b.a) from t a, t b where a.c = b.c",
      "select sum(a.a), max(b.a) from t a, t b where a.c = b.c",
      "select max(a.a), sum(b.a) from t a, t b where a.c = b.c",
      "select sum(a.a) from t a, t b, t c where a.c = b.c and b.c = c.c",
      "select sum(b.a) from t a left join t b on a.c = b.c",
      "select sum(a.a) from t a left join t b on a.c = b.c",
      "select sum(a.a) from t a right join t b on a.c = b.c",
      "select sum(a) from (select * from t) x",
      "select sum(c1) from (select c c1, d c2 from t a union all select a c1, b c2 from t b union all select b c1, e c2 from t c) x group by c2",
      "select max(a.b), max(b.b) from t a join t b on a.c = b.c group by a.a",
      "select max(a.b), max(b.b) from t a join t b on a.a = b.a group by a.c",
      "select max(c.b) from (select * from t a union all select * from t b) c group by c.a",
      "select max(a.c) from t a join t b on a.a=b.a and a.b=b.b group by a.b",
      "select t1.a, count(t2.b) from t t1, t t2 where t1.a = t2.a group by t1.a",
      "select avg(a) from (select * from t t1 union all select * from t t2) t",
      "select count(distinct a) from (select * from t t1 union all select * from t t2) t",
      "select count(distinct b) from (select * from t t1 union all select * from t t2) t",
      "select approx_count_distinct(a) from (select * from t t1 union all select * from t t2) t",
      "select approx_count_distinct(b) from (select * from t t1 union all select * from t t2) t"
    ]
  },
  {
    "name": "TestPlanBuilder",
    "cases": [
      "select * from t for update",
      "update t set t.a = t.a * 1.5 where t.a >= 1000 order by t.a desc limit 10",
      "delete from t where t.a >= 1000 order by t.a desc limit 10",
      "explain select * from t union all select * from t limit 1, 1",
      // The correctness of explain result is checked at integration test. There is to improve coverage.
      "explain select /*+ TIDB_INLJ(t1, t2) */ * from t t1 left join t t2 on t1.a=t2.a where t1.b=1 and t2.b=1 and (t1.c=1 or t2.c=1)",
      "explain select /*+ TIDB_HJ(t1, t2) */ * from t t1 left join t t2 on t1.a=t2.a where t1.b=1 and t2.b=1 and (t1.c=1 or t2.c=1)",
      "explain select /*+ TIDB_SMJ(t1, t2) */ * from t t1 right join t t2 on t1.a=t2.a where t1.b=1 and t2.b=1 and (t1.c=1 or t2.c=1)",
      "explain format=\"dot\" select /*+ TIDB_SMJ(t1, t2) */ * from t t1, t t2 where t1.a=t2.a",
      "explain select * from t order by b",
      "explain select * from t order by b limit 1",
      "explain format=\"dot\" select * from t order by a",
      "insert into t select * from t",
      "show columns from t where `Key` = 'pri' like 't*'",
      "do sleep(5)",
      "select substr(\"abc\", 1)",
      "select * from t t1, t t2 where 1 = 0",
      "select * from t t1 join t t2 using(a)",
      "select * from t t1 natural join t t2",
      // Note the Projection before Delete: the final schema should be the schema of
      // table t rather than Join.
      // If this schema is not set correctly, table.RemoveRecord would fail when adding
      // binlog columns, because the schema and data are not consistent.
      "delete from t where a in (select b from t where c = 666) or b in (select a from t where c = 42)",
      "update t set a = 2 where b in (select c from t)"
    ]
  },
  {
    "name": "TestPredicatePushDown",
    "cases": [
      "select count(*) from t a, t b where a.a = b.a",
      "select a from (select a from t where d = 0) k where k.a = 5",
      "select a from (select a+1 as a from t) k where k.a = 5",
      "select a from (select 1+2 as a from t where d = 0) k where k.a = 5",
      "select a from (select d as a from t where d = 0) k where k.a = 5",
      "select * from t ta, t tb where (ta.d, ta.a) = (tb.b, tb.c)",
      "select * from t t1, t t2 where t1.a = t2.b and t2.b > 0 and t1.a = t1.c and t1.d like 'abc' and t2.d = t1.d",
      "select * from t ta join t tb on ta.d = tb.d and ta.d > 1 where tb.a = 0",
      "select * from t ta join t tb on ta.d = tb.d where ta.d > 1 and tb.a = 0",
      "select * from t ta left outer join t tb on ta.d = tb.d and ta.d > 1 where tb.a = 0",
      "select * from t ta right outer join t tb on ta.d = tb.d and ta.a > 1 where tb.a = 0",
      "select * from t ta left outer join t tb on ta.d = tb.d and ta.a > 1 where ta.d = 0",
      "select * from t ta left outer join t tb on ta.d = tb.d and ta.a > 1 where tb.d = 0",
      "select * from t ta left outer join t tb on ta.d = tb.d and ta.a > 1 where tb.c is not null and tb.c = 0 and ifnull(tb.d, 1)",
      "select * from t ta left outer join t tb on ta.a = tb.a left outer join t tc on tb.b = tc.b where tc.c > 0",
      "select * from t ta left outer join t tb on ta.a = tb.a left outer join t tc on tc.b = ta.b where tb.c > 0",
      "select * from t as ta left outer join (t as tb left join t as tc on tc.b = tb.b) on tb.a = ta.a where tc.c > 0",
      "select * from ( t as ta left outer join t as tb on ta.a = tb.a) join ( t as tc left join t as td on tc.b = td.b) on ta.c = td.c where tb.c = 2 and td.a = 1",
      "select * from t ta left outer join (t tb left outer join t tc on tc.b = tb.b) on tb.a = ta.a and tc.c = ta.c where tc.d > 0 or ta.d > 0",
      "select * from t ta left outer join t tb on ta.d = tb.d and ta.a > 1 where ifnull(tb.d, 1) or tb.d is null",
      "select a, d from (select * from t union all select * from t union all select * from t) z where a < 10",
      "select (select count(*) from t where t.a = k.a) from t k",
      "select a from t where exists(select 1 from t as x where x.a < t.a)",
      "select a from t where exists(select 1 from t as x where x.a = t.a and t.a < 1 and x.a < 1)",
      "select a from t where exists(select 1 from t as x where x.a = t.a and x.a < 1) and a < 1",
      "select a from t where exists(select 1 from t as x where x.a = t.a) and exists(select 1 from t as x where x.a = t.a)",
      "select * from (select a, b, sum(c) as s from t group by a, b) k where k.a > k.b * 2 + 1",
      "select * from (select a, b, sum(c) as s from t group by a, b) k where k.a > 1 and k.b > 2",
      "select * from (select k.a, sum(k.s) as ss from (select a, sum(b) as s from t group by a) k group by k.a) l where l.a > 2",
      "select * from (select a, sum(b) as s from t group by a) k where a > s",
      "select * from (select a, sum(b) as s from t group by a + 1) k where a > 1",
      "select * from (select a, sum(b) as s from t group by a having 1 = 0) k where a > 1",
      "select a, count(a) cnt from t group by a having cnt < 1",
      // issue #3873
      "select t1.a, t2.a from t as t1 left join t as t2 on t1.a = t2.a where t1.a < 1.0",
      // issue #7728
      "select * from t t1 join t t2 on t1.a = t2.a where t2.a = null",
      "select a, b from (select a, b, min(a) over(partition by b) as min_a from t)as tt where a < 10 and b > 10 and b = min_a",
      "select a, b from (select a, b, c, d, sum(a) over(partition by b, c) as sum_a from t)as tt where b + c > 10 and b in (1, 2) and sum_a > b"
    ]
  },
  {
    "name": "TestSubquery",
    "cases": [
      // This will be resolved as in sub query.
      "select * from t where 10 in (select b from t s where s.a = t.a)",
      "select count(c) ,(select b from t s where s.a = t.a) from t",
      "select count(c) ,(select count(s.b) from t s where s.a = t.a) from t",
      // Semi-join with agg cannot decorrelate.
      "select t.c in (select count(s.b) from t s where s.a = t.a) from t",
      "select (select count(s.b) k from t s where s.a = t.a having k != 0) from t",
      "select (select count(s.b) k from t s where s.a = t1.a) from t t1, t t2",
      "select (select count(1) k from t s where s.a = t.a having k != 0) from t",
      "select a from t where a in (select a from t s group by t.b)",
      // This will be resolved as in sub query.
      "select * from t where 10 in (((select b from t s where s.a = t.a)))",
      // This will be resolved as in function.
      "select * from t where 10 in (((select b from t s where s.a = t.a)), 10)",
      "select * from t where exists (select s.a from t s having sum(s.a) = t.a )",
      // Test MaxOneRow for limit.
      "select (select * from (select b from t limit 1) x where x.b = t1.b) from t t1",
      // Test Nested sub query.
      "select * from t where exists (select s.a from t s where s.c in (select c from t as k where k.d = s.d) having sum(s.a) = t.a )",
      "select t1.b from t t1 where t1.b = (select max(t2.a) from t t2 where t1.b=t2.b)",
      "select t1.b from t t1 where t1.b = (select avg(t2.a) from t t2 where t1.g=t2.g and (t1.b = 4 or t2.b = 2))",
      "select t1.b from t t1 where t1.b = (select max(t2.a) from t t2 where t1.b=t2.b order by t1.a)",
      "select t1.b from t t1 where t1.b in (select t2.b from t t2 where t2.a = t1.a order by t2.a)",
      "select t1.b from t t1 where exists(select t2.b from t t2 where t2.a = t1.a order by t2.a)",
      // `Sort` will not be eliminated, if it is not the top level operator.
      "select t1.b from t t1 where t1.b = (select t2.b from t t2 where t2.a = t1.a order by t2.a limit 1)"
    ]
  },
  {
    "name": "TestTopNPushDown",
    "cases": [
      // Test TopN + Selection.
      "select * from t where a < 1 order by b limit 5",
      // Test Limit + Selection.
      "select * from t where a < 1 limit 5",
      // Test Limit + Agg + Proj .
      "select a, count(b) from t group by b limit 5",
      // Test TopN + Agg + Proj .
      "select a, count(b) from t group by b order by c limit 5",
      // Test TopN + Join + Proj.
      "select * from t, t s order by t.a limit 5",
      // Test Limit + Join + Proj.
      "select * from t, t s limit 5",
      // Test Limit + Proj
      "select a, b from (select @i as a, @i := @i+1 as b from t) t order by a desc limit 1",
      // Test TopN + Left Join + Proj.
      "select * from t left outer join t s on t.a = s.a order by t.a limit 5",
      // Test TopN + Left Join + Proj.
      "select * from t left outer join t s on t.a = s.a order by t.a limit 5, 5",
      // Test Limit + Left Join + Proj.
      "select * from t left outer join t s on t.a = s.a limit 5",
      // Test Limit + Left Join Apply + Proj.
      "select (select s.a from t s where t.a = s.a) from t limit 5",
      // Test TopN + Left Join Apply + Proj.
      "select (select s.a from t s where t.a = s.a) from t order by t.a limit 5",
      // Test TopN + Left Semi Join Apply + Proj.
      "select exists (select s.a from t s where t.a = s.a) from t order by t.a limit 5",
      // Test TopN + Semi Join Apply + Proj.
      "select * from t where exists (select s.a from t s where t.a = s.a) order by t.a limit 5",
      // Test TopN + Right Join + Proj.
      "select * from t right outer join t s on t.a = s.a order by s.a limit 5",
      // Test Limit + Right Join + Proj.
      "select * from t right outer join t s on t.a = s.a order by s.a,t.b limit 5",
      // Test TopN + UA + Proj.
      "select * from t union all (select * from t s) order by a,b limit 5",
      // Test TopN + UA + Proj.
      "select * from t union all (select * from t s) order by a,b limit 5, 5",
      // Test Limit + UA + Proj + Sort.
      "select * from t union all (select * from t s order by a) limit 5",
      // Test `ByItem` containing column from both sides.
      "select ifnull(t1.b, t2.a) from t t1 left join t t2 on t1.e=t2.e order by ifnull(t1.b, t2.a) limit 5",
      // Test ifnull cannot be eliminated
      "select ifnull(t1.h, t2.b) from t t1 left join t t2 on t1.e=t2.e order by ifnull(t1.h, t2.b) limit 5"
    ]
  },
  {
    "name": "TestUnion",
    "cases": [
      "select a from t union select a from t",
      "select a from t union all select a from t",
      "select a from t union select a from t union all select a from t",
      "select a from t union select a from t union all select a from t union select a from t union select a from t",
      "select a from t union select a, b from t",
      "select * from (select 1 as a  union select 1 union all select 2) t order by a",
      "select * from (select 1 as a  union select 1 union all select 2) t order by (select a)"
    ]
  },
  {
    "name": "TestWindowFunction",
    "cases": [
      "select a, avg(a) over(partition by a) from t",
      "select a, avg(a) over(partition by b) from t",
      "select a, avg(a+1) over(partition by (a+1)) from t",
      "select a, avg(a) over(order by a asc, b desc) from t order by a asc, b desc",
      "select a, b as a, avg(a) over(partition by a) from t",
      "select a, b as z, sum(z) over() from t",
      "select a, b as z from t order by (sum(z) over())",
      "select sum(avg(a)) over() from t",
      "select b from t order by(sum(a) over())",
      "select b from t order by(sum(a) over(partition by a))",
      "select b from t order by(sum(avg(a)) over())",
      "select a from t having (select sum(a) over() as w from t tt where a > t.a)",
      "select avg(a) over() as w from t having w > 1",
      "select sum(a) over() as sum_a from t group by sum_a",
      "select sum(a) over() from t window w1 as (w2)",
      "select sum(a) over(w) from t",
      "select sum(a) over() from t window w1 as (w2), w2 as (w1)",
      "select sum(a) over(w partition by a) from t window w as ()",
      "SELECT FIRST_VALUE(a) RESPECT NULLS OVER (w1 PARTITION BY b ORDER BY b ASC, a DESC ROWS 2 PRECEDING) AS 'first_value', a, b FROM ( SELECT a, b FROM `t` ) as t WINDOW w1 AS (PARTITION BY b ORDER BY b ASC, a ASC );",
      "select sum(a) over(w) from t window w as (rows between 1 preceding AND 1 following)",
      "select sum(a) over w from t window w as (rows between 1 preceding AND 1 following)",
      "select sum(a) over(w order by b) from t window w as (order by a)",
      "select sum(a) over() from t window w1 as (), w1 as ()",
      "select avg(a) over(w2) from t window w1 as (partition by a), w2 as (w1)",
      "select a from t window w1 as (partition by a) order by (sum(a) over(w1))",
      "select sum(a) over(groups 1 preceding) from t",
      "select sum(a) over(rows between unbounded following and 1 preceding) from t",
      "select sum(a) over(rows between current row and unbounded preceding) from t",
      "select sum(a) over(rows interval 1 MINUTE_SECOND preceding) from t",
      "select sum(a) over(rows between 1.0 preceding and 1 following) from t",
      "select sum(a) over(range between 1 preceding and 1 following) from t",
      "select sum(a) over(order by c_str range between 1 preceding and 1 following) from t",
      "select sum(a) over(order by a range interval 1 MINUTE_SECOND preceding) from t",
      "select sum(a) over(order by i_date range interval a MINUTE_SECOND preceding) from t",
      "select sum(a) over(order by i_date range interval -1 MINUTE_SECOND preceding) from t",
      "select sum(a) over(order by i_date range 1 preceding) from t",
      "select sum(a) over(order by a range between 1.0 preceding and 1 following) from t",
      "select row_number() over(rows between 1 preceding and 1 following) from t",
      "select avg(b), max(avg(b)) over(rows between 1 preceding and 1 following) max from t group by c",
      "select nth_value(a, 1.0) over() from t",
      "SELECT NTH_VALUE(a, 1.0) OVER() FROM t",
      "select nth_value(a, 0) over() from t",
      "select ntile(0) over() from t",
      "select ntile(null) over() from t",
      "select avg(a) over w from t window w as(partition by b)",
      "select nth_value(i_date, 1) over() from t",
      "select sum(b) over w, sum(c) over w from t window w as (order by a)",
      "delete from t order by (sum(a) over())",
      "delete from t order by (SUM(a) over())",
      "SELECT * from t having ROW_NUMBER() over()",
      // The best execution order should be (a,c), (a, b, c), (a, b), (), it requires only 2 sort operations.
      "select sum(a) over (partition by a order by b), sum(b) over (order by a, b, c), sum(c) over(partition by a order by c), sum(d) over() from t",
      // Test issue 11010.
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a desc, t.b desc range between current row and 1 following)",
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a desc, t.b desc range between current row and unbounded following)",
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a desc, t.b desc range between 1 preceding and 1 following)",
      // Test issue 11001.
      "SELECT PERCENT_RANK() OVER w1 AS 'percent_rank', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) t1 WINDOW w1 AS ( ROWS BETWEEN 0 FOLLOWING AND UNBOUNDED PRECEDING)",
      // Test issue 11002.
      "SELECT PERCENT_RANK() OVER w1 AS 'percent_rank', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) as t1 WINDOW w1 AS ( ROWS BETWEEN UNBOUNDED FOLLOWING AND UNBOUNDED FOLLOWING)",
      // Test issue 11011.
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a asc range between 1250951168 following AND 1250951168 preceding)",
      // Test issue 10556.
      "SELECT FIRST_VALUE(a) IGNORE NULLS OVER () FROM t",
      "SELECT SUM(DISTINCT a) OVER () FROM t",
      "SELECT NTH_VALUE(a, 1) FROM LAST over (partition by b order by b), a FROM t",
      "SELECT NTH_VALUE(a, 1) FROM LAST IGNORE NULLS over (partition by b order by b), a FROM t",
      "SELECT NTH_VALUE(fieldA, ATAN(-1)) OVER (w1) AS 'ntile', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) as te WINDOW w1 AS ( ORDER BY fieldB ASC, fieldA DESC )",
      "SELECT NTH_VALUE(fieldA, -1) OVER (w1 PARTITION BY fieldB ORDER BY fieldB , fieldA ) AS 'ntile', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) as temp WINDOW w1 AS ( ORDER BY fieldB ASC, fieldA DESC )",
      "SELECT SUM(a) OVER w AS 'sum' FROM t WINDOW w AS (ROWS BETWEEN 1 FOLLOWING AND CURRENT ROW )",
      "SELECT SUM(a) OVER w AS 'sum' FROM t WINDOW w AS (ROWS BETWEEN CURRENT ROW AND 1 PRECEDING )",
      "SELECT SUM(a) OVER w AS 'sum' FROM t WINDOW w AS (ROWS BETWEEN 1 FOLLOWING AND 1 PRECEDING )",
      // Test issue 11943
      "SELECT ROW_NUMBER() OVER (partition by b) + a FROM t",
      // Test issue 10996
      "SELECT GROUP_CONCAT(a) OVER () FROM t"
    ]
  },
  {
    "name": "TestWindowParallelFunction",
    "cases": [
      "select a, avg(a) over(partition by a) from t",
      "select a, avg(a) over(partition by b) from t",
      "select a, avg(a+1) over(partition by (a+1)) from t",
      "select a, avg(a) over(order by a asc, b desc) from t order by a asc, b desc",
      "select a, b as a, avg(a) over(partition by a) from t",
      "select a, b as z, sum(z) over() from t",
      "select a, b as z from t order by (sum(z) over())",
      "select sum(avg(a)) over() from t",
      "select b from t order by(sum(a) over())",
      "select b from t order by(sum(a) over(partition by a))",
      "select b from t order by(sum(avg(a)) over())",
      "select a from t having (select sum(a) over() as w from t tt where a > t.a)",
      "select avg(a) over() as w from t having w > 1",
      "select sum(a) over() as sum_a from t group by sum_a",
      "select sum(a) over() from t window w1 as (w2)",
      "select sum(a) over(w) from t",
      "select sum(a) over() from t window w1 as (w2), w2 as (w1)",
      "select sum(a) over(w partition by a) from t window w as ()",
      "SELECT FIRST_VALUE(a) RESPECT NULLS OVER (w1 PARTITION BY b ORDER BY b ASC, a DESC ROWS 2 PRECEDING) AS 'first_value', a, b FROM ( SELECT a, b FROM `t` ) as t WINDOW w1 AS (PARTITION BY b ORDER BY b ASC, a ASC );",
      "select sum(a) over(w) from t window w as (rows between 1 preceding AND 1 following)",
      "select sum(a) over w from t window w as (rows between 1 preceding AND 1 following)",
      "select sum(a) over(w order by b) from t window w as (order by a)",
      "select sum(a) over() from t window w1 as (), w1 as ()",
      "select avg(a) over(w2) from t window w1 as (partition by a), w2 as (w1)",
      "select a from t window w1 as (partition by a) order by (sum(a) over(w1))",
      "select sum(a) over(groups 1 preceding) from t",
      "select sum(a) over(rows between unbounded following and 1 preceding) from t",
      "select sum(a) over(rows between current row and unbounded preceding) from t",
      "select sum(a) over(rows interval 1 MINUTE_SECOND preceding) from t",
      "select sum(a) over(rows between 1.0 preceding and 1 following) from t",
      "select sum(a) over(range between 1 preceding and 1 following) from t",
      "select sum(a) over(order by c_str range between 1 preceding and 1 following) from t",
      "select sum(a) over(order by a range interval 1 MINUTE_SECOND preceding) from t",
      "select sum(a) over(order by i_date range interval a MINUTE_SECOND preceding) from t",
      "select sum(a) over(order by i_date range interval -1 MINUTE_SECOND preceding) from t",
      "select sum(a) over(order by i_date range 1 preceding) from t",
      "select sum(a) over(order by a range between 1.0 preceding and 1 following) from t",
      "select row_number() over(rows between 1 preceding and 1 following) from t",
      "select avg(b), max(avg(b)) over(rows between 1 preceding and 1 following) max from t group by c",
      "select nth_value(a, 1.0) over() from t",
      "SELECT NTH_VALUE(a, 1.0) OVER() FROM t",
      "select nth_value(a, 0) over() from t",
      "select ntile(0) over() from t",
      "select ntile(null) over() from t",
      "select avg(a) over w from t window w as(partition by b)",
      "select nth_value(i_date, 1) over() from t",
      "select sum(b) over w, sum(c) over w from t window w as (order by a)",
      "delete from t order by (sum(a) over())",
      "delete from t order by (SUM(a) over())",
      "SELECT * from t having ROW_NUMBER() over()",
      // The best execution order should be (a,c), (a, b, c), (a, b), (), it requires only 2 sort operations.
      "select sum(a) over (partition by a order by b), sum(b) over (order by a, b, c), sum(c) over(partition by a order by c), sum(d) over() from t",
      // Test issue 11010.
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a desc, t.b desc range between current row and 1 following)",
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a desc, t.b desc range between current row and unbounded following)",
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a desc, t.b desc range between 1 preceding and 1 following)",
      // Test issue 11001.
      "SELECT PERCENT_RANK() OVER w1 AS 'percent_rank', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) t1 WINDOW w1 AS ( ROWS BETWEEN 0 FOLLOWING AND UNBOUNDED PRECEDING)",
      // Test issue 11002.
      "SELECT PERCENT_RANK() OVER w1 AS 'percent_rank', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) as t1 WINDOW w1 AS ( ROWS BETWEEN UNBOUNDED FOLLOWING AND UNBOUNDED FOLLOWING)",
      // Test issue 11011.
      "select dense_rank() over w1, a, b from t window w1 as (partition by t.b order by t.a asc range between 1250951168 following AND 1250951168 preceding)",
      // Test issue 10556.
      "SELECT FIRST_VALUE(a) IGNORE NULLS OVER () FROM t",
      "SELECT SUM(DISTINCT a) OVER () FROM t",
      "SELECT NTH_VALUE(a, 1) FROM LAST over (partition by b order by b), a FROM t",
      "SELECT NTH_VALUE(a, 1) FROM LAST IGNORE NULLS over (partition by b order by b), a FROM t",
      "SELECT NTH_VALUE(fieldA, ATAN(-1)) OVER (w1) AS 'ntile', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) as te WINDOW w1 AS ( ORDER BY fieldB ASC, fieldA DESC )",
      "SELECT NTH_VALUE(fieldA, -1) OVER (w1 PARTITION BY fieldB ORDER BY fieldB , fieldA ) AS 'ntile', fieldA, fieldB FROM ( SELECT a AS fieldA, b AS fieldB FROM t ) as temp WINDOW w1 AS ( ORDER BY fieldB ASC, fieldA DESC )",
      "SELECT SUM(a) OVER w AS 'sum' FROM t WINDOW w AS (ROWS BETWEEN 1 FOLLOWING AND CURRENT ROW )",
      "SELECT SUM(a) OVER w AS 'sum' FROM t WINDOW w AS (ROWS BETWEEN CURRENT ROW AND 1 PRECEDING )",
      "SELECT SUM(a) OVER w AS 'sum' FROM t WINDOW w AS (ROWS BETWEEN 1 FOLLOWING AND 1 PRECEDING )",
      // Test issue 11943
      "SELECT ROW_NUMBER() OVER (partition by b) + a FROM t"
    ]
  },
  {
    "name": "TestUniqueKeyInfo",
    "cases": [
      "select a, sum(e) from t group by b",
      "select a, b, sum(f) from t group by b",
      "select c, d, e, sum(a) from t group by c, d, e",
      "select f, g, sum(a) from t",
      "select * from t t1 join t t2 on t1.a = t2.e",
      "select f from t having sum(a) > 0",
      "select * from t t1 left join t t2 on t1.a = t2.a",
      "select a from t where b > 0",
      "select a from t where b > 0 limit 5"
    ]
  },
  {
    "name": "TestAggPrune",
    "cases": [
      "select a, count(b) from t group by a",
      "select sum(b) from t group by c, d, e",
      "select tt.a, sum(tt.b) from (select a, b from t) tt group by tt.a",
      "select count(1) from (select count(1), a as b from t group by a) tt group by b",
      "select a, count(b) from t group by a",
      "select a, count(distinct a, b) from t group by a",
      "select a, approx_count_distinct(a, b) from t group by a"
    ]
  },
  {
    "name": "TestColumnPruning",
    "cases": [
      "select count(*) from t group by a",
      "select count(*) from t",
      "select count(*) from t a join t b where a.a < 1",
      "select count(*) from t a join t b on a.a = b.d",
      "select count(*) from t a join t b on a.a = b.d order by sum(a.d)",
      "select count(b.a) from t a join t b on a.a = b.d group by b.b order by sum(a.d)",
      "select * from (select count(b.a) from t a join t b on a.a = b.d group by b.b having sum(a.d) < 0) tt",
      "select (select count(a) from t where b = k.a) from t k",
      "select exists (select count(*) from t where b = k.a) from t k",
      "select b = (select count(*) from t where b = k.a) from t k",
      "select exists (select count(a) from t where b = k.a group by b) from t k",
      "select a as c1, b as c2 from t order by 1, c1 + c2 + c",
      "select a from t where b < any (select c from t)",
      "select a from t where (b,a) != all (select c,d from t)",
      "select a from t where (b,a) in (select c,d from t)",
      "select a from t where a in (select a from t s group by t.b)",
      "select t01.a from (select a from t t21 union all select a from t t22) t2 join t t01 on 1 left outer join t t3 on 1 join t t4 on 1",
      "select 1 from (select count(b) as cnt from t) t1",
      "select count(1) from (select count(b) as cnt from t) t1",
      "select count(1) from (select count(b) as cnt from t group by c) t1",
      "select b from t where a > 0 limit 5, 10"
    ]
  },
  {
    "name": "TestSortByItemsPruning",
    "cases": [
      "select * from t where a > 1 order by a asc, a asc limit 10",
      "select * from t where a > 1 order by a asc, b asc, a asc, c asc limit 10",
      "select * from t where a > 1 order by pow(a, 2) asc, b asc, pow(a, 2) asc, c asc limit 10"
    ]
  },
  {
    "name": "TestDeriveNotNullConds",
    "cases": [
      "select * from t t1 inner join t t2 on t1.e = t2.e",
      "select * from t t1 inner join t t2 on t1.e > t2.e",
      "select * from t t1 inner join t t2 on t1.e = t2.e and t1.e is not null",
      "select * from t t1 left join t t2 on t1.e = t2.e",
      "select * from t t1 left join t t2 on t1.e > t2.e",
      "select * from t t1 left join t t2 on t1.e = t2.e and t2.e is not null",
      "select * from t t1 right join t t2 on t1.e = t2.e and t1.e is not null",
      "select * from t t1 inner join t t2 on t1.e <=> t2.e",
      "select * from t t1 left join t t2 on t1.e <=> t2.e",
      // Not deriving if column has NotNull flag already.
      "select * from t t1 inner join t t2 on t1.b = t2.b",
      "select * from t t1 left join t t2 on t1.b = t2.b",
      "select * from t t1 left join t t2 on t1.b > t2.b",
      "select * from t t1 where not exists (select * from t t2 where t2.e = t1.e)"
    ]
  },
  {
    "name": "TestTablePartition",
    "cases": [
      {
        "SQL":   "select * from t",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn < 31",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn < 61",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn > 17 and t.ptn < 61",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn > 17 and t.ptn < 61 union all select * from t where t.ptn > 17 and t.ptn < 61 ",
        "IsIdx": 0
      },
      {
        "SQL":   "select ptn from t where t.ptn > 17 and t.ptn < 61 union all select ptn from t where t.ptn > 17 and t.ptn < 61 ",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn < 8",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn > 128",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn > 128",
        "IsIdx": 1
      },
      {
        // NULL will be located in the first partition.
        "SQL":   "select * from t where t.ptn is null",
        "IsIdx": 0
      },
      {
        "SQL":   "select * from t where t.ptn is null or t.ptn > 70",
        "IsIdx": 1
      }
    ]
  },
  {
    "name": "TestJoinPredicatePushDown",
    "cases": [
      // issue #7628, inner join
      "select * from t as t1 join t as t2 on t1.b = t2.b where t1.a > t2.a",
      "select * from t as t1 join t as t2 on t1.b = t2.b where t1.a=1 or t2.a=1",
      "select * from t as t1 join t as t2 on t1.b = t2.b where (t1.a=1 and t2.a=1) or (t1.a=2 and t2.a=2)",
      "select * from t as t1 join t as t2 on t1.b = t2.b where (t1.c=1 and (t1.a=3 or t2.a=3)) or (t1.a=2 and t2.a=2)",
      "select * from t as t1 join t as t2 on t1.b = t2.b where (t1.c=1 and ((t1.a=3 and t2.a=3) or (t1.a=4 and t2.a=4)))",
      "select * from t as t1 join t as t2 on t1.b = t2.b where (t1.a>1 and t1.a < 3 and t2.a=1) or (t1.a=2 and t2.a=2)",
      "select * from t as t1 join t as t2 on t1.b = t2.b and ((t1.a=1 and t2.a=1) or (t1.a=2 and t2.a=2))",
      // issue #7628, left join
      "select * from t as t1 left join t as t2 on t1.b = t2.b and ((t1.a=1 and t2.a=1) or (t1.a=2 and t2.a=2))",
      "select * from t as t1 left join t as t2 on t1.b = t2.b and t1.a > t2.a",
      "select * from t as t1 left join t as t2 on t1.b = t2.b and (t1.a=1 or t2.a=1)",
      "select * from t as t1 left join t as t2 on t1.b = t2.b and ((t1.c=1 and (t1.a=3 or t2.a=3)) or (t1.a=2 and t2.a=2))",
      "select * from t as t1 left join t as t2 on t1.b = t2.b and ((t2.c=1 and (t1.a=3 or t2.a=3)) or (t1.a=2 and t2.a=2))",
      "select * from t as t1 left join t as t2 on t1.b = t2.b and ((t1.c=1 and ((t1.a=3 and t2.a=3) or (t1.a=4 and t2.a=4))) or (t1.a=2 and t2.a=2))",
      // Duplicate condition would be removed.
      "select * from t t1 join t t2 on t1.a > 1 and t1.a > 1"
    ]
  },
  {
    "name": "TestJoinReOrder",
    "cases": [
      "select * from t t1, t t2, t t3, t t4, t t5, t t6 where t1.a = t2.b and t2.a = t3.b and t3.c = t4.a and t4.d = t2.c and t5.d = t6.d",
      "select * from t t1, t t2, t t3, t t4, t t5, t t6, t t7, t t8 where t1.a = t8.a",
      "select * from t t1, t t2, t t3, t t4, t t5 where t1.a = t5.a and t5.a = t4.a and t4.a = t3.a and t3.a = t2.a and t2.a = t1.a and t1.a = t3.a and t2.a = t4.a and t5.b < 8",
      "select * from t t1, t t2, t t3, t t4, t t5 where t1.a = t5.a and t5.a = t4.a and t4.a = t3.a and t3.a = t2.a and t2.a = t1.a and t1.a = t3.a and t2.a = t4.a and t3.b = 1 and t4.a = 1",
      "select * from t o where o.b in (select t3.c from t t1, t t2, t t3 where t1.a = t3.a and t2.a = t3.a and t2.a = o.a)",
      "select * from t o where o.b in (select t3.c from t t1, t t2, t t3 where t1.a = t3.a and t2.a = t3.a and t2.a = o.a and t1.a = 1)"
    ]
  },
  {
    "name": "TestOuterJoinEliminator",
    "cases": [
      // Test left outer join + distinct
      "select distinct t1.a, t1.b from t t1 left outer join t t2 on t1.b = t2.b",
      // Test right outer join + distinct
      "select distinct t2.a, t2.b from t t1 right outer join t t2 on t1.b = t2.b",
      // Test duplicate agnostic agg functions on join
      "select max(t1.a), min(test.t1.b) from t t1 left join t t2 on t1.b = t2.b",
      "select sum(distinct t1.a) from t t1 left join t t2 on t1.a = t2.a and t1.b = t2.b",
      "select count(distinct t1.a, t1.b) from t t1 left join t t2 on t1.b = t2.b",
      "select approx_count_distinct(t1.a, t1.b) from t t1 left join t t2 on t1.b = t2.b",
      // Test left outer join
      "select t1.b from t t1 left outer join t t2 on t1.a = t2.a",
      // Test right outer join
      "select t2.b from t t1 right outer join t t2 on t1.a = t2.a",
      // For complex join query
      "select max(t3.b) from (t t1 left join t t2 on t1.a = t2.a) right join t t3 on t1.b = t3.b",
      "select t1.a ta, t1.b tb from t t1 left join t t2 on t1.a = t2.a",
      // Because the `order by` uses t2.a, the `join` can't be eliminated.
      "select t1.a, t1.b from t t1 left join t t2 on t1.a = t2.a order by t2.a",
      // For issue 11167
      "select a.a from t a natural left join t b natural left join t c"
    ]
  },
  {
    "name": "TestSimplifyOuterJoin",
    "cases": [
      "select * from t t1 left join t t2 on t1.b = t2.b where t1.c > 1 or t2.c > 1;",
      "select * from t t1 left join t t2 on t1.b = t2.b where t1.c > 1 and t2.c > 1;",
      "select * from t t1 left join t t2 on t1.b = t2.b where not (t1.c > 1 or t2.c > 1);",
      "select * from t t1 left join t t2 on t1.b = t2.b where not (t1.c > 1 and t2.c > 1);",
      "select * from t t1 left join t t2 on t1.b > 1 where t1.c = t2.c;",
      "select * from t t1 left join t t2 on true where t1.b <=> t2.b;"
    ]
  },
  {
    "name": "TestOuterWherePredicatePushDown",
    "cases": [
      // issue #7628, left join with where condition
      "select * from t as t1 left join t as t2 on t1.b = t2.b where (t1.a=1 and t2.a is null) or (t1.a=2 and t2.a=2)",
      "select * from t as t1 left join t as t2 on t1.b = t2.b where (t1.c=1 and (t1.a=3 or t2.a=3)) or (t1.a=2 and t2.a=2)",
      "select * from t as t1 left join t as t2 on t1.b = t2.b where (t1.c=1 and ((t1.a=3 and t2.a=3) or (t1.a=4 and t2.a=4))) or (t1.a=2 and t2.a is null)"
    ]
  }
]
