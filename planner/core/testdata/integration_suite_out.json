[
  {
    "Name": "TestPushLimitDownIndexLookUpReader",
    "Cases": [
      {
        "SQL": "explain select * from tbl use index(idx_b_c) where b > 1 limit 2,1",
        "Plan": [
          "IndexLookUp_14 1.00 root  limit embedded(offset:2, count:1)",
          "├─Limit_13(Build) 3.00 cop[tikv]  offset:0, count:3",
          "│ └─IndexRangeScan_11 3.00 cop[tikv] table:tbl, index:idx_b_c(b, c) range:(1,+inf], keep order:false",
          "└─TableRowIDScan_12(Probe) 1.00 cop[tikv] table:tbl keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain select * from tbl use index(idx_b_c) where b > 1 order by b desc limit 2,1",
        "Plan": [
          "Projection_25 1.00 root  test.tbl.a, test.tbl.b, test.tbl.c",
          "└─IndexLookUp_24 1.00 root  limit embedded(offset:2, count:1)",
          "  ├─Limit_23(Build) 3.00 cop[tikv]  offset:0, count:3",
          "  │ └─IndexRangeScan_21 3.00 cop[tikv] table:tbl, index:idx_b_c(b, c) range:(1,+inf], keep order:true, desc",
          "  └─TableRowIDScan_22(Probe) 1.00 cop[tikv] table:tbl keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain select * from tbl use index(idx_b_c) where b > 1 and c > 1 limit 2,1",
        "Plan": [
          "IndexLookUp_15 1.00 root  limit embedded(offset:2, count:1)",
          "├─Limit_14(Build) 3.00 cop[tikv]  offset:0, count:3",
          "│ └─Selection_13 3.00 cop[tikv]  gt(test.tbl.c, 1)",
          "│   └─IndexRangeScan_11 3.75 cop[tikv] table:tbl, index:idx_b_c(b, c) range:(1,+inf], keep order:false",
          "└─TableRowIDScan_12(Probe) 1.00 cop[tikv] table:tbl keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain select * from tbl use index(idx_b_c) where b > 1 and a > 1 limit 2,1",
        "Plan": [
          "Limit_9 1.00 root  offset:2, count:1",
          "└─IndexLookUp_15 3.00 root  ",
          "  ├─IndexRangeScan_11(Build) 3.75 cop[tikv] table:tbl, index:idx_b_c(b, c) range:(1,+inf], keep order:false",
          "  └─Limit_14(Probe) 3.00 cop[tikv]  offset:0, count:3",
          "    └─Selection_13 3.00 cop[tikv]  gt(test.tbl.a, 1)",
          "      └─TableRowIDScan_12 3.75 cop[tikv] table:tbl keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestIsFromUnixtimeNullRejective",
    "Cases": [
      {
        "SQL": "explain select * from t t1 left join t t2 on t1.a=t2.a where from_unixtime(t2.b);",
        "Plan": [
          "HashJoin_7 9990.00 root  inner join, equal:[eq(test.t.a, test.t.a)]",
          "├─Selection_15(Build) 7992.00 root  from_unixtime(cast(test.t.b))",
          "│ └─TableReader_14 7992.00 root  data:Selection_13",
          "│   └─Selection_13 7992.00 cop[tikv]  not(isnull(test.t.a))",
          "│     └─TableFullScan_12 10000.00 cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─TableReader_11(Probe) 9990.00 root  data:Selection_10",
          "  └─Selection_10 9990.00 cop[tikv]  not(isnull(test.t.a))",
          "    └─TableFullScan_9 10000.00 cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestSimplifyOuterJoinWithCast",
    "Cases": [
      {
        "SQL": "explain select * from t t1 left join t t2 on t1.a = t2.a where cast(t1.b as date) >= '2019-01-01'",
        "Plan": [
          "HashJoin_8 10000.00 root  left outer join, equal:[eq(test.t.a, test.t.a)]",
          "├─TableReader_11(Build) 8000.00 root  data:Selection_10",
          "│ └─Selection_10 8000.00 cop[tikv]  ge(cast(test.t.b), 2019-01-01 00:00:00.000000)",
          "│   └─TableFullScan_9 10000.00 cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─TableReader_13(Probe) 10000.00 root  data:TableFullScan_12",
          "  └─TableFullScan_12 10000.00 cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMaxMinEliminate",
    "Cases": [
      {
        "SQL": "explain (select max(a) from t) union (select min(a) from t)",
        "Plan": [
          "HashAgg_19 2.00 root  group by:Column#5, funcs:firstrow(Column#5)->Column#5",
          "└─Union_20 2.00 root  ",
          "  ├─StreamAgg_26 1.00 root  funcs:max(test.t.a)->Column#4",
          "  │ └─Limit_30 1.00 root  offset:0, count:1",
          "  │   └─TableReader_40 1.00 root  data:Limit_39",
          "  │     └─Limit_39 1.00 cop[tikv]  offset:0, count:1",
          "  │       └─TableFullScan_38 1.00 cop[tikv] table:t keep order:true, desc, stats:pseudo",
          "  └─StreamAgg_48 1.00 root  funcs:min(test.t.a)->Column#2",
          "    └─Limit_52 1.00 root  offset:0, count:1",
          "      └─TableReader_62 1.00 root  data:Limit_61",
          "        └─Limit_61 1.00 cop[tikv]  offset:0, count:1",
          "          └─TableFullScan_60 1.00 cop[tikv] table:t keep order:true, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexJoinUniqueCompositeIndex",
    "Cases": [
      {
        "SQL": "explain select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t1.c = t2.c",
        "Plan": [
          "IndexJoin_9 2.00 root  inner join, inner:IndexLookUp_8, outer key:test.t1.a, inner key:test.t2.a, other cond:eq(test.t1.c, test.t2.c)",
          "├─TableReader_19(Build) 1.00 root  data:TableFullScan_18",
          "│ └─TableFullScan_18 1.00 cop[tikv] table:t1 keep order:false",
          "└─IndexLookUp_8(Probe) 2.00 root  ",
          "  ├─IndexRangeScan_6(Build) 2.00 cop[tikv] table:t2, index:PRIMARY(a, b) range: decided by [eq(test.t2.a, test.t1.a)], keep order:false",
          "  └─TableRowIDScan_7(Probe) 2.00 cop[tikv] table:t2 keep order:false"
        ]
      },
      {
        "SQL": "explain select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t1.c <= t2.b",
        "Plan": [
          "IndexJoin_9 2.00 root  inner join, inner:IndexLookUp_8, outer key:test.t1.a, inner key:test.t2.a, other cond:le(test.t1.c, test.t2.b)",
          "├─TableReader_19(Build) 1.00 root  data:TableFullScan_18",
          "│ └─TableFullScan_18 1.00 cop[tikv] table:t1 keep order:false",
          "└─IndexLookUp_8(Probe) 2.00 root  ",
          "  ├─IndexRangeScan_6(Build) 2.00 cop[tikv] table:t2, index:PRIMARY(a, b) range: decided by [eq(test.t2.a, test.t1.a) le(test.t1.c, test.t2.b)], keep order:false",
          "  └─TableRowIDScan_7(Probe) 2.00 cop[tikv] table:t2 keep order:false"
        ]
      },
      {
        "SQL": "explain select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t2.b = 1",
        "Plan": [
          "IndexJoin_9 1.00 root  inner join, inner:IndexLookUp_8, outer key:test.t1.a, inner key:test.t2.a",
          "├─TableReader_19(Build) 1.00 root  data:TableFullScan_18",
          "│ └─TableFullScan_18 1.00 cop[tikv] table:t1 keep order:false",
          "└─IndexLookUp_8(Probe) 1.00 root  ",
          "  ├─IndexRangeScan_6(Build) 1.00 cop[tikv] table:t2, index:PRIMARY(a, b) range: decided by [eq(test.t2.a, test.t1.a) eq(test.t2.b, 1)], keep order:false",
          "  └─TableRowIDScan_7(Probe) 1.00 cop[tikv] table:t2 keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestPartitionTableStats",
    "Cases": [
      {
        "SQL": "explain select * from t order by a",
        "Result": [
          "Sort_8 10005.00 root  test.t.a:asc",
          "└─Union_11 10005.00 root  ",
          "  ├─TableReader_13 10000.00 root  data:TableFullScan_12",
          "  │ └─TableFullScan_12 10000.00 cop[tikv] table:t, partition:p0 keep order:false, stats:pseudo",
          "  ├─TableReader_15 1.00 root  data:TableFullScan_14",
          "  │ └─TableFullScan_14 1.00 cop[tikv] table:t, partition:p1 keep order:false",
          "  └─TableReader_17 4.00 root  data:TableFullScan_16",
          "    └─TableFullScan_16 4.00 cop[tikv] table:t, partition:p2 keep order:false"
        ]
      },
      {
        "SQL": "select * from t order by a",
        "Result": [
          "15 5",
          "21 1",
          "22 2",
          "23 3",
          "24 4"
        ]
      },
      {
        "SQL": "explain select * from t order by a limit 3",
        "Result": [
          "TopN_16 3.00 root  test.t.a:asc, offset:0, count:3",
          "└─Union_20 7.00 root  ",
          "  ├─TopN_21 3.00 root  test.t.a:asc, offset:0, count:3",
          "  │ └─TableReader_29 3.00 root  data:TopN_28",
          "  │   └─TopN_28 3.00 cop[tikv]  test.t.a:asc, offset:0, count:3",
          "  │     └─TableFullScan_27 10000.00 cop[tikv] table:t, partition:p0 keep order:false, stats:pseudo",
          "  ├─TopN_34 1.00 root  test.t.a:asc, offset:0, count:3",
          "  │ └─TableReader_42 1.00 root  data:TableFullScan_41",
          "  │   └─TableFullScan_41 1.00 cop[tikv] table:t, partition:p1 keep order:false",
          "  └─TopN_43 3.00 root  test.t.a:asc, offset:0, count:3",
          "    └─TableReader_51 3.00 root  data:TopN_50",
          "      └─TopN_50 3.00 cop[tikv]  test.t.a:asc, offset:0, count:3",
          "        └─TableFullScan_49 4.00 cop[tikv] table:t, partition:p2 keep order:false"
        ]
      },
      {
        "SQL": "select * from t order by a limit 3",
        "Result": [
          "15 5",
          "21 1",
          "22 2"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexMerge",
    "Cases": [
      {
        "SQL": "explain select /*+ USE_INDEX_MERGE(t, a, b) */ * from t where a = 1 or b = 2",
        "Plan": [
          "IndexMerge_8 2.00 root  ",
          "├─IndexRangeScan_5(Build) 1.00 cop[tikv] table:t, index:a(a) range:[1,1], keep order:false, stats:pseudo",
          "├─IndexRangeScan_6(Build) 1.00 cop[tikv] table:t, index:b(b) range:[2,2], keep order:false, stats:pseudo",
          "└─TableRowIDScan_7(Probe) 2.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain select /*+ USE_INDEX_MERGE(t, primary) */ * from t where 1 or t.c",
        "Plan": [
          "IndexMerge_8 10000.00 root  ",
          "├─TableFullScan_5(Build) 10000.00 cop[tikv] table:t keep order:false, stats:pseudo",
          "├─TableRangeScan_6(Build) 6666.67 cop[tikv] table:t range:[-inf,0), (0,+inf], keep order:false, stats:pseudo",
          "└─TableRowIDScan_7(Probe) 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain select /*+ USE_INDEX_MERGE(t, a, b, c) */ * from t where 1 or t.a = 1 or t.b = 2",
        "Plan": [
          "TableReader_7 8000.00 root  data:Selection_6",
          "└─Selection_6 8000.00 cop[tikv]  or(or(1, eq(test.t.a, 1)), eq(test.t.b, 2))",
          "  └─TableFullScan_5 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestSubqueryWithTopN",
    "Cases": [
      {
        "SQL": "desc select t1.b from t t1 where t1.b in (select t2.a from t t2 order by t1.a+t2.a limit 1)",
        "Plan": [
          "Projection_11 9990.00 root  test.t.b",
          "└─Apply_13 9990.00 root  semi join, equal:[eq(test.t.b, test.t.a)]",
          "  ├─TableReader_16(Build) 9990.00 root  data:Selection_15",
          "  │ └─Selection_15 9990.00 cop[tikv]  not(isnull(test.t.b))",
          "  │   └─TableFullScan_14 10000.00 cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─Selection_17(Probe) 0.80 root  not(isnull(test.t.a))",
          "    └─Projection_26 1.00 root  test.t.a",
          "      └─TopN_18 1.00 root  Column#7:asc, offset:0, count:1",
          "        └─Projection_27 1.00 root  test.t.a, plus(test.t.a, test.t.a)->Column#7",
          "          └─TableReader_23 1.00 root  data:TopN_22",
          "            └─TopN_22 1.00 cop[tikv]  plus(test.t.a, test.t.a):asc, offset:0, count:1",
          "              └─TableFullScan_21 10000.00 cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexJoinTableRange",
    "Cases": [
      {
        "SQL": "desc select /*+ TIDB_INLJ(t2)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.b",
        "Plan": [
          "IndexJoin_12 12487.50 root  inner join, inner:TableReader_11, outer key:test.t1.a, inner key:test.t2.a, other cond:eq(test.t1.b, test.t2.b)",
          "├─IndexReader_21(Build) 9990.00 root  index:IndexFullScan_20",
          "│ └─IndexFullScan_20 9990.00 cop[tikv] table:t1, index:idx_t1_b(b) keep order:false, stats:pseudo",
          "└─TableReader_11(Probe) 1.00 root  data:Selection_10",
          "  └─Selection_10 1.00 cop[tikv]  not(isnull(test.t2.b))",
          "    └─TableRangeScan_9 1.00 cop[tikv] table:t2 range: decided by [test.t1.a], keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc select /*+ TIDB_INLJ(t2)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.a and t1.b = t2.b",
        "Plan": [
          "IndexJoin_12 12487.50 root  inner join, inner:TableReader_11, outer key:test.t1.a, test.t1.b, inner key:test.t2.a, test.t2.a, other cond:eq(test.t1.b, test.t2.b)",
          "├─IndexReader_21(Build) 9990.00 root  index:IndexFullScan_20",
          "│ └─IndexFullScan_20 9990.00 cop[tikv] table:t1, index:idx_t1_b(b) keep order:false, stats:pseudo",
          "└─TableReader_11(Probe) 1.00 root  data:Selection_10",
          "  └─Selection_10 1.00 cop[tikv]  not(isnull(test.t2.b))",
          "    └─TableRangeScan_9 1.00 cop[tikv] table:t2 range: decided by [test.t1.a test.t1.b], keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestIndexHintWarning",
    "Cases": [
      {
        "SQL": "select /*+ USE_INDEX(t1, j) */ * from t1",
        "Warnings": [
          "[planner:1176]Key 'j' doesn't exist in table 't1'"
        ]
      },
      {
        "SQL": "select /*+ IGNORE_INDEX(t1, j) */ * from t1",
        "Warnings": [
          "[planner:1176]Key 'j' doesn't exist in table 't1'"
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX(t2, a, b, c) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index(test.t2, a, b, c) is inapplicable, check whether the table(test.t2) exists"
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX(t2) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index(test.t2) is inapplicable, check whether the table(test.t2) exists"
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX(t1, a), USE_INDEX(t2, a), USE_INDEX(t3, a) */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]use_index(test.t3, a) is inapplicable, check whether the table(test.t3) exists"
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX(t3, a), USE_INDEX(t4, b), IGNORE_INDEX(t3, a) */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]use_index(test.t3, a) is inapplicable, check whether the table(test.t3) exists",
          "[planner:1815]use_index(test.t4, b) is inapplicable, check whether the table(test.t4) exists",
          "[planner:1815]ignore_index(test.t3, a) is inapplicable, check whether the table(test.t3) exists"
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX_MERGE(t3, a, b, d) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index_merge(test.t3, a, b, d) is inapplicable, check whether the table(test.t3) exists"
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX_MERGE(t1, a, b, c, d) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index_merge(test.t1, a, b, c, d) is inapplicable, check whether the indexes (c, d) exist, or the indexes are conflicted with use_index/ignore_index hints."
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX_MERGE(t1, a, b), USE_INDEX(t1, a) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index_merge(test.t1, a, b) is inapplicable, check whether the indexes (b) exist, or the indexes are conflicted with use_index/ignore_index hints."
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX_MERGE(t1, a, b), IGNORE_INDEX(t1, a) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index_merge(test.t1, a, b) is inapplicable, check whether the indexes (a) exist, or the indexes are conflicted with use_index/ignore_index hints."
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX_MERGE(t1, primary, a, b, c) */ * from t1",
        "Warnings": [
          "[planner:1815]use_index_merge(test.t1, primary, a, b, c) is inapplicable, check whether the indexes (c) exist, or the indexes are conflicted with use_index/ignore_index hints."
        ]
      }
    ]
  },
  {
    "Name": "TestHintWithoutTableWarning",
    "Cases": [
      {
        "SQL": "select /*+ TIDB_SMJ() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint TIDB_SMJ() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ MERGE_JOIN() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint MERGE_JOIN() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ INL_JOIN() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint INL_JOIN() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ TIDB_INLJ() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint TIDB_INLJ() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ INL_HASH_JOIN() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint INL_HASH_JOIN() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ INL_MERGE_JOIN() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint INL_MERGE_JOIN() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ HASH_JOIN() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[planner:1815]Hint HASH_JOIN() is inapplicable. Please specify the table names in the arguments."
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use [parser:8064]Optimizer hint syntax error at line 1 column 22 near \") */\" "
        ]
      },
      {
        "SQL": "select /*+ IGNORE_INDEX() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use [parser:8064]Optimizer hint syntax error at line 1 column 25 near \") */\" "
        ]
      },
      {
        "SQL": "select /*+ USE_INDEX_MERGE() */ * from t1, t2 where t1.a=t2.a",
        "Warnings": [
          "[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use [parser:8064]Optimizer hint syntax error at line 1 column 28 near \") */\" "
        ]
      }
    ]
  }
]
