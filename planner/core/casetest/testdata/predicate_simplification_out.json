[
  {
    "Name": "TestRemoveRedundantPredicates",
    "Cases": [
      {
        "SQL": "select f from t use index() where f = 1 and f = 1 -- simple redundancy of exact condition",
        "Plan": [
          "TableReader 10.00 root  data:Selection",
          "└─Selection 10.00 cop[tikv]  eq(test.t.f, 1)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f = 1 and f = 2 -- unsatisfiable condition",
        "Plan": [
          "TableDual 0.00 root  rows:0"
        ]
      },
      {
        "SQL": "select f from t use index() where f = 1 and f in (1,2,3)  -- intersection of in and =",
        "Plan": [
          "TableReader 10.00 root  data:Selection",
          "└─Selection 10.00 cop[tikv]  eq(test.t.f, 1)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f = 1 and f <> 1  -- intersection of = and <>",
        "Plan": [
          "TableDual 0.00 root  rows:0"
        ]
      },
      {
        "SQL": "select f from t use index() where f not in (1,2,3) and f = 3 -- intersection of not in list and =",
        "Plan": [
          "TableDual 0.00 root  rows:0"
        ]
      },
      {
        "SQL": "select f from t use index() where f <> 3 and f <> 3 -- intersection of two not in values.",
        "Plan": [
          "TableReader 6656.67 root  data:Selection",
          "└─Selection 6656.67 cop[tikv]  ne(test.t.f, 3)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select t1.f /* merge_join(t1, t2) */ from t t1, t t2 where t1.a=t2.a and t1.a=t2.a -- exact redundancy in joins",
        "Plan": [
          "HashJoin 12487.50 root  inner join, equal:[eq(test.t.a, test.t.a)]",
          "├─TableReader(Build) 9990.00 root  data:Selection",
          "│ └─Selection 9990.00 cop[tikv]  not(isnull(test.t.a))",
          "│   └─TableFullScan 10000.00 cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─TableReader(Probe) 9990.00 root  data:Selection",
          "  └─Selection 9990.00 cop[tikv]  not(isnull(test.t.a))",
          "    └─TableFullScan 10000.00 cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f in (1,2,3) and f in (3,4,5) -- intersection of two in. Not done yet",
        "Plan": [
          "TableReader 10.00 root  data:Selection",
          "└─Selection 10.00 cop[tikv]  in(test.t.f, 1, 2, 3), in(test.t.f, 3, 4, 5)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f not in (1,2,3) and f not in (3,4,5) -- intersection of two not in. Not done yet",
        "Plan": [
          "TableReader 3583.33 root  data:Selection",
          "└─Selection 3583.33 cop[tikv]  not(in(test.t.f, 1, 2, 3)), not(in(test.t.f, 3, 4, 5))",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f not in (1,2,3) and f in (1,2,3) -- intersection of in and not in. Not done yet",
        "Plan": [
          "TableReader 0.00 root  data:Selection",
          "└─Selection 0.00 cop[tikv]  in(test.t.f, 1, 2, 3), not(in(test.t.f, 1, 2, 3))",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestInListAndNotEqualSimplification",
    "Cases": [
      {
        "SQL": "select f from t use index() where f <> 1 and f in (1,2,3) -- Simple case",
        "Plan": [
          "TableReader 20.00 root  data:Selection",
          "└─Selection 20.00 cop[tikv]  in(test.t.f, 2, 3)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f <> 4 and f in (1,2,3) -- No intersection but <> is redundant",
        "Plan": [
          "TableReader 30.00 root  data:Selection",
          "└─Selection 30.00 cop[tikv]  in(test.t.f, 1, 2, 3)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f in (1,2,3) and f <> 2 -- Simple case with different order. Test case for issue 39676",
        "Plan": [
          "TableReader 20.00 root  data:Selection",
          "└─Selection 20.00 cop[tikv]  in(test.t.f, 1, 3)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f <> 3 and f in (1,2,3) and f <> 2 -- Multiple <> values. All are in inlist",
        "Plan": [
          "TableReader 10.00 root  data:Selection",
          "└─Selection 10.00 cop[tikv]  in(test.t.f, 1)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f in (1,2,3) and f <> 2 and f <> 99 -- Multiple <> values. Some are in inlist",
        "Plan": [
          "TableReader 20.00 root  data:Selection",
          "└─Selection 20.00 cop[tikv]  in(test.t.f, 1, 3)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f in (1,2,3) and f <> 5 and f <> 33  -- Multiple <> values. None are in inlist",
        "Plan": [
          "TableReader 30.00 root  data:Selection",
          "└─Selection 30.00 cop[tikv]  in(test.t.f, 1, 2, 3)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t use index() where f <> 3 and f in (1,2,3) and f <> 1 and f <> 2 -- Multiple <> values and cover whole inlist. We keep at least one in inlist",
        "Plan": [
          "TableReader 0.00 root  data:Selection",
          "└─Selection 0.00 cop[tikv]  in(test.t.f, 2), ne(test.t.f, 2)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select 1 from t A, t B where A.f <> 3 and B.f in (1,2,3) and A.f <> 1 and A.f <> 2 -- on different columns. No simplification should be done.",
        "Plan": [
          "Projection 199700.00 root  1->Column#7",
          "└─HashJoin 199700.00 root  CARTESIAN inner join",
          "  ├─TableReader(Build) 30.00 root  data:Selection",
          "  │ └─Selection 30.00 cop[tikv]  in(test.t.f, 1, 2, 3)",
          "  │   └─TableFullScan 10000.00 cop[tikv] table:B keep order:false, stats:pseudo",
          "  └─TableReader(Probe) 6656.67 root  data:Selection",
          "    └─Selection 6656.67 cop[tikv]  ne(test.t.f, 1), ne(test.t.f, 2), ne(test.t.f, 3)",
          "      └─TableFullScan 10000.00 cop[tikv] table:A keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select 1 from t A, t B where B.f <> 2 and A.f <> 3 and B.f in (1,2,3) and A.f in (3,1,4) and A.f <> 1 and A.f <> 2 -- simplification for two columns.",
        "Plan": [
          "Projection 200.00 root  1->Column#7",
          "└─HashJoin 200.00 root  CARTESIAN inner join",
          "  ├─TableReader(Build) 10.00 root  data:Selection",
          "  │ └─Selection 10.00 cop[tikv]  in(test.t.f, 4)",
          "  │   └─TableFullScan 10000.00 cop[tikv] table:A keep order:false, stats:pseudo",
          "  └─TableReader(Probe) 20.00 root  data:Selection",
          "    └─Selection 20.00 cop[tikv]  in(test.t.f, 1, 3)",
          "      └─TableFullScan 10000.00 cop[tikv] table:B keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from ts use index() where f <> '1' and f in ('1','2','3') -- Simple case with string type",
        "Plan": [
          "TableReader 20.00 root  data:Selection",
          "└─Selection 20.00 cop[tikv]  in(test.ts.f, \"2\", \"3\")",
          "  └─TableFullScan 10000.00 cop[tikv] table:ts keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select count(*) cnt from ts where f <> '1' and f in ('1','2','3') group by a having cnt > 100  -- aggregate  ",
        "Plan": [
          "Selection 12.80 root  gt(Column#4, 100)",
          "└─HashAgg 16.00 root  group by:test.ts.a, funcs:count(Column#5)->Column#4",
          "  └─TableReader 16.00 root  data:HashAgg",
          "    └─HashAgg 16.00 cop[tikv]  group by:test.ts.a, funcs:count(1)->Column#5",
          "      └─Selection 20.00 cop[tikv]  in(test.ts.f, \"2\", \"3\")",
          "        └─TableFullScan 10000.00 cop[tikv] table:ts keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t where f <> NULL  and f in (1,2,3) -- Special case of NULL with no simplification.",
        "Plan": [
          "TableReader 0.00 root  data:Selection",
          "└─Selection 0.00 cop[tikv]  in(test.t.f, 1, 2, 3), ne(test.t.f, NULL)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select f from t where f != NULL  and f in (NULL,2,3) -- Special case of NULL with no simplification.",
        "Plan": [
          "TableReader 0.00 root  data:Selection",
          "└─Selection 0.00 cop[tikv]  in(test.t.f, NULL, 2, 3), ne(test.t.f, NULL)",
          "  └─TableFullScan 10000.00 cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  }
]
