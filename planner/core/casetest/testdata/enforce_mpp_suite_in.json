[
  {
    "name": "TestEnforceMPP",
    "cases": [
      "select @@tidb_allow_mpp",
      "select @@tidb_enforce_mpp",
      "select @@tidb_opt_tiflash_concurrency_factor",
      "set @@tidb_allow_mpp=0",
      "explain format='verbose' select count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tikv[t]) */ count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tiflash[t]) */ count(*) from t where a=1",
      "set @@tidb_allow_mpp=1;",
      "set @@tidb_enforce_mpp=0;",
      "explain format='verbose' select count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tikv[t]) */ count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tiflash[t]) */ count(*) from t where a=1",
      "set @@tidb_opt_tiflash_concurrency_factor = 1000000",
      "explain format='verbose' select count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tikv[t]) */ count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tiflash[t]) */ count(*) from t where a=1",
      "set @@tidb_enforce_mpp=1;",
      "explain format='verbose' select count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tikv[t]) */ count(*) from t where a=1",
      "explain format='verbose' select /*+ read_from_storage(tiflash[t]) */ count(*) from t where a=1"
    ]
  },
  {
    "name": "TestEnforceMPPWarning1",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;",
      "explain format = 'brief' select count(*) from t where a=1 -- 1. no replica",
      "cmd: create-replica",
      "explain select count(*) from t where a=1 -- 2. replica not ready",
      "cmd: enable-replica",
      "set @@session.tidb_isolation_read_engines = 'tikv';",
      "explain select count(*) from t where a=1 -- 3. isolation_engine not match",
      "set @@session.tidb_isolation_read_engines = 'tikv, tiflash';",
      "explain format = 'brief' select /*+ read_from_storage(tikv[t]) */ count(*) from t where a=1 -- 4. hint use tikv",
      "explain format = 'brief' SELECT a, ROW_NUMBER() OVER (ORDER BY a) FROM t; -- 5. window unsupported",
      "EXPLAIN format = 'brief' SELECT t1.b FROM t t1 join t t2 where t1.a=t2.a; -- 6. virtual column",
      "EXPLAIN format = 'brief' SELECT count(b) from t where a=1; -- 7. agg func has virtual column",
      "EXPLAIN format = 'brief' SELECT count(*) from t group by b; -- 8. group by virtual column",
      "EXPLAIN format = 'brief' SELECT count(a) from t group by md5(a); -- 10. scalar func not supported",
      "EXPLAIN format = 'brief' SELECT count(a) from t where c=1; -- 11. type not supported",
      "EXPLAIN format = 'brief' SELECT count(a) from t where d=1; -- 11.1. type not supported"
    ]
  },
  {
    "name": "TestEnforceMPPWarning2",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;",
      "set @@tidb_partition_prune_mode=static;",
      "EXPLAIN SELECT count(*) from t where a=1; -- 1. static partition prune",
      "set @@tidb_partition_prune_mode=dynamic;"

    ]
  },
  {
    "name": "TestEnforceMPPWarning3",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;set @@tidb_hash_exchange_with_new_collation=0;",
      "cmd: enable-new-collation",
      "EXPLAIN SELECT count(*) from t group by b; -- 1. new collation FIXME",
      "EXPLAIN SELECT * from t t1 join t t2 on t1.b=t2.b; -- 2. new collation FIXME"
    ]
  },
  {
    "name": "TestEnforceMPPWarning4",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1; -- test joins",
      "EXPLAIN SELECT /*+ MERGE_JOIN(t,s) */ * from t join s using(a); -- 1. hint use MERGE_JOIN",
      "EXPLAIN SELECT /*+ INL_JOIN(t,s) */ * from t, s where t.a=s.a; -- 2. hint use INL_JOIN",
      "EXPLAIN SELECT /*+ INL_HASH_JOIN(t,s) */ * from t join s using(a); -- 3. hint use INL_HASH_JOIN",
      "EXPLAIN SELECT /*+ HASH_JOIN(t,s) */ * from t join s using(a); -- 4. hint use INL_JOIN",
      "set @@tidb_opt_broadcast_cartesian_join = 0",
      "EXPLAIN SELECT * from t join s; -- 5. cartesian join, cartesian banned.",
      "set @@tidb_broadcast_join_threshold_size = 0; set @@tidb_opt_broadcast_cartesian_join = 1",
      "EXPLAIN SELECT * from t join s; -- 6. cartesian join, broadcast banned.",
      "set @@tidb_broadcast_join_threshold_size = 104857600; set @@tidb_opt_broadcast_cartesian_join = 1",
      "EXPLAIN SELECT * from t join s; -- can use mpp",
      "set @@tidb_broadcast_join_threshold_size = 0; set @@tidb_opt_broadcast_cartesian_join = 2",
      "EXPLAIN SELECT * from t join s; -- can use mpp",
      "set @@tidb_broadcast_join_threshold_size = 104857600; set @@tidb_opt_broadcast_cartesian_join = 1;",
      "explain select a from t where t.a>1 or t.a in (select a from t); -- 7. left outer semi join",
      "explain select a from t where t.a>1 or t.a not in (select a from t); -- now it's supported -- 8. anti left outer semi join",
      "explain select a from t where t.a not in (select a from s where t.a<1); -- 9. non left join has left conditions"
    ]
  },
  {
    "name": "TestMPP2PhaseAggPushDown",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;set @@tidb_opt_agg_push_down=1;",
      "EXPLAIN select count(*) from c, o where c.c_id=o.c_id; -- 1. test agg push down, scalar aggregate",
      "EXPLAIN select o.o_id, count(*) from c, o where c.c_id=o.c_id group by o.o_id; -- 2. test agg push down, group by non-join column",
      "EXPLAIN select o.c_id, count(*) from c, o where c.c_id=o.c_id group by o.c_id; -- 3. test agg push down, group by join column"
    ]
  },
  {
    "name": "TestMPPSkewedGroupDistinctRewrite",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;set @@tidb_opt_skew_distinct_agg=1;",
      "EXPLAIN select count(distinct c) from t group by d;",
      "EXPLAIN select count(distinct c), count(a) from t group by d;",
      "EXPLAIN select count(distinct c) from t group by b+d;",
      "EXPLAIN select count(distinct c) from t group by b+d, a+b;",
      "EXPLAIN select count(distinct c), count(*) from t group by date_format(d,'%Y');",
      "EXPLAIN select date_format(d,'%Y') as df, sum(a), count(b), count(distinct c) from t group by date_format(d,'%Y');",
      "EXPLAIN select d, count(distinct c), sum(a), max(b), count(*) from t group by d;",
      "EXPLAIN select date_format(d,'%Y') as df, count(distinct c) from t group by date_format(d,'%Y');",
      "EXPLAIN select date_format(d,'%Y') as df, a, count(b), count(distinct c) from t group by date_format(d,'%Y'), a;",
      "EXPLAIN select date_format(d,'%Y') as df, a, count(b), avg(distinct c) from t group by date_format(d,'%Y'), a;",
      "EXPLAIN select d,e, min(b), count(distinct c), bit_or(a) from t group by e,d; -- bit agg func can't be pushed to TiFlash",
      "EXPLAIN select a, count(b), avg(distinct c), count(distinct c) from t group by a; -- multi distinct funcs, bail out",
      "EXPLAIN select count(b), count(distinct c) from t; -- single distinct func but no group key, bail out"
    ]
  },
  {
    "name": "TestMPPSingleDistinct3Stage",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;",
      "EXPLAIN select count(distinct b) from t;",
      "EXPLAIN select count(distinct c) from t;",
      "EXPLAIN select count(distinct e) from t;",
      "EXPLAIN select count(distinct a,b,c,e) from t;",
      "EXPLAIN select count(distinct c), count(a), count(*) from t;",
      "EXPLAIN select sum(b), count(a), count(*), count(distinct c) from t;",
      "EXPLAIN select sum(b+a), count(*), count(distinct c), count(a) from t having count(distinct c) > 2;",
      "EXPLAIN select sum(b+a), count(*), count(a) from t having count(distinct c) > 2;",
      "EXPLAIN select sum(b+a), max(b), count(distinct c), count(*) from t having count(a) > 2;",
      "EXPLAIN select sum(b), count(distinct a, b, e), count(a+b) from t;",
      "EXPLAIN select count(distinct b), json_objectagg(d,c) from t;",
      "EXPLAIN select count(distinct c+a), count(a) from t;",
      "EXPLAIN select sum(b), count(distinct c+a, b, e), count(a+b) from t;"
    ]
  },
  {
    "name": "TestMPPMultiDistinct3Stage",
    "cases": [
      "EXPLAIN select count(distinct a) from t",
      "select count(distinct a) from t",
      "EXPLAIN select count(distinct a), count(distinct b) from t",
      "select count(distinct a), count(distinct b) from t",
      "EXPLAIN select count(distinct a), count(distinct b), count(c) from t",
      "select count(distinct a), count(distinct b), count(c) from t",
      "EXPLAIN select count(distinct a), count(distinct b), count(c+1) from t",
      "select count(distinct a), count(distinct b), count(c+1) from t",
      "EXPLAIN select count(distinct a), count(distinct b), sum(c) from t",
      "select count(distinct a), count(distinct b), sum(c) from t",
      "EXPLAIN select count(distinct a, b), count(distinct b), count(c), sum(d) from t",
      "select count(distinct a, b), count(distinct b), count(c), sum(d) from t",
      "EXPLAIN select count(distinct a+b), sum(c) from t",
      "select count(distinct a+b), sum(c) from t",
      "EXPLAIN select count(distinct a+b), count(distinct b+c), count(c) from t",
      "select count(distinct a+b), count(distinct b+c), count(c) from t",
      "explain select count(distinct a,c), count(distinct b,c), count(c) from t",
      "select count(distinct a), count(distinct b), count(*) from t",
      "explain select count(distinct a), count(distinct b), count(*) from t",
      "select count(distinct a), count(distinct b), avg(c+d) from t",
      "explain select count(distinct a), count(distinct b), avg(c+d) from t"
    ]
  },
  {
    "name": "TestMPPNullAwareSemiJoinPushDown",
    "cases": [
      "set @@tidb_allow_mpp=1;set @@tidb_enforce_mpp=1;set @@tidb_enable_null_aware_anti_join=on;",
      "EXPLAIN select * from t where t.a not in (select s.a from s); -- 1. anti semi join, one join key",
      "EXPLAIN select * from t where t.a not in (select s.a from s where t.c > s.c); -- 2. anti semi join, one join key + other condition",
      "EXPLAIN select * from t where (t.a, t.b) not in (select s.a, s.b from s); -- 3. anti semi join, two join key",
      "EXPLAIN select * from t where (t.a, t.b) not in (select s.a, s.b from s where t.c < s.c); -- 4. anti semi join, two join key + other condition",
      "EXPLAIN select *, t.a not in (select s.a from s) from t; -- 5. left anti semi join, one join key",
      "EXPLAIN select *, t.a not in (select s.a from s where t.c > s.c) from t; -- 6. left anti semi join, one join key + other condition",
      "EXPLAIN select *, (t.a, t.b) not in (select s.a, s.b from s) from t; -- 7. left anti semi join, two join key",
      "EXPLAIN select *, (t.a, t.b) not in (select s.a, s.b from s where t.c < s.c) from t; -- 8. left anti semi join, two join key + other condition"
    ]
  }
]
