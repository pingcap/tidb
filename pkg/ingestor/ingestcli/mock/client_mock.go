// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/pkg/ingestor/ingestcli (interfaces: Client,WriteClient)
//
// Generated by this command:
//
//	mockgen -package mock github.com/pingcap/tidb/pkg/ingestor/ingestcli Client,WriteClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ingestcli "github.com/pingcap/tidb/pkg/ingestor/ingestcli"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Ingest mocks base method.
func (m *MockClient) Ingest(arg0 context.Context, arg1 *ingestcli.IngestRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ingest indicates an expected call of Ingest.
func (mr *MockClientMockRecorder) Ingest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingest", reflect.TypeOf((*MockClient)(nil).Ingest), arg0, arg1)
}

// WriteClient mocks base method.
func (m *MockClient) WriteClient(arg0 context.Context, arg1 uint64) (ingestcli.WriteClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteClient", arg0, arg1)
	ret0, _ := ret[0].(ingestcli.WriteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteClient indicates an expected call of WriteClient.
func (mr *MockClientMockRecorder) WriteClient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteClient", reflect.TypeOf((*MockClient)(nil).WriteClient), arg0, arg1)
}

// MockWriteClient is a mock of WriteClient interface.
type MockWriteClient struct {
	ctrl     *gomock.Controller
	recorder *MockWriteClientMockRecorder
}

// MockWriteClientMockRecorder is the mock recorder for MockWriteClient.
type MockWriteClientMockRecorder struct {
	mock *MockWriteClient
}

// NewMockWriteClient creates a new mock instance.
func NewMockWriteClient(ctrl *gomock.Controller) *MockWriteClient {
	mock := &MockWriteClient{ctrl: ctrl}
	mock.recorder = &MockWriteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteClient) EXPECT() *MockWriteClientMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockWriteClient) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockWriteClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWriteClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteClient)(nil).Close))
}

// Recv mocks base method.
func (m *MockWriteClient) Recv() (*ingestcli.WriteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ingestcli.WriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWriteClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWriteClient)(nil).Recv))
}

// Write mocks base method.
func (m *MockWriteClient) Write(arg0 *ingestcli.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWriteClientMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteClient)(nil).Write), arg0)
}
