[
  {
    "name": "TestPlanCacheMVIndexManually",
    "cases": [
      "CREATE TABLE person (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,name VARCHAR(255) NOT NULL,address_info JSON,city VARCHAR(64) AS (JSON_UNQUOTE(JSON_EXTRACT(address_info, '$.city'))) STORED,\n    KEY (city)\n)",
      "INSERT INTO person (id, name, address_info) values (1, 'name', '{\"city\":\"beijing\"}')",
      "INSERT INTO person (id, name, address_info) values (2, 'name2', '{\"city\":\"shanghai\"}')",
      "prepare st from 'SELECT name, id FROM person WHERE city = ?'",
      "set @a='beijing'",
      "execute st using @a",
      "set @a='shanghai'",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "CREATE TABLE `sgc` (`j1` JSON DEFAULT NULL,`j2` JSON DEFAULT NULL,`a` int(11) GENERATED ALWAYS AS (JSON_EXTRACT(`j1`, \"$.a\")) STORED,`b` int(2) GENERATED ALWAYS AS (JSON_CONTAINS(j2, '1')) STORED,KEY `idx_a` (`a`),KEY `idx_b` (`b`),KEY `idx_a_b` (`a`,`b`))",
      "insert into sgc (j1, j2) values ('{\"a\":1}', '[1,2]')",
      "insert into sgc (j1, j2) values ('{\"a\":2}', '[1,2]')",
      "prepare st from 'SELECT a FROM sgc where a < ?'",
      "set @a=1",
      "execute st using @a",
      "set @a=2",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "prepare st from 'SELECT a FROM sgc where a < ? and b < ?'",
      "set @a=1, @b=1",
      "execute st using @a,@b",
      "set @a=2, @b=2",
      "execute st using @a,@b",
      "select @@last_plan_from_cache",
      "set @a=3, @b=3",
      "execute st using @a,@b",
      "select @@last_plan_from_cache",
      "DROP TABLE IF EXISTS sgc1,\n                     sgc2;",
      "CREATE TABLE `sgc1` (\n`j1` JSON,\n`j2` JSON,\n`a` INT AS (JSON_EXTRACT(j1, \"$.a\")) STORED,\n`b` VARCHAR(20) AS (JSON_KEYS(j2)) STORED,\nKEY `idx_a` (`a`),\nKEY `idx_b` (`b`),\nKEY `idx_a_b` (`a`, `b`)\n);",
      "CREATE TABLE `sgc2` (\n`j1` JSON,\n`j2` JSON,\n`a` INT AS (JSON_EXTRACT(j1, \"$.a\")) STORED,\n`b` VARCHAR(20) AS (JSON_KEYS(j2)) STORED,\nKEY `idx_a` (`a`),\nKEY `idx_b` (`b`),\nKEY `idx_a_b` (`a`, `b`)\n);",
      "INSERT INTO sgc1(j1, j2)\nVALUES ('{\"a\": 1}', '{\"1\": \"1\"}'),\n       ('{\"a\": 1}', '{\"1\": \"1\"}'),\n       ('{\"a\": 1}', '{\"1\": \"1\"}'),\n       ('{\"a\": 1}', '{\"1\": \"1\"}'),\n       ('{\"a\": 1}', '{\"1\": \"1\"}');",
      "INSERT INTO sgc2(j1, j2)\nVALUES ('{\"a\": 1}', '{\"1\": \"1\"}');",
      "prepare st from 'SELECT * from sgc1 join sgc2 on sgc1.a=sgc2.a where sgc1.a=?'",
      "set @a=1",
      "execute st using @a",
      "set @a=2",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "CREATE TABLE t1(a INT, b INT AS (a+1) VIRTUAL, c INT AS (b+1) VIRTUAL, d INT AS (c+1) VIRTUAL, KEY(b), INDEX IDX(c, d))",
      "INSERT INTO t1 (a) VALUES (0);",
      "INSERT INTO t1 (a) VALUES (1);",
      "prepare st from 'SELECT b FROM t1 WHERE b=?'",
      "set @a=1",
      "execute st using @a",
      "set @a=2",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "prepare st from 'SELECT c FROM t1 WHERE c=? AND d=?'",
      "set @a=2, @b=3",
      "execute st using @a,@b",
      "set @a=3, @b=4",
      "execute st using @a,@b",
      "select @@last_plan_from_cache",
      "DROP TABLE IF EXISTS person;",
      "CREATE TABLE person (\nid INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\nname VARCHAR(255) NOT NULL,\naddress_info JSON,\ncity_no INT AS (JSON_EXTRACT(address_info, '$.city_no')) VIRTUAL,\nKEY(city_no));",
      "INSERT INTO person (name, address_info) VALUES (\"John\", CAST('{\"city_no\": 1}' AS JSON));\n",
      "prepare st from 'SELECT name FROM person where city_no=?;'",
      "set @a=0",
      "execute st using @a",
      "set @a=1",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "CREATE TABLE tu (a INT, b INT, c INT GENERATED ALWAYS AS (a + b) VIRTUAL, primary key (a), unique key uk(c));\n",
      "INSERT INTO tu(a, b) VALUES(1, 2);\n",
      "INSERT INTO tu(a, b) VALUES(2, 3);\n",
      "prepare st from 'SELECT * FROM tu WHERE c = ?'",
      "set @a=3",
      "execute st using @a",
      "set @a=4",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "set @a=5",
      "execute st using @a",
      "select @@last_plan_from_cache",
      "drop table if exists t1",
      "CREATE TABLE t1 (j4 json ,KEY mv_idx_binary (((CAST(j4->'$[*]' AS BINARY(10) ARRAY))), (json_depth(j4)), (json_valid(j4))) USING BTREE)",
      "INSERT INTO t1 VALUES ('[\"foobar\"]');\n",
      "prepare st from 'SELECT * FROM t1 WHERE ? MEMBER OF (j4->\"$[*]\")'",
      "set @a='foobar'",
      "execute st using @a",
      "execute st using @a",
      "drop table if exists t1",
      "CREATE TABLE t1 (id INT NOT NULL KEY AUTO_INCREMENT, f1 JSON);\n",
      "INSERT INTO t1(f1) VALUES(CAST('[13.33,13.21]' AS JSON));\n",
      "prepare st from 'SELECT * FROM t1 WHERE ? MEMBER OF (f1->\"$[*]\")'",
      "set @a=13.33",
      "execute st using @a",
      "set @a=13.21",
      "execute st using @a",
      "select @@last_plan_from_cache",
      // some cases for json_contains and json_overlaps with parameters
      // queries with json_contains or overlaps with parameters that might affect index selection cannot be cached
      "drop table if exists tx",
      "create table tx (a json, b json, c json, d int, key ka ((cast(a as signed array))), key kb ((cast(b as signed array))))",
      "prepare st from 'select /*+ use_index_merge(tx, ka, kb) */ * from tx where (? member of (a)) and (json_contains(b, ?))'",
      "set @a=1, @b='[1,2]'",
      "execute st using @a, @b",
      "show warnings",
      "execute st using @a, @b",
      "select @@last_plan_from_cache",
      "prepare st from 'select /*+ use_index_merge(tx, ka, kb) */ * from tx where (? member of (a)) and (json_overlaps(b, ?))'",
      "set @a=1, @b='[1,2]'",
      "execute st using @a, @b",
      "show warnings",
      "execute st using @a, @b",
      "select @@last_plan_from_cache",
      // if json_contains/overlaps don't affect index selection, then the query can be cached
      "prepare st from 'select /*+ use_index_merge(tx, ka, kb) */ * from tx where (? member of (a)) and (d = 1 or json_overlaps(b, ?))'",
      "set @a=1, @b='[1,2]'",
      "execute st using @a, @b",
      "show warnings",
      "execute st using @a, @b",
      "select @@last_plan_from_cache",
      "prepare st from 'select /*+ use_index_merge(tx, ka) */ * from tx where (? member of (a)) and (json_overlaps(c, ?))'",
      "set @a=1, @c='[1,2]'",
      "execute st using @a, @b",
      "show warnings",
      "execute st using @a, @b",
      "select @@last_plan_from_cache",
      "prepare st from 'select /*+ use_index_merge(tx, ka) */ * from tx where (? member of (a)) and (json_contains(c, ?))'",
      "set @a=1, @c='[1,2]'",
      "execute st using @a, @b",
      "show warnings",
      "execute st using @a, @b",
      "select @@last_plan_from_cache"
    ]
  }
]
