// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by hash64_equals_generator; DO NOT EDIT IT DIRECTLY.

package logicalop

import (
	"github.com/pingcap/tidb/pkg/planner/cascades/base"
	"github.com/pingcap/tidb/pkg/util/plancodec"
)

// Hash64 implements the Hash64Equals interface.
func (op *LogicalJoin) Hash64(h base.Hasher) {
	h.HashString(plancodec.TypeJoin)
	h.HashInt64(int64(op.JoinType))
	if op.EqualConditions == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.EqualConditions))
		for _, one := range op.EqualConditions {
			one.Hash64(h)
		}
	}
	if op.NAEQConditions == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.NAEQConditions))
		for _, one := range op.NAEQConditions {
			one.Hash64(h)
		}
	}
	if op.LeftConditions == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.LeftConditions))
		for _, one := range op.LeftConditions {
			one.Hash64(h)
		}
	}
	if op.RightConditions == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.RightConditions))
		for _, one := range op.RightConditions {
			one.Hash64(h)
		}
	}
	if op.OtherConditions == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.OtherConditions))
		for _, one := range op.OtherConditions {
			one.Hash64(h)
		}
	}
}

// Equals implements the Hash64Equals interface, only receive *LogicalJoin pointer.
func (op *LogicalJoin) Equals(other any) bool {
	if other == nil {
		return false
	}
	op2, ok := other.(*LogicalJoin)
	if !ok {
		return false
	}
	if op.JoinType != op2.JoinType {
		return false
	}
	if len(op.EqualConditions) != len(op2.EqualConditions) {
		return false
	}
	for i, one := range op.EqualConditions {
		if !one.Equals(op2.EqualConditions[i]) {
			return false
		}
	}
	if len(op.NAEQConditions) != len(op2.NAEQConditions) {
		return false
	}
	for i, one := range op.NAEQConditions {
		if !one.Equals(op2.NAEQConditions[i]) {
			return false
		}
	}
	if len(op.LeftConditions) != len(op2.LeftConditions) {
		return false
	}
	for i, one := range op.LeftConditions {
		if !one.Equals(op2.LeftConditions[i]) {
			return false
		}
	}
	if len(op.RightConditions) != len(op2.RightConditions) {
		return false
	}
	for i, one := range op.RightConditions {
		if !one.Equals(op2.RightConditions[i]) {
			return false
		}
	}
	if len(op.OtherConditions) != len(op2.OtherConditions) {
		return false
	}
	for i, one := range op.OtherConditions {
		if !one.Equals(op2.OtherConditions[i]) {
			return false
		}
	}
	return true
}

// Hash64 implements the Hash64Equals interface.
func (op *LogicalAggregation) Hash64(h base.Hasher) {
	h.HashString(plancodec.TypeAgg)
	if op.AggFuncs == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.AggFuncs))
		for _, one := range op.AggFuncs {
			one.Hash64(h)
		}
	}
	if op.GroupByItems == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.GroupByItems))
		for _, one := range op.GroupByItems {
			one.Hash64(h)
		}
	}
	if op.PossibleProperties == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.PossibleProperties))
		for _, one := range op.PossibleProperties {
			h.HashInt(len(one))
			for _, one := range one {
				one.Hash64(h)
			}
		}
	}
}

// Equals implements the Hash64Equals interface, only receive *LogicalAggregation pointer.
func (op *LogicalAggregation) Equals(other any) bool {
	if other == nil {
		return false
	}
	op2, ok := other.(*LogicalAggregation)
	if !ok {
		return false
	}
	if len(op.AggFuncs) != len(op2.AggFuncs) {
		return false
	}
	for i, one := range op.AggFuncs {
		if !one.Equals(op2.AggFuncs[i]) {
			return false
		}
	}
	if len(op.GroupByItems) != len(op2.GroupByItems) {
		return false
	}
	for i, one := range op.GroupByItems {
		if !one.Equals(op2.GroupByItems[i]) {
			return false
		}
	}
	if len(op.PossibleProperties) != len(op2.PossibleProperties) {
		return false
	}
	for i, one := range op.PossibleProperties {
		if len(one) != len(op2.PossibleProperties[i]) {
			return false
		}
		for ii, one := range one {
			if !one.Equals(op2.PossibleProperties[i][ii]) {
				return false
			}
		}
	}
	return true
}

// Hash64 implements the Hash64Equals interface.
func (op *LogicalApply) Hash64(h base.Hasher) {
	h.HashString(plancodec.TypeApply)
	op.LogicalJoin.Hash64(h)
	if op.CorCols == nil {
		h.HashByte(base.NilFlag)
	} else {
		h.HashByte(base.NotNilFlag)
		h.HashInt(len(op.CorCols))
		for _, one := range op.CorCols {
			one.Hash64(h)
		}
	}
	h.HashBool(op.NoDecorrelate)
}

// Equals implements the Hash64Equals interface, only receive *LogicalApply pointer.
func (op *LogicalApply) Equals(other any) bool {
	if other == nil {
		return false
	}
	op2, ok := other.(*LogicalApply)
	if !ok {
		return false
	}
	if !op.LogicalJoin.Equals(&op2.LogicalJoin) {
		return false
	}
	if len(op.CorCols) != len(op2.CorCols) {
		return false
	}
	for i, one := range op.CorCols {
		if !one.Equals(op2.CorCols[i]) {
			return false
		}
	}
	if op.NoDecorrelate != op2.NoDecorrelate {
		return false
	}
	return true
}
