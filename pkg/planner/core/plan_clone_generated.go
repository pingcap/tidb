// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by plan_clone_generator; DO NOT EDIT IT DIRECTLY.

package core

import (
	"github.com/pingcap/tidb/pkg/planner/core/base"
	"github.com/pingcap/tidb/pkg/planner/util"
)

// CloneForPlanCache implements the base.Plan interface.
func (op *PhysicalTableScan) CloneForPlanCache(newCtx base.PlanContext) (base.Plan, bool) {
	cloned := new(PhysicalTableScan)
	*cloned = *op
	if base, err := op.physicalSchemaProducer.cloneWithSelf(newCtx, cloned); err != nil {
		return nil, false
	} else {
		cloned.physicalSchemaProducer = *base
	}
	cloned.AccessCondition = util.CloneExprs(op.AccessCondition)
	cloned.filterCondition = util.CloneExprs(op.filterCondition)
	cloned.LateMaterializationFilterCondition = util.CloneExprs(op.LateMaterializationFilterCondition)
	cloned.Ranges = util.CloneRanges(op.Ranges)
	cloned.HandleIdx = make([]int, len(op.HandleIdx))
	copy(cloned.HandleIdx, op.HandleIdx)
	cloned.HandleCols = op.HandleCols.Clone(newCtx.GetSessionVars().StmtCtx)
	cloned.ByItems = util.CloneByItems(op.ByItems)
	cloned.PlanPartInfo = op.PlanPartInfo.Clone()
	if op.SampleInfo != nil {
		return nil, false
	}
	cloned.constColsByCond = make([]bool, len(op.constColsByCond))
	copy(cloned.constColsByCond, op.constColsByCond)
	if op.runtimeFilterList != nil {
		return nil, false
	}
	return cloned, true
}

// CloneForPlanCache implements the base.Plan interface.
func (op *PhysicalSelection) CloneForPlanCache(newCtx base.PlanContext) (base.Plan, bool) {
	cloned := new(PhysicalSelection)
	*cloned = *op
	if base, err := op.basePhysicalPlan.cloneWithSelf(newCtx, cloned); err != nil {
		return nil, false
	} else {
		cloned.basePhysicalPlan = *base
	}
	cloned.Conditions = util.CloneExprs(op.Conditions)
	return cloned, true
}
