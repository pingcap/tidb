[
  {
    "Name": "TestPushDownToTiFlashWithKeepOrder",
    "Cases": [
      {
        "SQL": "explain format = 'plan_tree' select max(a) from t",
        "Plan": [
          "StreamAgg root  funcs:max(test.t.a)->Column#3",
          "└─TopN root  test.t.a:desc, offset:0, count:1",
          "  └─TableReader root  data:TopN",
          "    └─TopN batchCop[tiflash]  test.t.a:desc, offset:0, count:1",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select min(a) from t",
        "Plan": [
          "StreamAgg root  funcs:min(test.t.a)->Column#3",
          "└─Limit root  offset:0, count:1",
          "  └─TableReader root  data:Limit",
          "    └─Limit cop[tiflash]  offset:0, count:1",
          "      └─TableFullScan cop[tiflash] table:t keep order:true, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestPushDownToTiFlashWithKeepOrderInFastMode",
    "Cases": [
      {
        "SQL": "explain format = 'plan_tree' select max(a) from t",
        "Plan": [
          "StreamAgg root  funcs:max(test.t.a)->Column#3",
          "└─TopN root  test.t.a:desc, offset:0, count:1",
          "  └─TableReader root  data:TopN",
          "    └─TopN batchCop[tiflash]  test.t.a:desc, offset:0, count:1",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select min(a) from t",
        "Plan": [
          "StreamAgg root  funcs:min(test.t.a)->Column#3",
          "└─TopN root  test.t.a, offset:0, count:1",
          "  └─TableReader root  data:TopN",
          "    └─TopN batchCop[tiflash]  test.t.a, offset:0, count:1",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestPushDownProjectionForTiFlashCoprocessor",
    "Cases": [
      {
        "SQL": "desc format = 'plan_tree' select i * 2 from t",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  mul(test.t.i, 2)->Column#13",
          "    └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select DATE_FORMAT(t, '%Y-%m-%d %H') as date from t",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  date_format(test.t.t, %Y-%m-%d %H)->Column#13",
          "    └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select md5(s) from t; -- we do generate mpp plan, while the cost-cmp failed",
        "Plan": [
          "Projection root  md5(test.t.s)->Column#13",
          "└─TableReader root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select c from t where a+1=3",
        "Plan": [
          "Projection root  test.t.c",
          "└─TableReader root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Selection mpp[tiflash]  eq(plus(test.t.a, 1), 3)",
          "      └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ hash_agg()*/ count(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg root  funcs:count(Column#17)->Column#14",
          "└─TableReader root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg mpp[tiflash]  funcs:count(Column#19)->Column#17",
          "      └─Projection mpp[tiflash]  plus(test.t.id, 1)->Column#19",
          "        └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ hash_agg()*/ count(*) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg root  funcs:count(Column#16)->Column#14",
          "└─TableReader root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#16",
          "      └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ hash_agg()*/ sum(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg root  funcs:sum(Column#17)->Column#14",
          "└─TableReader root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg mpp[tiflash]  funcs:sum(Column#19)->Column#17",
          "      └─Projection mpp[tiflash]  cast(plus(test.t.id, 1), decimal(20,0) BINARY)->Column#19",
          "        └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ stream_agg()*/ count(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "StreamAgg root  funcs:count(Column#16)->Column#14",
          "└─TableReader root  data:StreamAgg",
          "  └─StreamAgg cop[tikv]  funcs:count(plus(test.t.id, 1))->Column#16",
          "    └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ stream_agg()*/ count(*) from  (select id + 1 as b from t)A",
        "Plan": [
          "StreamAgg root  funcs:count(Column#15)->Column#14",
          "└─TableReader root  data:StreamAgg",
          "  └─StreamAgg cop[tikv]  funcs:count(1)->Column#15",
          "    └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ stream_agg()*/ sum(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "StreamAgg root  funcs:sum(Column#16)->Column#14",
          "└─TableReader root  data:StreamAgg",
          "  └─StreamAgg cop[tikv]  funcs:sum(plus(test.t.id, 1))->Column#16",
          "    └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from (select id-2 as b from t) B join (select id-2 as b from t) A on A.b=B.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  inner join, equal:[eq(Column#13, Column#26)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection mpp[tiflash]  minus(test.t.id, 2)->Column#13",
          "    │     └─Selection mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "    │       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─Projection(Probe) mpp[tiflash]  minus(test.t.id, 2)->Column#26",
          "      └─Selection mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "        └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from t join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.t.id, Column#25)]",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─Projection mpp[tiflash]  minus(test.t.id, 2)->Column#25",
          "│     └─Selection mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "│       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Selection mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from t left join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t.id, Column#25)]",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─Projection mpp[tiflash]  minus(test.t.id, 2)->Column#25",
          "│     └─Selection mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "│       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from t right join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "HashJoin root  right outer join, left side:TableReader, equal:[eq(test.t.id, Column#25)]",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─Projection mpp[tiflash]  minus(test.t.id, 2)->Column#25",
          "│     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Selection mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select A.b, B.b from (select id-2 as b from t) B join (select id-2 as b from t) A on A.b=B.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  Column#26, Column#13",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(Column#13, Column#26)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Projection mpp[tiflash]  minus(test.t.id, 2)->Column#13",
          "      │     └─Selection mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "      │       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─Projection(Probe) mpp[tiflash]  minus(test.t.id, 2)->Column#26",
          "        └─Selection mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "          └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select A.id from t as A where exists (select 1 from t where t.id=A.id)",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  semi join, left side:Selection, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection mpp[tiflash]  not(isnull(test.t.id))",
          "    │     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─Selection(Probe) mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan mpp[tiflash] table:A keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select A.id from t as A where not exists  (select 1 from t where t.id=A.id)",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  anti semi join, left side:TableFullScan, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─TableFullScan(Probe) mpp[tiflash] table:A keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' SELECT FROM_UNIXTIME(name,'%Y-%m-%d')  FROM t;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  from_unixtime(cast(test.t.name, decimal(65,6) BINARY), %Y-%m-%d)->Column#13",
          "    └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestPushDownProjectionForTiFlash",
    "Cases": [
      {
        "SQL": "desc format = 'plan_tree' select /*+ hash_agg()*/ count(b) from  (select /*+ read_from_storage(tiflash[t]) */ id + 1 as b from t)A",
        "Plan": [
          "HashAgg root  funcs:count(Column#8)->Column#6",
          "└─TableReader root  data:HashAgg",
          "  └─HashAgg batchCop[tiflash]  funcs:count(Column#9)->Column#8",
          "    └─Projection batchCop[tiflash]  plus(test.t.id, 1)->Column#9",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ hash_agg()*/ count(*) from  (select /*+ read_from_storage(tiflash[t]) */ id + 1 as b from t)A",
        "Plan": [
          "HashAgg root  funcs:count(Column#7)->Column#6",
          "└─TableReader root  data:HashAgg",
          "  └─HashAgg batchCop[tiflash]  funcs:count(test.t._tidb_rowid)->Column#7",
          "    └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ hash_agg()*/ sum(b) from  (select /*+ read_from_storage(tiflash[t]) */ id + 1 as b from t)A",
        "Plan": [
          "HashAgg root  funcs:sum(Column#8)->Column#6",
          "└─TableReader root  data:HashAgg",
          "  └─HashAgg batchCop[tiflash]  funcs:sum(Column#9)->Column#8",
          "    └─Projection batchCop[tiflash]  cast(plus(test.t.id, 1), decimal(20,0) BINARY)->Column#9",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ stream_agg()*/ count(b) from  (select /*+ read_from_storage(tiflash[t]) */ id + 1 as b from t)A",
        "Plan": [
          "StreamAgg root  funcs:count(Column#8)->Column#6",
          "└─TableReader root  data:StreamAgg",
          "  └─StreamAgg batchCop[tiflash]  funcs:count(Column#10)->Column#8",
          "    └─Projection batchCop[tiflash]  plus(test.t.id, 1)->Column#10",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ stream_agg()*/ count(*) from  (select /*+ read_from_storage(tiflash[t]) */ id + 1 as b from t)A",
        "Plan": [
          "StreamAgg root  funcs:count(Column#7)->Column#6",
          "└─TableReader root  data:StreamAgg",
          "  └─StreamAgg batchCop[tiflash]  funcs:count(test.t._tidb_rowid)->Column#7",
          "    └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select /*+ stream_agg()*/ sum(b) from  (select /*+ read_from_storage(tiflash[t]) */ id + 1 as b from t)A",
        "Plan": [
          "StreamAgg root  funcs:sum(Column#8)->Column#6",
          "└─TableReader root  data:StreamAgg",
          "  └─StreamAgg batchCop[tiflash]  funcs:sum(Column#10)->Column#8",
          "    └─Projection batchCop[tiflash]  cast(plus(test.t.id, 1), decimal(20,0) BINARY)->Column#10",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from (select id-2 as b from t) B join (select id-2 as b from t) A on A.b=B.b",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(Column#5, Column#10)]",
          "├─Projection(Build) root  minus(test.t.id, 2)->Column#10",
          "│ └─TableReader root  data:Selection",
          "│   └─Selection cop[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "│     └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "└─Projection(Probe) root  minus(test.t.id, 2)->Column#5",
          "  └─TableReader root  data:Selection",
          "    └─Selection cop[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "      └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from t join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.t.id, Column#9)]",
          "├─Projection(Build) root  minus(test.t.id, 2)->Column#9",
          "│ └─TableReader root  data:Selection",
          "│   └─Selection cop[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "│     └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:Selection",
          "  └─Selection cop[tiflash]  not(isnull(test.t.id))",
          "    └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from t left join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t.id, Column#9)]",
          "├─Projection(Build) root  minus(test.t.id, 2)->Column#9",
          "│ └─TableReader root  data:Selection",
          "│   └─Selection cop[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "│     └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:TableFullScan",
          "  └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select * from t right join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "HashJoin root  right outer join, left side:TableReader, equal:[eq(test.t.id, Column#9)]",
          "├─Projection(Build) root  minus(test.t.id, 2)->Column#9",
          "│ └─TableReader root  data:TableFullScan",
          "│   └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:Selection",
          "  └─Selection cop[tiflash]  not(isnull(test.t.id))",
          "    └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select A.b, B.b from (select id-2 as b from t) B join (select id-2 as b from t) A on A.b=B.b",
        "Plan": [
          "Projection root  Column#10, Column#5",
          "└─HashJoin root  inner join, equal:[eq(Column#5, Column#10)]",
          "  ├─Projection(Build) root  minus(test.t.id, 2)->Column#10",
          "  │ └─TableReader root  data:Selection",
          "  │   └─Selection cop[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "  │     └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "  └─Projection(Probe) root  minus(test.t.id, 2)->Column#5",
          "    └─TableReader root  data:Selection",
          "      └─Selection cop[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "        └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select A.id from t as A where exists (select 1 from t where t.id=A.id)",
        "Plan": [
          "HashJoin root  semi join, left side:TableReader, equal:[eq(test.t.id, test.t.id)]",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tiflash]  not(isnull(test.t.id))",
          "│   └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:Selection",
          "  └─Selection cop[tiflash]  not(isnull(test.t.id))",
          "    └─TableFullScan cop[tiflash] table:A keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' select A.id from t as A where not exists  (select 1 from t where t.id=A.id)",
        "Plan": [
          "HashJoin root  anti semi join, left side:TableReader, equal:[eq(test.t.id, test.t.id)]",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:TableFullScan",
          "  └─TableFullScan cop[tiflash] table:A keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'plan_tree' SELECT FROM_UNIXTIME(name,'%Y-%m-%d')  FROM t;",
        "Plan": [
          "Projection root  from_unixtime(cast(test.t.name, decimal(65,6) BINARY), %Y-%m-%d)->Column#5",
          "└─TableReader root  data:TableFullScan",
          "  └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestSelPushDownTiFlash",
    "Cases": [
      {
        "SQL": "explain format = 'plan_tree' select * from t where t.a > 1 and t.b = \"flash\" or t.a + 3 * t.a = 5",
        "Plan": [
          "TableReader root  data:Selection",
          "└─Selection cop[tiflash]  or(and(gt(test.t.a, 1), eq(test.t.b, \"flash\")), eq(plus(test.t.a, mul(3, test.t.a)), 5))",
          "  └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select * from t where cast(t.a as double) + 3 = 5.1",
        "Plan": [
          "TableReader root  data:Selection",
          "└─Selection cop[tiflash]  eq(plus(cast(test.t.a, double BINARY), 3), 5.1)",
          "  └─TableFullScan cop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select * from t where b > 'a' order by convert(b, unsigned) limit 2",
        "Plan": [
          "Projection root  test.t.a, test.t.b",
          "└─TopN root  Column#4, offset:0, count:2",
          "  └─Projection root  test.t.a, test.t.b, cast(test.t.b, bigint(22) UNSIGNED BINARY)->Column#4",
          "    └─TableReader root  data:Projection",
          "      └─Projection batchCop[tiflash]  test.t.a, test.t.b",
          "        └─TopN batchCop[tiflash]  Column#3, offset:0, count:2",
          "          └─Projection batchCop[tiflash]  test.t.a, test.t.b, cast(test.t.b, bigint(22) UNSIGNED BINARY)->Column#3",
          "            └─Selection batchCop[tiflash]  gt(test.t.b, \"a\")",
          "              └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select * from t where b > 'a' order by b limit 2",
        "Plan": [
          "TopN root  test.t.b, offset:0, count:2",
          "└─TableReader root  data:TopN",
          "  └─TopN batchCop[tiflash]  test.t.b, offset:0, count:2",
          "    └─Selection batchCop[tiflash]  gt(test.t.b, \"a\")",
          "      └─TableFullScan batchCop[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestJoinNotSupportedByTiFlash",
    "Cases": [
      {
        "SQL": "explain format = 'plan_tree' select * from table_1 a, table_1 b where a.bit_col = b.bit_col",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.table_1.bit_col, test.table_1.bit_col)]",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan mpp[tiflash] table:b keep order:false",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan mpp[tiflash] table:a keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select * from table_1 a left join table_1 b on a.id = b.id and dayofmonth(a.datetime_col) > 100",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.table_1.id, test.table_1.id)], left cond:[gt(dayofmonth(test.table_1.datetime_col), 100)]",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan mpp[tiflash] table:b keep order:false",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan mpp[tiflash] table:a keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select * from table_1 a right join table_1 b on a.id = b.id and dayofmonth(b.datetime_col) > 100",
        "Plan": [
          "HashJoin root  right outer join, left side:TableReader, equal:[eq(test.table_1.id, test.table_1.id)], right cond:gt(dayofmonth(test.table_1.datetime_col), 100)",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan mpp[tiflash] table:a keep order:false",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan mpp[tiflash] table:b keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'plan_tree' select * from table_1 a join table_1 b on a.id = b.id and dayofmonth(a.datetime_col) > dayofmonth(b.datetime_col)",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.table_1.id, test.table_1.id)], other cond:gt(dayofmonth(test.table_1.datetime_col), dayofmonth(test.table_1.datetime_col))",
          "├─TableReader(Build) root  MppVersion: 3, data:ExchangeSender",
          "│ └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan mpp[tiflash] table:b keep order:false",
          "└─TableReader(Probe) root  MppVersion: 3, data:ExchangeSender",
          "  └─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan mpp[tiflash] table:a keep order:false"
        ]
      }
    ]
  }
]
