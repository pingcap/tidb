[
  {
    "name": "TestIndexJoinInnerIndexNDV",
    "cases": [
      // t2 should use idx2 instead of idx1, since idx2 has larger NDV.
      "explain format = 'brief' select /*+ inl_join(t2) */ * from t1, t2 where t1.a = t2.a and t1.b = t2.b and t1.c = t2.c"
    ]
  },
  {
    "name": "TestIndexJoinUniqueCompositeIndex",
    "cases": [
      // Row count of IndexScan should be 2.
      "explain format = 'brief' select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t1.c = t2.c",
      // Row count of IndexScan should be 2.
      "explain format = 'brief' select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t1.c <= t2.b",
      // Row count of IndexScan should be 1.
      "explain format = 'brief' select /*+ TIDB_INLJ(t2) */ * from t1 join t2 on t1.a = t2.a and t2.b = 1"
    ]
  },
  {
    "name": "TestIndexMerge",
    "cases": [
      "explain format = 'brief' select /*+ USE_INDEX_MERGE(t, a, b) */ * from t where a = 1 or b = 2",
      "explain format = 'brief' select /*+ USE_INDEX_MERGE(t, A, B) */ * from t where a = 1 or b = 2",
      "explain format = 'brief' select /*+ USE_INDEX_MERGE(t, primary) */ * from t where 1 or t.c",
      "explain format = 'brief' select /*+ USE_INDEX_MERGE(t, a, b, c) */ * from t where 1 or t.a = 1 or t.b = 2"
    ]
  },
  {
    "name": "TestIndexJoinTableRange",
    "cases": [
      "desc format = 'brief' select /*+ TIDB_INLJ(t2)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.b",
      "desc format = 'brief' select /*+ TIDB_INLJ(t2)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.a and t1.b = t2.b",
      "desc format = 'brief' select /*+ INL_JOIN(t4) */ * from t3 join t4 on t3.a = t4.a where t4.b = 1",
      "desc format = 'brief' select /*+ INL_JOIN(t4) */ * from t3 join t4 on t3.b = t4.b where t4.a = 1"
    ]
  },
  {
    "name": "TestAccessPathOnClusterIndex",
    "cases": [
      "select * from t1",
      "select * from t1 where t1.a >= 1 and t1.a < 4",
      "select * from t1 where t1.a = 1 and t1.b < \"333\"",
      "select t1.a, t1.b, t1.c from t1 where t1.c = 3.3",
      "select t1.b, t1.c from t1 where t1.c = 2.2",
      "select /*+ use_index(t1, c) */ * from t1",
      "select * from t1 use index(c) where t1.c in (2.2, 3.3)",
      "select * from t1 where t1.a = 1 order by b",
      "select * from t1 order by a, b limit 1",
      "select /*+ use_index_merge(t1 primary, c) */ * from t1 where t1.a >= 1 or t1.c = 2.2",
      "select /*+ use_index_merge(t1 primary, c) */ * from t1 where t1.a = 1 and t1.b = '111' or t1.c = 3.3"
    ]
  },
  {
    "name": "TestIndexJoinOnClusteredIndex",
    "cases": [
      "select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a",
      "select /*+ inl_merge_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a",
      "select /*+ inl_hash_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a",
      "select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.a = t2.a and t1.b = t2.b",
      "select /*+ inl_join(t1, t2) */ * from t t1 join t t2 on t1.c = t2.c",
      "select /*+ inl_merge_join(t1,t2) */ t2.a, t2.c, t2.d from t t1 left join t t2 on t1.a = t2.c;"
    ]
  },
  {
    "name": "TestHeuristicIndexSelection",
    "cases": [
      "select * from t1 where a = 3 or a = 5",
      "select f, g from t1 where f = 2 and g in (3, 4, 5)",
      "select * from t1 where c = 1 and (d = 2 or d = 3) and e in (4, 5)",
      "select f, g from t1 where f = 2 and g > 3",
      "select a, b, c from t2 where a = 1 and b = 2 and c in (1, 2, 3, 4, 5)",
      "select * from t3 where (a = 1 or a = 3) and b = 'xx'",
      "select * from t4 where (a = 1 or a = 3) and b = 'xx'",
      "select a, b from t3 where (a = 1 or a = 3) and b = 'xx'",
      "select a, b from t4 where (a = 1 or a = 3) and b = 'xx'",
      "update t1 set b = 2 where a = 4 or a = 6",
      "delete from t1 where f = 2 and g in (3, 4)",
      "insert into t3 select a, b, c from t1 where f = 2",
      "replace into t3 select a, b, c from t1 where a = 3"
    ]
  },
  {
    "name": "TestIndexMergeWithCorrelatedColumns",
    "cases": [
      "select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 = 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and substring(c3, 10)) order by c1;",
      "select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 = 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and reverse(c3)) order by c1;",
      "select * from t2 where c1 < all(select /*+ use_index_merge(t1) */ c1 from t1 where (c1 >= 10 and c1 = t2.c3 or c2 = 1 and c2 = t2.c3) and substring(c3, 10)) order by c1;",
      // Test correlated column in IndexPath.TableFilters.
      "select c_int from tt1 where c_decimal < all (select /*+ use_index_merge(tt2) */ c_decimal from tt2 where tt1.c_int = tt2.c_int and tt1.c_datetime > tt2.c_datetime and tt2.c_decimal = 9.060 or tt2.c_str <= 'interesting shtern' and tt1.c_int = tt2.c_int) order by 1;",
      // Test correlated column in TablePath.TableFilters.
      "select c_int from tt1 where c_decimal > all (select /*+ use_index_merge(tt2) */ c_decimal from tt2 where tt2.c_int = 7 and tt2.c_int < tt1.c_decimal or tt2.c_str >= 'zzzzzzzzzzzzzzzzzzz' and tt1.c_int = tt2.c_int) order by 1;"
    ]
  },
  {
    "name": "TestIndexMergeSerial",
    "cases": [
      "desc format='brief' select /*+ use_index_merge(t) */ * from t where a =1 or (b=1 and b+2>1)",
      "desc format='brief' select /*+ use_index_merge(t) */ * from t where a =1 or (b=1 and length(b)=1)",
      "desc format='brief' select /*+ use_index_merge(t) */ * from t where (a=1 and length(a)=1) or (b=1 and length(b)=1)",
      "desc format='brief' select /*+ use_index_merge(t) */ * from t where (a=1 and length(b)=1) or (b=1 and length(a)=1)"
    ]
  },
  {
    "name": "TestLimitIndexLookUpKeepOrder",
    "cases": [
      "desc format = 'brief' select * from t where a = 1 and b > 2 and b < 10 and d = 10 order by b,c limit 10",
      "desc format = 'brief' select * from t where a = 1 and b > 2 and b < 10 and d = 10 order by b desc, c desc limit 10"
    ]
  },
  {
    "name": "TestIndexJoinRangeFallback",
    "cases": [
      "set @@tidb_opt_range_max_size = 0",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb')",
      "set @@tidb_opt_range_max_size = 2900",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb')",
      "set @@tidb_opt_range_max_size = 2300",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb')",
      "set @@tidb_opt_range_max_size = 700",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.b = t2.e and t1.d = t2.g where t1.a in (1, 3) and t1.c in ('aaa', 'bbb')",
      "set @@tidb_opt_range_max_size = 0",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > 1 and t1.b < 10",
      "set @@tidb_opt_range_max_size = 300",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > 1 and t1.b < 10",
      "set @@tidb_opt_range_max_size = 0",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > t2.f and t1.b < t2.f + 10",
      "set @@tidb_opt_range_max_size = 300",
      "explain format='brief' select /*+ inl_join(t1) */ * from t1 join t2 on t1.a = t2.e where t1.b > t2.f and t1.b < t2.f + 10"
    ]
  },
  {
    "name": "TestNullConditionForPrefixIndex",
    "cases": [
      "select count(1) from t1 where c1 = '0xfff' and c2 is not null",
      "select count(1) from t1 where c1 = '0xfff' and c2 is null",
      "select count(1) from t1 where c1 >= '0xfff' and c2 is not null",
      "select count(1) from t1 where c1 >= '0xfff' and c2 is null",
      "select count(1) from t1 where c1 = '0xfff' and (c2 + 1) is not null",
      "select count(1) from t1 where c1 = '0xfff' and (c2 + 1) is null",
      "select c2 from t1 use index(idx2) where c1 = '0xfff' and c2 is not null",
      "select c2 from t1 use index(idx2) where c1 = '0xfff' and c2 is null",
      "select c2 from t1 use index(idx2) where c1 >= '0xfff' and c2 is not null",
      "select c2 from t1 use index(idx2) where c1 >= '0xfff' and c2 is null",
      "select count(1) from t2 use index(idx) where b is not null",
      "select count(1) from t2 use index(idx) where b is null",
      "select b from t2 use index(idx) where b is not null",
      "select b from t2 use index(idx) where b is null",
      "select b from t3 where a = 1 and b is not null",
      "select b from t3 where a = 1 and b is null"
    ]
  },
  {
    "name": "TestIndexMergeFromComposedCNFCondition",
    "cases": [
      "explain select /*+ use_index_merge(t1, idx2, idx) */ * from t1 where 1 member of (a) and 2 member of (b); -- 1: AND index merge from multi member mv index predicate, since member of is single partial path, it can be merged with outer index merge.",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where 1 member of (a) and c=1 and 2 member of (b); -- 2: AND index merge from multi complicated mv index",
      "explain select /*+ use_index_merge(t2, idx2, idx, idx4) */ * from t2 where 1 member of (a) and c=1 and 2 member of (b) and d=3; -- 3: AND index merge from multi complicated mv indexes and normal indexes",
      "explain select /*+ use_index_merge(t2, idx2, idx, idx3) */ * from t2 where json_contains(a, '[1, 2, 3]') and c=1 and 2 member of (b) and d=3; -- 4: AND index merge from multi complicated mv indexes (json_contains (intersection))and normal indexes",
      "explain select /*+ use_index_merge(t2, idx2, idx, idx3) */ * from t2 where json_overlaps(a, '[1, 2, 3]') and c=1 and 2 member of (b) and d=3; -- 5: AND index merge from multi complicated mv indexes (json_overlap (intersection))and normal indexes",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where 1 member of (a) and c=1 and c=2; -- 6: AND index merge from multi complicated mv indexes (empty range)"
    ]
  },
  {
    "name": "TestIndexMergeFromComposedDNFCondition",
    "cases": [
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and c=1) or (2 member of (b) and c=1); -- 1: OR index merge from multi complicated mv index (memberof)",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and c=1) or (2 member of (b) and c=1); -- 2: OR index merge from multi complicated mv index (memberof)",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and c=1 and d=2) or (2 member of (b) and c=3 and d=2); -- 3: OR index merge from multi complicated mv index (memberof)，while each DNF item contains redundant condition, which should be remained as table filters",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where ( json_contains(a, '[1, 2, 3]') and c=1 and d=2) or (2 member of (b) and c=3 and d=2); -- 4: OR index merge from multi complicated mv index (memberof)，make full use of DNF item's condition even if the predicate is intersection case (json_contains)",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where ( json_overlaps(a, '[1, 2, 3]') and c=1 and d=2) or (2 member of (b) and c=3 and d=2); -- 5: OR index merge from multi complicated mv index (memberof)，make full use of DNF item's condition even if the predicate is intersection case (json_contains)",
      "explain select /*+ use_index_merge(t2, idx2, idx, idx4) */ * from t2 where ( json_contains(a, '[1, 2, 3]') and d=2) or (2 member of (b) and c=3 and d=2); -- 6: OR index merge from multi complicated mv index (memberof)，make full use of other DNF items even if one of the DNF items fails",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and 1 member of (b) and c=3) or (3 member of (b) and c=4); -- 7: OR index merge from multi complicated mv index (memberof)，each DNF item can be more complicated like a another embedded CNF member-of composition.",
      "explain select /*+ use_index_merge(t2, idx2, idx) */ * from t2 where (1 member of (a) and 1 member of (b) and c=3) or (3 member of (b) and c=4) or e=1; -- 8: OR index merge from multi complicated mv index (memberof), each DNF item should be strict or lax used as index partial path.",
      "explain select /*+ use_index_merge(t2, idx2, idx, idx4) */ * from t2 where (1 member of (a) and 1 member of (b) and c=3) or (3 member of (b) and c=4) or d=1; -- 9: OR index merge from multi complicated mv index (memberof), each DNF item should be strict or lax used as index partial path, specify the index in index merge hint"
    ]
  }
]
