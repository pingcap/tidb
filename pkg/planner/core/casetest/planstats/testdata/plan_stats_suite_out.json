[
  {
    "Name": "TestCollectDependingVirtualCols",
    "Cases": [
      {
        "TableName": "t",
        "InputColNames": [
          "a",
          "b"
        ],
        "OutputColNames": []
      },
      {
        "TableName": "t",
        "InputColNames": [
          "c"
        ],
        "OutputColNames": [
          "_v$_ic_char_0",
          "_v$_ic_signed_0",
          "_v$_ic_unsigned_0"
        ]
      },
      {
        "TableName": "t",
        "InputColNames": [
          "b",
          "c"
        ],
        "OutputColNames": [
          "_v$_ic_char_0",
          "_v$_ic_signed_0",
          "_v$_ic_unsigned_0"
        ]
      },
      {
        "TableName": "t1",
        "InputColNames": [
          "a"
        ],
        "OutputColNames": [
          "vab"
        ]
      },
      {
        "TableName": "t1",
        "InputColNames": [
          "b"
        ],
        "OutputColNames": [
          "_v$_ib_0",
          "vab",
          "vvc"
        ]
      },
      {
        "TableName": "t1",
        "InputColNames": [
          "c"
        ],
        "OutputColNames": [
          "_v$_icvab_0",
          "vc"
        ]
      },
      {
        "TableName": "t1",
        "InputColNames": [
          "vab"
        ],
        "OutputColNames": [
          "_v$_icvab_0",
          "_v$_ivvcvab_0",
          "vvabvvc"
        ]
      },
      {
        "TableName": "t1",
        "InputColNames": [
          "vab",
          "c"
        ],
        "OutputColNames": [
          "_v$_icvab_0",
          "_v$_ivvcvab_0",
          "vc",
          "vvabvvc"
        ]
      },
      {
        "TableName": "t1",
        "InputColNames": [
          "vc",
          "c",
          "vvc"
        ],
        "OutputColNames": [
          "_v$_icvab_0",
          "_v$_ivvcvab_0",
          "vvabvvc"
        ]
      }
    ]
  },
  {
    "Name": "TestPartialStatsInExplain",
    "Cases": [
      {
        "Query": "explain format = 'plan_tree' select * from tp where b = 10",
        "Result": [
          "TableReader root partition:all data:Selection",
          "└─Selection cop[tikv]  eq(test.tp.b, 10)",
          "  └─TableFullScan cop[tikv] table:tp keep order:false, stats:partial[ic:unInitialized, b:unInitialized]"
        ]
      },
      {
        "Query": "explain format = 'plan_tree' select * from tp where b = 10",
        "Result": [
          "TableReader root partition:all data:Selection",
          "└─Selection cop[tikv]  eq(test.tp.b, 10)",
          "  └─TableFullScan cop[tikv] table:tp keep order:false"
        ]
      },
      {
        "Query": "explain format = 'plan_tree' select * from t join tp where tp.a = 10 and t.b = tp.c",
        "Result": [
          "Projection root  test.t.a, test.t.b, test.t.c, test.tp.a, test.tp.b, test.tp.c",
          "└─HashJoin root  inner join, equal:[eq(test.tp.c, test.t.b)]",
          "  ├─TableReader(Build) root partition:p1 data:Selection",
          "  │ └─Selection cop[tikv]  eq(test.tp.a, 10), not(isnull(test.tp.c))",
          "  │   └─TableFullScan cop[tikv] table:tp keep order:false",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t.b))",
          "      └─TableFullScan cop[tikv] table:t keep order:false"
        ]
      },
      {
        "Query": "explain format = 'plan_tree' select * from t join tp where tp.a = 10 and t.b = tp.c",
        "Result": [
          "Projection root  test.t.a, test.t.b, test.t.c, test.tp.a, test.tp.b, test.tp.c",
          "└─HashJoin root  inner join, equal:[eq(test.tp.c, test.t.b)]",
          "  ├─TableReader(Build) root partition:p1 data:Selection",
          "  │ └─Selection cop[tikv]  eq(test.tp.a, 10), not(isnull(test.tp.c))",
          "  │   └─TableFullScan cop[tikv] table:tp keep order:false",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t.b))",
          "      └─TableFullScan cop[tikv] table:t keep order:false"
        ]
      },
      {
        "Query": "explain format = 'plan_tree' select * from t join tp partition (p0) join t2 where t.a < 10 and t.b = tp.c and t2.a > 10 and t2.a = tp.c",
        "Result": [
          "HashJoin root  inner join, equal:[eq(test.tp.c, test.t2.a)]",
          "├─TableReader(Build) root  data:TableRangeScan",
          "│ └─TableRangeScan cop[tikv] table:t2 range:(10,+inf], keep order:false, stats:partial[a:allEvicted]",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t.b, test.tp.c)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  gt(test.t.b, 10), not(isnull(test.t.b))",
          "  │   └─TableRangeScan cop[tikv] table:t range:[-inf,10), keep order:false",
          "  └─TableReader(Probe) root partition:p0 data:Selection",
          "    └─Selection cop[tikv]  gt(test.tp.c, 10), not(isnull(test.tp.c))",
          "      └─TableFullScan cop[tikv] table:tp keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestPlanStatsLoadForCTE",
    "Cases": [
      {
        "Query": "explain format= brief with cte(x, y) as (select d + 1, b from t where c > 1) select * from cte where x < 3",
        "Result": [
          "Projection 1.60 root  plus(test.t.d, 1)->Column#12, test.t.b",
          "└─TableReader 1.60 root  data:Selection",
          "  └─Selection 1.60 cop[tikv]  gt(test.t.c, 1), lt(plus(test.t.d, 1), 3)",
          "    └─TableFullScan 3.00 cop[tikv] table:t keep order:false, stats:partial[idx:allEvicted]"
        ]
      }
    ]
  }
]
