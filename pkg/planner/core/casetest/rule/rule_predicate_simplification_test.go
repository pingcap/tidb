// Copyright 2025 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rule

import (
	"testing"

	"github.com/pingcap/tidb/pkg/testkit"
	"github.com/pingcap/tidb/pkg/testkit/testdata"
)

func TestPredicateSimplification(tt *testing.T) {
	testkit.RunTestUnderCascades(tt, func(t *testing.T, tk *testkit.TestKit, cascades, caller string) {
		tk.MustExec("use test")
		tk.MustExec(`CREATE TABLE t1 (
    id VARCHAR(64) PRIMARY KEY
);`)
		tk.MustExec(`CREATE TABLE t2 (
    c1 VARCHAR(64) NOT NULL,
    c2 VARCHAR(64) NOT NULL,
    c3 VARCHAR(64) NOT NULL,
    PRIMARY KEY (c1, c2, c3),
    KEY c3 (c3)
);`)
		tk.MustExec(`CREATE TABLE t3 (
    c1 VARCHAR(64) NOT NULL,
    c2 VARCHAR(64) NOT NULL,
    c3 VARCHAR(64) NOT NULL,
    PRIMARY KEY (c1, c2, c3),
    KEY c3 (c3)
);`)
		tk.MustExec(`CREATE TABLE t4 (
    c1 VARCHAR(64) NOT NULL,
    c2 VARCHAR(64) NOT NULL,
    c3 VARCHAR(64) NOT NULL,
    state VARCHAR(64) NOT NULL DEFAULT 'ACTIVE',
    PRIMARY KEY (c1, c2, c3),
    KEY c3 (c3)
);`)
		tk.MustExec(`CREATE TABLE t5 (
    c1 VARCHAR(64) NOT NULL,
    c2 VARCHAR(64) NOT NULL,
    PRIMARY KEY (c1, c2)
);`)
		tk.MustExec(`CREATE TABLE t7c899916 (
  col_37 text COLLATE gbk_bin DEFAULT NULL,
  col_38 datetime DEFAULT CURRENT_TIMESTAMP,
  col_39 tinyint unsigned NOT NULL,
  col_40 json NOT NULL,
  col_41 char(140) COLLATE gbk_bin NOT NULL,
  col_42 json DEFAULT NULL,
  col_43 tinytext COLLATE gbk_bin DEFAULT NULL,
  col_44 json DEFAULT NULL,
  col_45 date DEFAULT '2010-01-29',
  col_46 char(221) COLLATE gbk_bin DEFAULT NULL,
  col_47 timestamp,
  UNIQUE KEY idx_15 (col_41,col_39,col_38)
) ENGINE=InnoDB DEFAULT CHARSET=gbk COLLATE=gbk_bin`)
		// since the plan may differ under different planner mode, recommend to record explain result to json accordingly.
		var input []string
		var output []struct {
			SQL  string
			Plan []string
		}
		suite := GetPredicateSimplificationSuiteData()
		suite.LoadTestCases(t, &input, &output, cascades, caller)
		for i, tt := range input {
			testdata.OnRecord(func() {
				output[i].SQL = tt
				output[i].Plan = testdata.ConvertRowsToStrings(tk.MustQuery("explain format=brief " + tt).Rows())
			})
			res := tk.MustQuery("explain format=brief " + tt)
			res.Check(testkit.Rows(output[i].Plan...))
		}
	})
}

func TestABC(t *testing.T) {
	store := testkit.CreateMockStore(t)
	tk := testkit.NewTestKit(t, store)
	tk.MustExec(`use test`)
	tk.MustExec(`CREATE TABLE tbf00de8e (
  col_80 int unsigned NOT NULL,
  col_81 bigint unsigned DEFAULT NULL,
  UNIQUE KEY idx_12 (col_80,col_81),
  UNIQUE KEY idx_13 (col_80,col_81) /*T![global_index] GLOBAL */,
  PRIMARY KEY (col_80) /*T![clustered_index] NONCLUSTERED */,
  UNIQUE KEY idx_15 (col_80,col_81) /*T![global_index] GLOBAL */
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
PARTITION BY RANGE COLUMNS(col_80)
(PARTITION p0 VALUES LESS THAN (867165407),
 PARTITION p1 VALUES LESS THAN (1171973314),
 PARTITION p2 VALUES LESS THAN (2811755876),
 PARTITION p3 VALUES LESS THAN (4129122716));`)
	tk.MustExec(`INSERT INTO tbf00de8e VALUES(679212038,6445021923951699863),(810425383,6445021923951699863),(1110691297,6445021923951699863),(372134441,6445021923951699863),(670049863,6445021923951699863),(3133726959,6445021923951699863),(0,6445021923951699863),(3387207192,6445021923951699863),(1259097909,6445021923951699863),(810747341,6445021923951699863),(3533934437,6445021923951699863),(1029853088,6445021923951699863),(3616298395,6445021923951699863),(239038413,6445021923951699863),(1748112779,6445021923951699863),(1324419099,6445021923951699863),(3473353540,6445021923951699863),(1521411774,6445021923951699863),(3018285758,6445021923951699863),(1062240231,6445021923951699863),(1484110784,6445021923951699863),(3680488192,6445021923951699863),(3495178329,6445021923951699863),(3476543097,6445021923951699863),(2281887714,6445021923951699863),(1566835506,6445021923951699863),(2868431809,5742901675908862252),(2147483647,14776762484714502935),(3179634105,16601662379927555975),(2745146565,1156119323461504484),(3043840202,17478369331464073134),(1895324963,16623903133344322069),(3372589437,16601662379927555975),(3518894223,16601662379927555975),(2848081377,14216859169829724442),(2416377673,16453911257100608138),(1298756342,17075809735259257927),(221460978,16601662379927555975),(1199897218,2775813964535420952),(1583616923,6348357790508290331),(803884655,5823461075286252297),(4081468470,16601662379927555975),(1414871973,1777782588865011230),(3390300673,16601662379927555975),(3398746027,16601662379927555975),(2997244581,1707632385139480144),(4013261832,17520443308734602662),(2879450729,17385015395997008739),(1180936360,3540074670486839380),(1971544155,17371136328954952942),(2986928284,619356861233138370),(151818626,17445272451167933654),(1747742989,1687818347510349678),(2943303216,14400023870739808278),(1766363351,9223372036854775807),(826554997,6065846712501083498),(2862286029,4049011836462583110),(3575753516,3511788136440206966),(24877718,1),(183376883,18446744073709551615),(2512710139,1907227565003255257),(2561598684,8850007874245895143),(326427034,2853996819117457778),(891023855,17915844812862660440),(3159879918,9005849871608066214),(3522181669,6921693356733857277),(2411407245,17494988203747655906),(2508928596,11192591376244409971),(398234311,51949399344929109),(2879477853,16463764889554376626),(3936965985,9223372036854775808),(1393277816,5730593846211648066),(3760470089,11175815227592018424),(1585973540,16251761591317026486),(944629666,5377268711687243982),(15058492,6927194603720608881),(1209983937,5423569429246035251),(1915717058,8915124137580424053),(1219075856,3811722392390450943),(1897249442,6824915617820554302),(2147483648,785640600913265638),(135032837,8287941931158004437),(1051562990,5000964530156236516),(3021781184,1105554997327119367),(3333471859,1),(1444798687,NULL),(1344437232,6747843950907949733),(1823896708,14325650774494089710),(1168243581,11582559278094567012),(1305758775,7267980682767564378),(1835602524,186933859471073538),(109399132,1389862868825538772),(1276399329,9223372036854775807),(988723751,NULL),(3621024117,6046174613751636508),(2601924006,2798987397105244775),(1765756389,1577489364627148771),(1226827830,14572932031214144984),(2244727206,7185760643953278815),(3452426235,18284181340436537293),(456748573,17883080102619278102),(3072373981,16168332291891878294),(1896119330,2251462268622250880),(1259120918,16109412365679126683);`)
	tk.MustQuery(`Explain SELECT 1 
FROM (
    SELECT 
        tbf00de8e.col_81 AS r0
    FROM 
        tbf00de8e 
    WHERE 
        NOT (tbf00de8e.col_81 BETWEEN 7267980682767564378 AND 5038505193714040161) 
    GROUP BY 
        tbf00de8e.col_80, tbf00de8e.col_81 
    HAVING 
        tbf00de8e.col_81 BETWEEN 9223372036854775807 AND 9741715441330254374 
        OR tbf00de8e.col_80 IN (183376883, 3063086591, 40890748, 739284182) 
    ORDER BY 
        r0
) AS cte_465 
WHERE 
    cte_465.r0 IN (1647235739922481689, 362181420416712512, 2624046360766375400, -1);`).Check(testkit.Rows())
}
