[
  {
    "Name": "TestPredicateSimplification",
    "Cases": [
      {
        "SQL": "SELECT i.id, ip_products.products FROM t1 AS i LEFT JOIN t4 ON i.id = t4.c3 LEFT JOIN (SELECT t4.c3, GROUP_CONCAT(DISTINCT t2.c3 ORDER BY t2.c3 ASC) AS products FROM t4 JOIN t3 ON t4.c1 = t3.c1 AND t4.c2 = t3.c2 LEFT JOIN t2 ON t4.c1 = t2.c1 AND t4.c2 = t2.c2 WHERE t3.c3 = 'production' AND t4.state = 'ACTIVE' GROUP BY t4.c3, t4.c1, t4.c2) AS ip_products ON t4.c3 = ip_products.c3 LEFT JOIN t5 ON i.id = t5.c1 AND t5.c2 = 'production' WHERE t4.state = 'ACTIVE' AND t5.c1 IS NULL GROUP BY i.id, ip_products.products HAVING FIND_IN_SET('info', products) ORDER BY i.id ASC LIMIT 500 OFFSET 5500;",
        "Plan": [
          "TopN root  test.t1.id, offset:5500, count:500",
          "└─HashAgg root  group by:Column#16, test.t1.id, funcs:firstrow(test.t1.id)->test.t1.id, funcs:firstrow(Column#16)->Column#16",
          "  └─Selection root  isnull(test.t5.c1)",
          "    └─Projection root  test.t1.id, Column#16, test.t5.c1",
          "      └─HashJoin root  inner join, equal:[eq(test.t4.c3, test.t4.c3)]",
          "        ├─Selection(Build) root  find_in_set(\"info\", Column#16)",
          "        │ └─HashAgg root  group by:test.t4.c1, test.t4.c2, test.t4.c3, funcs:group_concat(distinct test.t2.c3 order by test.t2.c3 separator \",\")->Column#16, funcs:firstrow(test.t4.c3)->test.t4.c3",
          "        │   └─IndexJoin root  left outer join, inner:TableReader, left side:IndexJoin, outer key:test.t4.c1, test.t4.c2, inner key:test.t2.c1, test.t2.c2, equal cond:eq(test.t4.c1, test.t2.c1), eq(test.t4.c2, test.t2.c2)",
          "        │     ├─IndexJoin(Build) root  inner join, inner:TableReader, outer key:test.t3.c1, test.t3.c2, inner key:test.t4.c1, test.t4.c2, equal cond:eq(test.t3.c1, test.t4.c1), eq(test.t3.c2, test.t4.c2)",
          "        │     │ ├─IndexReader(Build) root  index:IndexRangeScan",
          "        │     │ │ └─IndexRangeScan cop[tikv] table:t3, index:c3(c3) range:[\"production\",\"production\"], keep order:false, stats:pseudo",
          "        │     │ └─TableReader(Probe) root  data:Selection",
          "        │     │   └─Selection cop[tikv]  eq(test.t4.state, \"ACTIVE\")",
          "        │     │     └─TableRangeScan cop[tikv] table:t4 range: decided by [eq(test.t4.c1, test.t3.c1) eq(test.t4.c2, test.t3.c2)], keep order:false, stats:pseudo",
          "        │     └─TableReader(Probe) root  data:TableRangeScan",
          "        │       └─TableRangeScan cop[tikv] table:t2 range: decided by [eq(test.t2.c1, test.t4.c1) eq(test.t2.c2, test.t4.c2)], keep order:false, stats:pseudo",
          "        └─IndexJoin(Probe) root  left outer join, inner:TableReader, left side:IndexJoin, outer key:test.t1.id, inner key:test.t5.c1, equal cond:eq(test.t1.id, test.t5.c1)",
          "          ├─IndexJoin(Build) root  inner join, inner:TableReader, outer key:test.t4.c3, inner key:test.t1.id, equal cond:eq(test.t4.c3, test.t1.id)",
          "          │ ├─TableReader(Build) root  data:Selection",
          "          │ │ └─Selection cop[tikv]  eq(test.t4.state, \"ACTIVE\")",
          "          │ │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "          │ └─TableReader(Probe) root  data:TableRangeScan",
          "          │   └─TableRangeScan cop[tikv] table:i range: decided by [eq(test.t1.id, test.t4.c3)], keep order:false, stats:pseudo",
          "          └─TableReader(Probe) root  data:Selection",
          "            └─Selection cop[tikv]  eq(test.t5.c2, \"production\")",
          "              └─TableRangeScan cop[tikv] table:t5 range: decided by [eq(test.t5.c1, test.t1.id) eq(test.t5.c2, production)], keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "with cte_81 ( col_108 ) AS ( select    space( 2 ) as r0 from t7c899916 where t7c899916.col_44 = '[17764220206423580415]' and t7c899916.col_44 != '[5725396597060626308,5860284933591136807,11766074999769332834,11879855656810383243]' order by r0 limit 385374223 ) ( select 1,col_108 from cte_81 where cte_81.col_108 = null or cte_81.col_108 in ( '^w#txObGH*=J*Jn5kq' ,'+PzzjiWQ7y&PQV' ,'=%4C7Oain' )   )",
        "Plan": [
          "Projection root  1->Column#28, Column#27",
          "└─Selection root  in(Column#27, \"^w#txObGH*=J*Jn5kq\", \"+PzzjiWQ7y&PQV\", \"=%4C7Oain\")",
          "  └─Projection root    ->Column#27",
          "    └─Limit root  offset:0, count:385374223",
          "      └─TableReader root  data:Limit",
          "        └─Limit cop[tikv]  offset:0, count:385374223",
          "          └─Selection cop[tikv]  eq(test.t7c899916.col_44, cast(\"[17764220206423580415]\", json BINARY)), ne(test.t7c899916.col_44, cast(\"[5725396597060626308,5860284933591136807,11766074999769332834,11...(len:83)\", json BINARY))",
          "            └─TableFullScan cop[tikv] table:t7c899916 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from (select col_47 from t7c899916 limit 1) t where col_47 in ('2034-05-27', '2001-06-27') and col_47 in (null, '1996-06-27');",
        "Plan": [
          "TableDual root  rows:0"
        ]
      },
      {
        "SQL": "with cte_263 ( col_1350,col_1351,col_1352 ) AS ( select /*+ read_from_storage(tiflash[ tad03b424,tlfdfece63 ]) */ /*+ use_index_merge( tlfdfece63,tad03b424 ) */ /*+ merge_join( tlfdfece63 , tad03b424 */ rpad( tad03b424.col_44 , 6 , tad03b424.col_48 ) as r0 , insert( tlfdfece63.col_44 , 0 , 10 , tlfdfece63.col_43 ) as r1 , tad03b424.col_41 as r2 from tlfdfece63 , tad03b424 where not( tlfdfece63.col_42 = '[\"Sl9DRlDnSdIOxbfequ02VeikDWiphuDO6suBf0F7esJeCWrRJWQbd3BK3vT58Coz\",\"MmC5saHdTUqosY50IrxprAR52oD08XgGhqJCcYeoaDJKrYxBdbi0QuVDDArCghyL\"]' ) order by r0,r1,r2 limit 348170821 ) ( select 1,col_1350,col_1351,col_1352 from cte_263 where not( cte_263.col_1352 != '2020-06-30' ) and cte_263.col_1352 in ( null ,'1983-08-09' ) order by 1,2,3,4  );",
        "Plan": [
          "Projection root  1->Column#48, Column#46, Column#47, test.tad03b424.col_41",
          "└─TableDual root  rows:0"
        ]
      }
    ]
  }
]
