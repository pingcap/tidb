[
  {
    "Name": "TestJoinOrderHint4DynamicPartitionTable",
    "Cases": [
      {
        "SQL": "select /*+ straight_join() */ * from t, t1, t2 where t.a = t1.a and t1.b=t2.b;",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "├─TableReader(Build) root partition:all data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "│   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t1.a)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root partition:all data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t.a))",
          "      └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ straight_join() */ * from t, t1, t2, t3 where t.a = t1.a and t1.b=t2.b and t2.b=t3.b;",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "├─TableReader(Build) root partition:all data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "│   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t1.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "    │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root partition:all data:Selection",
          "      └─Selection cop[tikv]  not(isnull(test.t.a))",
          "        └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t1) */ * from t, t1, t2, t3 where t.a = t1.a and t1.b=t2.b and t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a, test.t.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "      │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t.a))",
          "          └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t1, t3) */ * from t, t1, t2, t3 where t.a = t1.a and t1.b=t2.b and t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  inner join, equal:[eq(test.t1.b, test.t2.b) eq(test.t3.b, test.t2.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a, test.t.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t.a))",
          "    │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  CARTESIAN inner join",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "      │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "          └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t1, t2) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t.b, test.t2.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "      │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "        │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "        └─TableReader(Probe) root partition:all data:Selection",
          "          └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "            └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "    │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "      │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "        │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "        └─TableReader(Probe) root partition:all data:Selection",
          "          └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "            └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t4, t3, t2, t, t1) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t.b, test.t2.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "      │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "        │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "        └─TableReader(Probe) root partition:all data:Selection",
          "          └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "            └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t4, t3, t2, t) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t.b, test.t2.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "      │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "        │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "        └─TableReader(Probe) root partition:all data:Selection",
          "          └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "            └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t2, t) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "    │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "      │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t2.b)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "        │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "        └─TableReader(Probe) root partition:all data:Selection",
          "          └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "            └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3) */ * from t2 left join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "├─TableReader(Build) root partition:all data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  left outer join, left side:TableReader, equal:[eq(test.t1.a, test.t3.a)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.a))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root partition:all data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t1, t3) */ * from t2 left join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "├─TableReader(Build) root partition:all data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  left outer join, left side:TableReader, equal:[eq(test.t1.a, test.t3.a)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.a))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root partition:all data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid",
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "├─TableReader(Build) root partition:all data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "  │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "    │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root partition:all data:Selection",
          "      └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "        └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid",
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "├─TableReader(Build) root partition:all data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─Projection(Probe) root  test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "  └─HashJoin root  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "    │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "      │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "          └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "└─HashJoin root  left outer join, left side:HashJoin, equal:[eq(test.t2.b, test.t1.b)]",
          "  ├─Projection(Build) root  test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "  │ └─HashJoin root  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "  │   ├─TableReader(Build) root partition:all data:Selection",
          "  │   │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "  │   │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  │   └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "  │     ├─TableReader(Build) root partition:all data:Selection",
          "  │     │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "  │     │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  │     └─TableReader(Probe) root partition:all data:Selection",
          "  │       └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "  │         └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t6.b))",
          "    │   └─TableFullScan cop[tikv] table:t6 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │   └─TableFullScan cop[tikv] table:t5 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t2.a))",
          "          └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) leading(t5, t6) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "└─HashJoin root  left outer join, left side:HashJoin, equal:[eq(test.t2.b, test.t1.b)]",
          "  ├─HashJoin(Build) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "  │ ├─TableReader(Build) root partition:all data:Selection",
          "  │ │ └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "  │ │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  │ └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "  │   ├─TableReader(Build) root partition:all data:Selection",
          "  │   │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "  │   │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  │   └─TableReader(Probe) root partition:all data:Selection",
          "  │     └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "  │       └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t6.b))",
          "    │   └─TableFullScan cop[tikv] table:t6 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │   └─TableFullScan cop[tikv] table:t5 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t2.a))",
          "          └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 We can only use one leading hint at most, when multiple leading hints are used, all leading hints will be invalid"
        ]
      },
      {
        "SQL": "select /*+ leading(t5, t6, t3, t4) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "└─HashJoin root  left outer join, left side:HashJoin, equal:[eq(test.t2.b, test.t1.b)]",
          "  ├─HashJoin(Build) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "  │ ├─TableReader(Build) root partition:all data:Selection",
          "  │ │ └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "  │ │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  │ └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "  │   ├─TableReader(Build) root partition:all data:Selection",
          "  │   │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "  │   │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  │   └─TableReader(Probe) root partition:all data:Selection",
          "  │     └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "  │       └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t6.b))",
          "    │   └─TableFullScan cop[tikv] table:t6 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │   └─TableFullScan cop[tikv] table:t5 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t2.a))",
          "          └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid",
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t1, t2) */ * from t4 join t on t4.a=t.a right join t1 on t.a = t1.a join t2 on t1.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "HashJoin root  right outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "├─HashJoin(Build) root  inner join, equal:[eq(test.t4.a, test.t.a)]",
          "│ ├─TableReader(Build) root partition:all data:Selection",
          "│ │ └─Selection cop[tikv]  not(isnull(test.t.a))",
          "│ │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "│ └─TableReader(Probe) root partition:all data:Selection",
          "│   └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "│     └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root partition:all data:Selection",
          "      └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "        └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t4 join t on t4.a=t.a right join t1 on t.a = t1.a join t2 on t1.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "Projection root  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "└─HashJoin root  right outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "  ├─HashJoin(Build) root  inner join, equal:[eq(test.t4.a, test.t.a)]",
          "  │ ├─TableReader(Build) root partition:all data:Selection",
          "  │ │ └─Selection cop[tikv]  not(isnull(test.t.a))",
          "  │ │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "  │ └─TableReader(Probe) root partition:all data:Selection",
          "  │   └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "  │     └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "    │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "      │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "          └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t1, t3) */ * from t4 join t on t4.a=t.a right join t1 on t.a = t1.a join t2 on t1.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "HashJoin root  right outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "├─HashJoin(Build) root  inner join, equal:[eq(test.t4.a, test.t.a)]",
          "│ ├─TableReader(Build) root partition:all data:Selection",
          "│ │ └─Selection cop[tikv]  not(isnull(test.t.a))",
          "│ │   └─TableFullScan cop[tikv] table:t keep order:false, stats:pseudo",
          "│ └─TableReader(Probe) root partition:all data:Selection",
          "│   └─Selection cop[tikv]  not(isnull(test.t4.a))",
          "│     └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root partition:all data:Selection",
          "      └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "        └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3) */ * from t2 right join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "HashJoin root  right outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "├─TableReader(Build) root partition:all data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "│   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  left outer join, left side:TableReader, equal:[eq(test.t1.a, test.t3.a)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.a))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root partition:all data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t1, t3) */ * from t2 right join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "HashJoin root  left outer join, left side:HashJoin, equal:[eq(test.t1.a, test.t3.a)]",
          "├─TableReader(Build) root partition:all data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t3.a))",
          "│   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  right outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root partition:all data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "└─HashJoin root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "  │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  right outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "      │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "          └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "└─HashJoin root  right outer join, left side:TableReader, equal:[eq(test.t2.b, test.t1.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "    │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "      │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root partition:all data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "          └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "└─HashJoin root  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t6.b))",
          "  │   └─TableFullScan cop[tikv] table:t6 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.a, test.t5.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "    │   └─TableFullScan cop[tikv] table:t5 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "      │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "        │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "          ├─TableReader(Build) root partition:all data:Selection",
          "          │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "          │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "          └─TableReader(Probe) root partition:all data:Selection",
          "            └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "              └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) leading(t5, t6) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "└─HashJoin root  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t6.b))",
          "  │   └─TableFullScan cop[tikv] table:t6 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "    │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.a, test.t5.a)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │   └─TableFullScan cop[tikv] table:t5 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "        │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b, test.t1.b)]",
          "          ├─TableReader(Build) root partition:all data:Selection",
          "          │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "          │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "          └─TableReader(Probe) root partition:all data:Selection",
          "            └─Selection cop[tikv]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "              └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 We can only use one leading hint at most, when multiple leading hints are used, all leading hints will be invalid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t4, t5, t6) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "Projection root  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "└─HashJoin root  inner join, equal:[eq(test.t3.a, test.t1.a) eq(test.t2.b, test.t1.b)]",
          "  ├─TableReader(Build) root partition:all data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "    ├─TableReader(Build) root partition:all data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "    │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "      ├─TableReader(Build) root partition:all data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t6.b))",
          "      │   └─TableFullScan cop[tikv] table:t6 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) root  CARTESIAN inner join",
          "        ├─TableReader(Build) root partition:all data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "        │   └─TableFullScan cop[tikv] table:t5 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) root  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "          ├─TableReader(Build) root partition:all data:Selection",
          "          │ └─Selection cop[tikv]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "          │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "          └─TableReader(Probe) root partition:all data:Selection",
          "            └─Selection cop[tikv]  not(isnull(test.t4.b))",
          "              └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      }
    ]
  },
  {
    "Name": "TestOptEnableHashJoin",
    "Cases": [
      {
        "SQL": "select * from t1, t2",
        "Plan": [
          "MergeJoin root  inner join",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:TableFullScan",
          "  └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1, t2 where t1.a=t2.a",
        "Plan": [
          "IndexHashJoin root  inner join, inner:IndexLookUp, outer key:test.t1.a, inner key:test.t2.a, equal cond:eq(test.t1.a, test.t2.a)",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t1.a))",
          "│   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─IndexLookUp(Probe) root  ",
          "  ├─Selection(Build) cop[tikv]  not(isnull(test.t2.a))",
          "  │ └─IndexRangeScan cop[tikv] table:t2, index:a(a) range: decided by [eq(test.t2.a, test.t1.a)], keep order:false, stats:pseudo",
          "  └─TableRowIDScan(Probe) cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1, t2 where t1.b=t2.b",
        "Plan": [
          "MergeJoin root  inner join, left key:test.t1.b, right key:test.t2.b",
          "├─Sort(Build) root  test.t2.b",
          "│ └─TableReader root  data:Selection",
          "│   └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "│     └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─Sort(Probe) root  test.t1.b",
          "  └─TableReader root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1, t2 where t1.a=t2.a and t1.b=t2.b",
        "Plan": [
          "IndexHashJoin root  inner join, inner:IndexLookUp, outer key:test.t1.a, inner key:test.t2.a, equal cond:eq(test.t1.a, test.t2.a), eq(test.t1.b, test.t2.b)",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "│   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─IndexLookUp(Probe) root  ",
          "  ├─Selection(Build) cop[tikv]  not(isnull(test.t2.a))",
          "  │ └─IndexRangeScan cop[tikv] table:t2, index:a(a) range: decided by [eq(test.t2.a, test.t1.a)], keep order:false, stats:pseudo",
          "  └─Selection(Probe) cop[tikv]  not(isnull(test.t2.b))",
          "    └─TableRowIDScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1 left join t2 on t1.b=t2.b",
        "Plan": [
          "MergeJoin root  left outer join, left side:Sort, left key:test.t1.b, right key:test.t2.b",
          "├─Sort(Build) root  test.t2.b",
          "│ └─TableReader root  data:Selection",
          "│   └─Selection cop[tikv]  not(isnull(test.t2.b))",
          "│     └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─Sort(Probe) root  test.t1.b",
          "  └─TableReader root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1 left join t2 on t1.a=t2.a",
        "Plan": [
          "IndexHashJoin root  left outer join, inner:IndexLookUp, left side:TableReader, outer key:test.t1.a, inner key:test.t2.a, equal cond:eq(test.t1.a, test.t2.a)",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─IndexLookUp(Probe) root  ",
          "  ├─Selection(Build) cop[tikv]  not(isnull(test.t2.a))",
          "  │ └─IndexRangeScan cop[tikv] table:t2, index:a(a) range: decided by [eq(test.t2.a, test.t1.a)], keep order:false, stats:pseudo",
          "  └─TableRowIDScan(Probe) cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1 right join t2 on t1.b=t2.b",
        "Plan": [
          "MergeJoin root  right outer join, left side:Sort, left key:test.t1.b, right key:test.t2.b",
          "├─Sort(Build) root  test.t1.b",
          "│ └─TableReader root  data:Selection",
          "│   └─Selection cop[tikv]  not(isnull(test.t1.b))",
          "│     └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─Sort(Probe) root  test.t2.b",
          "  └─TableReader root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select * from t1 right join t2 on t1.a=t2.a",
        "Plan": [
          "IndexHashJoin root  right outer join, inner:IndexLookUp, left side:IndexLookUp, outer key:test.t2.a, inner key:test.t1.a, equal cond:eq(test.t2.a, test.t1.a)",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─IndexLookUp(Probe) root  ",
          "  ├─Selection(Build) cop[tikv]  not(isnull(test.t1.a))",
          "  │ └─IndexRangeScan cop[tikv] table:t1, index:a(a) range: decided by [eq(test.t1.a, test.t2.a)], keep order:false, stats:pseudo",
          "  └─TableRowIDScan(Probe) cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ hash_join(t1) */ * from t1, t2",
        "Plan": [
          "HashJoin root  CARTESIAN inner join",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:TableFullScan",
          "  └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 A conflict between the HASH_JOIN hint and the NO_HASH_JOIN hint, or the tidb_opt_enable_hash_join system variable, the HASH_JOIN hint will take precedence."
        ]
      },
      {
        "SQL": "select /*+ hash_join(t2) */ * from t1, t2",
        "Plan": [
          "HashJoin root  CARTESIAN inner join",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:TableFullScan",
          "  └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 A conflict between the HASH_JOIN hint and the NO_HASH_JOIN hint, or the tidb_opt_enable_hash_join system variable, the HASH_JOIN hint will take precedence."
        ]
      }
    ]
  },
  {
    "Name": "TestJoinOrderHint4TiFlash",
    "Cases": [
      {
        "SQL": "select /*+ straight_join() */ * from t1 join t2 on t1.a=t2.a join t3 on t2.b=t3.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "    │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.a))",
          "        └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2) */ * from t1 join t2 on t1.a=t2.a join t3 on t2.b=t3.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.a, test.t1.a)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.a))",
          "          └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3) */ * from t1 join t2 on t1.a=t2.a join t3 on t2.b=t3.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.a, test.t1.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "      │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t2.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.b))",
          "          └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t1 join t2 on t1.a=t2.a join t3 on t2.b=t3.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.a, test.t1.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "      │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.b))",
          "          └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t2) */ * from t1 join t2 on t1.a=t2.a join t3 on t2.b=t3.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.a, test.t1.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "      │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t2.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.b))",
          "          └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t1) */ * from t1 join t2 on t1.a=t2.a join t3 on t2.b=t3.b",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t2.a) eq(test.t3.b, test.t2.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  CARTESIAN inner join",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "        └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.a))",
          "          └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t1, t2) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.b, test.t2.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "          │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.a))",
          "              └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "      │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t4.a))",
          "        │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.b))",
          "              └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t4, t3, t2, t, t1) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.b, test.t2.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "          │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.a))",
          "              └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t4, t3, t2, t) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.b, test.t2.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "          │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.a))",
          "              └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t2, t) */ * from t4 join t on t4.a=t.a left join t1 on t.a = t1.a join t2 on t.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  left outer join, left side:HashJoin, equal:[eq(test.t.a, test.t1.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "      │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t.a, test.t4.a)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t4.a))",
          "        │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t.a)), not(isnull(test.t.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t2.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t2.b))",
          "              └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3) */ * from t2 left join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "    │   └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "      └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "        └─HashJoin mpp[tiflash]  left outer join, left side:Selection, equal:[eq(test.t1.a, test.t3.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t3.a))",
          "          │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.b))",
          "            └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t1, t3) */ * from t2 left join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "    │   └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "      └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "        └─HashJoin mpp[tiflash]  left outer join, left side:Selection, equal:[eq(test.t1.a, test.t3.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t3.a))",
          "          │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.b))",
          "            └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid",
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "    │   └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "      └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "        └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t4.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "              └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid",
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "    │   └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "      └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "        └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "          └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.b))",
          "                └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "    └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "      │   └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "      │     ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │     │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │     │   └─Selection mpp[tiflash]  not(isnull(test.t6.b))",
          "      │     │     └─TableFullScan mpp[tiflash] table:t6 keep order:false, stats:pseudo",
          "      │     └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "      │       ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │       │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │       │   └─Selection mpp[tiflash]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │       │     └─TableFullScan mpp[tiflash] table:t5 keep order:false, stats:pseudo",
          "      │       └─Selection(Probe) mpp[tiflash]  not(isnull(test.t2.a))",
          "      │         └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "        └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "          └─Projection mpp[tiflash]  test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "            └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "              └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "                ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "                │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "                │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "                │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "                └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.b))",
          "                  └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) leading(t5, t6) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "    └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "      │   └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "      │     ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │     │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │     │   └─Selection mpp[tiflash]  not(isnull(test.t6.b))",
          "      │     │     └─TableFullScan mpp[tiflash] table:t6 keep order:false, stats:pseudo",
          "      │     └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "      │       ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │       │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │       │   └─Selection mpp[tiflash]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │       │     └─TableFullScan mpp[tiflash] table:t5 keep order:false, stats:pseudo",
          "      │       └─Selection(Probe) mpp[tiflash]  not(isnull(test.t2.a))",
          "      │         └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "        └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "          └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t4.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "                └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 We can only use one leading hint at most, when multiple leading hints are used, all leading hints will be invalid"
        ]
      },
      {
        "SQL": "select /*+ leading(t5, t6, t3, t4) */ * from t2 left join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "    └─HashJoin mpp[tiflash]  left outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.b, collate: binary]",
          "      │   └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "      │     ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │     │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │     │   └─Selection mpp[tiflash]  not(isnull(test.t6.b))",
          "      │     │     └─TableFullScan mpp[tiflash] table:t6 keep order:false, stats:pseudo",
          "      │     └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "      │       ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │       │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │       │   └─Selection mpp[tiflash]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "      │       │     └─TableFullScan mpp[tiflash] table:t5 keep order:false, stats:pseudo",
          "      │       └─Selection(Probe) mpp[tiflash]  not(isnull(test.t2.a))",
          "      │         └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "        └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.b, collate: binary]",
          "          └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t4.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "                └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid",
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t1, t2) */ * from t4 join t on t4.a=t.a right join t1 on t.a = t1.a join t2 on t1.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t.a, test.t1.a)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.a, collate: binary]",
          "    │   └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t4.a, test.t.a)]",
          "    │     ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │     │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │     │   └─Selection mpp[tiflash]  not(isnull(test.t4.a))",
          "    │     │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "    │     └─Selection(Probe) mpp[tiflash]  not(isnull(test.t.a))",
          "    │       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "      └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.a, collate: binary]",
          "        └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t1.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t2.b))",
          "              └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t4 join t on t4.a=t.a right join t1 on t.a = t1.a join t2 on t1.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t4.a, test.t4.b, test.t.a, test.t.b, test.t1.a, test.t1.b, test.t2.a, test.t2.b, test.t3.a, test.t3.b",
          "    └─HashJoin mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t.a, test.t1.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.a, collate: binary]",
          "      │   └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t4.a, test.t.a)]",
          "      │     ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │     │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │     │   └─Selection mpp[tiflash]  not(isnull(test.t4.a))",
          "      │     │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "      │     └─Selection(Probe) mpp[tiflash]  not(isnull(test.t.a))",
          "      │       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "        └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.a, collate: binary]",
          "          └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t1.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t1.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t3.b))",
          "                └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t1, t3) */ * from t4 join t on t4.a=t.a right join t1 on t.a = t1.a join t2 on t1.b = t2.b join t3 on t2.b=t3.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t.a, test.t1.a)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.a, collate: binary]",
          "    │   └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t4.a, test.t.a)]",
          "    │     ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │     │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │     │   └─Selection mpp[tiflash]  not(isnull(test.t4.a))",
          "    │     │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "    │     └─Selection(Probe) mpp[tiflash]  not(isnull(test.t.a))",
          "    │       └─TableFullScan mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) mpp[tiflash]  ",
          "      └─ExchangeSender mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.a, collate: binary]",
          "        └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t3.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t3.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t1.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "            └─Selection(Probe) mpp[tiflash]  not(isnull(test.t2.b))",
          "              └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3) */ * from t2 right join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "    │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) mpp[tiflash]  left outer join, left side:TableFullScan, equal:[eq(test.t1.a, test.t3.a)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t3.a))",
          "      │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "      └─TableFullScan(Probe) mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t1, t3) */ * from t2 right join (t1 left join t3 on t1.a=t3.a) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin mpp[tiflash]  left outer join, left side:HashJoin, equal:[eq(test.t1.a, test.t3.a)]",
          "    ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "    │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection mpp[tiflash]  not(isnull(test.t3.a))",
          "    │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─TableFullScan(Probe) mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t2, t3) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t4.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.a))",
          "            └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 leading hint is inapplicable, check if the leading hint table is valid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b",
          "    └─HashJoin mpp[tiflash]  right outer join, left side:ExchangeReceiver, equal:[eq(test.t2.b, test.t1.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t2.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t1.a))",
          "        │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.b))",
          "            └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t6.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t6 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.a, test.t5.a)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t5 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.b, test.t2.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.a, test.t1.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.b))",
          "                └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      },
      {
        "SQL": "select /*+ leading(t3, t4) leading(t5, t6) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t6.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t6 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t4.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.a, test.t5.a)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t5 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t3.a)]",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t2.b, test.t1.b)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "                └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warning": [
          "Warning 1815 We can only use one leading hint at most, when multiple leading hints are used, all leading hints will be invalid"
        ]
      },
      {
        "SQL": "select /*+ leading(t3, t4, t5, t6) */ * from t2 right join (t1 join t3 on t1.a=t3.a join t4 on t3.b = t4.b) on t2.b=t1.b join t5 on t2.a = t5.a join t6 on t5.b=t6.b;",
        "Plan": [
          "TableReader root  MppVersion: 3, data:ExchangeSender",
          "└─ExchangeSender mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection mpp[tiflash]  test.t2.a, test.t2.b, test.t1.a, test.t1.b, test.t3.a, test.t3.b, test.t4.a, test.t4.b, test.t5.a, test.t5.b, test.t6.a, test.t6.b",
          "    └─HashJoin mpp[tiflash]  inner join, equal:[eq(test.t3.a, test.t1.a) eq(test.t2.b, test.t1.b)]",
          "      ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "      │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "      │     └─TableFullScan mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t5.a, test.t2.a)]",
          "        ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "        │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection mpp[tiflash]  not(isnull(test.t2.a)), not(isnull(test.t2.b))",
          "        │     └─TableFullScan mpp[tiflash] table:t2 keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t5.b, test.t6.b)]",
          "          ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "          │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection mpp[tiflash]  not(isnull(test.t6.b))",
          "          │     └─TableFullScan mpp[tiflash] table:t6 keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) mpp[tiflash]  CARTESIAN inner join",
          "            ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "            │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─Selection mpp[tiflash]  not(isnull(test.t5.a)), not(isnull(test.t5.b))",
          "            │     └─TableFullScan mpp[tiflash] table:t5 keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) mpp[tiflash]  inner join, equal:[eq(test.t3.b, test.t4.b)]",
          "              ├─ExchangeReceiver(Build) mpp[tiflash]  ",
          "              │ └─ExchangeSender mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection mpp[tiflash]  not(isnull(test.t3.a)), not(isnull(test.t3.b))",
          "              │     └─TableFullScan mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "              └─Selection(Probe) mpp[tiflash]  not(isnull(test.t4.b))",
          "                └─TableFullScan mpp[tiflash] table:t4 keep order:false, stats:pseudo"
        ],
        "Warning": null
      }
    ]
  }
]
