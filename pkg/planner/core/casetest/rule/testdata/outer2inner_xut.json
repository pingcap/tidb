[
  {
    "Name": "TestOuter2Inner",
    "Cases": [
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where b2 < 1 -- basic case of outer to inner join conversion",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  lt(test.t2.b2, 1), not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where b2 is not null -- basic case of not null",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2)), not(isnull(test.t2.b2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where not(b2 is null) -- another form of basic case of not null",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2)), not(isnull(test.t2.b2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where c2 = 5 OR b2 < 55 -- case with A OR B (Both A  and B are null filtering)",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2)), or(eq(test.t2.c2, 5), lt(test.t2.b2, 55))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where c2 = 5 AND b2 is null -- case with A AND B (A is null filtering and B is not)",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  eq(test.t2.c2, 5), isnull(test.t2.b2), not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where b2 is NULL AND c2 = 5 -- case with A AND B (A is null filtering and B is not)",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  eq(test.t2.c2, 5), isnull(test.t2.b2), not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where not (b2 is NULL OR c2 = 5) -- NOT case ",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  ne(test.t2.c2, 5), not(isnull(test.t2.a2)), not(isnull(test.t2.b2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where not (b2 is NULL AND c2 = 5) -- NOT case ",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2",
          "└─HashJoin root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2)), or(not(isnull(test.t2.b2)), ne(test.t2.c2, 5))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t2 left outer join t1 on a1=a2 where b1+b1 > 2; -- expression evaluates to UNKNOWN/FALSE",
        "Plan": [
          "Projection root  test.t2.a2, test.t2.b2, test.t2.c2, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  gt(plus(test.t1.b1, test.t1.b1), 2), not(isnull(test.t1.a1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t2 left outer join t1 on a1=a2 where coalesce(b1,2)  > 2; -- false condition for b1=NULL",
        "Plan": [
          "Projection root  test.t2.a2, test.t2.b2, test.t2.c2, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  gt(coalesce(test.t1.b1, 2), 2), not(isnull(test.t1.a1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t2 left outer join t1 on a1=a2 where true and b1 = 5; -- AND with one branch is null filtering",
        "Plan": [
          "Projection root  test.t2.a2, test.t2.b2, test.t2.c2, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  eq(test.t1.b1, 5), not(isnull(test.t1.a1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t2 left outer join t1 on a1=a2 where false OR b1 = 5; -- OR with both branches are null filtering",
        "Plan": [
          "Projection root  test.t2.a2, test.t2.b2, test.t2.c2, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  eq(test.t1.b1, 5), not(isnull(test.t1.a1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t3 as t1 left join t3 as t2 on t1.c3 = t2.c3 where t2.b3 != NULL; -- self join",
        "Plan": [
          "TableDual root  rows:0"
        ]
      },
      {
        "SQL": "select * from t1 ta left outer join (t1 tb left outer join t1 tc on tb.b1 = tc.b1) on ta.a1=tc.a1; -- nested join. On clause is null filtering on tc.",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t1.a1)]",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:ta keep order:false, stats:pseudo",
          "└─Projection(Probe) root  test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1",
          "  └─HashJoin root  inner join, equal:[eq(test.t1.b1, test.t1.b1)]",
          "    ├─TableReader(Build) root  data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.a1)), not(isnull(test.t1.b1))",
          "    │   └─TableFullScan cop[tikv] table:tc keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root  data:Selection",
          "      └─Selection cop[tikv]  not(isnull(test.t1.b1))",
          "        └─TableFullScan cop[tikv] table:tb keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 ta left outer join (t1 tb left outer join t1 tc on tb.b1 = tc.b1) on ta.a1=tc.a1 where tb.a1 > 5; -- nested join. On clause and WHERE clause are filters",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  inner join, equal:[eq(test.t1.a1, test.t1.a1)]",
          "  ├─HashJoin(Build) root  inner join, equal:[eq(test.t1.b1, test.t1.b1)]",
          "  │ ├─TableReader(Build) root  data:Selection",
          "  │ │ └─Selection cop[tikv]  gt(test.t1.a1, 5), not(isnull(test.t1.b1))",
          "  │ │   └─TableFullScan cop[tikv] table:tb keep order:false, stats:pseudo",
          "  │ └─TableReader(Probe) root  data:Selection",
          "  │   └─Selection cop[tikv]  not(isnull(test.t1.a1)), not(isnull(test.t1.b1))",
          "  │     └─TableFullScan cop[tikv] table:tc keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "      └─TableFullScan cop[tikv] table:ta keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from (t2 left join t1 on a1=a2) join t3 on b1=b3 -- on clause applied nested join",
        "Plan": [
          "Projection root  test.t2.a2, test.t2.b2, test.t2.c2, test.t1.a1, test.t1.b1, test.t1.c1, test.t3.a3, test.t3.b3, test.t3.c3",
          "└─HashJoin root  inner join, equal:[eq(test.t1.b1, test.t3.b3)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.b3))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "    ├─TableReader(Build) root  data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.a1)), not(isnull(test.t1.b1))",
          "    │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root  data:Selection",
          "      └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "        └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from ((t1 left join t2 on a1=a2) left join t3 on b2=b3) join t4 on b3=b4 -- nested and propagation of null filtering",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t2.a2, test.t2.b2, test.t2.c2, test.t3.a3, test.t3.b3, test.t3.c3, test.t4.a4, test.t4.b4, test.t4.c4",
          "└─HashJoin root  inner join, equal:[eq(test.t3.b3, test.t4.b4)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t4.b4))",
          "  │   └─TableFullScan cop[tikv] table:t4 keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.b2, test.t3.b3)]",
          "    ├─TableReader(Build) root  data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t3.b3))",
          "    │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  inner join, equal:[eq(test.t2.a2, test.t1.a1)]",
          "      ├─TableReader(Build) root  data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.t2.a2)), not(isnull(test.t2.b2))",
          "      │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root  data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "          └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 right join t2 on a1=a2 where exists (select 1 from t3 where b1=b3) -- semi join is null filtering on the outer join",
        "Plan": [
          "HashJoin root  semi join, left side:HashJoin, equal:[eq(test.t1.b1, test.t3.b3)]",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t3.b3))",
          "│   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a1)), not(isnull(test.t1.b1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select sum(l_extendedprice) / 7.0 as avg_yearly from lineitem, part where p_partkey = l_partkey and p_brand = 'Brand#44' and p_container = 'WRAP PKG' and l_quantity < ( select 0.2 * avg(l_quantity) from lineitem where l_partkey = p_partkey) -- Q17 in TPCH. null filter on derived outer join",
        "Plan": [
          "Projection root  div(Column#15, 7.0)->Column#16",
          "└─StreamAgg root  funcs:sum(test.lineitem.l_extendedprice)->Column#15",
          "  └─HashJoin root  inner join, equal:[eq(test.part.p_partkey, test.lineitem.l_partkey)], other cond:lt(test.lineitem.l_quantity, mul(0.2, Column#13))",
          "    ├─HashJoin(Build) root  inner join, equal:[eq(test.part.p_partkey, test.lineitem.l_partkey)]",
          "    │ ├─TableReader(Build) root  data:Selection",
          "    │ │ └─Selection cop[tikv]  eq(test.part.p_brand, \"Brand#44\"), eq(test.part.p_container, \"WRAP PKG\"), not(isnull(test.part.p_partkey))",
          "    │ │   └─TableFullScan cop[tikv] table:part keep order:false, stats:pseudo",
          "    │ └─TableReader(Probe) root  data:Selection",
          "    │   └─Selection cop[tikv]  not(isnull(test.lineitem.l_partkey))",
          "    │     └─TableFullScan cop[tikv] table:lineitem keep order:false, stats:pseudo",
          "    └─HashAgg(Probe) root  group by:test.lineitem.l_partkey, funcs:avg(Column#19, Column#20)->Column#13, funcs:firstrow(test.lineitem.l_partkey)->test.lineitem.l_partkey",
          "      └─TableReader root  data:HashAgg",
          "        └─HashAgg cop[tikv]  group by:test.lineitem.l_partkey, funcs:count(test.lineitem.l_quantity)->Column#19, funcs:sum(test.lineitem.l_quantity)->Column#20",
          "          └─Selection cop[tikv]  not(isnull(test.lineitem.l_partkey))",
          "            └─TableFullScan cop[tikv] table:lineitem keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "WITH cte AS ( SELECT alias1.col_date AS field1 FROM d AS alias1 LEFT JOIN dd AS alias2 ON alias1.col_blob_key=alias2.col_blob_key WHERE alias1.col_varchar_key IS NULL OR alias1.col_blob_key >= 'a') SELECT * FROM d AS outr1 LEFT OUTER JOIN dd AS outr2 ON (outr1.col_date=outr2.col_date) JOIN cte AS outrcte ON outr2.col_blob_key=outrcte.field1 -- nested complex case",
        "Plan": [
          "Projection root  test.d.pk, test.d.col_blob, test.d.col_blob_key, test.d.col_varchar_key, test.d.col_date, test.d.col_int_key, test.dd.pk, test.dd.col_blob, test.dd.col_blob_key, test.dd.col_date, test.dd.col_int_key, test.d.col_date",
          "└─HashJoin root  inner join, equal:[eq(test.d.col_date, Column#41)]",
          "  ├─HashJoin(Build) root  left outer join, left side:TableReader, equal:[eq(test.d.col_blob_key, test.dd.col_blob_key)]",
          "  │ ├─TableReader(Build) root  data:Selection",
          "  │ │ └─Selection cop[tikv]  or(isnull(test.d.col_varchar_key), ge(test.d.col_blob_key, \"a\"))",
          "  │ │   └─TableFullScan cop[tikv] table:alias1 keep order:false, stats:pseudo",
          "  │ └─TableReader(Probe) root  data:Selection",
          "  │   └─Selection cop[tikv]  not(isnull(test.dd.col_blob_key))",
          "  │     └─TableFullScan cop[tikv] table:alias2 keep order:false, stats:pseudo",
          "  └─Projection(Probe) root  test.d.pk, test.d.col_blob, test.d.col_blob_key, test.d.col_varchar_key, test.d.col_date, test.d.col_int_key, test.dd.pk, test.dd.col_blob, test.dd.col_blob_key, test.dd.col_date, test.dd.col_int_key, cast(test.dd.col_blob_key, datetime(6) BINARY)->Column#41",
          "    └─HashJoin root  inner join, equal:[eq(test.d.col_date, test.dd.col_date)]",
          "      ├─TableReader(Build) root  data:Selection",
          "      │ └─Selection cop[tikv]  not(isnull(test.dd.col_date))",
          "      │   └─TableFullScan cop[tikv] table:outr2 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root  data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.d.col_date))",
          "          └─TableFullScan cop[tikv] table:outr1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "with cte as (select count(a2) as cnt,b2-5 as b3 from t1 left outer join t2 on a1=a2 group by b3) select * from cte where b3 > 1 -- aggregate case.",
        "Plan": [
          "Projection root  Column#21, minus(test.t2.b2, 5)->Column#22",
          "└─Selection root  gt(minus(test.t2.b2, 5), 1)",
          "  └─HashAgg root  group by:Column#27, funcs:count(Column#25)->Column#21, funcs:firstrow(Column#26)->test.t2.b2",
          "    └─Projection root  test.t2.a2->Column#25, test.t2.b2->Column#26, minus(test.t2.b2, 5)->Column#27",
          "      └─HashJoin root  inner join, equal:[eq(test.t1.a1, test.t2.a2)]",
          "        ├─TableReader(Build) root  data:Selection",
          "        │ └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "        │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "        └─TableReader(Probe) root  data:Selection",
          "          └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "            └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from dd as outr1 WHERE outr1.col_blob  IN (SELECT DISTINCT innr1.col_blob_key AS y FROM d AS innrcte left outer join dd AS innr1 ON innr1.pk = innrcte.col_date WHERE outr1.col_int_key > 6)",
        "Plan": [
          "Apply root  semi join, left side:TableReader, equal:[eq(test.dd.col_blob, test.dd.col_blob_key)]",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.dd.col_blob))",
          "│   └─TableFullScan cop[tikv] table:outr1 keep order:false, stats:pseudo",
          "└─HashAgg(Probe) root  group by:test.dd.col_blob_key, funcs:firstrow(test.dd.col_blob_key)->test.dd.col_blob_key",
          "  └─HashJoin root  inner join, equal:[eq(Column#21, Column#20)]",
          "    ├─Projection(Build) root  cast(test.d.col_date, double BINARY)->Column#20",
          "    │ └─TableReader root  data:Selection",
          "    │   └─Selection cop[tikv]  gt(test.dd.col_int_key, 6)",
          "    │     └─TableFullScan cop[tikv] table:innrcte keep order:false, stats:pseudo",
          "    └─Projection(Probe) root  test.dd.col_blob_key, cast(test.dd.pk, double BINARY)->Column#21",
          "      └─TableReader root  data:Selection",
          "        └─Selection cop[tikv]  gt(test.dd.col_int_key, 6), not(isnull(test.dd.col_blob_key))",
          "          └─TableFullScan cop[tikv] table:innr1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t0 left outer join t11 on a0=a1 where t0.b0 in (t11.b1, t11.c1) -- each = in the in list is null filtering",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.t0.a0, test.t11.a1)], other cond:in(test.t0.b0, test.t11.b1, test.t11.c1)",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t11.a1))",
          "│   └─TableFullScan cop[tikv] table:t11 keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:Selection",
          "  └─Selection cop[tikv]  not(isnull(test.t0.a0))",
          "    └─TableFullScan cop[tikv] table:t0 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where b2 is null -- negative case with single predicate which is not null filtering",
        "Plan": [
          "Selection root  isnull(test.t2.b2)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where c2 = 5 OR b2 is null -- negative case with A OR B (A is null filtering and B is not)",
        "Plan": [
          "Selection root  or(eq(test.t2.c2, 5), isnull(test.t2.b2))",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where not(b2 is not null) -- nested 'not' negative case",
        "Plan": [
          "Selection root  isnull(test.t2.b2)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where not(not(b2 is null)) -- nested 'not' negative case",
        "Plan": [
          "Selection root  isnull(test.t2.b2)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "  │   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 left outer join t2 on a1=a2 where b1 is not null -- negative case with condition on outer table.",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "│   └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:Selection",
          "  └─Selection cop[tikv]  not(isnull(test.t1.b1))",
          "    └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t2 left outer join t1 on a1=a2 where coalesce(b1,2)  = 2; -- true condition for b1=NULL",
        "Plan": [
          "Selection root  eq(coalesce(test.t1.b1, 2), 2)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t2 left outer join t1 on a1=a2 where true OR b1 = 5; -- negative case with OR and one branch is TRUE",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t2.a2, test.t1.a1)]",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "│   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─TableReader(Probe) root  data:TableFullScan",
          "  └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t3 as t1 left join t3 as t2 on t1.c3 = t2.c3 where t1.b3 != NULL -- negative case with self join",
        "Plan": [
          "TableDual root  rows:0"
        ]
      },
      {
        "SQL": "select * from (t1 left outer join t2 on a1=a2) left outer join t3 on a2=a3 and b2 = 5  -- negative case. inner side is not a join",
        "Plan": [
          "HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  left outer join, left side:TableReader, equal:[eq(test.t2.a2, test.t3.a3)], left cond:[eq(test.t2.b2, 5)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t3.a3))",
          "  │   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 ta right outer join (t1 tb right outer join t1 tc on tb.b1 = tc.b1) on ta.a1=tc.a1; -- negative case. inner side is not a join",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  right outer join, left side:TableReader, equal:[eq(test.t1.b1, test.t1.b1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.b1))",
          "  │   └─TableFullScan cop[tikv] table:tb keep order:false, stats:pseudo",
          "  └─HashJoin(Probe) root  right outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t1.a1)]",
          "    ├─TableReader(Build) root  data:Selection",
          "    │ └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "    │   └─TableFullScan cop[tikv] table:ta keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root  data:TableFullScan",
          "      └─TableFullScan cop[tikv] table:tc keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t1 ta right outer join (t1 tb right outer join t1 tc on tb.b1 = tc.b1) on ta.a1=tc.a1 where tc.a1 > 5; -- negative case. inner side is not a join and WHERE clause on outer table",
        "Plan": [
          "Projection root  test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1, test.t1.a1, test.t1.b1, test.t1.c1",
          "└─HashJoin root  right outer join, left side:TableReader, equal:[eq(test.t1.b1, test.t1.b1)]",
          "  ├─HashJoin(Build) root  right outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t1.a1)]",
          "  │ ├─TableReader(Build) root  data:Selection",
          "  │ │ └─Selection cop[tikv]  gt(test.t1.a1, 5)",
          "  │ │   └─TableFullScan cop[tikv] table:tc keep order:false, stats:pseudo",
          "  │ └─TableReader(Probe) root  data:Selection",
          "  │   └─Selection cop[tikv]  gt(test.t1.a1, 5), not(isnull(test.t1.a1))",
          "  │     └─TableFullScan cop[tikv] table:ta keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t1.b1))",
          "      └─TableFullScan cop[tikv] table:tb keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from (t2 left join t1 on a1=a2) join t3 on b2=b3 -- negative case, on clause on outer table in nested join",
        "Plan": [
          "HashJoin root  inner join, equal:[eq(test.t2.b2, test.t3.b3)]",
          "├─TableReader(Build) root  data:Selection",
          "│ └─Selection cop[tikv]  not(isnull(test.t3.b3))",
          "│   └─TableFullScan cop[tikv] table:t3 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  left outer join, left side:TableReader, equal:[eq(test.t2.a2, test.t1.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t1.a1))",
          "  │   └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:Selection",
          "    └─Selection cop[tikv]  not(isnull(test.t2.b2))",
          "      └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select t1.c1 in (select count(s.b1) from t1 s where s.a1 = t1.a1) from t1 -- subquery test that generates outer join and not converted",
        "Plan": [
          "Projection root  Column#14",
          "└─Apply root  CARTESIAN left outer semi join, left side:TableReader, other cond:eq(test.t1.c1, Column#13)",
          "  ├─TableReader(Build) root  data:TableFullScan",
          "  │ └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "  └─StreamAgg(Probe) root  funcs:count(Column#16)->Column#13",
          "    └─TableReader root  data:StreamAgg",
          "      └─StreamAgg cop[tikv]  funcs:count(test.t1.b1)->Column#16",
          "        └─Selection cop[tikv]  eq(test.t1.a1, test.t1.a1)",
          "          └─TableFullScan cop[tikv] table:s keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "SELECT * FROM   ti LEFT JOIN (SELECT i FROM ti WHERE FALSE) AS d1 ON ti.i = d1.i WHERE NOT EXISTS (SELECT 1 FROM ti AS inner_t1 WHERE i = d1.i) -- anti semi join",
        "Plan": [
          "HashJoin root  anti semi join, left side:HashJoin, equal:[eq(test.ti.i, test.ti.i)]",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:inner_t1 keep order:false, stats:pseudo",
          "└─HashJoin(Probe) root  left outer join, left side:TableReader, equal:[eq(test.ti.i, test.ti.i)]",
          "  ├─TableDual(Build) root  rows:0",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:ti keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select count(*) from t1 where t1.a1+100 > ( select count(*) from t2 where t1.a1=t2.a2 and t1.b1=t2.b2) group by t1.b1 -- filter not filtering over derived outer join",
        "Plan": [
          "HashAgg root  group by:test.t1.b1, funcs:count(1)->Column#10",
          "└─Selection root  gt(plus(test.t1.a1, 100), ifnull(Column#9, 0))",
          "  └─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2) eq(test.t1.b1, test.t2.b2)]",
          "    ├─HashAgg(Build) root  group by:test.t2.a2, test.t2.b2, funcs:count(Column#11)->Column#9, funcs:firstrow(test.t2.a2)->test.t2.a2, funcs:firstrow(test.t2.b2)->test.t2.b2",
          "    │ └─TableReader root  data:HashAgg",
          "    │   └─HashAgg cop[tikv]  group by:test.t2.a2, test.t2.b2, funcs:count(1)->Column#11",
          "    │     └─Selection cop[tikv]  not(isnull(test.t2.a2)), not(isnull(test.t2.b2))",
          "    │       └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "    └─TableReader(Probe) root  data:TableFullScan",
          "      └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "with cte as (select count(a2) as cnt,ifnull(b2,5) as b2 from t1 left outer join t2 on a1=a2 group by b2) select * from cte where b2 > 1  -- non null filter on group by",
        "Plan": [
          "Projection root  Column#21, ifnull(test.t2.b2, 5)->Column#22",
          "└─HashAgg root  group by:test.t2.b2, funcs:count(test.t2.a2)->Column#21, funcs:firstrow(test.t2.b2)->test.t2.b2",
          "  └─Selection root  gt(ifnull(test.t2.b2, 5), 1)",
          "    └─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "      ├─TableReader(Build) root  data:TableFullScan",
          "      │ └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root  data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "          └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "with cte as (select count(a2) as cnt,ifnull(b2,5) as b2 from t1 left outer join t2 on a1=a2 group by b2) select * from cte where cnt > 1 -- filter on aggregates not applicable",
        "Plan": [
          "Projection root  Column#21, ifnull(test.t2.b2, 5)->Column#22",
          "└─Selection root  gt(Column#21, 1)",
          "  └─HashAgg root  group by:test.t2.b2, funcs:count(test.t2.a2)->Column#21, funcs:firstrow(test.t2.b2)->test.t2.b2",
          "    └─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t1.a1, test.t2.a2)]",
          "      ├─TableReader(Build) root  data:TableFullScan",
          "      │ └─TableFullScan cop[tikv] table:t1 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root  data:Selection",
          "        └─Selection cop[tikv]  not(isnull(test.t2.a2))",
          "          └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t0 left outer join t11 on a0=a1 where t0.b0 in (t0.b0, t11.b1)",
        "Plan": [
          "Selection root  in(test.t0.b0, test.t0.b0, test.t11.b1)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t0.a0, test.t11.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t11.a1))",
          "  │   └─TableFullScan cop[tikv] table:t11 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t0 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t0 left outer join t11 on a0=a1 where '5' not in (t0.b0, t11.b1)",
        "Plan": [
          "Selection root  not(in(\"5\", test.t0.b0, test.t11.b1))",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t0.a0, test.t11.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t11.a1))",
          "  │   └─TableFullScan cop[tikv] table:t11 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t0 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t0 left outer join t11 on a0=a1 where '1' in (t0.b0, t11.b1)",
        "Plan": [
          "Selection root  in(\"1\", test.t0.b0, test.t11.b1)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t0.a0, test.t11.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t11.a1))",
          "  │   └─TableFullScan cop[tikv] table:t11 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t0 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t0 left outer join t11 on a0=a1 where t0.b0 in ('5', t11.b1) -- some = in the in list is not null filtering",
        "Plan": [
          "Selection root  in(test.t0.b0, \"5\", test.t11.b1)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t0.a0, test.t11.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t11.a1))",
          "  │   └─TableFullScan cop[tikv] table:t11 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t0 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "select * from t0 left outer join t11 on a0=a1 where '5' in (t0.b0, t11.b1) -- some = in the in list is not null filtering",
        "Plan": [
          "Selection root  in(\"5\", test.t0.b0, test.t11.b1)",
          "└─HashJoin root  left outer join, left side:TableReader, equal:[eq(test.t0.a0, test.t11.a1)]",
          "  ├─TableReader(Build) root  data:Selection",
          "  │ └─Selection cop[tikv]  not(isnull(test.t11.a1))",
          "  │   └─TableFullScan cop[tikv] table:t11 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) root  data:TableFullScan",
          "    └─TableFullScan cop[tikv] table:t0 keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestOuter2InnerIssue55886",
    "Cases": [
      {
        "SQL": "with cte_0 AS (select 1 as c1, case when ref_0.c_jbb then inet6_aton(ref_0.c_foveoe) else ref_4.c_cz end as c5 from t1 as ref_0 join (t1 as ref_4 right outer join t2 as ref_5 on ref_5.c_g7eofzlxn != 1)), cte_4 as (select 1 as c1 from t2) select ref_34.c1 as c5 from  cte_0 as ref_34 where exists (select 1 from cte_4 as ref_35 where ref_34.c1 <= case when ref_34.c5 then cast(1 as char) else ref_34.c5 end)",
        "Plan": [
          "HashJoin root  CARTESIAN semi join, left side:Projection",
          "├─TableReader(Build) root  data:TableFullScan",
          "│ └─TableFullScan cop[tikv] table:t2 keep order:false, stats:pseudo",
          "└─Projection(Probe) root  1->Column#28",
          "  └─HashJoin root  CARTESIAN inner join, other cond:le(1, cast(case(istrue_with_null(cast(case(istrue_with_null(cast(test.t1.c_jbb, double BINARY)), from_binary(inet6_aton(test.t1.c_foveoe)), test.t1.c_cz), double BINARY)), \"1\", case(istrue_with_null(cast(test.t1.c_jbb, double BINARY)), from_binary(inet6_aton(test.t1.c_foveoe)), test.t1.c_cz)), double BINARY))",
          "    ├─TableReader(Build) root  data:TableFullScan",
          "    │ └─TableFullScan cop[tikv] table:ref_0 keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) root  CARTESIAN right outer join, left side:TableReader, right cond:ne(test.t2.c_g7eofzlxn, 1)",
          "      ├─TableReader(Build) root  data:TableFullScan",
          "      │ └─TableFullScan cop[tikv] table:ref_5 keep order:false, stats:pseudo",
          "      └─TableReader(Probe) root  data:TableFullScan",
          "        └─TableFullScan cop[tikv] table:ref_4 keep order:false, stats:pseudo"
        ]
      }
    ]
  }
]
