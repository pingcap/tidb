[
  {
    "Name": "TestIssue31240",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from t31240;",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(Column#6)->Column#4",
          "└─TableReader 1.00 root  data:StreamAgg",
          "  └─StreamAgg 1.00 batchCop[tiflash]  funcs:count(test.t31240._tidb_rowid)->Column#6",
          "    └─TableFullScan 10000.00 batchCop[tiflash] table:t31240 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "set @@tidb_isolation_read_engines=\"tiflash,tidb\";",
        "Plan": null
      },
      {
        "SQL": "explain format = 'brief' select count(*) from t31240;",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(Column#6)->Column#4",
          "└─TableReader 1.00 root  data:StreamAgg",
          "  └─StreamAgg 1.00 batchCop[tiflash]  funcs:count(test.t31240._tidb_rowid)->Column#6",
          "    └─TableFullScan 10000.00 batchCop[tiflash] table:t31240 keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestVerboseExplain",
    "Cases": [
      {
        "SQL": "explain format = 'verbose' select count(*) from t3",
        "Plan": [
          "StreamAgg_20 1.00 102.69 root  funcs:count(Column#9)->Column#4",
          "└─IndexReader_21 1.00 52.79 root  index:StreamAgg_8",
          "  └─StreamAgg_8 1.00 760.20 cop[tikv]  funcs:count(1)->Column#9",
          "    └─IndexFullScan_19 3.00 610.50 cop[tikv] table:t3, index:c(b) keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select count(*) from t2",
        "Plan": [
          "StreamAgg_27 1.00 107.45 root  funcs:count(Column#7)->Column#4",
          "└─TableReader_28 1.00 57.55 root  data:StreamAgg_10",
          "  └─StreamAgg_10 1.00 831.62 cop[tikv]  funcs:count(1)->Column#7",
          "    └─TableFullScan_25 3.00 681.92 cop[tikv] table:t2 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select * from t3 order by a",
        "Plan": [
          "Sort_4 3.00 318.27 root  test.t3.a",
          "└─TableReader_8 3.00 70.81 root  data:TableFullScan_7",
          "  └─TableFullScan_7 3.00 681.92 cop[tikv] table:t3 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select * from t3 order by b",
        "Plan": [
          "Sort_4 3.00 318.27 root  test.t3.b",
          "└─TableReader_8 3.00 70.81 root  data:TableFullScan_7",
          "  └─TableFullScan_7 3.00 681.92 cop[tikv] table:t3 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select * from t3 order by a limit 1",
        "Plan": [
          "TopN_7 1.00 53.10 root  test.t3.a, offset:0, count:1",
          "└─TableReader_16 1.00 49.90 root  data:TopN_15",
          "  └─TopN_15 1.00 685.12 cop[tikv]  test.t3.a, offset:0, count:1",
          "    └─TableFullScan_14 3.00 681.92 cop[tikv] table:t3 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select * from t3 order by b limit 1",
        "Plan": [
          "TopN_7 1.00 53.10 root  test.t3.b, offset:0, count:1",
          "└─TableReader_16 1.00 49.90 root  data:TopN_15",
          "  └─TopN_15 1.00 685.12 cop[tikv]  test.t3.b, offset:0, count:1",
          "    └─TableFullScan_14 3.00 681.92 cop[tikv] table:t3 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select count(*) from t2 group by a",
        "Plan": [
          "HashAgg_8 3.00 1706.09 root  group by:test.t2.a, funcs:count(1)->Column#4",
          "└─TableReader_17 3.00 58.13 root  data:TableFullScan_16",
          "  └─TableFullScan_16 3.00 681.92 cop[tikv] table:t2 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select count(*) from t3 where b = 0",
        "Plan": [
          "StreamAgg_10 1.00 64.98 root  funcs:count(1)->Column#4",
          "└─IndexReader_15 0.00 15.08 root  index:IndexRangeScan_14",
          "  └─IndexRangeScan_14 0.00 162.80 cop[tikv] table:t3, index:c(b) range:[0,0], keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select /*+ use_index(t3, c) */ count(a) from t3 where b = 0",
        "Plan": [
          "StreamAgg_10 1.00 2001.63 root  funcs:count(test.t3.a)->Column#4",
          "└─IndexLookUp_17 0.00 1951.73 root  ",
          "  ├─IndexRangeScan_15(Build) 0.00 203.50 cop[tikv] table:t3, index:c(b) range:[0,0], keep order:false",
          "  └─TableRowIDScan_16(Probe) 0.00 227.31 cop[tikv] table:t3 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select count(*) from t2 where a = 0",
        "Plan": [
          "StreamAgg_12 1.00 109.57 root  funcs:count(1)->Column#4",
          "└─TableReader_20 0.00 59.67 root  data:Selection_19",
          "  └─Selection_19 0.00 831.62 cop[tikv]  eq(test.t2.a, 0)",
          "    └─TableFullScan_18 3.00 681.92 cop[tikv] table:t2 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select count(*) from t3 t join t3 on t.a = t3.b",
        "Plan": [
          "StreamAgg_10 1.00 2128.93 root  funcs:count(1)->Column#7",
          "└─HashJoin_40 3.00 1979.23 root  inner join, equal:[eq(test.t3.a, test.t3.b)]",
          "  ├─IndexReader_28(Build) 3.00 45.23 root  index:IndexFullScan_27",
          "  │ └─IndexFullScan_27 3.00 488.40 cop[tikv] table:t3, index:c(b) keep order:false",
          "  └─TableReader_26(Probe) 3.00 68.11 root  data:Selection_25",
          "    └─Selection_25 3.00 831.62 cop[tikv]  not(isnull(test.t3.a))",
          "      └─TableFullScan_24 3.00 681.92 cop[tikv] table:t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select /*+ read_from_storage(tiflash[t1, t2]) */ count(*) from t1 join t2 on t1.a = t2.a",
        "Plan": [
          "StreamAgg_15 1.00 62053.22 root  funcs:count(1)->Column#7",
          "└─TableReader_43 3.00 61903.52 root  MppVersion: 2, data:ExchangeSender_42",
          "  └─ExchangeSender_42 3.00 928447.20 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin_39 3.00 928447.20 mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "      ├─ExchangeReceiver_22(Build) 3.00 464290.40 mpp[tiflash]  ",
          "      │ └─ExchangeSender_21 3.00 464146.40 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection_20 3.00 464146.40 mpp[tiflash]  not(isnull(test.t1.a))",
          "      │     └─TableFullScan_19 3.00 464139.20 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false",
          "      └─Selection_24(Probe) 3.00 464146.40 mpp[tiflash]  not(isnull(test.t2.a))",
          "        └─TableFullScan_23 3.00 464139.20 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select /*+ read_from_storage(tiflash[t1, t2]) */ count(*) from t1 join t2 on t1.a = t2.a join t3 on t1.b = t3.b",
        "Plan": [
          "StreamAgg_15 1.00 71713.64 root  funcs:count(1)->Column#10",
          "└─HashJoin_61 3.00 71563.94 root  inner join, equal:[eq(test.t1.b, test.t3.b)]",
          "  ├─IndexReader_49(Build) 3.00 45.23 root  index:IndexFullScan_48",
          "  │ └─IndexFullScan_48 3.00 488.40 cop[tikv] table:t3, index:c(b) keep order:false",
          "  └─TableReader_39(Probe) 3.00 69652.83 root  MppVersion: 2, data:ExchangeSender_38",
          "    └─ExchangeSender_38 3.00 1044634.00 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─HashJoin_29 3.00 1044634.00 mpp[tiflash]  inner join, equal:[eq(test.t1.a, test.t2.a)]",
          "        ├─ExchangeReceiver_35(Build) 3.00 580476.40 mpp[tiflash]  ",
          "        │ └─ExchangeSender_34 3.00 580188.40 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection_33 3.00 580188.40 mpp[tiflash]  not(isnull(test.t1.a)), not(isnull(test.t1.b))",
          "        │     └─TableFullScan_32 3.00 580174.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false",
          "        └─Selection_37(Probe) 3.00 464146.40 mpp[tiflash]  not(isnull(test.t2.a))",
          "          └─TableFullScan_36 3.00 464139.20 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select (2) in (select /*+ read_from_storage(tiflash[t1]) */ count(*) from t1) from (select t.b < (select /*+ read_from_storage(tiflash[t2]) */ t.b from t2 limit 1 )  from t3 t) t; -- we do generate the agg pushed-down plan of mpp, but cost-cmp failed",
        "Plan": [
          "HashJoin_17 3.00 32771.06 root  CARTESIAN left outer semi join",
          "├─Selection_23(Build) 0.80 31149.25 root  eq(2, Column#18)",
          "│ └─StreamAgg_30 1.00 31099.35 root  funcs:count(1)->Column#18",
          "│   └─TableReader_42 3.00 30949.65 root  MppVersion: 2, data:ExchangeSender_41",
          "│     └─ExchangeSender_41 3.00 464139.20 mpp[tiflash]  ExchangeType: PassThrough",
          "│       └─TableFullScan_40 3.00 464139.20 mpp[tiflash] table:t1 keep order:false",
          "└─Projection_18(Probe) 3.00 53.67 root  1->Column#24",
          "  └─IndexReader_22 3.00 53.37 root  index:IndexFullScan_21",
          "    └─IndexFullScan_21 3.00 610.50 cop[tikv] table:t, index:c(b) keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'verbose' select /*+ merge_join(t1), read_from_storage(tiflash[t1, t2]) */ count(*) from t1 join t2 on t1.a = t2.a",
        "Plan": [
          "StreamAgg_15 1.00 62546.70 root  funcs:count(1)->Column#7",
          "└─MergeJoin_29 3.00 62397.00 root  inner join, left key:test.t1.a, right key:test.t2.a",
          "  ├─Sort_27(Build) 3.00 31197.00 root  test.t2.a",
          "  │ └─TableReader_26 3.00 30950.13 root  MppVersion: 2, data:ExchangeSender_25",
          "  │   └─ExchangeSender_25 3.00 464146.40 mpp[tiflash]  ExchangeType: PassThrough",
          "  │     └─Selection_24 3.00 464146.40 mpp[tiflash]  not(isnull(test.t2.a))",
          "  │       └─TableFullScan_23 3.00 464139.20 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false",
          "  └─Sort_22(Probe) 3.00 31197.00 root  test.t1.a",
          "    └─TableReader_21 3.00 30950.13 root  MppVersion: 2, data:ExchangeSender_20",
          "      └─ExchangeSender_20 3.00 464146.40 mpp[tiflash]  ExchangeType: PassThrough",
          "        └─Selection_19 3.00 464146.40 mpp[tiflash]  not(isnull(test.t1.a))",
          "          └─TableFullScan_18 3.00 464139.20 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestIsolationReadDoNotFilterSystemDB",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select * from metrics_schema.tidb_query_duration where time >= '2019-12-23 16:10:13' and time <= '2019-12-23 16:30:13'",
        "Plan": [
          "MemTableScan 10000.00 root table:tidb_query_duration PromQL:histogram_quantile(0.9, sum(rate(tidb_server_handle_query_duration_seconds_bucket{}[60s])) by (le,sql_type,instance)), start_time:2019-12-23 16:10:13, end_time:2019-12-23 16:30:13, step:1m0s"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from information_schema.tables",
        "Plan": [
          "MemTableScan 10000.00 root table:TABLES "
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from mysql.stats_meta",
        "Plan": [
          "TableReader 10000.00 root  data:TableFullScan",
          "└─TableFullScan 10000.00 cop[tikv] table:stats_meta keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestIsolationReadTiFlashNotChoosePointGet",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select * from t where t.a = 1",
        "Result": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─TableRangeScan 1.00 mpp[tiflash] table:t range:[1,1], keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from t where t.a in (1, 2)",
        "Result": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─TableRangeScan 2.00 mpp[tiflash] table:t range:[1,1], [2,2], keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMergeContinuousSelections",
    "Cases": [
      {
        "SQL": "desc format = 'brief' SELECT table2 . `col_char_64` AS field1 FROM `ts` AS table2 INNER JOIN (SELECT DISTINCT SUBQUERY3_t1 . * FROM `ts` AS SUBQUERY3_t1 LEFT OUTER JOIN `ts` AS SUBQUERY3_t2 ON SUBQUERY3_t2 . `col_varchar_64_not_null` = SUBQUERY3_t1 . `col_varchar_key`) AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_64`) WHERE table3 . `col_char_64_not_null` >= SOME (SELECT SUBQUERY4_t1 . `col_varchar_64` AS SUBQUERY4_field1 FROM `ts` AS SUBQUERY4_t1) GROUP BY field1 ;",
        "Plan": [
          "HashAgg 7992.00 root  group by:test.ts.col_char_64, funcs:firstrow(test.ts.col_char_64)->test.ts.col_char_64",
          "└─HashJoin 9990.00 root  CARTESIAN inner join, other cond:or(ge(test.ts.col_char_64_not_null, Column#25), if(ne(Column#26, 0), NULL, 0))",
          "  ├─Selection(Build) 0.80 root  ne(Column#27, 0)",
          "  │ └─HashAgg 1.00 root  funcs:min(Column#36)->Column#25, funcs:sum(Column#37)->Column#26, funcs:count(Column#38)->Column#27",
          "  │   └─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  │     └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  │       └─HashAgg 1.00 mpp[tiflash]  funcs:min(Column#42)->Column#36, funcs:sum(Column#43)->Column#37, funcs:count(1)->Column#38",
          "  │         └─Projection 10000.00 mpp[tiflash]  test.ts.col_varchar_64->Column#42, cast(isnull(test.ts.col_varchar_64), decimal(20,0) BINARY)->Column#43",
          "  │           └─TableFullScan 10000.00 mpp[tiflash] table:SUBQUERY4_t1 keep order:false, stats:pseudo",
          "  └─TableReader(Probe) 12487.50 root  MppVersion: 2, data:ExchangeSender",
          "    └─ExchangeSender 12487.50 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.ts.col_varchar_64, test.ts.col_varchar_key)]",
          "        ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.ts.col_varchar_64))",
          "        │     └─TableFullScan 10000.00 mpp[tiflash] table:table2 pushed down filter:empty, keep order:false, stats:pseudo",
          "        └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.ts.col_varchar_key))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:SUBQUERY3_t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestPushDownGroupConcatToTiFlash",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id) from ts",
        "Plan": [
          "HashAgg 1.00 root  funcs:group_concat(Column#6 separator \",\")->Column#5",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(Column#8, Column#9, Column#10 separator \",\")->Column#6",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#8, test.ts.col_1->Column#9, cast(test.ts.id, var_string(20))->Column#10",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#6, Column#7, Column#8 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  test.ts.col_0->Column#6, test.ts.col_1->Column#7, cast(test.ts.id, var_string(20))->Column#8",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:test.ts.col_0, test.ts.col_1, test.ts.id, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id order by col_0) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(Column#6, Column#7, Column#8 order by Column#9 separator \",\")->Column#5",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#6, test.ts.col_1->Column#7, cast(test.ts.id, var_string(20))->Column#8, test.ts.col_0->Column#9",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id order by col_0) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#6, Column#7, Column#8 order by Column#9 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  test.ts.col_0->Column#6, test.ts.col_1->Column#7, cast(test.ts.id, var_string(20))->Column#8, test.ts.col_0->Column#9",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:test.ts.col_0, test.ts.col_1, test.ts.id, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id order by col_0),count(*),min(col_1) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(Column#8, Column#9, Column#10 order by Column#11 separator \",\")->Column#5, funcs:count(1)->Column#6, funcs:min(Column#12)->Column#7",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#8, test.ts.col_1->Column#9, cast(test.ts.id, var_string(20))->Column#10, test.ts.col_0->Column#11, test.ts.col_1->Column#12",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id order by col_0),count(*),max(col_0) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#12, Column#13, Column#14 order by Column#15 separator \",\")->Column#5, funcs:sum(Column#16)->Column#6, funcs:max(Column#17)->Column#7",
          "      └─Projection 1.00 mpp[tiflash]  test.ts.col_0->Column#12, test.ts.col_1->Column#13, cast(test.ts.id, var_string(20))->Column#14, test.ts.col_0->Column#15, Column#10->Column#16, Column#11->Column#17",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:test.ts.col_0, test.ts.col_1, test.ts.id, funcs:count(1)->Column#10, funcs:max(test.ts.col_0)->Column#11",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#12, funcs:group_concat(Column#9, Column#10, Column#11 separator \",\")->Column#5",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#9, test.ts.col_1->Column#10, cast(test.ts.id, var_string(20))->Column#11, test.ts.col_2->Column#12",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#9, funcs:group_concat(distinct Column#6, Column#7, Column#8 separator \",\")->Column#5",
          "      └─Projection 8000.00 mpp[tiflash]  test.ts.col_0->Column#6, test.ts.col_1->Column#7, cast(test.ts.id, var_string(20))->Column#8, test.ts.col_2->Column#9",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.ts.col_0, test.ts.col_1, test.ts.col_2, test.ts.id, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id order by col_0) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#10, funcs:group_concat(Column#6, Column#7, Column#8 order by Column#9 separator \",\")->Column#5",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#6, test.ts.col_1->Column#7, cast(test.ts.id, var_string(20))->Column#8, test.ts.col_0->Column#9, test.ts.col_2->Column#10",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id order by col_0) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#10, funcs:group_concat(distinct Column#6, Column#7, Column#8 order by Column#9 separator \",\")->Column#5",
          "      └─Projection 8000.00 mpp[tiflash]  test.ts.col_0->Column#6, test.ts.col_1->Column#7, cast(test.ts.id, var_string(20))->Column#8, test.ts.col_0->Column#9, test.ts.col_2->Column#10",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.ts.col_0, test.ts.col_1, test.ts.col_2, test.ts.id, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_1, id order by col_0) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#9, funcs:group_concat(Column#6, Column#7 order by Column#8 separator \",\")->Column#5",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_1->Column#6, cast(test.ts.id, var_string(20))->Column#7, test.ts.col_0->Column#8, test.ts.col_2->Column#9",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_1, id order by col_0) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#9, funcs:group_concat(distinct Column#6, Column#7 order by Column#8 separator \",\")->Column#5",
          "      └─Projection 8000.00 mpp[tiflash]  test.ts.col_1->Column#6, cast(test.ts.id, var_string(20))->Column#7, test.ts.col_0->Column#8, test.ts.col_2->Column#9",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.ts.col_1, test.ts.col_2, test.ts.id, funcs:firstrow(test.ts.col_0)->test.ts.col_0",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id order by col_0),count(*),min(col_0),avg(id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#11, 0), 1, Column#11), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#20, funcs:group_concat(Column#13, Column#14, Column#15 order by Column#16 separator \",\")->Column#5, funcs:count(1)->Column#6, funcs:min(Column#17)->Column#7, funcs:count(Column#18)->Column#11, funcs:sum(Column#19)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#13, test.ts.col_1->Column#14, cast(test.ts.id, var_string(20))->Column#15, test.ts.col_0->Column#16, test.ts.col_0->Column#17, test.ts.id->Column#18, cast(test.ts.id, decimal(10,0) BINARY)->Column#19, test.ts.col_2->Column#20",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id order by col_0),count(*),max(col_1),avg(id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#19, 0), 1, Column#19), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#32, funcs:group_concat(distinct Column#25, Column#26, Column#27 order by Column#28 separator \",\")->Column#5, funcs:count(1)->Column#6, funcs:max(Column#29)->Column#7, funcs:count(Column#30)->Column#19, funcs:sum(Column#31)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#25, test.ts.col_1->Column#26, cast(test.ts.id, var_string(20))->Column#27, test.ts.col_0->Column#28, test.ts.col_1->Column#29, test.ts.id->Column#30, cast(test.ts.id, decimal(10,0) BINARY)->Column#31, test.ts.col_2->Column#32",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id order by col_0),count(distinct id),min(col_0),avg(id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#10, 0), 1, Column#10), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(Column#11, Column#12, Column#13 order by Column#14 separator \",\")->Column#5, funcs:count(Column#15)->Column#6, funcs:min(Column#16)->Column#7, funcs:count(Column#17)->Column#10, funcs:sum(Column#18)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#11, test.ts.col_1->Column#12, cast(test.ts.id, var_string(20))->Column#13, test.ts.col_0->Column#14, test.ts.id->Column#15, test.ts.col_0->Column#16, test.ts.id->Column#17, cast(test.ts.id, decimal(10,0) BINARY)->Column#18",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id order by col_0),count(distinct id),max(col_1),avg(id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#14, 0), 1, Column#14), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#26, Column#27, Column#28 order by Column#29 separator \",\")->Column#5, funcs:sum(Column#30)->Column#6, funcs:max(Column#31)->Column#7, funcs:sum(Column#32)->Column#14, funcs:sum(Column#33)->Column#8",
          "      └─Projection 1.00 mpp[tiflash]  test.ts.col_0->Column#26, test.ts.col_1->Column#27, cast(test.ts.id, var_string(20))->Column#28, test.ts.col_0->Column#29, Column#15->Column#30, Column#16->Column#31, Column#17->Column#32, Column#18->Column#33",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:Column#23, Column#24, Column#25, funcs:count(Column#19)->Column#15, funcs:max(Column#20)->Column#16, funcs:count(Column#21)->Column#17, funcs:sum(Column#22)->Column#18",
          "              └─Projection 10000.00 mpp[tiflash]  test.ts.id->Column#19, test.ts.col_1->Column#20, test.ts.id->Column#21, cast(test.ts.id, decimal(10,0) BINARY)->Column#22, test.ts.col_0->Column#23, test.ts.col_1->Column#24, test.ts.id->Column#25",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id),count(distinct id),min(col_0),avg(id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#21, 0), 1, Column#21), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#35, funcs:group_concat(Column#28, Column#29, Column#30 separator \",\")->Column#5, funcs:count(Column#31)->Column#6, funcs:min(Column#32)->Column#7, funcs:count(Column#33)->Column#21, funcs:sum(Column#34)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#28, test.ts.col_1->Column#29, cast(test.ts.id, var_string(20))->Column#30, test.ts.id->Column#31, test.ts.col_0->Column#32, test.ts.id->Column#33, cast(test.ts.id, decimal(10,0) BINARY)->Column#34, test.ts.col_2->Column#35",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id),count(distinct id),max(col_1),avg(id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#19, 0), 1, Column#19), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#32, funcs:group_concat(distinct Column#25, Column#26, Column#27 separator \",\")->Column#5, funcs:count(Column#28)->Column#6, funcs:max(Column#29)->Column#7, funcs:count(Column#30)->Column#19, funcs:sum(Column#31)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#25, test.ts.col_1->Column#26, cast(test.ts.id, var_string(20))->Column#27, test.ts.id->Column#28, test.ts.col_1->Column#29, test.ts.id->Column#30, cast(test.ts.id, decimal(10,0) BINARY)->Column#31, test.ts.col_2->Column#32",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id),count(distinct id),min(col_0),avg(id) from ts",
        "Plan": [
          "HashAgg 1.00 root  funcs:group_concat(Column#9 separator \",\")->Column#5, funcs:count(Column#10)->Column#6, funcs:min(Column#11)->Column#7, funcs:avg(Column#12, Column#13)->Column#8",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(Column#19, Column#20, Column#21 separator \",\")->Column#9, funcs:count(Column#22)->Column#10, funcs:min(Column#23)->Column#11, funcs:count(Column#24)->Column#12, funcs:sum(Column#25)->Column#13",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#19, test.ts.col_1->Column#20, cast(test.ts.id, var_string(20))->Column#21, test.ts.id->Column#22, test.ts.col_0->Column#23, test.ts.id->Column#24, cast(test.ts.id, decimal(10,0) BINARY)->Column#25",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id),count(distinct id),max(col_1),avg(id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#14, 0), 1, Column#14), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#26, Column#27, Column#28 separator \",\")->Column#5, funcs:sum(Column#29)->Column#6, funcs:max(Column#30)->Column#7, funcs:sum(Column#31)->Column#14, funcs:sum(Column#32)->Column#8",
          "      └─Projection 1.00 mpp[tiflash]  test.ts.col_0->Column#26, test.ts.col_1->Column#27, cast(test.ts.id, var_string(20))->Column#28, Column#15->Column#29, Column#16->Column#30, Column#17->Column#31, Column#18->Column#32",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:Column#23, Column#24, Column#25, funcs:count(Column#19)->Column#15, funcs:max(Column#20)->Column#16, funcs:count(Column#21)->Column#17, funcs:sum(Column#22)->Column#18",
          "              └─Projection 10000.00 mpp[tiflash]  test.ts.id->Column#19, test.ts.col_1->Column#20, test.ts.id->Column#21, cast(test.ts.id, decimal(10,0) BINARY)->Column#22, test.ts.col_0->Column#23, test.ts.col_1->Column#24, test.ts.id->Column#25",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_1, id),count(distinct id),group_concat(col_0 order by 1),avg(id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#15, 0), 1, Column#15), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#27, funcs:group_concat(Column#19, Column#20, Column#21 separator \",\")->Column#5, funcs:count(Column#22)->Column#6, funcs:group_concat(Column#23 order by Column#24 separator \",\")->Column#7, funcs:count(Column#25)->Column#15, funcs:sum(Column#26)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#19, test.ts.col_1->Column#20, cast(test.ts.id, var_string(20))->Column#21, test.ts.id->Column#22, test.ts.col_0->Column#23, test.ts.col_0->Column#24, test.ts.id->Column#25, cast(test.ts.id, decimal(10,0) BINARY)->Column#26, test.ts.col_2->Column#27",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0),count(distinct id),group_concat(col_1, id order by 1,2),avg(id) from ts group by col_2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, div(Column#8, cast(case(eq(Column#13, 0), 1, Column#13), decimal(20,0) BINARY))->Column#8",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#24, funcs:group_concat(distinct Column#16 separator \",\")->Column#5, funcs:count(Column#17)->Column#6, funcs:group_concat(Column#18, Column#19 order by Column#20, Column#21 separator \",\")->Column#7, funcs:count(Column#22)->Column#13, funcs:sum(Column#23)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#16, test.ts.id->Column#17, test.ts.col_1->Column#18, cast(test.ts.id, var_string(20))->Column#19, test.ts.col_1->Column#20, test.ts.id->Column#21, test.ts.id->Column#22, cast(test.ts.id, decimal(10,0) BINARY)->Column#23, test.ts.col_2->Column#24",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_2, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, id),count(distinct id),group_concat(col_1, id order by 1,2),min(col_0),avg(id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7, Column#8, div(Column#9, cast(case(eq(Column#13, 0), 1, Column#13), decimal(20,0) BINARY))->Column#9",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(Column#16, Column#17 separator \",\")->Column#5, funcs:count(Column#18)->Column#6, funcs:group_concat(Column#19, Column#20 order by Column#21, Column#22 separator \",\")->Column#7, funcs:min(Column#23)->Column#8, funcs:count(Column#24)->Column#13, funcs:sum(Column#25)->Column#9",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#16, cast(test.ts.id, var_string(20))->Column#17, test.ts.id->Column#18, test.ts.col_1->Column#19, cast(test.ts.id, var_string(20))->Column#20, test.ts.col_1->Column#21, test.ts.id->Column#22, test.ts.col_0->Column#23, test.ts.id->Column#24, cast(test.ts.id, decimal(10,0) BINARY)->Column#25",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id),count(distinct id),group_concat(col_1, id order by 1,2),max(col_1),avg(id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7, Column#8, div(Column#9, cast(case(eq(Column#12, 0), 1, Column#12), decimal(20,0) BINARY))->Column#9",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#14, Column#15, Column#16 separator \",\")->Column#5, funcs:count(Column#17)->Column#6, funcs:group_concat(Column#18, Column#19 order by Column#20, Column#21 separator \",\")->Column#7, funcs:max(Column#22)->Column#8, funcs:count(Column#23)->Column#12, funcs:sum(Column#24)->Column#9",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#14, test.ts.col_1->Column#15, cast(test.ts.id, var_string(20))->Column#16, test.ts.id->Column#17, test.ts.col_1->Column#18, cast(test.ts.id, var_string(20))->Column#19, test.ts.col_1->Column#20, test.ts.id->Column#21, test.ts.col_1->Column#22, test.ts.id->Column#23, cast(test.ts.id, decimal(10,0) BINARY)->Column#24",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id),count(distinct col_2),group_concat(col_1, id),max(col_1),avg(id) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5, Column#6, Column#7, Column#8, div(Column#9, cast(case(eq(Column#15, 0), 1, Column#15), decimal(20,0) BINARY))->Column#9",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#29, Column#30, Column#31 separator \",\")->Column#5, funcs:count(distinct Column#32)->Column#6, funcs:group_concat(Column#33 separator \",\")->Column#7, funcs:max(Column#34)->Column#8, funcs:sum(Column#35)->Column#15, funcs:sum(Column#36)->Column#9",
          "      └─Projection 1.00 mpp[tiflash]  test.ts.col_0->Column#29, test.ts.col_1->Column#30, cast(test.ts.id, var_string(20))->Column#31, test.ts.col_2->Column#32, Column#16->Column#33, Column#17->Column#34, Column#18->Column#35, Column#19->Column#36",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:Column#25, Column#26, Column#27, Column#28, funcs:group_concat(Column#20, Column#21 separator \",\")->Column#16, funcs:max(Column#22)->Column#17, funcs:count(Column#23)->Column#18, funcs:sum(Column#24)->Column#19",
          "              └─Projection 10000.00 mpp[tiflash]  test.ts.col_1->Column#20, cast(test.ts.id, var_string(20))->Column#21, test.ts.col_1->Column#22, test.ts.id->Column#23, cast(test.ts.id, decimal(10,0) BINARY)->Column#24, test.ts.col_0->Column#25, test.ts.col_1->Column#26, test.ts.id->Column#27, test.ts.col_2->Column#28",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0, col_1, id),count(distinct col_2),group_concat(col_1, id),max(col_1),avg(id) from ts group by col_0",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5, Column#6, Column#7, Column#8, div(Column#9, cast(case(eq(Column#20, 0), 1, Column#20), decimal(20,0) BINARY))->Column#9",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#35, funcs:group_concat(distinct Column#26, Column#27, Column#28 separator \",\")->Column#5, funcs:count(distinct Column#29)->Column#6, funcs:group_concat(Column#30, Column#31 separator \",\")->Column#7, funcs:max(Column#32)->Column#8, funcs:count(Column#33)->Column#20, funcs:sum(Column#34)->Column#9",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#26, test.ts.col_1->Column#27, cast(test.ts.id, var_string(20))->Column#28, test.ts.col_2->Column#29, test.ts.col_1->Column#30, cast(test.ts.id, var_string(20))->Column#31, test.ts.col_1->Column#32, test.ts.id->Column#33, cast(test.ts.id, decimal(10,0) BINARY)->Column#34, test.ts.col_0->Column#35",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_0, collate: utf8mb4_bin]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,'GG') from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#10, Column#11 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#8, var_string(20))->Column#10, Column#9->Column#11",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:\"GG\", 0, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,'01') from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#10, Column#11 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#8, var_string(20))->Column#10, Column#9->Column#11",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:\"01\", 0, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,1) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#10, Column#11 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#8, var_string(20))->Column#10, cast(Column#9, var_string(20))->Column#11",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:0, 1, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,0) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#8, Column#9 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#7, var_string(20))->Column#8, cast(Column#7, var_string(20))->Column#9",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:0, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,10) from ts group by '010'",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  group by:Column#17, funcs:group_concat(distinct Column#15, Column#16 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#13, var_string(20))->Column#15, cast(Column#14, var_string(20))->Column#16, Column#12->Column#17",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#12, collate: binary]",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:0, 1, 10, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,0) from ts group by '011'",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  group by:Column#14, funcs:group_concat(distinct Column#12, Column#13 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#11, var_string(20))->Column#12, cast(Column#11, var_string(20))->Column#13, Column#10->Column#14",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#10, collate: binary]",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:0, 1, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 0,'GG') from ts group by 'GG'",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  group by:Column#17, funcs:group_concat(distinct Column#15, Column#16 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  cast(Column#13, var_string(20))->Column#15, Column#14->Column#16, Column#12->Column#17",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#12, collate: binary]",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:\"GG\", 0, 1, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'",
          "[types:1292]Truncated incorrect DOUBLE value: 'GG'"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 'GG','GG') from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#7, Column#7 separator \",\")->Column#5",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "          └─HashAgg 1.00 mpp[tiflash]  group by:\"GG\", ",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 'Gg','GG') from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#8, Column#9 separator \",\")->Column#5",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "          └─HashAgg 1.00 mpp[tiflash]  group by:\"GG\", \"Gg\", ",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct 'GG-10','GG') from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#8, Column#9 separator \",\")->Column#5",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "          └─HashAgg 1.00 mpp[tiflash]  group by:\"GG\", \"GG-10\", ",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct '1200-01-01 00:00:00.023',1200) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct Column#10, Column#11 separator \",\")->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  Column#8->Column#10, cast(Column#9, var_string(20))->Column#11",
          "        └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "          └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─HashAgg 1.00 mpp[tiflash]  group by:\"1200-01-01 00:00:00.023\", 1200, ",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable",
          "[types:1292]Truncated incorrect DOUBLE value: '1200-01-01 00:00:00.023'",
          "[types:1292]Truncated incorrect DOUBLE value: '1200-01-01 00:00:00.023'"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_0) from ts group by id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.ts.id, funcs:group_concat(test.ts.col_0, test.ts.col_0 separator \",\")->Column#5",
          "      └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.id, collate: binary]",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(col_0, col_0,id) from ts group by id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#12, funcs:group_concat(Column#9, Column#10, Column#11 separator \",\")->Column#5",
          "      └─Projection 10000.00 mpp[tiflash]  test.ts.col_0->Column#9, test.ts.col_0->Column#10, cast(test.ts.id, var_string(20))->Column#11, test.ts.id->Column#12",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.id, collate: binary]",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0 order by id<10) from ts",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:group_concat(distinct test.ts.col_0 order by Column#7 separator \",\")->Column#5",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "          └─HashAgg 1.00 mpp[tiflash]  group by:Column#9, funcs:firstrow(Column#8)->Column#7",
          "            └─Projection 10000.00 mpp[tiflash]  lt(test.ts.id, 10)->Column#8, test.ts.col_0->Column#9",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0 order by id<10) from ts group by col_1",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.ts.col_1, funcs:group_concat(distinct test.ts.col_0 order by Column#8 separator \",\")->Column#5",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_1, collate: utf8mb4_bin]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:Column#10, Column#11, funcs:firstrow(Column#9)->Column#8",
          "            └─Projection 10000.00 mpp[tiflash]  lt(test.ts.id, 10)->Column#9, test.ts.col_1->Column#10, test.ts.col_0->Column#11",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0>10 order by id<10) from ts group by col_1",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:Column#17, funcs:group_concat(distinct Column#15 order by Column#16 separator \",\")->Column#5",
          "      └─Projection 8000.00 mpp[tiflash]  cast(Column#10, var_string(20))->Column#15, Column#11->Column#16, test.ts.col_1->Column#17",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.ts.col_1, collate: utf8mb4_bin]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:Column#13, Column#14, funcs:firstrow(Column#12)->Column#11",
          "              └─Projection 10000.00 mpp[tiflash]  lt(test.ts.id, 10)->Column#12, test.ts.col_1->Column#13, gt(cast(test.ts.col_0, double BINARY), 10)->Column#14",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg(),agg_to_cop() */ group_concat(distinct col_0 order by col_0<=>null) from ts",
        "Plan": [
          "HashAgg 1.00 root  funcs:group_concat(distinct Column#6 order by Column#7 separator \",\")->Column#5",
          "└─Projection 10000.00 root  test.ts.col_0->Column#6, nulleq(test.ts.col_0, <nil>)->Column#7",
          "  └─TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "    └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:ts keep order:false, stats:pseudo"
        ],
        "Warning": [
          "[planner:1815]Optimizer Hint AGG_TO_COP is inapplicable",
          "Scalar function 'nulleq'(signature: NullEQString, return type: bigint(1)) is not supported to push down to tiflash now.",
          "Aggregation can not be pushed to tiflash because arguments of AggFunc `group_concat` contains unsupported exprs in order-by clause",
          "Scalar function 'nulleq'(signature: NullEQString, return type: bigint(1)) is not supported to push down to tiflash now.",
          "Aggregation can not be pushed to tiflash because arguments of AggFunc `group_concat` contains unsupported exprs in order-by clause"
        ]
      }
    ]
  },
  {
    "Name": "TestIssue32632",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select sum(ps_supplycost) from partsupp, supplier where ps_suppkey = s_suppkey;",
        "Plan": [
          "HashAgg 1.00 root  funcs:sum(Column#15)->Column#14",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(test.partsupp.ps_supplycost)->Column#15",
          "      └─Projection 12500.00 mpp[tiflash]  test.partsupp.ps_supplycost",
          "        └─HashJoin 12500.00 mpp[tiflash]  inner join, equal:[eq(test.supplier.s_suppkey, test.partsupp.ps_suppkey)]",
          "          ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─TableFullScan 10000.00 mpp[tiflash] table:supplier keep order:false, stats:pseudo",
          "          └─TableFullScan(Probe) 800000.00 mpp[tiflash] table:partsupp keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestTiFlashPartitionTableScan",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select * from rp_t where a = 1 or a = 20",
        "Plan": [
          "TableReader 20.00 root partition:p0,p3 MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 20.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Selection 20.00 mpp[tiflash]  or(eq(test.rp_t.a, 1), eq(test.rp_t.a, 20))",
          "    └─TableFullScan 10000.00 mpp[tiflash] table:rp_t pushed down filter:empty, keep order:false, stats:pseudo, PartitionTableScan:true"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from hp_t where a = 1 or a = 20",
        "Plan": [
          "TableReader 20.00 root partition:p0,p1 MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 20.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Selection 20.00 mpp[tiflash]  or(eq(test.hp_t.a, 1), eq(test.hp_t.a, 20))",
          "    └─TableFullScan 10000.00 mpp[tiflash] table:hp_t pushed down filter:empty, keep order:false, stats:pseudo, PartitionTableScan:true"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from rp_t where a = 1 or a = 20",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#4)->Column#3",
          "└─TableReader 1.00 root partition:p0,p3 MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#4",
          "      └─Selection 20.00 mpp[tiflash]  or(eq(test.rp_t.a, 1), eq(test.rp_t.a, 20))",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:rp_t pushed down filter:empty, keep order:false, stats:pseudo, PartitionTableScan:true"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from hp_t where a = 1 or a = 20",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#4)->Column#3",
          "└─TableReader 1.00 root partition:p0,p1 MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#4",
          "      └─Selection 20.00 mpp[tiflash]  or(eq(test.hp_t.a, 1), eq(test.hp_t.a, 20))",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:hp_t pushed down filter:empty, keep order:false, stats:pseudo, PartitionTableScan:true"
        ]
      }
    ]
  },
  {
    "Name": "TestTiFlashFineGrainedShuffle",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select row_number() over w1 from t1 window w1 as (partition by c1 order by c1);",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#5->Column#6, stream_count: 8",
          "    └─Window 10000.00 mpp[tiflash]  row_number()->Column#5 over(partition by test.t1.c1 order by test.t1.c1 rows between current row and current row), stream_count: 8",
          "      └─Sort 10000.00 mpp[tiflash]  test.t1.c1, test.t1.c1, stream_count: 8",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  stream_count: 8",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary], stream_count: 8",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1, rank() over w2 from t1 window w1 as (partition by c1 order by c1), w2 as (partition by c2);",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#7->Column#8, Column#6->Column#9, stream_count: 8",
          "    └─Window 10000.00 mpp[tiflash]  row_number()->Column#7 over(partition by test.t1.c1 order by test.t1.c1 rows between current row and current row), stream_count: 8",
          "      └─Sort 10000.00 mpp[tiflash]  test.t1.c1, test.t1.c1, stream_count: 8",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  stream_count: 8",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary], stream_count: 8",
          "            └─Window 10000.00 mpp[tiflash]  rank()->Column#6 over(partition by test.t1.c2), stream_count: 8",
          "              └─Sort 10000.00 mpp[tiflash]  test.t1.c2, stream_count: 8",
          "                └─ExchangeReceiver 10000.00 mpp[tiflash]  stream_count: 8",
          "                  └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c2, collate: binary], stream_count: 8",
          "                    └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1, rank() over w2 from t1 window w1 as (partition by c1 order by c1), w2 as (partition by c2) order by 1, 2 limit 10;",
        "Plan": [
          "Projection 10.00 root  Column#7->Column#8, Column#6->Column#9",
          "└─TopN 10.00 root  Column#7, Column#6, offset:0, count:10",
          "  └─TableReader 10.00 root  MppVersion: 2, data:ExchangeSender",
          "    └─ExchangeSender 10.00 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─TopN 10.00 mpp[tiflash]  Column#7, Column#6, offset:0, count:10",
          "        └─Window 10000.00 mpp[tiflash]  row_number()->Column#7 over(partition by test.t1.c1 order by test.t1.c1 rows between current row and current row), stream_count: 8",
          "          └─Sort 10000.00 mpp[tiflash]  test.t1.c1, test.t1.c1, stream_count: 8",
          "            └─ExchangeReceiver 10000.00 mpp[tiflash]  stream_count: 8",
          "              └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary], stream_count: 8",
          "                └─Window 10000.00 mpp[tiflash]  rank()->Column#6 over(partition by test.t1.c2), stream_count: 8",
          "                  └─Sort 10000.00 mpp[tiflash]  test.t1.c2, stream_count: 8",
          "                    └─ExchangeReceiver 10000.00 mpp[tiflash]  stream_count: 8",
          "                      └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c2, collate: binary], stream_count: 8",
          "                        └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1, count(c2) from t1 group by c1 having c1 > 10 window w1 as (partition by c2 order by c2);",
        "Plan": [
          "TableReader 2666.67 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2666.67 mpp[tiflash]  Column#6->Column#7, Column#4->Column#8, stream_count: 8",
          "    └─Window 2666.67 mpp[tiflash]  row_number()->Column#6 over(partition by test.t1.c2 order by test.t1.c2 rows between current row and current row), stream_count: 8",
          "      └─Sort 2666.67 mpp[tiflash]  test.t1.c2, test.t1.c2, stream_count: 8",
          "        └─ExchangeReceiver 2666.67 mpp[tiflash]  stream_count: 8",
          "          └─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c2, collate: binary], stream_count: 8",
          "            └─Projection 2666.67 mpp[tiflash]  Column#4, test.t1.c2",
          "              └─HashAgg 2666.67 mpp[tiflash]  group by:test.t1.c1, funcs:sum(Column#9)->Column#4, funcs:firstrow(Column#10)->test.t1.c2",
          "                └─ExchangeReceiver 2666.67 mpp[tiflash]  ",
          "                  └─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary]",
          "                    └─HashAgg 2666.67 mpp[tiflash]  group by:test.t1.c1, funcs:count(test.t1.c2)->Column#9, funcs:firstrow(test.t1.c2)->Column#10",
          "                      └─Selection 3333.33 mpp[tiflash]  gt(test.t1.c1, 10)",
          "                        └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1, count(c1) from t1 group by c2 having c2 > 10 window w1 as (partition by c1 order by c2);",
        "Plan": [
          "TableReader 2666.67 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2666.67 mpp[tiflash]  Column#6->Column#7, Column#4->Column#8, stream_count: 8",
          "    └─Window 2666.67 mpp[tiflash]  row_number()->Column#6 over(partition by test.t1.c1 order by test.t1.c2 rows between current row and current row), stream_count: 8",
          "      └─Sort 2666.67 mpp[tiflash]  test.t1.c1, test.t1.c2, stream_count: 8",
          "        └─ExchangeReceiver 2666.67 mpp[tiflash]  stream_count: 8",
          "          └─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary], stream_count: 8",
          "            └─Projection 2666.67 mpp[tiflash]  Column#4, test.t1.c1, test.t1.c2",
          "              └─HashAgg 2666.67 mpp[tiflash]  group by:test.t1.c2, funcs:sum(Column#9)->Column#4, funcs:firstrow(Column#10)->test.t1.c1, funcs:firstrow(test.t1.c2)->test.t1.c2",
          "                └─ExchangeReceiver 2666.67 mpp[tiflash]  ",
          "                  └─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c2, collate: binary]",
          "                    └─HashAgg 2666.67 mpp[tiflash]  group by:test.t1.c2, funcs:count(test.t1.c1)->Column#9, funcs:firstrow(test.t1.c1)->Column#10",
          "                      └─Selection 3333.33 mpp[tiflash]  gt(test.t1.c2, 10)",
          "                        └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1 from t1 a join t1 b on a.c1 = b.c2 window w1 as (partition by a.c1);",
        "Plan": [
          "TableReader 12487.50 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 12487.50 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 12487.50 mpp[tiflash]  Column#8->Column#9, stream_count: 8",
          "    └─Window 12487.50 mpp[tiflash]  row_number()->Column#8 over(partition by test.t1.c1 rows between current row and current row), stream_count: 8",
          "      └─Sort 12487.50 mpp[tiflash]  test.t1.c1, stream_count: 8",
          "        └─ExchangeReceiver 12487.50 mpp[tiflash]  stream_count: 8",
          "          └─ExchangeSender 12487.50 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary], stream_count: 8",
          "            └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t1.c1, test.t1.c2)]",
          "              ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t1.c1))",
          "              │     └─TableFullScan 10000.00 mpp[tiflash] table:a pushed down filter:empty, keep order:false, stats:pseudo",
          "              └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t1.c2))",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1 from t1 where c1 < 100 window w1 as (partition by c1 order by c1);",
        "Plan": [
          "TableReader 3323.33 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 3323.33 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 3323.33 mpp[tiflash]  Column#5->Column#6, stream_count: 8",
          "    └─Window 3323.33 mpp[tiflash]  row_number()->Column#5 over(partition by test.t1.c1 order by test.t1.c1 rows between current row and current row), stream_count: 8",
          "      └─Sort 3323.33 mpp[tiflash]  test.t1.c1, test.t1.c1, stream_count: 8",
          "        └─ExchangeReceiver 3323.33 mpp[tiflash]  stream_count: 8",
          "          └─ExchangeSender 3323.33 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary], stream_count: 8",
          "            └─Selection 3323.33 mpp[tiflash]  lt(test.t1.c1, 100)",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from t1;",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1 from t1 window w1 as (order by c1);",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#5->Column#6",
          "    └─Window 10000.00 mpp[tiflash]  row_number()->Column#5 over(order by test.t1.c1 rows between current row and current row)",
          "      └─Sort 10000.00 mpp[tiflash]  test.t1.c1",
          "        └─ExchangeReceiver 10000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select row_number() over w1, count(c2) from t1 group by c1 having c1 > 10 window w1 as (partition by c1 order by c2);",
        "Plan": [
          "TableReader 2666.67 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2666.67 mpp[tiflash]  Column#6->Column#7, Column#4->Column#8",
          "    └─Window 2666.67 mpp[tiflash]  row_number()->Column#6 over(partition by test.t1.c1 order by test.t1.c2 rows between current row and current row)",
          "      └─Sort 2666.67 mpp[tiflash]  test.t1.c1, test.t1.c2",
          "        └─Projection 2666.67 mpp[tiflash]  Column#4, test.t1.c1, test.t1.c2",
          "          └─HashAgg 2666.67 mpp[tiflash]  group by:test.t1.c1, funcs:sum(Column#9)->Column#4, funcs:firstrow(test.t1.c1)->test.t1.c1, funcs:firstrow(Column#11)->test.t1.c2",
          "            └─ExchangeReceiver 2666.67 mpp[tiflash]  ",
          "              └─ExchangeSender 2666.67 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.c1, collate: binary]",
          "                └─HashAgg 2666.67 mpp[tiflash]  group by:test.t1.c1, funcs:count(test.t1.c2)->Column#9, funcs:firstrow(test.t1.c2)->Column#11",
          "                  └─Selection 3333.33 mpp[tiflash]  gt(test.t1.c1, 10)",
          "                    └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      }
    ]
  }
]
