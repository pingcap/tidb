[
  {
    "Name": "TestMPPJoin",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t where fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t, d2_t, d3_t where fact_t.d1_k = d1_t.d1_k and fact_t.d2_k = d2_t.d2_k and fact_t.d3_k = d3_t.d3_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#17",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d3_k, test.d3_t.d3_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d3_t.d3_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d3_t pushed down filter:empty, keep order:false",
          "      └─HashJoin(Probe) 8.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d2_k, test.d2_t.d2_k)]",
          "        ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d2_t.d2_k))",
          "        │     └─TableFullScan 2.00 mpp[tiflash] table:d2_t pushed down filter:empty, keep order:false",
          "        └─HashJoin(Probe) 8.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "          ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "          │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "          └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k)), not(isnull(test.fact_t.d2_k)), not(isnull(test.fact_t.d3_k))",
          "            └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t where fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  left outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 8.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "      │     └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 2.00 mpp[tiflash] table:d1_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col1 > d1_t.value",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)], other cond:gt(test.fact_t.col1, test.d1_t.value)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col1 > 10",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  left outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], left cond:[gt(test.fact_t.col1, 10)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col2 > 10 and fact_t.col1 > d1_t.value",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  left outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], left cond:[gt(test.fact_t.col2, 10)], other cond:gt(test.fact_t.col1, test.d1_t.value)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k = d1_t.d1_k and d1_t.value > 10",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], right cond:gt(test.d1_t.value, 10)",
          "      ├─ExchangeReceiver(Build) 8.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "      │     └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 2.00 mpp[tiflash] table:d1_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k = d1_t.d1_k and d1_t.value > 10 and fact_t.col1 > d1_t.value",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], right cond:gt(test.d1_t.value, 10), other cond:gt(test.fact_t.col1, test.d1_t.value)",
          "      ├─ExchangeReceiver(Build) 8.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 8.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "      │     └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 2.00 mpp[tiflash] table:d1_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where exists (select 1 from d1_t where d1_k = fact_t.d1_k)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 6.40 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 6.40 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 6.40 mpp[tiflash]  semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where exists (select 1 from d1_t where d1_k = fact_t.d1_k and value > fact_t.col1)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 6.40 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 6.40 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 6.40 mpp[tiflash]  semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], other cond:gt(test.d1_t.value, test.fact_t.col1)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where exists (select /*+ SEMI_JOIN_REWRITE() */ 1 from d1_t where d1_k = fact_t.d1_k)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 8.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 8.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Projection 2.00 mpp[tiflash]  test.d1_t.d1_k",
          "      │     └─HashAgg 2.00 mpp[tiflash]  group by:test.d1_t.d1_k, funcs:firstrow(test.d1_t.d1_k)->test.d1_t.d1_k",
          "      │       └─ExchangeReceiver 2.00 mpp[tiflash]  ",
          "      │         └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "      │           └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │             └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where exists (select /*+ SEMI_JOIN_REWRITE() */ 1 from d1_t where d1_k = fact_t.d1_k and value > fact_t.col1)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 6.40 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 6.40 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 6.40 mpp[tiflash]  semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], other cond:gt(test.d1_t.value, test.fact_t.col1)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where not exists (select 1 from d1_t where d1_k = fact_t.d1_k)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 6.40 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 6.40 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 6.40 mpp[tiflash]  anti semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 2.00 mpp[tiflash] table:d1_t keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where not exists (select 1 from d1_t where d1_k = fact_t.d1_k and value > fact_t.col1)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 6.40 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 6.40 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 6.40 mpp[tiflash]  anti semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], other cond:gt(test.d1_t.value, test.fact_t.col1)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 2.00 mpp[tiflash] table:d1_t keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t join d1_t on fact_t.d1_k > d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 16.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 16.00 mpp[tiflash]  CARTESIAN inner join, other cond:gt(test.fact_t.d1_k, test.d1_t.d1_k)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─Selection(Probe) 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "        └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k > d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 16.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 16.00 mpp[tiflash]  CARTESIAN left outer join, other cond:gt(test.fact_t.d1_k, test.d1_t.d1_k)",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 2.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k > d1_t.d1_k",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 16.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 16.00 mpp[tiflash]  CARTESIAN right outer join, other cond:gt(test.fact_t.d1_k, test.d1_t.d1_k)",
          "      ├─ExchangeReceiver(Build) 8.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 8.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "      │     └─TableFullScan 8.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 2.00 mpp[tiflash] table:d1_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where d1_k not in (select d1_k from d1_t)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─TableReader 6.40 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 6.40 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 6.40 mpp[tiflash]  Null-aware anti semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 2.00 mpp[tiflash] table:d1_t keep order:false",
          "      └─TableFullScan(Probe) 8.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPLeftSemiJoin",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.a in (select a from test.t); -- left semi",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  left outer semi join, equal:[eq(test.t.a, test.t.a)]",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.a in (select a from test.t where b<t1.b); ",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  left outer semi join, equal:[eq(test.t.a, test.t.a)], other cond:lt(test.t.b, test.t.b)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.a not in (select a from test.t); -- left anti",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  anti left outer semi join, equal:[eq(test.t.a, test.t.a)]",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.a not in (select a from test.t where b<t1.b);",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  anti left outer semi join, equal:[eq(test.t.a, test.t.a)], other cond:lt(test.t.b, test.t.b)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.b in (select a from test.t); -- cartesian left semi",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.b, test.t.a)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.a in (select b from test.t where b<t1.b);",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.a, test.t.b), lt(test.t.b, test.t.b)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.b not in (select a from test.t); -- cartesian left anti",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.b, test.t.a)]",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select * from test.t t1 where t1.a>1 or t1.b not in (select a from test.t where b<t1.b);",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.t.a, test.t.b",
          "    └─Selection 8000.00 mpp[tiflash]  or(gt(test.t.a, 1), Column#7)",
          "      └─HashJoin 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.b, test.t.a)], other cond:lt(test.t.b, test.t.b)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select a in (select a from test.t), a not in (select a from test.t) from test.t; -- semi join as scalar",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#13, Column#17",
          "    └─HashJoin 10000.00 mpp[tiflash]  anti left outer semi join, equal:[eq(test.t.a, test.t.a)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) 10000.00 mpp[tiflash]  left outer semi join, equal:[eq(test.t.a, test.t.a)]",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select a in (select b from test.t), a not in (select b from test.t) from test.t;",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#13, Column#17",
          "    └─HashJoin 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.a, test.t.b)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.a, test.t.b)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select b in (select a from test.t), b not in (select a from test.t) from test.t;",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#13, Column#17",
          "    └─HashJoin 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.b, test.t.a)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.b, test.t.a)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select b in (select b from test.t), b not in (select b from test.t) from test.t;",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#13, Column#17",
          "    └─HashJoin 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.b, test.t.b)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.b, test.t.b)",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "explain format = 'brief' select a, b, a in (select a from test.t), a in (select b from test.t), b in (select a from test.t), b in (select b from test.t), a not in (select a from test.t), a not in (select b from test.t), b not in (select a from test.t), b not in (select b from test.t) from test.t;",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.b, test.t.b)]",
          "    ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─HashJoin(Probe) 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.b, test.t.a)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "      └─HashJoin(Probe) 10000.00 mpp[tiflash]  Null-aware anti left outer semi join, equal:[eq(test.t.a, test.t.b)]",
          "        ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─HashJoin(Probe) 10000.00 mpp[tiflash]  anti left outer semi join, equal:[eq(test.t.a, test.t.a)]",
          "          ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "          └─HashJoin(Probe) 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.b, test.t.b)",
          "            ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "            │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "            │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "            └─HashJoin(Probe) 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.b, test.t.a)",
          "              ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "              └─HashJoin(Probe) 10000.00 mpp[tiflash]  CARTESIAN left outer semi join, other cond:eq(test.t.a, test.t.b)",
          "                ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "                │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "                │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "                └─HashJoin(Probe) 10000.00 mpp[tiflash]  left outer semi join, equal:[eq(test.t.a, test.t.a)]",
          "                  ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "                  │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "                  │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "                  └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      }
    ]
  },
  {
    "Name": "TestMPPOuterJoinBuildSideForBroadcastJoin",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from a left join b on a.id = b.id",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#7",
          "└─TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 2.00 mpp[tiflash]  left outer join, equal:[eq(test.a.id, test.b.id)]",
          "      ├─ExchangeReceiver(Build) 3.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 3.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 3.00 mpp[tiflash]  not(isnull(test.b.id))",
          "      │     └─TableFullScan 3.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 2.00 mpp[tiflash] table:a keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from b right join a on a.id = b.id",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#7",
          "└─TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 2.00 mpp[tiflash]  right outer join, equal:[eq(test.b.id, test.a.id)]",
          "      ├─ExchangeReceiver(Build) 3.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 3.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 3.00 mpp[tiflash]  not(isnull(test.b.id))",
          "      │     └─TableFullScan 3.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false",
          "      └─TableFullScan(Probe) 2.00 mpp[tiflash] table:a keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPOuterJoinBuildSideForShuffleJoinWithFixedBuildSide",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from a left join b on a.id = b.id",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#7",
          "└─TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 2.00 mpp[tiflash]  left outer join, equal:[eq(test.a.id, test.b.id)]",
          "      ├─ExchangeReceiver(Build) 3.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 3.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.b.id, collate: binary]",
          "      │   └─Selection 3.00 mpp[tiflash]  not(isnull(test.b.id))",
          "      │     └─TableFullScan 3.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false",
          "      └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "        └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.a.id, collate: binary]",
          "          └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from b right join a on a.id = b.id",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#7",
          "└─TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 2.00 mpp[tiflash]  right outer join, equal:[eq(test.b.id, test.a.id)]",
          "      ├─ExchangeReceiver(Build) 3.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 3.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.b.id, collate: binary]",
          "      │   └─Selection 3.00 mpp[tiflash]  not(isnull(test.b.id))",
          "      │     └─TableFullScan 3.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false",
          "      └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "        └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.a.id, collate: binary]",
          "          └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPOuterJoinBuildSideForShuffleJoin",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from a left join b on a.id = b.id",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#7",
          "└─TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 2.00 mpp[tiflash]  left outer join, equal:[eq(test.a.id, test.b.id)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.a.id, collate: binary]",
          "      │   └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false",
          "      └─ExchangeReceiver(Probe) 3.00 mpp[tiflash]  ",
          "        └─ExchangeSender 3.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.b.id, collate: binary]",
          "          └─Selection 3.00 mpp[tiflash]  not(isnull(test.b.id))",
          "            └─TableFullScan 3.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from b right join a on a.id = b.id",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#7",
          "└─TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 2.00 mpp[tiflash]  right outer join, equal:[eq(test.b.id, test.a.id)]",
          "      ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.a.id, collate: binary]",
          "      │   └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false",
          "      └─ExchangeReceiver(Probe) 3.00 mpp[tiflash]  ",
          "        └─ExchangeSender 3.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.b.id, collate: binary]",
          "          └─Selection 3.00 mpp[tiflash]  not(isnull(test.b.id))",
          "            └─TableFullScan 3.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPShuffledJoin",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t where fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "              └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t, d2_t, d3_t where fact_t.d1_k = d1_t.d1_k and fact_t.d2_k = d2_t.d2_k and fact_t.d3_k = d3_t.d3_k",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#18)->Column#17",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#18",
          "      └─HashJoin 128.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d3_k, test.d3_t.d3_k)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d3_t.d3_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d3_t.d3_k))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d3_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 64.00 mpp[tiflash]  ",
          "          └─ExchangeSender 64.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d3_k, collate: binary]",
          "            └─HashJoin 64.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d2_k, test.d2_t.d2_k)]",
          "              ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d2_t.d2_k, collate: binary]",
          "              │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d2_t.d2_k))",
          "              │     └─TableFullScan 4.00 mpp[tiflash] table:d2_t pushed down filter:empty, keep order:false",
          "              └─ExchangeReceiver(Probe) 32.00 mpp[tiflash]  ",
          "                └─ExchangeSender 32.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d2_k, collate: binary]",
          "                  └─HashJoin 32.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "                    ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "                    │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "                    │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "                    │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "                    └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "                      └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "                        └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k)), not(isnull(test.fact_t.d2_k)), not(isnull(test.fact_t.d3_k))",
          "                          └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t where fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "              └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t, d1_t, d2_t, d3_t where fact_t.d1_k = d1_t.d1_k and fact_t.d1_k = d2_t.value and fact_t.d1_k = d3_t.value",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#18)->Column#17",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#18",
          "      └─HashJoin 128.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d1_k, test.d3_t.value)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d3_t.value, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d3_t.value))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d3_t pushed down filter:empty, keep order:false",
          "        └─HashJoin(Probe) 64.00 mpp[tiflash]  inner join, equal:[eq(test.fact_t.d1_k, test.d2_t.value)]",
          "          ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d2_t.value, collate: binary]",
          "          │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d2_t.value))",
          "          │     └─TableFullScan 4.00 mpp[tiflash] table:d2_t pushed down filter:empty, keep order:false",
          "          └─HashJoin(Probe) 32.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "            ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "            │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "            │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "            │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "            └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "              └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "                └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "                  └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  left outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─TableFullScan 16.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k = d1_t.d1_k",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─TableFullScan 4.00 mpp[tiflash] table:d1_t keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "              └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col1 > d1_t.value",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)], other cond:gt(test.fact_t.col1, test.d1_t.value)",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "              └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col1 > 10",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  left outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], left cond:[gt(test.fact_t.col1, 10)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─TableFullScan 16.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from (select case when t1.col1 is null then t2.col1 + 5 else 10 end as col1, t2.d1_k as d1_k from fact_t t1 right join fact_t t2 on t1.d1_k = t2.d1_k) fact_t join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col1 > 5",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#22)->Column#19",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#22",
          "      └─HashJoin 204.80 mpp[tiflash]  inner join, equal:[eq(test.d1_t.d1_k, test.fact_t.d1_k)]",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─Projection(Probe) 102.40 mpp[tiflash]  test.fact_t.d1_k",
          "          └─Selection 102.40 mpp[tiflash]  gt(case(isnull(test.fact_t.col1), plus(test.fact_t.col1, 5), 10), 5)",
          "            └─HashJoin 128.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.fact_t.d1_k)]",
          "              ├─ExchangeReceiver(Build) 16.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "              │   └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "              │     └─TableFullScan 16.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false",
          "              └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "                └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "                  └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "                    └─TableFullScan 16.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t left join d1_t on fact_t.d1_k = d1_t.d1_k and fact_t.col2 > 10 and fact_t.col1 > d1_t.value",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  left outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], left cond:[gt(test.fact_t.col2, 10)], other cond:gt(test.fact_t.col1, test.d1_t.value)",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "        │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─TableFullScan 16.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k = d1_t.d1_k and d1_t.value > 10",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], right cond:gt(test.d1_t.value, 10)",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─TableFullScan 4.00 mpp[tiflash] table:d1_t keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "              └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t right join d1_t on fact_t.d1_k = d1_t.d1_k and d1_t.value > 10 and fact_t.col1 > d1_t.value",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─HashJoin 32.00 mpp[tiflash]  right outer join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], right cond:gt(test.d1_t.value, 10), other cond:gt(test.fact_t.col1, test.d1_t.value)",
          "        ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "        │   └─TableFullScan 4.00 mpp[tiflash] table:d1_t keep order:false",
          "        └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "          └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "            └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "              └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where exists (select 1 from d1_t where d1_k = fact_t.d1_k)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 12.80 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 12.80 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 12.80 mpp[tiflash]  semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "      │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k))",
          "      │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "        └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "          └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.d1_k))",
          "            └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where exists (select 1 from d1_t where d1_k = fact_t.d1_k and value > fact_t.col1)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 12.80 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 12.80 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 12.80 mpp[tiflash]  semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], other cond:gt(test.d1_t.value, test.fact_t.col1)",
          "      ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "      │   └─Selection 4.00 mpp[tiflash]  not(isnull(test.d1_t.d1_k)), not(isnull(test.d1_t.value))",
          "      │     └─TableFullScan 4.00 mpp[tiflash] table:d1_t pushed down filter:empty, keep order:false",
          "      └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "        └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "          └─Selection 16.00 mpp[tiflash]  not(isnull(test.fact_t.col1)), not(isnull(test.fact_t.d1_k))",
          "            └─TableFullScan 16.00 mpp[tiflash] table:fact_t pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where not exists (select 1 from d1_t where d1_k = fact_t.d1_k)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 12.80 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 12.80 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 12.80 mpp[tiflash]  anti semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)]",
          "      ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "      │   └─TableFullScan 4.00 mpp[tiflash] table:d1_t keep order:false",
          "      └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "        └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "          └─TableFullScan 16.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from fact_t where not exists (select 1 from d1_t where d1_k = fact_t.d1_k and value > fact_t.col1)",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#12",
          "└─TableReader 12.80 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 12.80 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 12.80 mpp[tiflash]  anti semi join, equal:[eq(test.fact_t.d1_k, test.d1_t.d1_k)], other cond:gt(test.d1_t.value, test.fact_t.col1)",
          "      ├─ExchangeReceiver(Build) 4.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 4.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.d1_t.d1_k, collate: binary]",
          "      │   └─TableFullScan 4.00 mpp[tiflash] table:d1_t keep order:false",
          "      └─ExchangeReceiver(Probe) 16.00 mpp[tiflash]  ",
          "        └─ExchangeSender 16.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.fact_t.d1_k, collate: binary]",
          "          └─TableFullScan 16.00 mpp[tiflash] table:fact_t keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPJoinWithCanNotFoundColumnInSchemaColumnsError",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select v from t3 as a left join (select t1.v1, t1.v2, t1.v1 + t1.v2 as v from t1 left join t2 on t1.v1 = t2.v1 and t1.v2 = t2.v2) b on a.v1 = b.v1 and a.v2 = b.v2",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#13",
          "    └─HashJoin 1.00 mpp[tiflash]  left outer join, equal:[eq(test.t3.v1, test.t1.v1) eq(test.t3.v2, test.t1.v2)]",
          "      ├─ExchangeReceiver(Build) 1.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#23, collate: binary], [name: Column#24, collate: binary]",
          "      │   └─Projection 1.00 mpp[tiflash]  test.t3.v1, test.t3.v2, cast(test.t3.v1, decimal(20,2))->Column#23, cast(test.t3.v2, decimal(20,2))->Column#24",
          "      │     └─TableFullScan 1.00 mpp[tiflash] table:a keep order:false",
          "      └─Projection(Probe) 2.00 mpp[tiflash]  test.t1.v1, test.t1.v2, plus(test.t1.v1, test.t1.v2)->Column#13",
          "        └─HashJoin 2.00 mpp[tiflash]  left outer join, equal:[eq(test.t1.v1, test.t2.v1) eq(test.t1.v2, test.t2.v2)]",
          "          ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.v1, collate: binary], [name: test.t1.v2, collate: binary]",
          "          │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.t1.v1)), not(isnull(test.t1.v2))",
          "          │     └─TableFullScan 2.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false",
          "          └─ExchangeReceiver(Probe) 8.00 mpp[tiflash]  ",
          "            └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#15, collate: binary], [name: Column#16, collate: binary]",
          "              └─Projection 8.00 mpp[tiflash]  test.t2.v1, test.t2.v2, cast(test.t2.v1, decimal(20,2))->Column#15, cast(test.t2.v2, decimal(20,2))->Column#16",
          "                └─Selection 8.00 mpp[tiflash]  not(isnull(test.t2.v1)), not(isnull(test.t2.v2))",
          "                  └─TableFullScan 8.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*), t2.v1, t2.v2 from t1 left join t2 on t1.v1 = t2.v1 and t1.v2 = t2.v2 group by t2.v1, t2.v2",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2.00 mpp[tiflash]  Column#9, test.t2.v1, test.t2.v2",
          "    └─HashAgg 2.00 mpp[tiflash]  group by:test.t2.v1, test.t2.v2, funcs:sum(Column#22)->Column#9, funcs:firstrow(test.t2.v1)->test.t2.v1, funcs:firstrow(test.t2.v2)->test.t2.v2",
          "      └─ExchangeReceiver 2.00 mpp[tiflash]  ",
          "        └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.v1, collate: binary], [name: test.t2.v2, collate: binary]",
          "          └─HashAgg 2.00 mpp[tiflash]  group by:test.t2.v1, test.t2.v2, funcs:count(1)->Column#22",
          "            └─HashJoin 2.00 mpp[tiflash]  left outer join, equal:[eq(test.t1.v1, test.t2.v1) eq(test.t1.v2, test.t2.v2)]",
          "              ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t1.v1, collate: binary], [name: test.t1.v2, collate: binary]",
          "              │   └─TableFullScan 2.00 mpp[tiflash] table:t1 keep order:false",
          "              └─ExchangeReceiver(Probe) 8.00 mpp[tiflash]  ",
          "                └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#14, collate: binary], [name: Column#15, collate: binary]",
          "                  └─Projection 8.00 mpp[tiflash]  test.t2.v1, test.t2.v2, cast(test.t2.v1, decimal(20,2))->Column#14, cast(test.t2.v2, decimal(20,2))->Column#15",
          "                    └─Selection 8.00 mpp[tiflash]  not(isnull(test.t2.v1)), not(isnull(test.t2.v2))",
          "                      └─TableFullScan 8.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*), t2.v1, t2.v2 from t3 left join t2 on t3.v1 = t2.v1 and t3.v2 = t2.v2 group by t2.v1, t2.v2",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#9, test.t2.v1, test.t2.v2",
          "    └─HashAgg 1.00 mpp[tiflash]  group by:test.t2.v1, test.t2.v2, funcs:count(1)->Column#9, funcs:firstrow(test.t2.v1)->test.t2.v1, funcs:firstrow(test.t2.v2)->test.t2.v2",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.v1, collate: binary], [name: test.t2.v2, collate: binary]",
          "          └─HashJoin 1.00 mpp[tiflash]  left outer join, equal:[eq(test.t3.v1, test.t2.v1) eq(test.t3.v2, test.t2.v2)]",
          "            ├─ExchangeReceiver(Build) 1.00 mpp[tiflash]  ",
          "            │ └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t3.v1, collate: binary], [name: test.t3.v2, collate: binary]",
          "            │   └─TableFullScan 1.00 mpp[tiflash] table:t3 keep order:false",
          "            └─ExchangeReceiver(Probe) 8.00 mpp[tiflash]  ",
          "              └─ExchangeSender 8.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t2.v1, collate: binary], [name: test.t2.v2, collate: binary]",
          "                └─Selection 8.00 mpp[tiflash]  not(isnull(test.t2.v1)), not(isnull(test.t2.v2))",
          "                  └─TableFullScan 8.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestJoinNotSupportedByTiFlash",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select * from table_1 a, table_1 b where a.bit_col = b.bit_col",
        "Plan": [
          "HashJoin 2.00 root  inner join, equal:[eq(test.table_1.bit_col, test.table_1.bit_col)]",
          "├─TableReader(Build) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "│ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan 2.00 mpp[tiflash] table:b keep order:false",
          "└─TableReader(Probe) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from table_1 a left join table_1 b on a.id = b.id and dayofmonth(a.datetime_col) > 100",
        "Plan": [
          "HashJoin 2.00 root  left outer join, equal:[eq(test.table_1.id, test.table_1.id)], left cond:[gt(dayofmonth(test.table_1.datetime_col), 100)]",
          "├─TableReader(Build) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "│ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan 2.00 mpp[tiflash] table:b keep order:false",
          "└─TableReader(Probe) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from table_1 a right join table_1 b on a.id = b.id and dayofmonth(b.datetime_col) > 100",
        "Plan": [
          "HashJoin 2.00 root  right outer join, equal:[eq(test.table_1.id, test.table_1.id)], right cond:gt(dayofmonth(test.table_1.datetime_col), 100)",
          "├─TableReader(Build) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "│ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false",
          "└─TableReader(Probe) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan 2.00 mpp[tiflash] table:b keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from table_1 a join table_1 b on a.id = b.id and dayofmonth(a.datetime_col) > dayofmonth(b.datetime_col)",
        "Plan": [
          "HashJoin 2.00 root  inner join, equal:[eq(test.table_1.id, test.table_1.id)], other cond:gt(dayofmonth(test.table_1.datetime_col), dayofmonth(test.table_1.datetime_col))",
          "├─TableReader(Build) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "│ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "│   └─TableFullScan 2.00 mpp[tiflash] table:b keep order:false",
          "└─TableReader(Probe) 2.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPWithHashExchangeUnderNewCollation",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select * from table_1 a, table_1 b where a.value = b.value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.value, test.table_1.value)]",
          "    ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_general_ci]",
          "    │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "    │     └─TableFullScan 2.00 mpp[tiflash] table:a pushed down filter:empty, keep order:false",
          "    └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "      └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_general_ci]",
          "        └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "          └─TableFullScan 2.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from table_1 a, table_2 b where a.value = b.value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.value, test.table_2.value)]",
          "    ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_bin]",
          "    │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "    │     └─TableFullScan 2.00 mpp[tiflash] table:a pushed down filter:empty, keep order:false",
          "    └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "      └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_2.value, collate: utf8mb4_bin]",
          "        └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_2.value))",
          "          └─TableFullScan 2.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from table_1 a, table_2 b, table_1 c where a.value = b.value and b.value = c.value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_2.value, test.table_1.value)]",
          "    ├─HashJoin(Build) 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.value, test.table_2.value)]",
          "    │ ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │ │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_bin]",
          "    │ │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "    │ │     └─TableFullScan 2.00 mpp[tiflash] table:a pushed down filter:empty, keep order:false",
          "    │ └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "    │   └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_2.value, collate: utf8mb4_bin]",
          "    │     └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_2.value))",
          "    │       └─TableFullScan 2.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false",
          "    └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "      └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_bin]",
          "        └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "          └─TableFullScan 2.00 mpp[tiflash] table:c pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select * from table_1 a, table_2 b, table_1 c where a.value = b.value and a.value = c.value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.value, test.table_1.value)]",
          "    ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_general_ci]",
          "    │   └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.value, test.table_2.value)]",
          "    │     ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │     │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_bin]",
          "    │     │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "    │     │     └─TableFullScan 2.00 mpp[tiflash] table:a pushed down filter:empty, keep order:false",
          "    │     └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "    │       └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_2.value, collate: utf8mb4_bin]",
          "    │         └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_2.value))",
          "    │           └─TableFullScan 2.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false",
          "    └─ExchangeReceiver(Probe) 2.00 mpp[tiflash]  ",
          "      └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_general_ci]",
          "        └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "          └─TableFullScan 2.00 mpp[tiflash] table:c pushed down filter:empty, keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select /*+ agg_to_cop() */ count(*), value from table_1 group by value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2.00 mpp[tiflash]  Column#4, test.table_1.value",
          "    └─HashAgg 2.00 mpp[tiflash]  group by:test.table_1.value, funcs:count(1)->Column#4, funcs:firstrow(test.table_1.value)->test.table_1.value",
          "      └─ExchangeReceiver 2.00 mpp[tiflash]  ",
          "        └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.value, collate: utf8mb4_general_ci]",
          "          └─TableFullScan 2.00 mpp[tiflash] table:table_1 keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select /*+ agg_to_cop() */ count(*), value from table_2 group by value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2.00 mpp[tiflash]  Column#4, test.table_2.value",
          "    └─HashAgg 2.00 mpp[tiflash]  group by:test.table_2.value, funcs:count(1)->Column#4, funcs:firstrow(test.table_2.value)->test.table_2.value",
          "      └─ExchangeReceiver 2.00 mpp[tiflash]  ",
          "        └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_2.value, collate: utf8mb4_bin]",
          "          └─TableFullScan 2.00 mpp[tiflash] table:table_2 keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPWithBroadcastExchangeUnderNewCollation",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select /*+ broadcast_join(a,b) */ * from table_1 a, table_1 b where a.id = b.id",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.id, test.table_1.id)]",
          "    ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─TableFullScan 2.00 mpp[tiflash] table:a keep order:false",
          "    └─TableFullScan(Probe) 2.00 mpp[tiflash] table:b keep order:false"
        ]
      },
      {
        "SQL": "explain format = 'brief' select /*+ broadcast_join(a,b) */ * from table_1 a, table_1 b where a.value = b.value",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 2.00 mpp[tiflash]  inner join, equal:[eq(test.table_1.value, test.table_1.value)]",
          "    ├─ExchangeReceiver(Build) 2.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "    │     └─TableFullScan 2.00 mpp[tiflash] table:a pushed down filter:empty, keep order:false",
          "    └─Selection(Probe) 2.00 mpp[tiflash]  not(isnull(test.table_1.value))",
          "      └─TableFullScan 2.00 mpp[tiflash] table:b pushed down filter:empty, keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestMPPAvgRewrite",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select /*+ avg_to_cop() */ id, avg(value+1),avg(value) from table_1 group by id",
        "Plan": [
          "TableReader 2.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 2.00 mpp[tiflash]  test.table_1.id, Column#4, Column#5",
          "    └─Projection 2.00 mpp[tiflash]  div(Column#4, cast(case(eq(Column#20, 0), 1, Column#20), decimal(20,0) BINARY))->Column#4, div(Column#5, cast(case(eq(Column#21, 0), 1, Column#21), decimal(20,0) BINARY))->Column#5, test.table_1.id",
          "      └─HashAgg 2.00 mpp[tiflash]  group by:Column#34, funcs:count(Column#29)->Column#20, funcs:sum(Column#30)->Column#4, funcs:count(Column#31)->Column#21, funcs:sum(Column#32)->Column#5, funcs:firstrow(Column#33)->test.table_1.id",
          "        └─Projection 2.00 mpp[tiflash]  plus(test.table_1.value, 1)->Column#29, plus(test.table_1.value, 1)->Column#30, test.table_1.value->Column#31, test.table_1.value->Column#32, test.table_1.id->Column#33, test.table_1.id->Column#34",
          "          └─ExchangeReceiver 2.00 mpp[tiflash]  ",
          "            └─ExchangeSender 2.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.table_1.id, collate: binary]",
          "              └─TableFullScan 2.00 mpp[tiflash] table:table_1 keep order:false"
        ]
      }
    ]
  },
  {
    "Name": "TestPushDownProjectionForMPP",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ count(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#9)->Column#6",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(Column#11)->Column#9",
          "      └─Projection 10000.00 mpp[tiflash]  plus(test.t.id, 1)->Column#11",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ count(*) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#8)->Column#6",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#8",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ sum(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:sum(Column#9)->Column#6",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#11)->Column#9",
          "      └─Projection 10000.00 mpp[tiflash]  cast(plus(test.t.id, 1), decimal(20,0) BINARY)->Column#11",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ stream_agg()*/ count(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#10)->Column#6",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(Column#11)->Column#10",
          "      └─Projection 10000.00 mpp[tiflash]  plus(test.t.id, 1)->Column#11",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ stream_agg()*/ count(*) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#9)->Column#6",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#9",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ stream_agg()*/ sum(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:sum(Column#10)->Column#6",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#11)->Column#10",
          "      └─Projection 10000.00 mpp[tiflash]  cast(plus(test.t.id, 1), decimal(20,0) BINARY)->Column#11",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select B.b+A.b from (select id-2 as b from t) B join (select id-2 as b from t) A on A.b=B.b",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  plus(Column#5, Column#10)->Column#11",
          "    └─HashJoin 10000.00 mpp[tiflash]  inner join, equal:[eq(Column#5, Column#10)]",
          "      ├─ExchangeReceiver(Build) 8000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Projection 8000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#5",
          "      │     └─Selection 8000.00 mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "      │       └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─Projection(Probe) 8000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#10",
          "        └─Selection 8000.00 mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 10000.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, Column#9)]",
          "    ├─ExchangeReceiver(Build) 8000.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection 8000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#9",
          "    │     └─Selection 8000.00 mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "    │       └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t left join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 10000.00 mpp[tiflash]  left outer join, equal:[eq(test.t.id, Column#9)]",
          "    ├─ExchangeReceiver(Build) 8000.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection 8000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#9",
          "    │     └─Selection 8000.00 mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "    │       └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t right join (select id-2 as b from t) A on A.b=t.id",
        "Plan": [
          "TableReader 12487.50 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 12487.50 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 12487.50 mpp[tiflash]  right outer join, equal:[eq(test.t.id, Column#9)]",
          "    ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Projection(Probe) 10000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#9",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select A.b, B.b from (select id-2 as b from t) B join (select id-2 as b from t) A on A.b=B.b",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  Column#10, Column#5",
          "    └─HashJoin 10000.00 mpp[tiflash]  inner join, equal:[eq(Column#5, Column#10)]",
          "      ├─ExchangeReceiver(Build) 8000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Projection 8000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#5",
          "      │     └─Selection 8000.00 mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "      │       └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─Projection(Probe) 8000.00 mpp[tiflash]  minus(test.t.id, 2)->Column#10",
          "        └─Selection 8000.00 mpp[tiflash]  not(isnull(minus(test.t.id, 2)))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select id from t as A where exists (select 1 from t where t.id=A.id)",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 7992.00 mpp[tiflash]  semi join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:A pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select id from t as A where not exists (select 1 from t where t.id=A.id)",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 8000.00 mpp[tiflash]  anti semi join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─TableFullScan(Probe) 10000.00 mpp[tiflash] table:A keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select b*2, id from (select avg(value+2) as b, id from t group by id) C order by id",
        "Plan": [
          "Sort 8000.00 root  test.t.id",
          "└─TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Projection 8000.00 mpp[tiflash]  mul(Column#5, 2)->Column#6, test.t.id",
          "      └─Projection 8000.00 mpp[tiflash]  div(Column#5, cast(case(eq(Column#20, 0), 1, Column#20), decimal(20,0) BINARY))->Column#5, test.t.id",
          "        └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#21)->Column#20, funcs:sum(Column#22)->Column#5, funcs:firstrow(test.t.id)->test.t.id",
          "          └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "            └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "              └─HashAgg 8000.00 mpp[tiflash]  group by:Column#26, funcs:count(Column#24)->Column#21, funcs:sum(Column#25)->Column#22",
          "                └─Projection 10000.00 mpp[tiflash]  plus(test.t.value, 2)->Column#24, plus(test.t.value, 2)->Column#25, test.t.id->Column#26",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' SELECT FROM_UNIXTIME(name,'%Y-%m-%d')  FROM t;",
        "Plan": [
          "TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 10000.00 mpp[tiflash]  from_unixtime(cast(test.t.name, decimal(65,6) BINARY), %Y-%m-%d)->Column#5",
          "    └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestPushDownSelectionForMPP",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ count(*) c, id from t group by id having id >c",
        "Plan": [
          "TableReader 6400.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Selection 6400.00 mpp[tiflash]  gt(test.t.id, Column#5)",
          "    └─Projection 8000.00 mpp[tiflash]  Column#5, test.t.id",
          "      └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#10)->Column#5, funcs:firstrow(test.t.id)->test.t.id",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#10",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t where id < 2",
        "Plan": [
          "TableReader 3323.33 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 3323.33 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Selection 3323.33 mpp[tiflash]  lt(test.t.id, 2)",
          "    └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMppUnionAll",
    "Cases": [
      {
        "SQL": "explain format = 'brief' select count(*) from (select a , b from t union all select a , b from t1) tt",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#12)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#12",
          "      └─Union 20000.00 mpp[tiflash]  ",
          "        ├─Projection 10000.00 mpp[tiflash]  cast(test.t.a, int(11) BINARY)->Column#9, test.t.b->Column#10",
          "        │ └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─Projection 10000.00 mpp[tiflash]  test.t1.a->Column#9, cast(test.t1.b, int(11) BINARY)->Column#10",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from (select a , b from t union all select a , b from t1 union all select a, b from t where false) tt",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#16)->Column#15",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#16",
          "      └─Union 20000.00 mpp[tiflash]  ",
          "        ├─Projection 10000.00 mpp[tiflash]  cast(test.t.a, int(11) BINARY)->Column#13, test.t.b->Column#14",
          "        │ └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─Projection 10000.00 mpp[tiflash]  test.t1.a->Column#13, cast(test.t1.b, int(11) BINARY)->Column#14",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from (select a , b from t union all select a , c from t1) tt",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#14)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#14",
          "      └─Union 20000.00 mpp[tiflash]  ",
          "        ├─Projection 10000.00 mpp[tiflash]  cast(Column#9, int(11) BINARY)->Column#9, Column#10",
          "        │ └─Projection 10000.00 mpp[tiflash]  test.t.a->Column#9, cast(test.t.b, double BINARY)->Column#10",
          "        │   └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "        └─Projection 10000.00 mpp[tiflash]  test.t1.a->Column#9, cast(test.t1.c, double BINARY)->Column#10",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from (select a , b from t union all select a , c from t1 where false) tt",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#14)->Column#11",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(1)->Column#14",
          "      └─Union 10000.00 mpp[tiflash]  ",
          "        └─Projection 10000.00 mpp[tiflash]  cast(Column#9, int(11) BINARY)->Column#9, Column#10",
          "          └─Projection 10000.00 mpp[tiflash]  test.t.a->Column#9, cast(test.t.b, double BINARY)->Column#10",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "explain format = 'brief' select count(*) from (select a , b from t where false union all select a , c from t1 where false) tt",
        "Plan": [
          "StreamAgg 1.00 root  funcs:count(1)->Column#11",
          "└─Union 0.00 root  ",
          "  ├─Projection 0.00 root  test.t.a->Column#9, cast(test.t.b, double BINARY)->Column#10",
          "  │ └─TableDual 0.00 root  rows:0",
          "  └─Projection 0.00 root  test.t1.a->Column#9, cast(test.t1.c, double BINARY)->Column#10",
          "    └─TableDual 0.00 root  rows:0"
        ]
      }
    ]
  },
  {
    "Name": "TestMppJoinDecimal",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select t1.c1, t1.c2, t2.c1, t2.c2, t2.c3 from t t1 join t t2 on t1.c1 + 1 = t2.c2 - 10 and t1.c1 * 3 = t2.c3 / 2",
        "Plan": [
          "TableReader 12500.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 12500.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 12500.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c1, test.t.c2, test.t.c3",
          "    └─HashJoin 12500.00 mpp[tiflash]  inner join, equal:[eq(Column#13, Column#14) eq(Column#15, Column#16)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#23, collate: binary], [name: Column#24, collate: binary]",
          "      │   └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, Column#13, Column#15, cast(Column#13, decimal(13,8) BINARY)->Column#23, cast(Column#15, decimal(10,5) BINARY)->Column#24",
          "      │     └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, mul(test.t.c1, 3)->Column#13, plus(test.t.c1, 1)->Column#15",
          "      │       └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) 10000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#14, collate: binary], [name: Column#16, collate: binary]",
          "          └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, div(test.t.c3, 2)->Column#14, minus(test.t.c2, 10)->Column#16",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select c1, c2, c5, count(*) c from t group by c1, c2, c5) t1 join (select c1, c2, c3, count(*) c from t group by c1, c2, c3) t2 on t1.c1 = t2.c2 and t1.c2 = t2.c3 and t1.c5 = t2.c1",
        "Plan": [
          "TableReader 7976.02 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7976.02 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 7976.02 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c5, Column#7, test.t.c1, test.t.c2, test.t.c3, Column#14",
          "    └─HashJoin 7976.02 mpp[tiflash]  inner join, equal:[eq(test.t.c1, test.t.c2) eq(test.t.c2, test.t.c3) eq(test.t.c5, test.t.c1)]",
          "      ├─ExchangeReceiver(Build) 7976.02 mpp[tiflash]  ",
          "      │ └─ExchangeSender 7976.02 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c1, collate: binary], [name: Column#58, collate: binary], [name: test.t.c5, collate: binary]",
          "      │   └─Projection 7976.02 mpp[tiflash]  Column#7, test.t.c1, test.t.c2, test.t.c5, cast(test.t.c2, decimal(10,5))->Column#58",
          "      │     └─Projection 7976.02 mpp[tiflash]  Column#7, test.t.c1, test.t.c2, test.t.c5",
          "      │       └─HashAgg 7976.02 mpp[tiflash]  group by:test.t.c1, test.t.c2, test.t.c5, funcs:sum(Column#15)->Column#7, funcs:firstrow(test.t.c1)->test.t.c1, funcs:firstrow(test.t.c2)->test.t.c2, funcs:firstrow(test.t.c5)->test.t.c5",
          "      │         └─ExchangeReceiver 7976.02 mpp[tiflash]  ",
          "      │           └─ExchangeSender 7976.02 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c1, collate: binary], [name: test.t.c2, collate: binary], [name: test.t.c5, collate: binary]",
          "      │             └─HashAgg 7976.02 mpp[tiflash]  group by:test.t.c1, test.t.c2, test.t.c5, funcs:count(1)->Column#15",
          "      │               └─Selection 9970.03 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2)), not(isnull(test.t.c5))",
          "      │                 └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) 7984.01 mpp[tiflash]  ",
          "        └─ExchangeSender 7984.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c2, collate: binary], [name: Column#59, collate: binary], [name: Column#60, collate: binary]",
          "          └─Projection 7984.01 mpp[tiflash]  Column#14, test.t.c1, test.t.c2, test.t.c3, cast(test.t.c3, decimal(10,5))->Column#59, cast(test.t.c1, decimal(40,20))->Column#60",
          "            └─Projection 7984.01 mpp[tiflash]  Column#14, test.t.c1, test.t.c2, test.t.c3",
          "              └─HashAgg 7984.01 mpp[tiflash]  group by:test.t.c1, test.t.c2, test.t.c3, funcs:sum(Column#23)->Column#14, funcs:firstrow(test.t.c1)->test.t.c1, funcs:firstrow(test.t.c2)->test.t.c2, funcs:firstrow(test.t.c3)->test.t.c3",
          "                └─ExchangeReceiver 7984.01 mpp[tiflash]  ",
          "                  └─ExchangeSender 7984.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c2, collate: binary], [name: test.t.c3, collate: binary], [name: test.t.c1, collate: binary]",
          "                    └─HashAgg 7984.01 mpp[tiflash]  group by:test.t.c1, test.t.c2, test.t.c3, funcs:count(1)->Column#23",
          "                      └─Selection 9980.01 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2))",
          "                        └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t t1 join t t2 on t1.c1 = t2.c2 and t1.c2 = t2.c2 and t1.c3 = t2.c3 and t1.c4 = t2.c4 and t1.c5 = t2.c5",
        "Plan": [
          "TableReader 12462.54 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 12462.54 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 12462.54 mpp[tiflash]  inner join, equal:[eq(test.t.c1, test.t.c2) eq(test.t.c2, test.t.c2) eq(test.t.c3, test.t.c3) eq(test.t.c4, test.t.c4) eq(test.t.c5, test.t.c5)]",
          "    ├─ExchangeReceiver(Build) 9970.03 mpp[tiflash]  ",
          "    │ └─ExchangeSender 9970.03 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c1, collate: binary], [name: test.t.c2, collate: binary], [name: test.t.c3, collate: binary], [name: test.t.c4, collate: binary], [name: test.t.c5, collate: binary]",
          "    │   └─Selection 9970.03 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2)), not(isnull(test.t.c5))",
          "    │     └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) 9980.01 mpp[tiflash]  ",
          "      └─ExchangeSender 9980.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c2, collate: binary], [name: test.t.c2, collate: binary], [name: test.t.c3, collate: binary], [name: test.t.c4, collate: binary], [name: test.t.c5, collate: binary]",
          "        └─Selection 9980.01 mpp[tiflash]  not(isnull(test.t.c2)), not(isnull(test.t.c5))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t t1 join t t2 on t1.c1 = t2.c2 and t1.c2 = t2.c3 and t1.c3 = t2.c1 and t1.c4 = t2.c3 and t1.c1 = t2.c5",
        "Plan": [
          "TableReader 12462.54 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 12462.54 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 12462.54 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5",
          "    └─HashJoin 12462.54 mpp[tiflash]  inner join, equal:[eq(test.t.c2, test.t.c1) eq(test.t.c3, test.t.c2) eq(test.t.c1, test.t.c3) eq(test.t.c3, test.t.c4) eq(test.t.c5, test.t.c1)]",
          "      ├─ExchangeReceiver(Build) 9970.03 mpp[tiflash]  ",
          "      │ └─ExchangeSender 9970.03 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c2, collate: binary], [name: Column#18, collate: binary], [name: Column#20, collate: binary], [name: test.t.c3, collate: binary], [name: test.t.c5, collate: binary]",
          "      │   └─Projection 9970.03 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, cast(test.t.c3, decimal(10,5))->Column#18, cast(test.t.c1, decimal(10,5))->Column#20",
          "      │     └─Selection 9970.03 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2)), not(isnull(test.t.c5))",
          "      │       └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) 9980.01 mpp[tiflash]  ",
          "        └─ExchangeSender 9980.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c1, collate: binary], [name: Column#19, collate: binary], [name: Column#21, collate: binary], [name: test.t.c4, collate: binary], [name: Column#22, collate: binary]",
          "          └─Projection 9980.01 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, cast(test.t.c2, decimal(10,5))->Column#19, cast(test.t.c3, decimal(10,5))->Column#21, cast(test.t.c1, decimal(40,20))->Column#22",
          "            └─Selection 9980.01 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2))",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t t1 join t t2 on t1.c1 + t1.c2 = t2.c2 / t2.c3",
        "Plan": [
          "TableReader 12500.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 12500.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 12500.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5",
          "    └─HashJoin 12500.00 mpp[tiflash]  inner join, equal:[eq(Column#13, Column#14)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#18, collate: binary]",
          "      │   └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, Column#13, cast(Column#13, decimal(17,9) BINARY)->Column#18",
          "      │     └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, plus(test.t.c1, test.t.c2)->Column#13",
          "      │       └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) 10000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#14, collate: binary]",
          "          └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, div(test.t.c2, test.t.c3)->Column#14",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t2 keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t t1 where exists (select * from t t2 where t1.c1 = t2.c2 and t1.c2 = t2.c3 and t1.c3 = t2.c1 and t1.c4 = t2.c3 and t1.c1 = t2.c5)",
        "Plan": [
          "TableReader 7984.01 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7984.01 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 7984.01 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5",
          "    └─HashJoin 7984.01 mpp[tiflash]  semi join, equal:[eq(test.t.c1, test.t.c2) eq(test.t.c2, test.t.c3) eq(test.t.c3, test.t.c1) eq(test.t.c4, test.t.c3) eq(test.t.c1, test.t.c5)]",
          "      ├─ExchangeReceiver(Build) 9970.03 mpp[tiflash]  ",
          "      │ └─ExchangeSender 9970.03 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c2, collate: binary], [name: Column#19, collate: binary], [name: Column#21, collate: binary], [name: test.t.c3, collate: binary], [name: test.t.c5, collate: binary]",
          "      │   └─Projection 9970.03 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c5, cast(test.t.c3, decimal(10,5))->Column#19, cast(test.t.c1, decimal(10,5))->Column#21",
          "      │     └─Selection 9970.03 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2)), not(isnull(test.t.c5))",
          "      │       └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─ExchangeReceiver(Probe) 9980.01 mpp[tiflash]  ",
          "        └─ExchangeSender 9980.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c1, collate: binary], [name: Column#18, collate: binary], [name: Column#20, collate: binary], [name: test.t.c4, collate: binary], [name: Column#22, collate: binary]",
          "          └─Projection 9980.01 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, cast(test.t.c2, decimal(10,5))->Column#18, cast(test.t.c3, decimal(10,5))->Column#20, cast(test.t.c1, decimal(40,20))->Column#22",
          "            └─Selection 9980.01 mpp[tiflash]  not(isnull(test.t.c1)), not(isnull(test.t.c2))",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t t1 left join t t2 on t1.c1 = t2.c2 join t t3 on t2.c5 = t3.c3 right join t t4 on t3.c3 = t4.c4 ",
        "Plan": [
          "TableReader 19492.21 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 19492.21 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 19492.21 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5",
          "    └─HashJoin 19492.21 mpp[tiflash]  right outer join, equal:[eq(test.t.c3, test.t.c4)]",
          "      ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#29, collate: binary]",
          "      │   └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, cast(test.t.c4, decimal(40,20))->Column#29",
          "      │     └─TableFullScan 10000.00 mpp[tiflash] table:t4 keep order:false, stats:pseudo",
          "      └─Projection(Probe) 15593.77 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5",
          "        └─HashJoin 15593.77 mpp[tiflash]  inner join, equal:[eq(test.t.c5, test.t.c3)]",
          "          ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#25, collate: binary]",
          "          │   └─Projection 10000.00 mpp[tiflash]  test.t.c1, test.t.c2, test.t.c3, test.t.c4, test.t.c5, cast(test.t.c3, decimal(40,20))->Column#25",
          "          │     └─TableFullScan 10000.00 mpp[tiflash] table:t3 keep order:false, stats:pseudo",
          "          └─ExchangeReceiver(Probe) 12475.01 mpp[tiflash]  ",
          "            └─ExchangeSender 12475.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c5, collate: binary]",
          "              └─HashJoin 12475.01 mpp[tiflash]  inner join, equal:[eq(test.t.c2, test.t.c1)]",
          "                ├─ExchangeReceiver(Build) 9980.01 mpp[tiflash]  ",
          "                │ └─ExchangeSender 9980.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c2, collate: binary]",
          "                │   └─Selection 9980.01 mpp[tiflash]  not(isnull(test.t.c2)), not(isnull(test.t.c5))",
          "                │     └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo",
          "                └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "                  └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c1, collate: binary]",
          "                    └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.c1))",
          "                      └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' SELECT STRAIGHT_JOIN t1 . col_varchar_64 , t1 . col_char_64_not_null FROM tt AS t1 INNER JOIN( tt AS t2 JOIN tt AS t3 ON(t3 . col_decimal_30_10_key = t2 . col_tinyint)) ON(t3 . col_varchar_64 = t2 . col_varchar_key) WHERE t3 . col_varchar_64 = t1 . col_char_64_not_null GROUP BY 1 , 2",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  test.tt.col_varchar_64, test.tt.col_char_64_not_null",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.tt.col_char_64_not_null, test.tt.col_varchar_64, funcs:firstrow(test.tt.col_varchar_64)->test.tt.col_varchar_64, funcs:firstrow(test.tt.col_char_64_not_null)->test.tt.col_char_64_not_null",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.col_varchar_64, collate: utf8mb4_bin], [name: test.tt.col_char_64_not_null, collate: utf8mb4_bin]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.tt.col_char_64_not_null, test.tt.col_varchar_64, ",
          "            └─HashJoin 15609.38 mpp[tiflash]  inner join, equal:[eq(test.tt.col_char_64_not_null, test.tt.col_varchar_64)]",
          "              ├─ExchangeReceiver(Build) 10000.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.col_char_64_not_null, collate: utf8mb4_bin]",
          "              │   └─TableFullScan 10000.00 mpp[tiflash] table:t1 keep order:false, stats:pseudo",
          "              └─HashJoin(Probe) 12487.50 mpp[tiflash]  inner join, equal:[eq(test.tt.col_varchar_key, test.tt.col_varchar_64) eq(Column#19, test.tt.col_decimal_30_10_key)]",
          "                ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "                │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.col_varchar_key, collate: utf8mb4_bin]",
          "                │   └─Projection 9990.00 mpp[tiflash]  test.tt.col_varchar_key, cast(test.tt.col_tinyint, decimal(3,0) BINARY)->Column#19",
          "                │     └─Selection 9990.00 mpp[tiflash]  not(isnull(test.tt.col_varchar_key))",
          "                │       └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo",
          "                └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "                  └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.col_varchar_64, collate: utf8mb4_bin]",
          "                    └─Selection 9990.00 mpp[tiflash]  not(isnull(test.tt.col_varchar_64))",
          "                      └─TableFullScan 10000.00 mpp[tiflash] table:t3 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMppJoinExchangeColumnPrune",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select * from tt t1 where exists (select * from t t2 where t1.b1 = t2.c3 and t2.c1 < t2.c2)",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 7992.00 mpp[tiflash]  semi join, equal:[eq(test.tt.b1, test.t.c3)]",
          "    ├─ExchangeReceiver(Build) 8000.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c3, collate: binary]",
          "    │   └─Projection 8000.00 mpp[tiflash]  test.t.c3",
          "    │     └─Selection 8000.00 mpp[tiflash]  lt(test.t.c1, test.t.c2)",
          "    │       └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "      └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.b1, collate: binary]",
          "        └─Selection 9990.00 mpp[tiflash]  not(isnull(test.tt.b1))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMppFineGrainedJoinAndAgg",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select * from tt t1 where exists (select * from t t2 where t1.b1 = t2.c3 and t2.c1 < t2.c2)",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 7992.00 mpp[tiflash]  semi join, equal:[eq(test.tt.b1, test.t.c3)], stream_count: 8",
          "    ├─ExchangeReceiver(Build) 8000.00 mpp[tiflash]  stream_count: 8",
          "    │ └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.c3, collate: binary], stream_count: 8",
          "    │   └─Projection 8000.00 mpp[tiflash]  test.t.c3",
          "    │     └─Selection 8000.00 mpp[tiflash]  lt(test.t.c1, test.t.c2)",
          "    │       └─TableFullScan 10000.00 mpp[tiflash] table:t2 pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "      └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.b1, collate: binary]",
          "        └─Selection 9990.00 mpp[tiflash]  not(isnull(test.tt.b1))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*) from tt group by b1",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#3",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.tt.b1, funcs:sum(Column#7)->Column#3, stream_count: 8",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  stream_count: 8",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.tt.b1, collate: binary], stream_count: 8",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.tt.b1, funcs:count(1)->Column#7",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:tt keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMppVersion",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select count(*) as cnt from t group by a, b",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:sum(Column#7)->Column#4",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.a, collate: binary], [name: test.t.b, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:count(1)->Column#7",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "set mpp_exchange_compression_mode = UNSPECIFIED",
        "Plan": null,
        "Warn": null
      },
      {
        "SQL": "desc format = 'brief' select count(*) as cnt from t group by a, b",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:sum(Column#7)->Column#4",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.a, collate: binary], [name: test.t.b, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:count(1)->Column#7",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "set mpp_version = 0",
        "Plan": null,
        "Warn": null
      },
      {
        "SQL": "set mpp_exchange_compression_mode = fast",
        "Plan": null,
        "Warn": null
      },
      {
        "SQL": "desc format = 'brief' select count(*) as cnt from t group by a, b",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 0, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:sum(Column#7)->Column#4",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Hash Cols: [name: test.t.a, collate: binary], [name: test.t.b, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:count(1)->Column#7",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      },
      {
        "SQL": "set mpp_version = -1",
        "Plan": null,
        "Warn": null
      },
      {
        "SQL": "set mpp_exchange_compression_mode = high_compression",
        "Plan": null,
        "Warn": null
      },
      {
        "SQL": "desc format = 'brief' select count(*) as cnt from t group by a, b",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:sum(Column#7)->Column#4",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: HIGH_COMPRESSION, Hash Cols: [name: test.t.a, collate: binary], [name: test.t.b, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.a, test.t.b, funcs:count(1)->Column#7",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ],
        "Warn": null
      }
    ]
  },
  {
    "Name": "TestPushDownAggForMPP",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ count(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#8)->Column#5",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(Column#10)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  plus(test.t.id, 1)->Column#10",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ count(*) from  (select id+1 from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#7)->Column#5",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#7",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+ hash_agg()*/ sum(b) from  (select id + 1 as b from t)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:sum(Column#8)->Column#5",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#10)->Column#8",
          "      └─Projection 10000.00 mpp[tiflash]  cast(plus(test.t.id, 1), decimal(20,0) BINARY)->Column#10",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*) from t",
        "Plan": [
          "HashAgg 1.00 root  funcs:count(Column#6)->Column#4",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#6",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*), id from t group by id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4, test.t.id",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#11)->Column#4, funcs:firstrow(test.t.id)->test.t.id",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#11",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*), id + 1 from t group by id + 1",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4, plus(test.t.id, 1)->Column#5",
          "    └─Projection 8000.00 mpp[tiflash]  Column#4, test.t.id",
          "      └─HashAgg 8000.00 mpp[tiflash]  group by:Column#16, funcs:sum(Column#17)->Column#4, funcs:firstrow(Column#18)->test.t.id",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: Column#16, collate: binary]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:Column#20, funcs:count(1)->Column#17, funcs:firstrow(Column#19)->Column#18",
          "              └─Projection 10000.00 mpp[tiflash]  test.t.id->Column#19, plus(test.t.id, 1)->Column#20",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select count(*), id from t group by id) as A on A.id = t.id",
        "Plan": [
          "TableReader 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─Projection(Build) 7992.00 mpp[tiflash]  Column#7, test.t.id",
          "    │ └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#8)->Column#7, funcs:firstrow(test.t.id)->test.t.id",
          "    │   └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │     └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │       └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#8",
          "    │         └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │           └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "      └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "        └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select /*+ hash_agg()*/  count(*) as a from t) as A on A.a = t.id",
        "Plan": [
          "HashJoin 1.25 root  inner join, equal:[eq(test.t.id, Column#7)]",
          "├─HashAgg(Build) 1.00 root  funcs:count(Column#11)->Column#7",
          "│ └─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "│   └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "│     └─HashAgg 1.00 mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#11",
          "│       └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select avg(value) as b,id from t group by id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  div(Column#4, cast(case(eq(Column#17, 0), 1, Column#17), decimal(20,0) BINARY))->Column#4, test.t.id",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#18)->Column#17, funcs:sum(Column#19)->Column#4, funcs:firstrow(test.t.id)->test.t.id",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(test.t.value)->Column#18, funcs:sum(test.t.value)->Column#19",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+hash_agg()*/ sum(b) from (select avg(value) as b, id from t group by id)A",
        "Plan": [
          "HashAgg 1.00 root  funcs:sum(Column#18)->Column#5",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#4)->Column#18",
          "      └─Projection 8000.00 mpp[tiflash]  div(Column#4, cast(case(eq(Column#15, 0), 1, Column#15), decimal(20,0) BINARY))->Column#4",
          "        └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#16)->Column#15, funcs:sum(Column#17)->Column#4",
          "          └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "            └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "              └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(test.t.value)->Column#16, funcs:sum(test.t.value)->Column#17",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select id from t group by id having avg(value)>0",
        "Plan": [
          "TableReader 6400.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 6400.00 mpp[tiflash]  test.t.id",
          "    └─Selection 6400.00 mpp[tiflash]  gt(Column#4, 0)",
          "      └─Projection 8000.00 mpp[tiflash]  div(Column#4, cast(case(eq(Column#18, 0), 1, Column#18), decimal(20,0) BINARY))->Column#4, test.t.id",
          "        └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#19)->Column#18, funcs:sum(Column#20)->Column#4, funcs:firstrow(test.t.id)->test.t.id",
          "          └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "            └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "              └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(test.t.value)->Column#19, funcs:sum(test.t.value)->Column#20",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select avg(value),id from t group by id having avg(value)>0",
        "Plan": [
          "TableReader 6400.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Selection 6400.00 mpp[tiflash]  gt(Column#4, 0)",
          "    └─Projection 8000.00 mpp[tiflash]  div(Column#4, cast(case(eq(Column#19, 0), 1, Column#19), decimal(20,0) BINARY))->Column#4, test.t.id",
          "      └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#20)->Column#19, funcs:sum(Column#21)->Column#4, funcs:firstrow(test.t.id)->test.t.id",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(test.t.value)->Column#20, funcs:sum(test.t.value)->Column#21",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select avg(value) +1,id from t group by id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  plus(Column#4, 1)->Column#5, test.t.id",
          "    └─Projection 8000.00 mpp[tiflash]  div(Column#4, cast(case(eq(Column#19, 0), 1, Column#19), decimal(20,0) BINARY))->Column#4, test.t.id",
          "      └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#20)->Column#19, funcs:sum(Column#21)->Column#4, funcs:firstrow(test.t.id)->test.t.id",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(test.t.value)->Column#20, funcs:sum(test.t.value)->Column#21",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select sum(b) from (select t.id, t1.id as b from t join t t1 on t.id=t1.id)A group by id",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 7992.00 mpp[tiflash]  Column#7",
          "    └─HashAgg 7992.00 mpp[tiflash]  group by:Column#12, funcs:sum(Column#11)->Column#7",
          "      └─Projection 12487.50 mpp[tiflash]  cast(test.t.id, decimal(10,0) BINARY)->Column#11, test.t.id->Column#12",
          "        └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "          ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "          │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "          └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "            └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "              └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select id from t group by id) C join (select sum(b),id from (select t.id, t1.id as b from t join (select id, count(*) as c from t group by id) t1 on t.id=t1.id)A group by id)B on C.id=b.id",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 7992.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─Projection(Build) 7992.00 mpp[tiflash]  test.t.id",
          "    │ └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:firstrow(test.t.id)->test.t.id",
          "    │   └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │     └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │       └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, ",
          "    │         └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │           └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Projection(Probe) 7992.00 mpp[tiflash]  Column#11, test.t.id",
          "      └─HashAgg 7992.00 mpp[tiflash]  group by:Column#39, funcs:sum(Column#37)->Column#11, funcs:firstrow(Column#38)->test.t.id",
          "        └─Projection 9990.00 mpp[tiflash]  cast(test.t.id, decimal(10,0) BINARY)->Column#37, test.t.id->Column#38, test.t.id->Column#39",
          "          └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "            ├─Projection(Build) 7992.00 mpp[tiflash]  test.t.id, Column#13",
          "            │ └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:firstrow(test.t.id)->test.t.id, funcs:sum(Column#17)->Column#13",
          "            │   └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "            │     └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "            │       └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#17",
          "            │         └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "            │           └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "            └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "              └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "                └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(distinct value),id from t group by id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 8000.00 mpp[tiflash]  Column#4, test.t.id",
          "    └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(distinct test.t.value)->Column#4, funcs:firstrow(test.t.id)->test.t.id",
          "      └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "        └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.value, ",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(distinct value),sum(distinct value),id from t group by id",
        "Plan": [
          "HashAgg 8000.00 root  group by:test.t.id, funcs:count(distinct test.t.value)->Column#4, funcs:sum(distinct test.t.value)->Column#5, funcs:firstrow(test.t.id)->test.t.id",
          "└─TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select count(distinct value), id from t group by id) as A on A.id = t.id",
        "Plan": [
          "TableReader 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─Projection(Build) 7992.00 mpp[tiflash]  Column#7, test.t.id",
          "    │ └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:count(distinct test.t.value)->Column#7, funcs:firstrow(test.t.id)->test.t.id",
          "    │   └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │     └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │       └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, test.t.value, ",
          "    │         └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │           └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "      └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "        └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select count(1/value), id from t group by id) as A on A.id = t.id",
        "Plan": [
          "TableReader 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─Projection(Build) 7992.00 mpp[tiflash]  Column#7, test.t.id",
          "    │ └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#8)->Column#7, funcs:firstrow(test.t.id)->test.t.id",
          "    │   └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │     └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │       └─HashAgg 7992.00 mpp[tiflash]  group by:Column#19, funcs:count(Column#18)->Column#8",
          "    │         └─Projection 9990.00 mpp[tiflash]  div(1, test.t.value)->Column#18, test.t.id->Column#19",
          "    │           └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │             └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─ExchangeReceiver(Probe) 9990.00 mpp[tiflash]  ",
          "      └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "        └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+hash_agg()*/ sum(id) from (select value, id from t where id > value group by id, value)A group by value /*the exchange should have only one partition column: test.t.value*/",
        "Plan": [
          "TableReader 6400.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 6400.00 mpp[tiflash]  Column#4",
          "    └─HashAgg 6400.00 mpp[tiflash]  group by:Column#21, funcs:sum(Column#20)->Column#4",
          "      └─Projection 6400.00 mpp[tiflash]  cast(test.t.id, decimal(10,0) BINARY)->Column#20, test.t.value->Column#21",
          "        └─Projection 6400.00 mpp[tiflash]  test.t.id, test.t.value",
          "          └─HashAgg 6400.00 mpp[tiflash]  group by:test.t.id, test.t.value, funcs:firstrow(test.t.id)->test.t.id, funcs:firstrow(test.t.value)->test.t.value",
          "            └─ExchangeReceiver 6400.00 mpp[tiflash]  ",
          "              └─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.value, collate: binary]",
          "                └─HashAgg 6400.00 mpp[tiflash]  group by:test.t.id, test.t.value, ",
          "                  └─Selection 8000.00 mpp[tiflash]  gt(cast(test.t.id, decimal(10,0) BINARY), test.t.value)",
          "                    └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select /*+hash_agg()*/ sum(B.value) from t as B where B.id+1 > (select count(*) from t where t.id= B.id and t.value=B.value) group by B.id /*the exchange should have only one partition column: test.t.id*/",
        "Plan": [
          "TableReader 6400.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 6400.00 mpp[tiflash]  Column#8",
          "    └─HashAgg 6400.00 mpp[tiflash]  group by:test.t.id, funcs:sum(test.t.value)->Column#8",
          "      └─Selection 8000.00 mpp[tiflash]  gt(plus(test.t.id, 1), ifnull(Column#7, 0))",
          "        └─HashJoin 10000.00 mpp[tiflash]  left outer join, equal:[eq(test.t.id, test.t.id) eq(test.t.value, test.t.value)]",
          "          ├─Projection(Build) 7984.01 mpp[tiflash]  Column#7, test.t.id, test.t.value",
          "          │ └─HashAgg 7984.01 mpp[tiflash]  group by:test.t.id, test.t.value, funcs:sum(Column#24)->Column#7, funcs:firstrow(test.t.id)->test.t.id, funcs:firstrow(test.t.value)->test.t.value",
          "          │   └─ExchangeReceiver 7984.01 mpp[tiflash]  ",
          "          │     └─ExchangeSender 7984.01 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "          │       └─HashAgg 7984.01 mpp[tiflash]  group by:test.t.id, test.t.value, funcs:count(1)->Column#24",
          "          │         └─Selection 9980.01 mpp[tiflash]  not(isnull(test.t.id)), not(isnull(test.t.value))",
          "          │           └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "          └─ExchangeReceiver(Probe) 10000.00 mpp[tiflash]  ",
          "            └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:B keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(distinct value) from t",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#4",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#6)->Column#4",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "          └─HashAgg 1.00 mpp[tiflash]  funcs:count(distinct test.t.value)->Column#6",
          "            └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "              └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.value, collate: binary]",
          "                └─HashAgg 1.00 mpp[tiflash]  group by:test.t.value, ",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(distinct x ) from (select count(distinct value) x from t) t",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#5",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:count(distinct Column#4)->Column#5",
          "      └─Projection 1.00 mpp[tiflash]  Column#4",
          "        └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#7)->Column#4",
          "          └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "            └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "              └─HashAgg 1.00 mpp[tiflash]  funcs:count(distinct test.t.value)->Column#7",
          "                └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "                  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.value, collate: binary]",
          "                    └─HashAgg 1.00 mpp[tiflash]  group by:test.t.value, ",
          "                      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(distinct value), count(value), avg(value) from t",
        "Plan": [
          "TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 1.00 mpp[tiflash]  Column#4, Column#5, div(Column#6, cast(case(eq(Column#15, 0), 1, Column#15), decimal(20,0) BINARY))->Column#6",
          "    └─HashAgg 1.00 mpp[tiflash]  funcs:sum(Column#19)->Column#4, funcs:sum(Column#20)->Column#5, funcs:sum(Column#21)->Column#15, funcs:sum(Column#22)->Column#6",
          "      └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "        └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough, Compression: FAST",
          "          └─HashAgg 1.00 mpp[tiflash]  funcs:count(distinct test.t.value)->Column#19, funcs:sum(Column#16)->Column#20, funcs:sum(Column#17)->Column#21, funcs:sum(Column#18)->Column#22",
          "            └─ExchangeReceiver 1.00 mpp[tiflash]  ",
          "              └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.value, collate: binary]",
          "                └─HashAgg 1.00 mpp[tiflash]  group by:test.t.value, funcs:count(test.t.value)->Column#16, funcs:count(test.t.value)->Column#17, funcs:sum(test.t.value)->Column#18",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestMppAggTopNWithJoin",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select * from t join ( select count(*), id from t group by id) as A on A.id = t.id",
        "Plan": [
          "TableReader 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) 7992.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection 7992.00 mpp[tiflash]  Column#7, test.t.id",
          "    │     └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#8)->Column#7, funcs:firstrow(test.t.id)->test.t.id",
          "    │       └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │         └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │           └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#8",
          "    │             └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │               └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select count(*)+id as v from t group by id) as A on A.v = t.id",
        "Plan": [
          "TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 8000.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, Column#8)]",
          "    ├─ExchangeReceiver(Build) 6400.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 6400.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection 6400.00 mpp[tiflash]  plus(Column#7, test.t.id)->Column#8",
          "    │     └─Selection 6400.00 mpp[tiflash]  not(isnull(plus(Column#7, test.t.id)))",
          "    │       └─Projection 8000.00 mpp[tiflash]  Column#7, test.t.id",
          "    │         └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#11)->Column#7, funcs:firstrow(test.t.id)->test.t.id",
          "    │           └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "    │             └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │               └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#11",
          "    │                 └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select count(*) as v, id from t group by value,id having value+v <10) as A on A.id = t.id",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 7992.00 mpp[tiflash]  test.t.id, test.t.value, Column#7, test.t.id",
          "    └─HashJoin 7992.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "      ├─ExchangeReceiver(Build) 6393.60 mpp[tiflash]  ",
          "      │ └─ExchangeSender 6393.60 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 6393.60 mpp[tiflash]  lt(plus(test.t.value, cast(Column#7, decimal(20,0) BINARY)), 10)",
          "      │     └─Projection 7992.00 mpp[tiflash]  Column#7, test.t.id, test.t.value",
          "      │       └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, test.t.value, funcs:sum(Column#10)->Column#7, funcs:firstrow(test.t.id)->test.t.id, funcs:firstrow(test.t.value)->test.t.value",
          "      │         └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "      │           └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.value, collate: binary], [name: test.t.id, collate: binary]",
          "      │             └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, test.t.value, funcs:count(1)->Column#10",
          "      │               └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      │                 └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join ( select /*+ hash_agg()*/  count(*) as a from t) as A on A.a = t.id",
        "Plan": [
          "HashJoin 1.25 root  inner join, equal:[eq(test.t.id, Column#7)]",
          "├─HashAgg(Build) 1.00 root  funcs:count(Column#10)->Column#7",
          "│ └─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "│   └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "│     └─HashAgg 1.00 mpp[tiflash]  funcs:count(test.t._tidb_rowid)->Column#10",
          "│       └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "└─TableReader(Probe) 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select sum(b) from (select t.id, t1.id as b from t join t t1 on t.id=t1.id)A group by id",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Projection 7992.00 mpp[tiflash]  Column#7",
          "    └─HashAgg 7992.00 mpp[tiflash]  group by:Column#12, funcs:sum(Column#11)->Column#7",
          "      └─Projection 12487.50 mpp[tiflash]  cast(test.t.id, decimal(10,0) BINARY)->Column#11, test.t.id->Column#12",
          "        └─ExchangeReceiver 12487.50 mpp[tiflash]  ",
          "          └─ExchangeSender 12487.50 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "            └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "              ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "              │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "              │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "              │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "              └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select id from t group by id) C join (select sum(value),id from t group by id)B on C.id=B.id",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 7992.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) 7992.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection 7992.00 mpp[tiflash]  test.t.id",
          "    │     └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:firstrow(test.t.id)->test.t.id",
          "    │       └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │         └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │           └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, ",
          "    │             └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │               └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Projection(Probe) 7992.00 mpp[tiflash]  Column#7, test.t.id",
          "      └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:sum(Column#9)->Column#7, funcs:firstrow(test.t.id)->test.t.id",
          "        └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "          └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "            └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:sum(test.t.value)->Column#9",
          "              └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select id from t group by id) C join (select sum(b),id from (select t.id, t1.id as b from t join (select id, count(*) as c from t group by id) t1 on t.id=t1.id)A group by id)B on C.id=b.id",
        "Plan": [
          "TableReader 7992.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─HashJoin 7992.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "    ├─ExchangeReceiver(Build) 7992.00 mpp[tiflash]  ",
          "    │ └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "    │   └─Projection 7992.00 mpp[tiflash]  test.t.id",
          "    │     └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:firstrow(test.t.id)->test.t.id",
          "    │       └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "    │         └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "    │           └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, ",
          "    │             └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "    │               └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "    └─Projection(Probe) 7992.00 mpp[tiflash]  Column#11, test.t.id",
          "      └─HashAgg 7992.00 mpp[tiflash]  group by:Column#34, funcs:sum(Column#32)->Column#11, funcs:firstrow(Column#33)->test.t.id",
          "        └─Projection 9990.00 mpp[tiflash]  cast(test.t.id, decimal(10,0) BINARY)->Column#32, test.t.id->Column#33, test.t.id->Column#34",
          "          └─ExchangeReceiver 9990.00 mpp[tiflash]  ",
          "            └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "              └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "                ├─ExchangeReceiver(Build) 7992.00 mpp[tiflash]  ",
          "                │ └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "                │   └─Projection 7992.00 mpp[tiflash]  test.t.id, Column#13",
          "                │     └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:firstrow(test.t.id)->test.t.id, funcs:sum(Column#16)->Column#13",
          "                │       └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "                │         └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "                │           └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:count(1)->Column#16",
          "                │             └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                │               └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "                └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join t t1 on t.id = t1.id order by t.value limit 1",
        "Plan": [
          "TopN 1.00 root  test.t.value, offset:0, count:1",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TopN 1.00 mpp[tiflash]  test.t.value, offset:0, count:1",
          "      └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "        ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "        │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "        └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join t t1 on t.id = t1.id order by t.value % 100 limit 1",
        "Plan": [
          "Projection 1.00 root  test.t.id, test.t.value, test.t.id, test.t.value",
          "└─TopN 1.00 root  Column#8, offset:0, count:1",
          "  └─Projection 1.00 root  test.t.id, test.t.value, test.t.id, test.t.value, mod(test.t.value, 100)->Column#8",
          "    └─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "      └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "        └─Projection 1.00 mpp[tiflash]  test.t.id, test.t.value, test.t.id, test.t.value",
          "          └─TopN 1.00 mpp[tiflash]  Column#7, offset:0, count:1",
          "            └─Projection 12487.50 mpp[tiflash]  test.t.id, test.t.value, test.t.id, test.t.value, mod(test.t.value, 100)->Column#7",
          "              └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "                ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "                │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "                │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "                └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*) from (select t.id, t.value v1 from t join t t1 on t.id = t1.id order by t.value limit 20) v group by v.v1",
        "Plan": [
          "StreamAgg 20.00 root  group by:test.t.value, funcs:count(1)->Column#7",
          "└─TopN 20.00 root  test.t.value, offset:0, count:20",
          "  └─TableReader 20.00 root  MppVersion: 2, data:ExchangeSender",
          "    └─ExchangeSender 20.00 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─TopN 20.00 mpp[tiflash]  test.t.value, offset:0, count:20",
          "        └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "          ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "          └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "            └─TableFullScan 10000.00 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join t t1 on t.id = t1.id limit 1",
        "Plan": [
          "Limit 1.00 root  offset:0, count:1",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Limit 1.00 mpp[tiflash]  offset:0, count:1",
          "      └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "        ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "        │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "        └─Selection(Probe) 0.80 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 0.80 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from t join t t1 on t.id = t1.id limit 1",
        "Plan": [
          "Limit 1.00 root  offset:0, count:1",
          "└─TableReader 1.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 1.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Limit 1.00 mpp[tiflash]  offset:0, count:1",
          "      └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "        ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "        │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "        └─Selection(Probe) 0.80 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 0.80 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*) from (select t.id, t.value v1 from t join t t1 on t.id = t1.id limit 20) v group by v.v1",
        "Plan": [
          "HashAgg 20.00 root  group by:test.t.value, funcs:count(1)->Column#7",
          "└─Limit 20.00 root  offset:0, count:20",
          "  └─TableReader 20.00 root  MppVersion: 2, data:ExchangeSender",
          "    └─ExchangeSender 20.00 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─Limit 20.00 mpp[tiflash]  offset:0, count:20",
          "        └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "          ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "          │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "          │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "          └─Selection(Probe) 16.00 mpp[tiflash]  not(isnull(test.t.id))",
          "            └─TableFullScan 16.02 mpp[tiflash] table:t1 pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      }
    ]
  },
  {
    "Name": "TestRejectSortForMPP",
    "Cases": [
      {
        "SQL": "desc format = 'brief' select count(*) from (select * from t order by id)a group by name,id order by id",
        "Plan": [
          "Projection 8000.00 root  Column#5->Column#6",
          "└─Sort 8000.00 root  test.t.id",
          "  └─TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "    └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "      └─Projection 8000.00 mpp[tiflash]  Column#5, test.t.id",
          "        └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.name, funcs:sum(Column#9)->Column#5, funcs:firstrow(test.t.id)->test.t.id",
          "          └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "            └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.name, collate: utf8mb4_bin], [name: test.t.id, collate: binary]",
          "              └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.name, funcs:count(1)->Column#9",
          "                └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*) from (select * from t order by id)a group by name order by 1",
        "Plan": [
          "Sort 8000.00 root  Column#5",
          "└─TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Projection 8000.00 mpp[tiflash]  Column#5",
          "      └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.name, funcs:sum(Column#9)->Column#5",
          "        └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "          └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.name, collate: utf8mb4_bin]",
          "            └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.name, funcs:count(1)->Column#9",
          "              └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select count(*) from (select id,name from t group by id,name order by id,name)a group by name order by 1",
        "Plan": [
          "Sort 8000.00 root  Column#5",
          "└─TableReader 8000.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Projection 8000.00 mpp[tiflash]  Column#5",
          "      └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.name, funcs:count(1)->Column#5",
          "        └─Projection 8000.00 mpp[tiflash]  test.t.name",
          "          └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.name, funcs:firstrow(test.t.name)->test.t.name",
          "            └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "              └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.name, collate: utf8mb4_bin]",
          "                └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.name, ",
          "                  └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select id from t group by id order by id)a join t on a.id=t.id order by 1",
        "Plan": [
          "Sort 9990.00 root  test.t.id",
          "└─TableReader 9990.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─Projection 9990.00 mpp[tiflash]  test.t.id, test.t.id, test.t.value, test.t.name",
          "      └─HashJoin 9990.00 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "        ├─ExchangeReceiver(Build) 7992.00 mpp[tiflash]  ",
          "        │ └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "        │   └─Projection 7992.00 mpp[tiflash]  test.t.id",
          "        │     └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, funcs:firstrow(test.t.id)->test.t.id",
          "        │       └─ExchangeReceiver 7992.00 mpp[tiflash]  ",
          "        │         └─ExchangeSender 7992.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.id, collate: binary]",
          "        │           └─HashAgg 7992.00 mpp[tiflash]  group by:test.t.id, ",
          "        │             └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "        │               └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "        └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "          └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select * from t order by id)a join t on a.id=t.id order by 1",
        "Plan": [
          "Sort 12487.50 root  test.t.id",
          "└─TableReader 12487.50 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 12487.50 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─HashJoin 12487.50 mpp[tiflash]  inner join, equal:[eq(test.t.id, test.t.id)]",
          "      ├─ExchangeReceiver(Build) 9990.00 mpp[tiflash]  ",
          "      │ └─ExchangeSender 9990.00 mpp[tiflash]  ExchangeType: Broadcast, Compression: FAST",
          "      │   └─Selection 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "      │     └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo",
          "      └─Selection(Probe) 9990.00 mpp[tiflash]  not(isnull(test.t.id))",
          "        └─TableFullScan 10000.00 mpp[tiflash] table:t pushed down filter:empty, keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from ((select id from t order by 1)  union all (select id+1 from t order by 1))c",
        "Plan": [
          "TableReader 20000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 20000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Union 20000.00 mpp[tiflash]  ",
          "    ├─Projection 10000.00 mpp[tiflash]  cast(test.t.id, bigint(20) BINARY)->Column#10",
          "    │ └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─Projection 10000.00 mpp[tiflash]  plus(test.t.id, 1)->Column#10",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from ((select count(*) from (select id,name from t order by id)a group by name,id order by id)  union all (select id+1 from t order by 1))c",
        "Plan": [
          "TableReader 18000.00 root  MppVersion: 2, data:ExchangeSender",
          "└─ExchangeSender 18000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "  └─Union 18000.00 mpp[tiflash]  ",
          "    ├─Projection 8000.00 mpp[tiflash]  cast(Column#12, bigint(21) BINARY)->Column#12",
          "    │ └─Projection 8000.00 mpp[tiflash]  Column#5->Column#12",
          "    │   └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.name, funcs:sum(Column#18)->Column#5",
          "    │     └─ExchangeReceiver 8000.00 mpp[tiflash]  ",
          "    │       └─ExchangeSender 8000.00 mpp[tiflash]  ExchangeType: HashPartition, Compression: FAST, Hash Cols: [name: test.t.name, collate: utf8mb4_bin], [name: test.t.id, collate: binary]",
          "    │         └─HashAgg 8000.00 mpp[tiflash]  group by:test.t.id, test.t.name, funcs:count(1)->Column#18",
          "    │           └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo",
          "    └─Projection 10000.00 mpp[tiflash]  cast(plus(test.t.id, 1), bigint(21) BINARY)->Column#12",
          "      └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      },
      {
        "SQL": "desc format = 'brief' select * from (select * from t order by id)a order by name",
        "Plan": [
          "Sort 10000.00 root  test.t.name",
          "└─TableReader 10000.00 root  MppVersion: 2, data:ExchangeSender",
          "  └─ExchangeSender 10000.00 mpp[tiflash]  ExchangeType: PassThrough",
          "    └─TableFullScan 10000.00 mpp[tiflash] table:t keep order:false, stats:pseudo"
        ]
      }
    ]
  }
]
