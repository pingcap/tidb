// Copyright 2025 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: indexer.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IndexType represents the type of index
type IndexType int32

const (
	// Default value must be 0 in proto3
	IndexType_UNKNOWN IndexType = 0
	// Full-text index type
	IndexType_FULL_TEXT IndexType = 1
	// Custom index type
	IndexType_CUSTOM IndexType = 2
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FULL_TEXT",
		2: "CUSTOM",
	}
	IndexType_value = map[string]int32{
		"UNKNOWN":   0,
		"FULL_TEXT": 1,
		"CUSTOM":    2,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_proto_enumTypes[0].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_indexer_proto_enumTypes[0]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{0}
}

// ParserType represents the type of parser
type ParserType int32

const (
	// Default value must be 0 in proto3
	ParserType_UNKNOWN_PARSER ParserType = 0
	// Default parser
	ParserType_DEFAULT_PARSER ParserType = 1
	// Other parser types
	ParserType_OTHER_PARSER ParserType = 2
)

// Enum value maps for ParserType.
var (
	ParserType_name = map[int32]string{
		0: "UNKNOWN_PARSER",
		1: "DEFAULT_PARSER",
		2: "OTHER_PARSER",
	}
	ParserType_value = map[string]int32{
		"UNKNOWN_PARSER": 0,
		"DEFAULT_PARSER": 1,
		"OTHER_PARSER":   2,
	}
)

func (x ParserType) Enum() *ParserType {
	p := new(ParserType)
	*p = x
	return p
}

func (x ParserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParserType) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_proto_enumTypes[1].Descriptor()
}

func (ParserType) Type() protoreflect.EnumType {
	return &file_indexer_proto_enumTypes[1]
}

func (x ParserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParserType.Descriptor instead.
func (ParserType) EnumDescriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{1}
}

// CreateIndexRequest is a request to create an index
type CreateIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index information
	IndexInfo *IndexInfo `protobuf:"bytes,1,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Table information
	TableInfo     *TableInfo `protobuf:"bytes,2,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	mi := &file_indexer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIndexRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateIndexRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// CreateIndexResponse is a response to the index creation request
type CreateIndexResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Created index ID
	IndexId       string `protobuf:"bytes,3,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	mi := &file_indexer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIndexResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateIndexResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateIndexResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// DropIndexRequest is a request to drop an index
type DropIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index ID
	IndexId       string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropIndexRequest) Reset() {
	*x = DropIndexRequest{}
	mi := &file_indexer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexRequest) ProtoMessage() {}

func (x *DropIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexRequest.ProtoReflect.Descriptor instead.
func (*DropIndexRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *DropIndexRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// DropIndexResponse is a response to the index drop request
type DropIndexResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropIndexResponse) Reset() {
	*x = DropIndexResponse{}
	mi := &file_indexer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexResponse) ProtoMessage() {}

func (x *DropIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexResponse.ProtoReflect.Descriptor instead.
func (*DropIndexResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *DropIndexResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DropIndexResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// TableInfo represents table information
type TableInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Table name
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Database name
	DatabaseName string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// Table version
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Column information
	Columns       []*ColumnInfo `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_indexer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *TableInfo) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableInfo) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *TableInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TableInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

// ColumnInfo represents column information
type ColumnInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column ID
	ColumnId int64 `protobuf:"varint,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// Column name
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// MySQL type
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Collation
	Collation int32 `protobuf:"varint,4,opt,name=collation,proto3" json:"collation,omitempty"`
	// Column length
	ColumnLength int32 `protobuf:"varint,5,opt,name=column_length,json=columnLength,proto3" json:"column_length,omitempty"`
	// Decimal places
	Decimal int32 `protobuf:"varint,6,opt,name=decimal,proto3" json:"decimal,omitempty"`
	// Flags
	Flag int32 `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	// Enum elements
	Elems []string `protobuf:"bytes,8,rep,name=elems,proto3" json:"elems,omitempty"`
	// Default value
	DefaultVal []byte `protobuf:"bytes,9,opt,name=default_val,json=defaultVal,proto3" json:"default_val,omitempty"`
	// Whether it's a primary key
	IsPrimaryKey bool `protobuf:"varint,10,opt,name=is_primary_key,json=isPrimaryKey,proto3" json:"is_primary_key,omitempty"`
	// Whether it's an array
	IsArray       bool `protobuf:"varint,11,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnInfo) Reset() {
	*x = ColumnInfo{}
	mi := &file_indexer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnInfo) ProtoMessage() {}

func (x *ColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnInfo.ProtoReflect.Descriptor instead.
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *ColumnInfo) GetColumnId() int64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *ColumnInfo) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ColumnInfo) GetCollation() int32 {
	if x != nil {
		return x.Collation
	}
	return 0
}

func (x *ColumnInfo) GetColumnLength() int32 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

func (x *ColumnInfo) GetDecimal() int32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *ColumnInfo) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *ColumnInfo) GetElems() []string {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *ColumnInfo) GetDefaultVal() []byte {
	if x != nil {
		return x.DefaultVal
	}
	return nil
}

func (x *ColumnInfo) GetIsPrimaryKey() bool {
	if x != nil {
		return x.IsPrimaryKey
	}
	return false
}

func (x *ColumnInfo) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

// IndexInfo represents index information
type IndexInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// Index type (fulltext, custom)
	IndexType IndexType `protobuf:"varint,4,opt,name=index_type,json=indexType,proto3,enum=indexer.IndexType" json:"index_type,omitempty"`
	// Index columns
	Columns []*ColumnInfo `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	// Whether the index is unique
	IsUnique bool `protobuf:"varint,6,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	// Parser information
	ParserInfo *ParserInfo `protobuf:"bytes,7,opt,name=parser_info,json=parserInfo,proto3" json:"parser_info,omitempty"`
	// Other index parameters
	OtherParams   map[string]string `protobuf:"bytes,8,rep,name=other_params,json=otherParams,proto3" json:"other_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexInfo) Reset() {
	*x = IndexInfo{}
	mi := &file_indexer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfo) ProtoMessage() {}

func (x *IndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfo.ProtoReflect.Descriptor instead.
func (*IndexInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *IndexInfo) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *IndexInfo) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *IndexInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexInfo) GetIndexType() IndexType {
	if x != nil {
		return x.IndexType
	}
	return IndexType_UNKNOWN
}

func (x *IndexInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexInfo) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *IndexInfo) GetParserInfo() *ParserInfo {
	if x != nil {
		return x.ParserInfo
	}
	return nil
}

func (x *IndexInfo) GetOtherParams() map[string]string {
	if x != nil {
		return x.OtherParams
	}
	return nil
}

// ParserInfo represents parser information
type ParserInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parser type
	ParserType ParserType `protobuf:"varint,1,opt,name=parser_type,json=parserType,proto3,enum=indexer.ParserType" json:"parser_type,omitempty"`
	// Parser parameters
	ParserParams  map[string]string `protobuf:"bytes,2,rep,name=parser_params,json=parserParams,proto3" json:"parser_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParserInfo) Reset() {
	*x = ParserInfo{}
	mi := &file_indexer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParserInfo) ProtoMessage() {}

func (x *ParserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParserInfo.ProtoReflect.Descriptor instead.
func (*ParserInfo) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *ParserInfo) GetParserType() ParserType {
	if x != nil {
		return x.ParserType
	}
	return ParserType_UNKNOWN_PARSER
}

func (x *ParserInfo) GetParserParams() map[string]string {
	if x != nil {
		return x.ParserParams
	}
	return nil
}

// GetIndexProgressRequest is a request to get the progress of an index build
type GetIndexProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId       int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexProgressRequest) Reset() {
	*x = GetIndexProgressRequest{}
	mi := &file_indexer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexProgressRequest) ProtoMessage() {}

func (x *GetIndexProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexProgressRequest.ProtoReflect.Descriptor instead.
func (*GetIndexProgressRequest) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{8}
}

func (x *GetIndexProgressRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetIndexProgressRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

// GetIndexProgressResponse is a response containing index build progress
type GetIndexProgressResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Number of documents indexed so far
	DocumentCount uint64 `protobuf:"varint,3,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`
	// Build task state (PENDING, RUNNING, COMPLETED, FAILED)
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Whether index has been uploaded to S3
	IsUploaded bool `protobuf:"varint,5,opt,name=is_uploaded,json=isUploaded,proto3" json:"is_uploaded,omitempty"`
	// Last S3 upload time in RFC3339 format
	LastUploadTime string `protobuf:"bytes,6,opt,name=last_upload_time,json=lastUploadTime,proto3" json:"last_upload_time,omitempty"`
	// S3 path where the index is stored
	S3Path        string `protobuf:"bytes,7,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexProgressResponse) Reset() {
	*x = GetIndexProgressResponse{}
	mi := &file_indexer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexProgressResponse) ProtoMessage() {}

func (x *GetIndexProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexProgressResponse.ProtoReflect.Descriptor instead.
func (*GetIndexProgressResponse) Descriptor() ([]byte, []int) {
	return file_indexer_proto_rawDescGZIP(), []int{9}
}

func (x *GetIndexProgressResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetIndexProgressResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetIndexProgressResponse) GetDocumentCount() uint64 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *GetIndexProgressResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetIndexProgressResponse) GetIsUploaded() bool {
	if x != nil {
		return x.IsUploaded
	}
	return false
}

func (x *GetIndexProgressResponse) GetLastUploadTime() string {
	if x != nil {
		return x.LastUploadTime
	}
	return ""
}

func (x *GetIndexProgressResponse) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

var File_indexer_proto protoreflect.FileDescriptor

const file_indexer_proto_rawDesc = "" +
	"\n" +
	"\rindexer.proto\x12\aindexer\"z\n" +
	"\x12CreateIndexRequest\x121\n" +
	"\n" +
	"index_info\x18\x01 \x01(\v2\x12.indexer.IndexInfoR\tindexInfo\x121\n" +
	"\n" +
	"table_info\x18\x02 \x01(\v2\x12.indexer.TableInfoR\ttableInfo\"m\n" +
	"\x13CreateIndexResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x19\n" +
	"\bindex_id\x18\x03 \x01(\tR\aindexId\"-\n" +
	"\x10DropIndexRequest\x12\x19\n" +
	"\bindex_id\x18\x01 \x01(\tR\aindexId\"P\n" +
	"\x11DropIndexResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"\xb3\x01\n" +
	"\tTableInfo\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\x12#\n" +
	"\rdatabase_name\x18\x03 \x01(\tR\fdatabaseName\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x03R\aversion\x12-\n" +
	"\acolumns\x18\x05 \x03(\v2\x13.indexer.ColumnInfoR\acolumns\"\xc7\x02\n" +
	"\n" +
	"ColumnInfo\x12\x1b\n" +
	"\tcolumn_id\x18\x01 \x01(\x03R\bcolumnId\x12\x1f\n" +
	"\vcolumn_name\x18\x02 \x01(\tR\n" +
	"columnName\x12\x12\n" +
	"\x04type\x18\x03 \x01(\x05R\x04type\x12\x1c\n" +
	"\tcollation\x18\x04 \x01(\x05R\tcollation\x12#\n" +
	"\rcolumn_length\x18\x05 \x01(\x05R\fcolumnLength\x12\x18\n" +
	"\adecimal\x18\x06 \x01(\x05R\adecimal\x12\x12\n" +
	"\x04flag\x18\a \x01(\x05R\x04flag\x12\x14\n" +
	"\x05elems\x18\b \x03(\tR\x05elems\x12\x1f\n" +
	"\vdefault_val\x18\t \x01(\fR\n" +
	"defaultVal\x12$\n" +
	"\x0eis_primary_key\x18\n" +
	" \x01(\bR\fisPrimaryKey\x12\x19\n" +
	"\bis_array\x18\v \x01(\bR\aisArray\"\x9d\x03\n" +
	"\tIndexInfo\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12\x1d\n" +
	"\n" +
	"index_name\x18\x03 \x01(\tR\tindexName\x121\n" +
	"\n" +
	"index_type\x18\x04 \x01(\x0e2\x12.indexer.IndexTypeR\tindexType\x12-\n" +
	"\acolumns\x18\x05 \x03(\v2\x13.indexer.ColumnInfoR\acolumns\x12\x1b\n" +
	"\tis_unique\x18\x06 \x01(\bR\bisUnique\x124\n" +
	"\vparser_info\x18\a \x01(\v2\x13.indexer.ParserInfoR\n" +
	"parserInfo\x12F\n" +
	"\fother_params\x18\b \x03(\v2#.indexer.IndexInfo.OtherParamsEntryR\votherParams\x1a>\n" +
	"\x10OtherParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x01\n" +
	"\n" +
	"ParserInfo\x124\n" +
	"\vparser_type\x18\x01 \x01(\x0e2\x13.indexer.ParserTypeR\n" +
	"parserType\x12J\n" +
	"\rparser_params\x18\x02 \x03(\v2%.indexer.ParserInfo.ParserParamsEntryR\fparserParams\x1a?\n" +
	"\x11ParserParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"O\n" +
	"\x17GetIndexProgressRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\"\xf8\x01\n" +
	"\x18GetIndexProgressResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12%\n" +
	"\x0edocument_count\x18\x03 \x01(\x04R\rdocumentCount\x12\x14\n" +
	"\x05state\x18\x04 \x01(\tR\x05state\x12\x1f\n" +
	"\vis_uploaded\x18\x05 \x01(\bR\n" +
	"isUploaded\x12(\n" +
	"\x10last_upload_time\x18\x06 \x01(\tR\x0elastUploadTime\x12\x17\n" +
	"\as3_path\x18\a \x01(\tR\x06s3Path*3\n" +
	"\tIndexType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\r\n" +
	"\tFULL_TEXT\x10\x01\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x02*F\n" +
	"\n" +
	"ParserType\x12\x12\n" +
	"\x0eUNKNOWN_PARSER\x10\x00\x12\x12\n" +
	"\x0eDEFAULT_PARSER\x10\x01\x12\x10\n" +
	"\fOTHER_PARSER\x10\x022\xf7\x01\n" +
	"\x0eIndexerService\x12H\n" +
	"\vCreateIndex\x12\x1b.indexer.CreateIndexRequest\x1a\x1c.indexer.CreateIndexResponse\x12B\n" +
	"\tDropIndex\x12\x19.indexer.DropIndexRequest\x1a\x1a.indexer.DropIndexResponse\x12W\n" +
	"\x10GetIndexProgress\x12 .indexer.GetIndexProgressRequest\x1a!.indexer.GetIndexProgressResponseB\vZ\t./indexerb\x06proto3"

var (
	file_indexer_proto_rawDescOnce sync.Once
	file_indexer_proto_rawDescData []byte
)

func file_indexer_proto_rawDescGZIP() []byte {
	file_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_indexer_proto_rawDesc), len(file_indexer_proto_rawDesc)))
	})
	return file_indexer_proto_rawDescData
}

var file_indexer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_indexer_proto_goTypes = []any{
	(IndexType)(0),                   // 0: indexer.IndexType
	(ParserType)(0),                  // 1: indexer.ParserType
	(*CreateIndexRequest)(nil),       // 2: indexer.CreateIndexRequest
	(*CreateIndexResponse)(nil),      // 3: indexer.CreateIndexResponse
	(*DropIndexRequest)(nil),         // 4: indexer.DropIndexRequest
	(*DropIndexResponse)(nil),        // 5: indexer.DropIndexResponse
	(*TableInfo)(nil),                // 6: indexer.TableInfo
	(*ColumnInfo)(nil),               // 7: indexer.ColumnInfo
	(*IndexInfo)(nil),                // 8: indexer.IndexInfo
	(*ParserInfo)(nil),               // 9: indexer.ParserInfo
	(*GetIndexProgressRequest)(nil),  // 10: indexer.GetIndexProgressRequest
	(*GetIndexProgressResponse)(nil), // 11: indexer.GetIndexProgressResponse
	nil,                              // 12: indexer.IndexInfo.OtherParamsEntry
	nil,                              // 13: indexer.ParserInfo.ParserParamsEntry
}
var file_indexer_proto_depIdxs = []int32{
	8,  // 0: indexer.CreateIndexRequest.index_info:type_name -> indexer.IndexInfo
	6,  // 1: indexer.CreateIndexRequest.table_info:type_name -> indexer.TableInfo
	7,  // 2: indexer.TableInfo.columns:type_name -> indexer.ColumnInfo
	0,  // 3: indexer.IndexInfo.index_type:type_name -> indexer.IndexType
	7,  // 4: indexer.IndexInfo.columns:type_name -> indexer.ColumnInfo
	9,  // 5: indexer.IndexInfo.parser_info:type_name -> indexer.ParserInfo
	12, // 6: indexer.IndexInfo.other_params:type_name -> indexer.IndexInfo.OtherParamsEntry
	1,  // 7: indexer.ParserInfo.parser_type:type_name -> indexer.ParserType
	13, // 8: indexer.ParserInfo.parser_params:type_name -> indexer.ParserInfo.ParserParamsEntry
	2,  // 9: indexer.IndexerService.CreateIndex:input_type -> indexer.CreateIndexRequest
	4,  // 10: indexer.IndexerService.DropIndex:input_type -> indexer.DropIndexRequest
	10, // 11: indexer.IndexerService.GetIndexProgress:input_type -> indexer.GetIndexProgressRequest
	3,  // 12: indexer.IndexerService.CreateIndex:output_type -> indexer.CreateIndexResponse
	5,  // 13: indexer.IndexerService.DropIndex:output_type -> indexer.DropIndexResponse
	11, // 14: indexer.IndexerService.GetIndexProgress:output_type -> indexer.GetIndexProgressResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_indexer_proto_init() }
func file_indexer_proto_init() {
	if File_indexer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_indexer_proto_rawDesc), len(file_indexer_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_proto_depIdxs,
		EnumInfos:         file_indexer_proto_enumTypes,
		MessageInfos:      file_indexer_proto_msgTypes,
	}.Build()
	File_indexer_proto = out.File
	file_indexer_proto_goTypes = nil
	file_indexer_proto_depIdxs = nil
}
