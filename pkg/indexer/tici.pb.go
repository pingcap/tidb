// Copyright 2025 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: tici.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerNodeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO Need more metrics, such as disk usage, quotas, cache miss rates
	CpuUsage      float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage   uint64  `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeStatus) Reset() {
	*x = WorkerNodeStatus{}
	mi := &file_tici_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeStatus) ProtoMessage() {}

func (x *WorkerNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *WorkerNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

// Some fields may be duplicated with ShardManifestHeader,
// however, just leave them here.
type WorkerNodeShardStatus struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StartKey string                 `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   string                 `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// TODO shard_id is unique across tables and indexes.
	// We still need them because in meta service we are not currently maintain this correspondence.
	TableId       int64  `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId       int64  `protobuf:"varint,4,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId       uint64 `protobuf:"varint,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Epoch         uint64 `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Seq           uint64 `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeShardStatus) Reset() {
	*x = WorkerNodeShardStatus{}
	mi := &file_tici_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeShardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeShardStatus) ProtoMessage() {}

func (x *WorkerNodeShardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeShardStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeShardStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerNodeShardStatus) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

func (x *WorkerNodeShardStatus) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

func (x *WorkerNodeShardStatus) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type WorkerNodeCompactionStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeCompactionStatus) Reset() {
	*x = WorkerNodeCompactionStatus{}
	mi := &file_tici_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeCompactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeCompactionStatus) ProtoMessage() {}

func (x *WorkerNodeCompactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeCompactionStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeCompactionStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{2}
}

type WorkerNodeHeartbeatRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Addr          string                        `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status        *WorkerNodeStatus             `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Shards        []*WorkerNodeShardStatus      `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
	Compactions   []*WorkerNodeCompactionStatus `protobuf:"bytes,4,rep,name=compactions,proto3" json:"compactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeHeartbeatRequest) Reset() {
	*x = WorkerNodeHeartbeatRequest{}
	mi := &file_tici_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatRequest) ProtoMessage() {}

func (x *WorkerNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerNodeHeartbeatRequest) GetStatus() *WorkerNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetShards() []*WorkerNodeShardStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetCompactions() []*WorkerNodeCompactionStatus {
	if x != nil {
		return x.Compactions
	}
	return nil
}

type WorkerNodeHeartbeatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status      int32              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ToAddShards []*AddShardRequest `protobuf:"bytes,2,rep,name=to_add_shards,json=toAddShards,proto3" json:"to_add_shards,omitempty"`
	// We assume the `shard_id`s are unique across tables,
	// So using `shard_id` is enough here.
	ToRemoveShards []uint64 `protobuf:"varint,3,rep,packed,name=to_remove_shards,json=toRemoveShards,proto3" json:"to_remove_shards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerNodeHeartbeatResponse) Reset() {
	*x = WorkerNodeHeartbeatResponse{}
	mi := &file_tici_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatResponse) ProtoMessage() {}

func (x *WorkerNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WorkerNodeHeartbeatResponse) GetToAddShards() []*AddShardRequest {
	if x != nil {
		return x.ToAddShards
	}
	return nil
}

func (x *WorkerNodeHeartbeatResponse) GetToRemoveShards() []uint64 {
	if x != nil {
		return x.ToRemoveShards
	}
	return nil
}

type KeyRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartKey      string                 `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey        string                 `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	mi := &file_tici_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{5}
}

func (x *KeyRange) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

func (x *KeyRange) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

type ShardLocalCacheInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Shard           *ShardManifestHeader   `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	LocalCacheAddrs []string               `protobuf:"bytes,2,rep,name=local_cache_addrs,json=localCacheAddrs,proto3" json:"local_cache_addrs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShardLocalCacheInfo) Reset() {
	*x = ShardLocalCacheInfo{}
	mi := &file_tici_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardLocalCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardLocalCacheInfo) ProtoMessage() {}

func (x *ShardLocalCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardLocalCacheInfo.ProtoReflect.Descriptor instead.
func (*ShardLocalCacheInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{6}
}

func (x *ShardLocalCacheInfo) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *ShardLocalCacheInfo) GetLocalCacheAddrs() []string {
	if x != nil {
		return x.LocalCacheAddrs
	}
	return nil
}

type GetShardLocalCacheRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	KeyRanges []*KeyRange            `protobuf:"bytes,1,rep,name=key_ranges,json=keyRanges,proto3" json:"key_ranges,omitempty"`
	// at most `limit` shards can be returned
	Limit         int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardLocalCacheRequest) Reset() {
	*x = GetShardLocalCacheRequest{}
	mi := &file_tici_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardLocalCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheRequest) ProtoMessage() {}

func (x *GetShardLocalCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheRequest.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{7}
}

func (x *GetShardLocalCacheRequest) GetKeyRanges() []*KeyRange {
	if x != nil {
		return x.KeyRanges
	}
	return nil
}

func (x *GetShardLocalCacheRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetShardLocalCacheResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status               int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ShardLocalCacheInfos []*ShardLocalCacheInfo `protobuf:"bytes,2,rep,name=shard_local_cache_infos,json=shardLocalCacheInfos,proto3" json:"shard_local_cache_infos,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetShardLocalCacheResponse) Reset() {
	*x = GetShardLocalCacheResponse{}
	mi := &file_tici_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardLocalCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheResponse) ProtoMessage() {}

func (x *GetShardLocalCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheResponse.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{8}
}

func (x *GetShardLocalCacheResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetShardLocalCacheResponse) GetShardLocalCacheInfos() []*ShardLocalCacheInfo {
	if x != nil {
		return x.ShardLocalCacheInfos
	}
	return nil
}

var File_tici_proto protoreflect.FileDescriptor

const file_tici_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"tici.proto\x12\aindexer\x1a\rindexer.proto\"R\n" +
	"\x10WorkerNodeStatus\x12\x1b\n" +
	"\tcpu_usage\x18\x01 \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x02 \x01(\x04R\vmemoryUsage\"\xc6\x01\n" +
	"\x15WorkerNodeShardStatus\x12\x1b\n" +
	"\tstart_key\x18\x01 \x01(\tR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x02 \x01(\tR\x06endKey\x12\x19\n" +
	"\btable_id\x18\x03 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x04 \x01(\x03R\aindexId\x12\x19\n" +
	"\bshard_id\x18\x05 \x01(\x04R\ashardId\x12\x14\n" +
	"\x05epoch\x18\x06 \x01(\x04R\x05epoch\x12\x10\n" +
	"\x03seq\x18\a \x01(\x04R\x03seq\"\x1c\n" +
	"\x1aWorkerNodeCompactionStatus\"\xe2\x01\n" +
	"\x1aWorkerNodeHeartbeatRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x121\n" +
	"\x06status\x18\x02 \x01(\v2\x19.indexer.WorkerNodeStatusR\x06status\x126\n" +
	"\x06shards\x18\x03 \x03(\v2\x1e.indexer.WorkerNodeShardStatusR\x06shards\x12E\n" +
	"\vcompactions\x18\x04 \x03(\v2#.indexer.WorkerNodeCompactionStatusR\vcompactions\"\x9d\x01\n" +
	"\x1bWorkerNodeHeartbeatResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12<\n" +
	"\rto_add_shards\x18\x02 \x03(\v2\x18.indexer.AddShardRequestR\vtoAddShards\x12(\n" +
	"\x10to_remove_shards\x18\x03 \x03(\x04R\x0etoRemoveShards\"@\n" +
	"\bKeyRange\x12\x1b\n" +
	"\tstart_key\x18\x01 \x01(\tR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x02 \x01(\tR\x06endKey\"u\n" +
	"\x13ShardLocalCacheInfo\x122\n" +
	"\x05shard\x18\x01 \x01(\v2\x1c.indexer.ShardManifestHeaderR\x05shard\x12*\n" +
	"\x11local_cache_addrs\x18\x02 \x03(\tR\x0flocalCacheAddrs\"c\n" +
	"\x19GetShardLocalCacheRequest\x120\n" +
	"\n" +
	"key_ranges\x18\x01 \x03(\v2\x11.indexer.KeyRangeR\tkeyRanges\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"\x89\x01\n" +
	"\x1aGetShardLocalCacheResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12S\n" +
	"\x17shard_local_cache_infos\x18\x02 \x03(\v2\x1c.indexer.ShardLocalCacheInfoR\x14shardLocalCacheInfos2\xb9\x03\n" +
	"\vMetaService\x12`\n" +
	"\x13WorkerNodeHeartbeat\x12#.indexer.WorkerNodeHeartbeatRequest\x1a$.indexer.WorkerNodeHeartbeatResponse\x12H\n" +
	"\vCreateIndex\x12\x1b.indexer.CreateIndexRequest\x1a\x1c.indexer.CreateIndexResponse\x12B\n" +
	"\tDropIndex\x12\x19.indexer.DropIndexRequest\x1a\x1a.indexer.DropIndexResponse\x12W\n" +
	"\x10GetIndexProgress\x12 .indexer.GetIndexProgressRequest\x1a!.indexer.GetIndexProgressResponse\x12a\n" +
	"\x16GetShardLocalCacheInfo\x12\".indexer.GetShardLocalCacheRequest\x1a#.indexer.GetShardLocalCacheResponseB\vZ\t./indexerb\x06proto3"

var (
	file_tici_proto_rawDescOnce sync.Once
	file_tici_proto_rawDescData []byte
)

func file_tici_proto_rawDescGZIP() []byte {
	file_tici_proto_rawDescOnce.Do(func() {
		file_tici_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tici_proto_rawDesc), len(file_tici_proto_rawDesc)))
	})
	return file_tici_proto_rawDescData
}

var file_tici_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tici_proto_goTypes = []any{
	(*WorkerNodeStatus)(nil),            // 0: indexer.WorkerNodeStatus
	(*WorkerNodeShardStatus)(nil),       // 1: indexer.WorkerNodeShardStatus
	(*WorkerNodeCompactionStatus)(nil),  // 2: indexer.WorkerNodeCompactionStatus
	(*WorkerNodeHeartbeatRequest)(nil),  // 3: indexer.WorkerNodeHeartbeatRequest
	(*WorkerNodeHeartbeatResponse)(nil), // 4: indexer.WorkerNodeHeartbeatResponse
	(*KeyRange)(nil),                    // 5: indexer.KeyRange
	(*ShardLocalCacheInfo)(nil),         // 6: indexer.ShardLocalCacheInfo
	(*GetShardLocalCacheRequest)(nil),   // 7: indexer.GetShardLocalCacheRequest
	(*GetShardLocalCacheResponse)(nil),  // 8: indexer.GetShardLocalCacheResponse
	(*AddShardRequest)(nil),             // 9: indexer.AddShardRequest
	(*ShardManifestHeader)(nil),         // 10: indexer.ShardManifestHeader
	(*CreateIndexRequest)(nil),          // 11: indexer.CreateIndexRequest
	(*DropIndexRequest)(nil),            // 12: indexer.DropIndexRequest
	(*GetIndexProgressRequest)(nil),     // 13: indexer.GetIndexProgressRequest
	(*CreateIndexResponse)(nil),         // 14: indexer.CreateIndexResponse
	(*DropIndexResponse)(nil),           // 15: indexer.DropIndexResponse
	(*GetIndexProgressResponse)(nil),    // 16: indexer.GetIndexProgressResponse
}
var file_tici_proto_depIdxs = []int32{
	0,  // 0: indexer.WorkerNodeHeartbeatRequest.status:type_name -> indexer.WorkerNodeStatus
	1,  // 1: indexer.WorkerNodeHeartbeatRequest.shards:type_name -> indexer.WorkerNodeShardStatus
	2,  // 2: indexer.WorkerNodeHeartbeatRequest.compactions:type_name -> indexer.WorkerNodeCompactionStatus
	9,  // 3: indexer.WorkerNodeHeartbeatResponse.to_add_shards:type_name -> indexer.AddShardRequest
	10, // 4: indexer.ShardLocalCacheInfo.shard:type_name -> indexer.ShardManifestHeader
	5,  // 5: indexer.GetShardLocalCacheRequest.key_ranges:type_name -> indexer.KeyRange
	6,  // 6: indexer.GetShardLocalCacheResponse.shard_local_cache_infos:type_name -> indexer.ShardLocalCacheInfo
	3,  // 7: indexer.MetaService.WorkerNodeHeartbeat:input_type -> indexer.WorkerNodeHeartbeatRequest
	11, // 8: indexer.MetaService.CreateIndex:input_type -> indexer.CreateIndexRequest
	12, // 9: indexer.MetaService.DropIndex:input_type -> indexer.DropIndexRequest
	13, // 10: indexer.MetaService.GetIndexProgress:input_type -> indexer.GetIndexProgressRequest
	7,  // 11: indexer.MetaService.GetShardLocalCacheInfo:input_type -> indexer.GetShardLocalCacheRequest
	4,  // 12: indexer.MetaService.WorkerNodeHeartbeat:output_type -> indexer.WorkerNodeHeartbeatResponse
	14, // 13: indexer.MetaService.CreateIndex:output_type -> indexer.CreateIndexResponse
	15, // 14: indexer.MetaService.DropIndex:output_type -> indexer.DropIndexResponse
	16, // 15: indexer.MetaService.GetIndexProgress:output_type -> indexer.GetIndexProgressResponse
	8,  // 16: indexer.MetaService.GetShardLocalCacheInfo:output_type -> indexer.GetShardLocalCacheResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_tici_proto_init() }
func file_tici_proto_init() {
	if File_tici_proto != nil {
		return
	}
	file_indexer_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tici_proto_rawDesc), len(file_tici_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tici_proto_goTypes,
		DependencyIndexes: file_tici_proto_depIdxs,
		MessageInfos:      file_tici_proto_msgTypes,
	}.Build()
	File_tici_proto = out.File
	file_tici_proto_goTypes = nil
	file_tici_proto_depIdxs = nil
}
