// Copyright 2025 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.14.0
// source: tici.proto

package tici

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IndexType represents the type of index
type IndexType int32

const (
	// Default value must be 0 in proto3
	IndexType_UNKNOWN IndexType = 0
	// Full-text index type
	IndexType_FULL_TEXT IndexType = 1
	// Custom index type
	IndexType_CUSTOM IndexType = 2
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FULL_TEXT",
		2: "CUSTOM",
	}
	IndexType_value = map[string]int32{
		"UNKNOWN":   0,
		"FULL_TEXT": 1,
		"CUSTOM":    2,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[0].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[0]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{0}
}

// ParserType represents the type of parser
type ParserType int32

const (
	// Default value must be 0 in proto3
	ParserType_UNKNOWN_PARSER ParserType = 0
	// Default parser
	ParserType_DEFAULT_PARSER ParserType = 1
	// Other parser types
	ParserType_OTHER_PARSER ParserType = 2
)

// Enum value maps for ParserType.
var (
	ParserType_name = map[int32]string{
		0: "UNKNOWN_PARSER",
		1: "DEFAULT_PARSER",
		2: "OTHER_PARSER",
	}
	ParserType_value = map[string]int32{
		"UNKNOWN_PARSER": 0,
		"DEFAULT_PARSER": 1,
		"OTHER_PARSER":   2,
	}
)

func (x ParserType) Enum() *ParserType {
	p := new(ParserType)
	*p = x
	return p
}

func (x ParserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParserType) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[1].Descriptor()
}

func (ParserType) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[1]
}

func (x ParserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParserType.Descriptor instead.
func (ParserType) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{1}
}

type GetIndexProgressResponse_State int32

const (
	GetIndexProgressResponse_PENDING   GetIndexProgressResponse_State = 0
	GetIndexProgressResponse_RUNNING   GetIndexProgressResponse_State = 1
	GetIndexProgressResponse_COMPLETED GetIndexProgressResponse_State = 2
	GetIndexProgressResponse_FAILED    GetIndexProgressResponse_State = 3
	GetIndexProgressResponse_NOTFOUND  GetIndexProgressResponse_State = 4
	GetIndexProgressResponse_ERROR     GetIndexProgressResponse_State = 5
)

// Enum value maps for GetIndexProgressResponse_State.
var (
	GetIndexProgressResponse_State_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "FAILED",
		4: "NOTFOUND",
		5: "ERROR",
	}
	GetIndexProgressResponse_State_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"FAILED":    3,
		"NOTFOUND":  4,
		"ERROR":     5,
	}
)

func (x GetIndexProgressResponse_State) Enum() *GetIndexProgressResponse_State {
	p := new(GetIndexProgressResponse_State)
	*p = x
	return p
}

func (x GetIndexProgressResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetIndexProgressResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[2].Descriptor()
}

func (GetIndexProgressResponse_State) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[2]
}

func (x GetIndexProgressResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetIndexProgressResponse_State.Descriptor instead.
func (GetIndexProgressResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{35, 0}
}

type WorkerNodeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO Need more metrics, such as disk usage, quotas, cache miss rates
	CpuUsage      float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage   uint64  `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeStatus) Reset() {
	*x = WorkerNodeStatus{}
	mi := &file_tici_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeStatus) ProtoMessage() {}

func (x *WorkerNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *WorkerNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

// Reader node status information
type ReaderNodeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU usage percentage (0.0 to 100.0)
	CpuUsage float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// Memory usage in bytes
	MemoryUsage uint64 `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	// Number of requests processed in current heartbeat cycle
	RequestsInCycle uint32 `protobuf:"varint,3,opt,name=requests_in_cycle,json=requestsInCycle,proto3" json:"requests_in_cycle,omitempty"`
	// Cache hit rate percentage (0.0 to 100.0)
	CacheHitRate  float64 `protobuf:"fixed64,4,opt,name=cache_hit_rate,json=cacheHitRate,proto3" json:"cache_hit_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReaderNodeStatus) Reset() {
	*x = ReaderNodeStatus{}
	mi := &file_tici_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaderNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeStatus) ProtoMessage() {}

func (x *ReaderNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeStatus.ProtoReflect.Descriptor instead.
func (*ReaderNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{1}
}

func (x *ReaderNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ReaderNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ReaderNodeStatus) GetRequestsInCycle() uint32 {
	if x != nil {
		return x.RequestsInCycle
	}
	return 0
}

func (x *ReaderNodeStatus) GetCacheHitRate() float64 {
	if x != nil {
		return x.CacheHitRate
	}
	return 0
}

// Some fields may be duplicated with ShardManifestHeader,
// however, just leave them here.
type WorkerNodeShardStatus struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StartKey []byte                 `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte                 `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// TODO shard_id is unique across tables and indexes.
	// We still need them because in meta service we are not currently maintain this correspondence.
	TableId       int64  `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId       int64  `protobuf:"varint,4,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId       uint64 `protobuf:"varint,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Epoch         uint64 `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Seq           uint64 `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeShardStatus) Reset() {
	*x = WorkerNodeShardStatus{}
	mi := &file_tici_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeShardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeShardStatus) ProtoMessage() {}

func (x *WorkerNodeShardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeShardStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeShardStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerNodeShardStatus) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *WorkerNodeShardStatus) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *WorkerNodeShardStatus) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type WorkerNodeCompactionStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeCompactionStatus) Reset() {
	*x = WorkerNodeCompactionStatus{}
	mi := &file_tici_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeCompactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeCompactionStatus) ProtoMessage() {}

func (x *WorkerNodeCompactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeCompactionStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeCompactionStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{3}
}

type WorkerNodeHeartbeatRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Addr          string                        `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status        *WorkerNodeStatus             `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Shards        []*WorkerNodeShardStatus      `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
	Compactions   []*WorkerNodeCompactionStatus `protobuf:"bytes,4,rep,name=compactions,proto3" json:"compactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeHeartbeatRequest) Reset() {
	*x = WorkerNodeHeartbeatRequest{}
	mi := &file_tici_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatRequest) ProtoMessage() {}

func (x *WorkerNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerNodeHeartbeatRequest) GetStatus() *WorkerNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetShards() []*WorkerNodeShardStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetCompactions() []*WorkerNodeCompactionStatus {
	if x != nil {
		return x.Compactions
	}
	return nil
}

type WorkerNodeHeartbeatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status      int32              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ToAddShards []*AddShardRequest `protobuf:"bytes,2,rep,name=to_add_shards,json=toAddShards,proto3" json:"to_add_shards,omitempty"`
	// We assume the `shard_id`s are unique across tables,
	// So using `shard_id` is enough here.
	ToRemoveShards []uint64 `protobuf:"varint,3,rep,packed,name=to_remove_shards,json=toRemoveShards,proto3" json:"to_remove_shards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerNodeHeartbeatResponse) Reset() {
	*x = WorkerNodeHeartbeatResponse{}
	mi := &file_tici_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatResponse) ProtoMessage() {}

func (x *WorkerNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{5}
}

func (x *WorkerNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WorkerNodeHeartbeatResponse) GetToAddShards() []*AddShardRequest {
	if x != nil {
		return x.ToAddShards
	}
	return nil
}

func (x *WorkerNodeHeartbeatResponse) GetToRemoveShards() []uint64 {
	if x != nil {
		return x.ToRemoveShards
	}
	return nil
}

// Reader node heartbeat request
type ReaderNodeHeartbeatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reader node address
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Reader node status
	Status *ReaderNodeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// TiFlash server address
	TiflashServerAddr string `protobuf:"bytes,3,opt,name=tiflash_server_addr,json=tiflashServerAddr,proto3" json:"tiflash_server_addr,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReaderNodeHeartbeatRequest) Reset() {
	*x = ReaderNodeHeartbeatRequest{}
	mi := &file_tici_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaderNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeHeartbeatRequest) ProtoMessage() {}

func (x *ReaderNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*ReaderNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{6}
}

func (x *ReaderNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReaderNodeHeartbeatRequest) GetStatus() *ReaderNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReaderNodeHeartbeatRequest) GetTiflashServerAddr() string {
	if x != nil {
		return x.TiflashServerAddr
	}
	return ""
}

// Reader node heartbeat response
type ReaderNodeHeartbeatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReaderNodeHeartbeatResponse) Reset() {
	*x = ReaderNodeHeartbeatResponse{}
	mi := &file_tici_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaderNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeHeartbeatResponse) ProtoMessage() {}

func (x *ReaderNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*ReaderNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{7}
}

func (x *ReaderNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReaderNodeHeartbeatResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fragment metadata primarily stores all data files under a ​​fragment​​
type FragMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data format version​​, used for future iterative upgrades
	FormatVersion uint64 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// Root path of the fragment​​
	FragPath string `protobuf:"bytes,2,opt,name=frag_path,json=fragPath,proto3" json:"frag_path,omitempty"`
	// Data files under the fragment​​, relative path under frag_path
	DataFiles     []string `protobuf:"bytes,3,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FragMeta) Reset() {
	*x = FragMeta{}
	mi := &file_tici_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FragMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragMeta) ProtoMessage() {}

func (x *FragMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragMeta.ProtoReflect.Descriptor instead.
func (*FragMeta) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{8}
}

func (x *FragMeta) GetFormatVersion() uint64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *FragMeta) GetFragPath() string {
	if x != nil {
		return x.FragPath
	}
	return ""
}

func (x *FragMeta) GetDataFiles() []string {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

type AppendFragMetaRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TableId        int64                  `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId        int64                  `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId        uint64                 `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	LastCdcFile    string                 `protobuf:"bytes,4,opt,name=last_cdc_file,json=lastCdcFile,proto3" json:"last_cdc_file,omitempty"`
	WorkerNodeAddr string                 `protobuf:"bytes,5,opt,name=worker_node_addr,json=workerNodeAddr,proto3" json:"worker_node_addr,omitempty"`
	FragMetas      []*FragMeta            `protobuf:"bytes,6,rep,name=frag_metas,json=fragMetas,proto3" json:"frag_metas,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppendFragMetaRequest) Reset() {
	*x = AppendFragMetaRequest{}
	mi := &file_tici_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendFragMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFragMetaRequest) ProtoMessage() {}

func (x *AppendFragMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFragMetaRequest.ProtoReflect.Descriptor instead.
func (*AppendFragMetaRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{9}
}

func (x *AppendFragMetaRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetLastCdcFile() string {
	if x != nil {
		return x.LastCdcFile
	}
	return ""
}

func (x *AppendFragMetaRequest) GetWorkerNodeAddr() string {
	if x != nil {
		return x.WorkerNodeAddr
	}
	return ""
}

func (x *AppendFragMetaRequest) GetFragMetas() []*FragMeta {
	if x != nil {
		return x.FragMetas
	}
	return nil
}

type AppendFragMetaResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0 - success
	// ... other error codes
	Status        int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendFragMetaResponse) Reset() {
	*x = AppendFragMetaResponse{}
	mi := &file_tici_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendFragMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFragMetaResponse) ProtoMessage() {}

func (x *AppendFragMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFragMetaResponse.ProtoReflect.Descriptor instead.
func (*AppendFragMetaResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{10}
}

func (x *AppendFragMetaResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// Key range definition for shard cache queries
type KeyRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartKey      []byte                 `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey        []byte                 `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	mi := &file_tici_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{11}
}

func (x *KeyRange) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *KeyRange) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

// Shard local cache information
type ShardLocalCacheInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Shard           *ShardManifestHeader   `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	LocalCacheAddrs []string               `protobuf:"bytes,2,rep,name=local_cache_addrs,json=localCacheAddrs,proto3" json:"local_cache_addrs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShardLocalCacheInfo) Reset() {
	*x = ShardLocalCacheInfo{}
	mi := &file_tici_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardLocalCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardLocalCacheInfo) ProtoMessage() {}

func (x *ShardLocalCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardLocalCacheInfo.ProtoReflect.Descriptor instead.
func (*ShardLocalCacheInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{12}
}

func (x *ShardLocalCacheInfo) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *ShardLocalCacheInfo) GetLocalCacheAddrs() []string {
	if x != nil {
		return x.LocalCacheAddrs
	}
	return nil
}

// Request to get shard local cache information
type GetShardLocalCacheRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID to filter shards
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID to filter shards
	IndexId   int64       `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	KeyRanges []*KeyRange `protobuf:"bytes,3,rep,name=key_ranges,json=keyRanges,proto3" json:"key_ranges,omitempty"`
	// at most `limit` shards can be returned
	Limit         int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardLocalCacheRequest) Reset() {
	*x = GetShardLocalCacheRequest{}
	mi := &file_tici_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardLocalCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheRequest) ProtoMessage() {}

func (x *GetShardLocalCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheRequest.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{13}
}

func (x *GetShardLocalCacheRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetShardLocalCacheRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *GetShardLocalCacheRequest) GetKeyRanges() []*KeyRange {
	if x != nil {
		return x.KeyRanges
	}
	return nil
}

func (x *GetShardLocalCacheRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response containing shard local cache information
type GetShardLocalCacheResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status               int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ShardLocalCacheInfos []*ShardLocalCacheInfo `protobuf:"bytes,2,rep,name=shard_local_cache_infos,json=shardLocalCacheInfos,proto3" json:"shard_local_cache_infos,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetShardLocalCacheResponse) Reset() {
	*x = GetShardLocalCacheResponse{}
	mi := &file_tici_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardLocalCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheResponse) ProtoMessage() {}

func (x *GetShardLocalCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheResponse.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{14}
}

func (x *GetShardLocalCacheResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetShardLocalCacheResponse) GetShardLocalCacheInfos() []*ShardLocalCacheInfo {
	if x != nil {
		return x.ShardLocalCacheInfos
	}
	return nil
}

type DebugGetShardManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       int64                  `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId       int64                  `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Keyrange      *KeyRange              `protobuf:"bytes,3,opt,name=keyrange,proto3" json:"keyrange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugGetShardManifestRequest) Reset() {
	*x = DebugGetShardManifestRequest{}
	mi := &file_tici_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugGetShardManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugGetShardManifestRequest) ProtoMessage() {}

func (x *DebugGetShardManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugGetShardManifestRequest.ProtoReflect.Descriptor instead.
func (*DebugGetShardManifestRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{15}
}

func (x *DebugGetShardManifestRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DebugGetShardManifestRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *DebugGetShardManifestRequest) GetKeyrange() *KeyRange {
	if x != nil {
		return x.Keyrange
	}
	return nil
}

type DebugGetShardManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FragMetas     []*FragMeta            `protobuf:"bytes,1,rep,name=frag_metas,json=fragMetas,proto3" json:"frag_metas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugGetShardManifestResponse) Reset() {
	*x = DebugGetShardManifestResponse{}
	mi := &file_tici_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugGetShardManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugGetShardManifestResponse) ProtoMessage() {}

func (x *DebugGetShardManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugGetShardManifestResponse.ProtoReflect.Descriptor instead.
func (*DebugGetShardManifestResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{16}
}

func (x *DebugGetShardManifestResponse) GetFragMetas() []*FragMeta {
	if x != nil {
		return x.FragMetas
	}
	return nil
}

type GetCloudStoragePathRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Detailed schema of the fts being built.
	IndexInfo *IndexInfo `protobuf:"bytes,1,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Parent table metadata.
	TableInfo *TableInfo `protobuf:"bytes,2,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	// Inclusive lower key bound (encoded handle/rowID), non-empty.
	LowerBound []byte `protobuf:"bytes,3,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// Exclusive upper key bound, non-empty.
	UpperBound    []byte `protobuf:"bytes,4,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCloudStoragePathRequest) Reset() {
	*x = GetCloudStoragePathRequest{}
	mi := &file_tici_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudStoragePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudStoragePathRequest) ProtoMessage() {}

func (x *GetCloudStoragePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudStoragePathRequest.ProtoReflect.Descriptor instead.
func (*GetCloudStoragePathRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{17}
}

func (x *GetCloudStoragePathRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *GetCloudStoragePathRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *GetCloudStoragePathRequest) GetLowerBound() []byte {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *GetCloudStoragePathRequest) GetUpperBound() []byte {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type GetCloudStoragePathResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional human‑readable diagnostics, only defined when status ≠ 0.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Object key inside the bucket that TiDB Import should write to.
	S3Path        string `protobuf:"bytes,3,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCloudStoragePathResponse) Reset() {
	*x = GetCloudStoragePathResponse{}
	mi := &file_tici_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudStoragePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudStoragePathResponse) ProtoMessage() {}

func (x *GetCloudStoragePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudStoragePathResponse.ProtoReflect.Descriptor instead.
func (*GetCloudStoragePathResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{18}
}

func (x *GetCloudStoragePathResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCloudStoragePathResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetCloudStoragePathResponse) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

type MarkPartitionUploadFinishedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The same S3 path previously returned by GetCloudStoragePath.
	// We assume the path is unique for each partition so it can be used to
	// identify the partition.
	S3Path        string `protobuf:"bytes,1,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkPartitionUploadFinishedRequest) Reset() {
	*x = MarkPartitionUploadFinishedRequest{}
	mi := &file_tici_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkPartitionUploadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPartitionUploadFinishedRequest) ProtoMessage() {}

func (x *MarkPartitionUploadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPartitionUploadFinishedRequest.ProtoReflect.Descriptor instead.
func (*MarkPartitionUploadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{19}
}

func (x *MarkPartitionUploadFinishedRequest) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

// DXF receives this in-band result so callers can
// inspect the status and customized results.
type MarkPartitionUploadFinishedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional human‑readable diagnostics, only defined when status ≠ 0.
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkPartitionUploadFinishedResponse) Reset() {
	*x = MarkPartitionUploadFinishedResponse{}
	mi := &file_tici_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkPartitionUploadFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPartitionUploadFinishedResponse) ProtoMessage() {}

func (x *MarkPartitionUploadFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPartitionUploadFinishedResponse.ProtoReflect.Descriptor instead.
func (*MarkPartitionUploadFinishedResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{20}
}

func (x *MarkPartitionUploadFinishedResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MarkPartitionUploadFinishedResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type MarkTableUploadFinishedRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID of the target table.
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID of the target index.
	IndexId       int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkTableUploadFinishedRequest) Reset() {
	*x = MarkTableUploadFinishedRequest{}
	mi := &file_tici_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkTableUploadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTableUploadFinishedRequest) ProtoMessage() {}

func (x *MarkTableUploadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTableUploadFinishedRequest.ProtoReflect.Descriptor instead.
func (*MarkTableUploadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{21}
}

func (x *MarkTableUploadFinishedRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MarkTableUploadFinishedRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

type MarkTableUploadFinishedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional human‑readable diagnostics, only defined when status ≠ 0.
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkTableUploadFinishedResponse) Reset() {
	*x = MarkTableUploadFinishedResponse{}
	mi := &file_tici_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkTableUploadFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTableUploadFinishedResponse) ProtoMessage() {}

func (x *MarkTableUploadFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTableUploadFinishedResponse.ProtoReflect.Descriptor instead.
func (*MarkTableUploadFinishedResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{22}
}

func (x *MarkTableUploadFinishedResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MarkTableUploadFinishedResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ShardManifestHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShardId       uint64                 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	StartKey      []byte                 `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey        []byte                 `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Epoch         uint64                 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardManifestHeader) Reset() {
	*x = ShardManifestHeader{}
	mi := &file_tici_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardManifestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardManifestHeader) ProtoMessage() {}

func (x *ShardManifestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardManifestHeader.ProtoReflect.Descriptor instead.
func (*ShardManifestHeader) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{23}
}

func (x *ShardManifestHeader) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardManifestHeader) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ShardManifestHeader) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *ShardManifestHeader) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// AddShardRequest is sent from meta service to worker node
type AddShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Shard *ShardManifestHeader   `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	// Index information
	IndexInfo *IndexInfo `protobuf:"bytes,2,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Table information
	TableInfo *TableInfo `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	// If the shard is created from scratch, this field is empty
	CdcS3LastFile  string `protobuf:"bytes,4,opt,name=cdc_s3_last_file,json=cdcS3LastFile,proto3" json:"cdc_s3_last_file,omitempty"`
	CdcS3Bucket    string `protobuf:"bytes,5,opt,name=cdc_s3_bucket,json=cdcS3Bucket,proto3" json:"cdc_s3_bucket,omitempty"`
	CdcS3Prefix    string `protobuf:"bytes,6,opt,name=cdc_s3_prefix,json=cdcS3Prefix,proto3" json:"cdc_s3_prefix,omitempty"`
	S3UploadBucket string `protobuf:"bytes,7,opt,name=s3_upload_bucket,json=s3UploadBucket,proto3" json:"s3_upload_bucket,omitempty"`
	S3UploadPrefix string `protobuf:"bytes,8,opt,name=s3_upload_prefix,json=s3UploadPrefix,proto3" json:"s3_upload_prefix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddShardRequest) Reset() {
	*x = AddShardRequest{}
	mi := &file_tici_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardRequest) ProtoMessage() {}

func (x *AddShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardRequest.ProtoReflect.Descriptor instead.
func (*AddShardRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{24}
}

func (x *AddShardRequest) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *AddShardRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *AddShardRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *AddShardRequest) GetCdcS3LastFile() string {
	if x != nil {
		return x.CdcS3LastFile
	}
	return ""
}

func (x *AddShardRequest) GetCdcS3Bucket() string {
	if x != nil {
		return x.CdcS3Bucket
	}
	return ""
}

func (x *AddShardRequest) GetCdcS3Prefix() string {
	if x != nil {
		return x.CdcS3Prefix
	}
	return ""
}

func (x *AddShardRequest) GetS3UploadBucket() string {
	if x != nil {
		return x.S3UploadBucket
	}
	return ""
}

func (x *AddShardRequest) GetS3UploadPrefix() string {
	if x != nil {
		return x.S3UploadPrefix
	}
	return ""
}

// AddShardResponse
type AddShardResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status        int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddShardResponse) Reset() {
	*x = AddShardResponse{}
	mi := &file_tici_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardResponse) ProtoMessage() {}

func (x *AddShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardResponse.ProtoReflect.Descriptor instead.
func (*AddShardResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{25}
}

func (x *AddShardResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// CreateIndexRequest is a request to create an index
type CreateIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index information
	IndexInfo *IndexInfo `protobuf:"bytes,1,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Table information
	TableInfo     *TableInfo `protobuf:"bytes,2,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	mi := &file_tici_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{26}
}

func (x *CreateIndexRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateIndexRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// CreateIndexResponse is a response to the index creation request
type CreateIndexResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Created index ID
	IndexId       string `protobuf:"bytes,3,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	mi := &file_tici_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{27}
}

func (x *CreateIndexResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateIndexResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateIndexResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// DropIndexRequest is a request to drop an index
type DropIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId       int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropIndexRequest) Reset() {
	*x = DropIndexRequest{}
	mi := &file_tici_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexRequest) ProtoMessage() {}

func (x *DropIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexRequest.ProtoReflect.Descriptor instead.
func (*DropIndexRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{28}
}

func (x *DropIndexRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DropIndexRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

// DropIndexResponse is a response to the index drop request
type DropIndexResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropIndexResponse) Reset() {
	*x = DropIndexResponse{}
	mi := &file_tici_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexResponse) ProtoMessage() {}

func (x *DropIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexResponse.ProtoReflect.Descriptor instead.
func (*DropIndexResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{29}
}

func (x *DropIndexResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DropIndexResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// TableInfo represents table information
type TableInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Table name
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Database name
	DatabaseName string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// Table version
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Column information
	Columns []*ColumnInfo `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	// Whether the table is clustered
	IsClustered   bool `protobuf:"varint,6,opt,name=is_clustered,json=isClustered,proto3" json:"is_clustered,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_tici_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{30}
}

func (x *TableInfo) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableInfo) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *TableInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TableInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableInfo) GetIsClustered() bool {
	if x != nil {
		return x.IsClustered
	}
	return false
}

// ColumnInfo represents column information
type ColumnInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column ID
	ColumnId int64 `protobuf:"varint,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// Column name
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// MySQL type
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Collation
	Collation int32 `protobuf:"varint,4,opt,name=collation,proto3" json:"collation,omitempty"`
	// Column length
	ColumnLength int32 `protobuf:"varint,5,opt,name=column_length,json=columnLength,proto3" json:"column_length,omitempty"`
	// Decimal places
	Decimal int32 `protobuf:"varint,6,opt,name=decimal,proto3" json:"decimal,omitempty"`
	// Flags
	Flag uint32 `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	// Enum elements
	Elems []string `protobuf:"bytes,8,rep,name=elems,proto3" json:"elems,omitempty"`
	// Default value
	DefaultVal []byte `protobuf:"bytes,9,opt,name=default_val,json=defaultVal,proto3" json:"default_val,omitempty"`
	// Whether it's a primary key
	IsPrimaryKey bool `protobuf:"varint,10,opt,name=is_primary_key,json=isPrimaryKey,proto3" json:"is_primary_key,omitempty"`
	// Whether it's an array
	IsArray       bool `protobuf:"varint,11,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnInfo) Reset() {
	*x = ColumnInfo{}
	mi := &file_tici_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnInfo) ProtoMessage() {}

func (x *ColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnInfo.ProtoReflect.Descriptor instead.
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{31}
}

func (x *ColumnInfo) GetColumnId() int64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *ColumnInfo) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ColumnInfo) GetCollation() int32 {
	if x != nil {
		return x.Collation
	}
	return 0
}

func (x *ColumnInfo) GetColumnLength() int32 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

func (x *ColumnInfo) GetDecimal() int32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *ColumnInfo) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *ColumnInfo) GetElems() []string {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *ColumnInfo) GetDefaultVal() []byte {
	if x != nil {
		return x.DefaultVal
	}
	return nil
}

func (x *ColumnInfo) GetIsPrimaryKey() bool {
	if x != nil {
		return x.IsPrimaryKey
	}
	return false
}

func (x *ColumnInfo) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

// IndexInfo represents index information
type IndexInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// Index type (fulltext, custom)
	IndexType IndexType `protobuf:"varint,4,opt,name=index_type,json=indexType,proto3,enum=tici.IndexType" json:"index_type,omitempty"`
	// Index columns
	Columns []*ColumnInfo `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	// Whether the index is unique
	IsUnique bool `protobuf:"varint,6,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	// Parser information
	ParserInfo *ParserInfo `protobuf:"bytes,7,opt,name=parser_info,json=parserInfo,proto3" json:"parser_info,omitempty"`
	// Other index parameters
	OtherParams   map[string]string `protobuf:"bytes,8,rep,name=other_params,json=otherParams,proto3" json:"other_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexInfo) Reset() {
	*x = IndexInfo{}
	mi := &file_tici_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfo) ProtoMessage() {}

func (x *IndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfo.ProtoReflect.Descriptor instead.
func (*IndexInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{32}
}

func (x *IndexInfo) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *IndexInfo) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *IndexInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexInfo) GetIndexType() IndexType {
	if x != nil {
		return x.IndexType
	}
	return IndexType_UNKNOWN
}

func (x *IndexInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexInfo) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *IndexInfo) GetParserInfo() *ParserInfo {
	if x != nil {
		return x.ParserInfo
	}
	return nil
}

func (x *IndexInfo) GetOtherParams() map[string]string {
	if x != nil {
		return x.OtherParams
	}
	return nil
}

// ParserInfo represents parser information
type ParserInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parser type
	ParserType ParserType `protobuf:"varint,1,opt,name=parser_type,json=parserType,proto3,enum=tici.ParserType" json:"parser_type,omitempty"`
	// Parser parameters
	ParserParams  map[string]string `protobuf:"bytes,2,rep,name=parser_params,json=parserParams,proto3" json:"parser_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParserInfo) Reset() {
	*x = ParserInfo{}
	mi := &file_tici_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParserInfo) ProtoMessage() {}

func (x *ParserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParserInfo.ProtoReflect.Descriptor instead.
func (*ParserInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{33}
}

func (x *ParserInfo) GetParserType() ParserType {
	if x != nil {
		return x.ParserType
	}
	return ParserType_UNKNOWN_PARSER
}

func (x *ParserInfo) GetParserParams() map[string]string {
	if x != nil {
		return x.ParserParams
	}
	return nil
}

// GetIndexProgressRequest is a request to get the progress of an index build
type GetIndexProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId       int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexProgressRequest) Reset() {
	*x = GetIndexProgressRequest{}
	mi := &file_tici_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexProgressRequest) ProtoMessage() {}

func (x *GetIndexProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexProgressRequest.ProtoReflect.Descriptor instead.
func (*GetIndexProgressRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{34}
}

func (x *GetIndexProgressRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetIndexProgressRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

// GetIndexProgressResponse is a response containing index build progress
type GetIndexProgressResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Number of documents indexed so far
	DocumentCount uint64 `protobuf:"varint,3,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`
	// Build task state (PENDING, RUNNING, COMPLETED, FAILED)
	State GetIndexProgressResponse_State `protobuf:"varint,4,opt,name=state,proto3,enum=tici.GetIndexProgressResponse_State" json:"state,omitempty"`
	// Whether index has been uploaded to S3
	IsUploaded bool `protobuf:"varint,5,opt,name=is_uploaded,json=isUploaded,proto3" json:"is_uploaded,omitempty"`
	// Last S3 upload time in RFC3339 format
	LastUploadTime string `protobuf:"bytes,6,opt,name=last_upload_time,json=lastUploadTime,proto3" json:"last_upload_time,omitempty"`
	// S3 path where the index is stored
	S3Path        string `protobuf:"bytes,7,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexProgressResponse) Reset() {
	*x = GetIndexProgressResponse{}
	mi := &file_tici_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexProgressResponse) ProtoMessage() {}

func (x *GetIndexProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexProgressResponse.ProtoReflect.Descriptor instead.
func (*GetIndexProgressResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{35}
}

func (x *GetIndexProgressResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetIndexProgressResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetIndexProgressResponse) GetDocumentCount() uint64 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *GetIndexProgressResponse) GetState() GetIndexProgressResponse_State {
	if x != nil {
		return x.State
	}
	return GetIndexProgressResponse_PENDING
}

func (x *GetIndexProgressResponse) GetIsUploaded() bool {
	if x != nil {
		return x.IsUploaded
	}
	return false
}

func (x *GetIndexProgressResponse) GetLastUploadTime() string {
	if x != nil {
		return x.LastUploadTime
	}
	return ""
}

func (x *GetIndexProgressResponse) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

var File_tici_proto protoreflect.FileDescriptor

const file_tici_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"tici.proto\x12\x04tici\"R\n" +
	"\x10WorkerNodeStatus\x12\x1b\n" +
	"\tcpu_usage\x18\x01 \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x02 \x01(\x04R\vmemoryUsage\"\xa4\x01\n" +
	"\x10ReaderNodeStatus\x12\x1b\n" +
	"\tcpu_usage\x18\x01 \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x02 \x01(\x04R\vmemoryUsage\x12*\n" +
	"\x11requests_in_cycle\x18\x03 \x01(\rR\x0frequestsInCycle\x12$\n" +
	"\x0ecache_hit_rate\x18\x04 \x01(\x01R\fcacheHitRate\"\xc6\x01\n" +
	"\x15WorkerNodeShardStatus\x12\x1b\n" +
	"\tstart_key\x18\x01 \x01(\fR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x02 \x01(\fR\x06endKey\x12\x19\n" +
	"\btable_id\x18\x03 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x04 \x01(\x03R\aindexId\x12\x19\n" +
	"\bshard_id\x18\x05 \x01(\x04R\ashardId\x12\x14\n" +
	"\x05epoch\x18\x06 \x01(\x04R\x05epoch\x12\x10\n" +
	"\x03seq\x18\a \x01(\x04R\x03seq\"\x1c\n" +
	"\x1aWorkerNodeCompactionStatus\"\xd9\x01\n" +
	"\x1aWorkerNodeHeartbeatRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12.\n" +
	"\x06status\x18\x02 \x01(\v2\x16.tici.WorkerNodeStatusR\x06status\x123\n" +
	"\x06shards\x18\x03 \x03(\v2\x1b.tici.WorkerNodeShardStatusR\x06shards\x12B\n" +
	"\vcompactions\x18\x04 \x03(\v2 .tici.WorkerNodeCompactionStatusR\vcompactions\"\x9a\x01\n" +
	"\x1bWorkerNodeHeartbeatResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x129\n" +
	"\rto_add_shards\x18\x02 \x03(\v2\x15.tici.AddShardRequestR\vtoAddShards\x12(\n" +
	"\x10to_remove_shards\x18\x03 \x03(\x04R\x0etoRemoveShards\"\x90\x01\n" +
	"\x1aReaderNodeHeartbeatRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12.\n" +
	"\x06status\x18\x02 \x01(\v2\x16.tici.ReaderNodeStatusR\x06status\x12.\n" +
	"\x13tiflash_server_addr\x18\x03 \x01(\tR\x11tiflashServerAddr\"Z\n" +
	"\x1bReaderNodeHeartbeatResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"m\n" +
	"\bFragMeta\x12%\n" +
	"\x0eformat_version\x18\x01 \x01(\x04R\rformatVersion\x12\x1b\n" +
	"\tfrag_path\x18\x02 \x01(\tR\bfragPath\x12\x1d\n" +
	"\n" +
	"data_files\x18\x03 \x03(\tR\tdataFiles\"\xe5\x01\n" +
	"\x15AppendFragMetaRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12\x19\n" +
	"\bshard_id\x18\x03 \x01(\x04R\ashardId\x12\"\n" +
	"\rlast_cdc_file\x18\x04 \x01(\tR\vlastCdcFile\x12(\n" +
	"\x10worker_node_addr\x18\x05 \x01(\tR\x0eworkerNodeAddr\x12-\n" +
	"\n" +
	"frag_metas\x18\x06 \x03(\v2\x0e.tici.FragMetaR\tfragMetas\"0\n" +
	"\x16AppendFragMetaResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\"@\n" +
	"\bKeyRange\x12\x1b\n" +
	"\tstart_key\x18\x01 \x01(\fR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x02 \x01(\fR\x06endKey\"r\n" +
	"\x13ShardLocalCacheInfo\x12/\n" +
	"\x05shard\x18\x01 \x01(\v2\x19.tici.ShardManifestHeaderR\x05shard\x12*\n" +
	"\x11local_cache_addrs\x18\x02 \x03(\tR\x0flocalCacheAddrs\"\x96\x01\n" +
	"\x19GetShardLocalCacheRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12-\n" +
	"\n" +
	"key_ranges\x18\x03 \x03(\v2\x0e.tici.KeyRangeR\tkeyRanges\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"\x86\x01\n" +
	"\x1aGetShardLocalCacheResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12P\n" +
	"\x17shard_local_cache_infos\x18\x02 \x03(\v2\x19.tici.ShardLocalCacheInfoR\x14shardLocalCacheInfos\"\x80\x01\n" +
	"\x1cDebugGetShardManifestRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12*\n" +
	"\bkeyrange\x18\x03 \x01(\v2\x0e.tici.KeyRangeR\bkeyrange\"N\n" +
	"\x1dDebugGetShardManifestResponse\x12-\n" +
	"\n" +
	"frag_metas\x18\x01 \x03(\v2\x0e.tici.FragMetaR\tfragMetas\"\xbe\x01\n" +
	"\x1aGetCloudStoragePathRequest\x12.\n" +
	"\n" +
	"index_info\x18\x01 \x01(\v2\x0f.tici.IndexInfoR\tindexInfo\x12.\n" +
	"\n" +
	"table_info\x18\x02 \x01(\v2\x0f.tici.TableInfoR\ttableInfo\x12\x1f\n" +
	"\vlower_bound\x18\x03 \x01(\fR\n" +
	"lowerBound\x12\x1f\n" +
	"\vupper_bound\x18\x04 \x01(\fR\n" +
	"upperBound\"s\n" +
	"\x1bGetCloudStoragePathResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x17\n" +
	"\as3_path\x18\x03 \x01(\tR\x06s3Path\"=\n" +
	"\"MarkPartitionUploadFinishedRequest\x12\x17\n" +
	"\as3_path\x18\x01 \x01(\tR\x06s3Path\"b\n" +
	"#MarkPartitionUploadFinishedResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"V\n" +
	"\x1eMarkTableUploadFinishedRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\"^\n" +
	"\x1fMarkTableUploadFinishedResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"|\n" +
	"\x13ShardManifestHeader\x12\x19\n" +
	"\bshard_id\x18\x01 \x01(\x04R\ashardId\x12\x1b\n" +
	"\tstart_key\x18\x02 \x01(\fR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x03 \x01(\fR\x06endKey\x12\x14\n" +
	"\x05epoch\x18\x04 \x01(\x04R\x05epoch\"\xe7\x02\n" +
	"\x0fAddShardRequest\x12/\n" +
	"\x05shard\x18\x01 \x01(\v2\x19.tici.ShardManifestHeaderR\x05shard\x12.\n" +
	"\n" +
	"index_info\x18\x02 \x01(\v2\x0f.tici.IndexInfoR\tindexInfo\x12.\n" +
	"\n" +
	"table_info\x18\x03 \x01(\v2\x0f.tici.TableInfoR\ttableInfo\x12'\n" +
	"\x10cdc_s3_last_file\x18\x04 \x01(\tR\rcdcS3LastFile\x12\"\n" +
	"\rcdc_s3_bucket\x18\x05 \x01(\tR\vcdcS3Bucket\x12\"\n" +
	"\rcdc_s3_prefix\x18\x06 \x01(\tR\vcdcS3Prefix\x12(\n" +
	"\x10s3_upload_bucket\x18\a \x01(\tR\x0es3UploadBucket\x12(\n" +
	"\x10s3_upload_prefix\x18\b \x01(\tR\x0es3UploadPrefix\"*\n" +
	"\x10AddShardResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\"t\n" +
	"\x12CreateIndexRequest\x12.\n" +
	"\n" +
	"index_info\x18\x01 \x01(\v2\x0f.tici.IndexInfoR\tindexInfo\x12.\n" +
	"\n" +
	"table_info\x18\x02 \x01(\v2\x0f.tici.TableInfoR\ttableInfo\"m\n" +
	"\x13CreateIndexResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x19\n" +
	"\bindex_id\x18\x03 \x01(\tR\aindexId\"H\n" +
	"\x10DropIndexRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\"P\n" +
	"\x11DropIndexResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"\xd3\x01\n" +
	"\tTableInfo\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\x12#\n" +
	"\rdatabase_name\x18\x03 \x01(\tR\fdatabaseName\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x03R\aversion\x12*\n" +
	"\acolumns\x18\x05 \x03(\v2\x10.tici.ColumnInfoR\acolumns\x12!\n" +
	"\fis_clustered\x18\x06 \x01(\bR\visClustered\"\xc7\x02\n" +
	"\n" +
	"ColumnInfo\x12\x1b\n" +
	"\tcolumn_id\x18\x01 \x01(\x03R\bcolumnId\x12\x1f\n" +
	"\vcolumn_name\x18\x02 \x01(\tR\n" +
	"columnName\x12\x12\n" +
	"\x04type\x18\x03 \x01(\x05R\x04type\x12\x1c\n" +
	"\tcollation\x18\x04 \x01(\x05R\tcollation\x12#\n" +
	"\rcolumn_length\x18\x05 \x01(\x05R\fcolumnLength\x12\x18\n" +
	"\adecimal\x18\x06 \x01(\x05R\adecimal\x12\x12\n" +
	"\x04flag\x18\a \x01(\rR\x04flag\x12\x14\n" +
	"\x05elems\x18\b \x03(\tR\x05elems\x12\x1f\n" +
	"\vdefault_val\x18\t \x01(\fR\n" +
	"defaultVal\x12$\n" +
	"\x0eis_primary_key\x18\n" +
	" \x01(\bR\fisPrimaryKey\x12\x19\n" +
	"\bis_array\x18\v \x01(\bR\aisArray\"\x91\x03\n" +
	"\tIndexInfo\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12\x1d\n" +
	"\n" +
	"index_name\x18\x03 \x01(\tR\tindexName\x12.\n" +
	"\n" +
	"index_type\x18\x04 \x01(\x0e2\x0f.tici.IndexTypeR\tindexType\x12*\n" +
	"\acolumns\x18\x05 \x03(\v2\x10.tici.ColumnInfoR\acolumns\x12\x1b\n" +
	"\tis_unique\x18\x06 \x01(\bR\bisUnique\x121\n" +
	"\vparser_info\x18\a \x01(\v2\x10.tici.ParserInfoR\n" +
	"parserInfo\x12C\n" +
	"\fother_params\x18\b \x03(\v2 .tici.IndexInfo.OtherParamsEntryR\votherParams\x1a>\n" +
	"\x10OtherParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc9\x01\n" +
	"\n" +
	"ParserInfo\x121\n" +
	"\vparser_type\x18\x01 \x01(\x0e2\x10.tici.ParserTypeR\n" +
	"parserType\x12G\n" +
	"\rparser_params\x18\x02 \x03(\v2\".tici.ParserInfo.ParserParamsEntryR\fparserParams\x1a?\n" +
	"\x11ParserParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"O\n" +
	"\x17GetIndexProgressRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\"\xf5\x02\n" +
	"\x18GetIndexProgressResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12%\n" +
	"\x0edocument_count\x18\x03 \x01(\x04R\rdocumentCount\x12:\n" +
	"\x05state\x18\x04 \x01(\x0e2$.tici.GetIndexProgressResponse.StateR\x05state\x12\x1f\n" +
	"\vis_uploaded\x18\x05 \x01(\bR\n" +
	"isUploaded\x12(\n" +
	"\x10last_upload_time\x18\x06 \x01(\tR\x0elastUploadTime\x12\x17\n" +
	"\as3_path\x18\a \x01(\tR\x06s3Path\"U\n" +
	"\x05State\x12\v\n" +
	"\aPENDING\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\r\n" +
	"\tCOMPLETED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\x12\f\n" +
	"\bNOTFOUND\x10\x04\x12\t\n" +
	"\x05ERROR\x10\x05*3\n" +
	"\tIndexType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\r\n" +
	"\tFULL_TEXT\x10\x01\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x02*F\n" +
	"\n" +
	"ParserType\x12\x12\n" +
	"\x0eUNKNOWN_PARSER\x10\x00\x12\x12\n" +
	"\x0eDEFAULT_PARSER\x10\x01\x12\x10\n" +
	"\fOTHER_PARSER\x10\x022\xde\a\n" +
	"\vMetaService\x12Z\n" +
	"\x13WorkerNodeHeartbeat\x12 .tici.WorkerNodeHeartbeatRequest\x1a!.tici.WorkerNodeHeartbeatResponse\x12Z\n" +
	"\x13ReaderNodeHeartbeat\x12 .tici.ReaderNodeHeartbeatRequest\x1a!.tici.ReaderNodeHeartbeatResponse\x12B\n" +
	"\vCreateIndex\x12\x18.tici.CreateIndexRequest\x1a\x19.tici.CreateIndexResponse\x12<\n" +
	"\tDropIndex\x12\x16.tici.DropIndexRequest\x1a\x17.tici.DropIndexResponse\x12Q\n" +
	"\x10GetIndexProgress\x12\x1d.tici.GetIndexProgressRequest\x1a\x1e.tici.GetIndexProgressResponse\x12K\n" +
	"\x0eAppendFragMeta\x12\x1b.tici.AppendFragMetaRequest\x1a\x1c.tici.AppendFragMetaResponse\x12[\n" +
	"\x16GetShardLocalCacheInfo\x12\x1f.tici.GetShardLocalCacheRequest\x1a .tici.GetShardLocalCacheResponse\x12`\n" +
	"\x15DebugGetShardManifest\x12\".tici.DebugGetShardManifestRequest\x1a#.tici.DebugGetShardManifestResponse\x12Z\n" +
	"\x13GetCloudStoragePath\x12 .tici.GetCloudStoragePathRequest\x1a!.tici.GetCloudStoragePathResponse\x12r\n" +
	"\x1bMarkPartitionUploadFinished\x12(.tici.MarkPartitionUploadFinishedRequest\x1a).tici.MarkPartitionUploadFinishedResponse\x12f\n" +
	"\x17MarkTableUploadFinished\x12$.tici.MarkTableUploadFinishedRequest\x1a%.tici.MarkTableUploadFinishedResponse2K\n" +
	"\x0eIndexerService\x129\n" +
	"\bAddShard\x12\x15.tici.AddShardRequest\x1a\x16.tici.AddShardResponseB\n" +
	"Z\bpkg/ticib\x06proto3"

var (
	file_tici_proto_rawDescOnce sync.Once
	file_tici_proto_rawDescData []byte
)

func file_tici_proto_rawDescGZIP() []byte {
	file_tici_proto_rawDescOnce.Do(func() {
		file_tici_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tici_proto_rawDesc), len(file_tici_proto_rawDesc)))
	})
	return file_tici_proto_rawDescData
}

var file_tici_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tici_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_tici_proto_goTypes = []any{
	(IndexType)(0),                              // 0: tici.IndexType
	(ParserType)(0),                             // 1: tici.ParserType
	(GetIndexProgressResponse_State)(0),         // 2: tici.GetIndexProgressResponse.State
	(*WorkerNodeStatus)(nil),                    // 3: tici.WorkerNodeStatus
	(*ReaderNodeStatus)(nil),                    // 4: tici.ReaderNodeStatus
	(*WorkerNodeShardStatus)(nil),               // 5: tici.WorkerNodeShardStatus
	(*WorkerNodeCompactionStatus)(nil),          // 6: tici.WorkerNodeCompactionStatus
	(*WorkerNodeHeartbeatRequest)(nil),          // 7: tici.WorkerNodeHeartbeatRequest
	(*WorkerNodeHeartbeatResponse)(nil),         // 8: tici.WorkerNodeHeartbeatResponse
	(*ReaderNodeHeartbeatRequest)(nil),          // 9: tici.ReaderNodeHeartbeatRequest
	(*ReaderNodeHeartbeatResponse)(nil),         // 10: tici.ReaderNodeHeartbeatResponse
	(*FragMeta)(nil),                            // 11: tici.FragMeta
	(*AppendFragMetaRequest)(nil),               // 12: tici.AppendFragMetaRequest
	(*AppendFragMetaResponse)(nil),              // 13: tici.AppendFragMetaResponse
	(*KeyRange)(nil),                            // 14: tici.KeyRange
	(*ShardLocalCacheInfo)(nil),                 // 15: tici.ShardLocalCacheInfo
	(*GetShardLocalCacheRequest)(nil),           // 16: tici.GetShardLocalCacheRequest
	(*GetShardLocalCacheResponse)(nil),          // 17: tici.GetShardLocalCacheResponse
	(*DebugGetShardManifestRequest)(nil),        // 18: tici.DebugGetShardManifestRequest
	(*DebugGetShardManifestResponse)(nil),       // 19: tici.DebugGetShardManifestResponse
	(*GetCloudStoragePathRequest)(nil),          // 20: tici.GetCloudStoragePathRequest
	(*GetCloudStoragePathResponse)(nil),         // 21: tici.GetCloudStoragePathResponse
	(*MarkPartitionUploadFinishedRequest)(nil),  // 22: tici.MarkPartitionUploadFinishedRequest
	(*MarkPartitionUploadFinishedResponse)(nil), // 23: tici.MarkPartitionUploadFinishedResponse
	(*MarkTableUploadFinishedRequest)(nil),      // 24: tici.MarkTableUploadFinishedRequest
	(*MarkTableUploadFinishedResponse)(nil),     // 25: tici.MarkTableUploadFinishedResponse
	(*ShardManifestHeader)(nil),                 // 26: tici.ShardManifestHeader
	(*AddShardRequest)(nil),                     // 27: tici.AddShardRequest
	(*AddShardResponse)(nil),                    // 28: tici.AddShardResponse
	(*CreateIndexRequest)(nil),                  // 29: tici.CreateIndexRequest
	(*CreateIndexResponse)(nil),                 // 30: tici.CreateIndexResponse
	(*DropIndexRequest)(nil),                    // 31: tici.DropIndexRequest
	(*DropIndexResponse)(nil),                   // 32: tici.DropIndexResponse
	(*TableInfo)(nil),                           // 33: tici.TableInfo
	(*ColumnInfo)(nil),                          // 34: tici.ColumnInfo
	(*IndexInfo)(nil),                           // 35: tici.IndexInfo
	(*ParserInfo)(nil),                          // 36: tici.ParserInfo
	(*GetIndexProgressRequest)(nil),             // 37: tici.GetIndexProgressRequest
	(*GetIndexProgressResponse)(nil),            // 38: tici.GetIndexProgressResponse
	nil,                                         // 39: tici.IndexInfo.OtherParamsEntry
	nil,                                         // 40: tici.ParserInfo.ParserParamsEntry
}
var file_tici_proto_depIdxs = []int32{
	3,  // 0: tici.WorkerNodeHeartbeatRequest.status:type_name -> tici.WorkerNodeStatus
	5,  // 1: tici.WorkerNodeHeartbeatRequest.shards:type_name -> tici.WorkerNodeShardStatus
	6,  // 2: tici.WorkerNodeHeartbeatRequest.compactions:type_name -> tici.WorkerNodeCompactionStatus
	27, // 3: tici.WorkerNodeHeartbeatResponse.to_add_shards:type_name -> tici.AddShardRequest
	4,  // 4: tici.ReaderNodeHeartbeatRequest.status:type_name -> tici.ReaderNodeStatus
	11, // 5: tici.AppendFragMetaRequest.frag_metas:type_name -> tici.FragMeta
	26, // 6: tici.ShardLocalCacheInfo.shard:type_name -> tici.ShardManifestHeader
	14, // 7: tici.GetShardLocalCacheRequest.key_ranges:type_name -> tici.KeyRange
	15, // 8: tici.GetShardLocalCacheResponse.shard_local_cache_infos:type_name -> tici.ShardLocalCacheInfo
	14, // 9: tici.DebugGetShardManifestRequest.keyrange:type_name -> tici.KeyRange
	11, // 10: tici.DebugGetShardManifestResponse.frag_metas:type_name -> tici.FragMeta
	35, // 11: tici.GetCloudStoragePathRequest.index_info:type_name -> tici.IndexInfo
	33, // 12: tici.GetCloudStoragePathRequest.table_info:type_name -> tici.TableInfo
	26, // 13: tici.AddShardRequest.shard:type_name -> tici.ShardManifestHeader
	35, // 14: tici.AddShardRequest.index_info:type_name -> tici.IndexInfo
	33, // 15: tici.AddShardRequest.table_info:type_name -> tici.TableInfo
	35, // 16: tici.CreateIndexRequest.index_info:type_name -> tici.IndexInfo
	33, // 17: tici.CreateIndexRequest.table_info:type_name -> tici.TableInfo
	34, // 18: tici.TableInfo.columns:type_name -> tici.ColumnInfo
	0,  // 19: tici.IndexInfo.index_type:type_name -> tici.IndexType
	34, // 20: tici.IndexInfo.columns:type_name -> tici.ColumnInfo
	36, // 21: tici.IndexInfo.parser_info:type_name -> tici.ParserInfo
	39, // 22: tici.IndexInfo.other_params:type_name -> tici.IndexInfo.OtherParamsEntry
	1,  // 23: tici.ParserInfo.parser_type:type_name -> tici.ParserType
	40, // 24: tici.ParserInfo.parser_params:type_name -> tici.ParserInfo.ParserParamsEntry
	2,  // 25: tici.GetIndexProgressResponse.state:type_name -> tici.GetIndexProgressResponse.State
	7,  // 26: tici.MetaService.WorkerNodeHeartbeat:input_type -> tici.WorkerNodeHeartbeatRequest
	9,  // 27: tici.MetaService.ReaderNodeHeartbeat:input_type -> tici.ReaderNodeHeartbeatRequest
	29, // 28: tici.MetaService.CreateIndex:input_type -> tici.CreateIndexRequest
	31, // 29: tici.MetaService.DropIndex:input_type -> tici.DropIndexRequest
	37, // 30: tici.MetaService.GetIndexProgress:input_type -> tici.GetIndexProgressRequest
	12, // 31: tici.MetaService.AppendFragMeta:input_type -> tici.AppendFragMetaRequest
	16, // 32: tici.MetaService.GetShardLocalCacheInfo:input_type -> tici.GetShardLocalCacheRequest
	18, // 33: tici.MetaService.DebugGetShardManifest:input_type -> tici.DebugGetShardManifestRequest
	20, // 34: tici.MetaService.GetCloudStoragePath:input_type -> tici.GetCloudStoragePathRequest
	22, // 35: tici.MetaService.MarkPartitionUploadFinished:input_type -> tici.MarkPartitionUploadFinishedRequest
	24, // 36: tici.MetaService.MarkTableUploadFinished:input_type -> tici.MarkTableUploadFinishedRequest
	27, // 37: tici.IndexerService.AddShard:input_type -> tici.AddShardRequest
	8,  // 38: tici.MetaService.WorkerNodeHeartbeat:output_type -> tici.WorkerNodeHeartbeatResponse
	10, // 39: tici.MetaService.ReaderNodeHeartbeat:output_type -> tici.ReaderNodeHeartbeatResponse
	30, // 40: tici.MetaService.CreateIndex:output_type -> tici.CreateIndexResponse
	32, // 41: tici.MetaService.DropIndex:output_type -> tici.DropIndexResponse
	38, // 42: tici.MetaService.GetIndexProgress:output_type -> tici.GetIndexProgressResponse
	13, // 43: tici.MetaService.AppendFragMeta:output_type -> tici.AppendFragMetaResponse
	17, // 44: tici.MetaService.GetShardLocalCacheInfo:output_type -> tici.GetShardLocalCacheResponse
	19, // 45: tici.MetaService.DebugGetShardManifest:output_type -> tici.DebugGetShardManifestResponse
	21, // 46: tici.MetaService.GetCloudStoragePath:output_type -> tici.GetCloudStoragePathResponse
	23, // 47: tici.MetaService.MarkPartitionUploadFinished:output_type -> tici.MarkPartitionUploadFinishedResponse
	25, // 48: tici.MetaService.MarkTableUploadFinished:output_type -> tici.MarkTableUploadFinishedResponse
	28, // 49: tici.IndexerService.AddShard:output_type -> tici.AddShardResponse
	38, // [38:50] is the sub-list for method output_type
	26, // [26:38] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_tici_proto_init() }
func file_tici_proto_init() {
	if File_tici_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tici_proto_rawDesc), len(file_tici_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tici_proto_goTypes,
		DependencyIndexes: file_tici_proto_depIdxs,
		EnumInfos:         file_tici_proto_enumTypes,
		MessageInfos:      file_tici_proto_msgTypes,
	}.Build()
	File_tici_proto = out.File
	file_tici_proto_goTypes = nil
	file_tici_proto_depIdxs = nil
}
