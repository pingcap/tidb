// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.3
// source: tici.proto

package tici

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompactType int32

const (
	CompactType_Delta CompactType = 0
	CompactType_Base  CompactType = 1
	CompactType_Full  CompactType = 2
)

// Enum value maps for CompactType.
var (
	CompactType_name = map[int32]string{
		0: "Delta",
		1: "Base",
		2: "Full",
	}
	CompactType_value = map[string]int32{
		"Delta": 0,
		"Base":  1,
		"Full":  2,
	}
)

func (x CompactType) Enum() *CompactType {
	p := new(CompactType)
	*p = x
	return p
}

func (x CompactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompactType) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[0].Descriptor()
}

func (CompactType) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[0]
}

func (x CompactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompactType.Descriptor instead.
func (CompactType) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{0}
}

// IndexType represents the type of index
type IndexType int32

const (
	// Default value must be 0 in proto3
	IndexType_UNKNOWN IndexType = 0
	// Full-text index type
	IndexType_FULL_TEXT IndexType = 1
	// Custom index type
	IndexType_CUSTOM IndexType = 2
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FULL_TEXT",
		2: "CUSTOM",
	}
	IndexType_value = map[string]int32{
		"UNKNOWN":   0,
		"FULL_TEXT": 1,
		"CUSTOM":    2,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[1].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[1]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{1}
}

// ParserType represents the type of parser
type ParserType int32

const (
	// Default value must be 0 in proto3
	ParserType_UNKNOWN_PARSER ParserType = 0
	// Default parser
	ParserType_DEFAULT_PARSER ParserType = 1
	// Other parser types
	ParserType_OTHER_PARSER ParserType = 2
)

// Enum value maps for ParserType.
var (
	ParserType_name = map[int32]string{
		0: "UNKNOWN_PARSER",
		1: "DEFAULT_PARSER",
		2: "OTHER_PARSER",
	}
	ParserType_value = map[string]int32{
		"UNKNOWN_PARSER": 0,
		"DEFAULT_PARSER": 1,
		"OTHER_PARSER":   2,
	}
)

func (x ParserType) Enum() *ParserType {
	p := new(ParserType)
	*p = x
	return p
}

func (x ParserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParserType) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[2].Descriptor()
}

func (ParserType) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[2]
}

func (x ParserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParserType.Descriptor instead.
func (ParserType) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{2}
}

type GetIndexProgressResponse_State int32

const (
	GetIndexProgressResponse_PENDING   GetIndexProgressResponse_State = 0
	GetIndexProgressResponse_RUNNING   GetIndexProgressResponse_State = 1
	GetIndexProgressResponse_COMPLETED GetIndexProgressResponse_State = 2
	GetIndexProgressResponse_FAILED    GetIndexProgressResponse_State = 3
	GetIndexProgressResponse_NOTFOUND  GetIndexProgressResponse_State = 4
	GetIndexProgressResponse_ERROR     GetIndexProgressResponse_State = 5
)

// Enum value maps for GetIndexProgressResponse_State.
var (
	GetIndexProgressResponse_State_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "COMPLETED",
		3: "FAILED",
		4: "NOTFOUND",
		5: "ERROR",
	}
	GetIndexProgressResponse_State_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"FAILED":    3,
		"NOTFOUND":  4,
		"ERROR":     5,
	}
)

func (x GetIndexProgressResponse_State) Enum() *GetIndexProgressResponse_State {
	p := new(GetIndexProgressResponse_State)
	*p = x
	return p
}

func (x GetIndexProgressResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetIndexProgressResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_tici_proto_enumTypes[3].Descriptor()
}

func (GetIndexProgressResponse_State) Type() protoreflect.EnumType {
	return &file_tici_proto_enumTypes[3]
}

func (x GetIndexProgressResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetIndexProgressResponse_State.Descriptor instead.
func (GetIndexProgressResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{35, 0}
}

type WorkerNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO Need more metrics, such as disk usage, quotas, cache miss rates
	CpuUsage    float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage uint64  `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
}

func (x *WorkerNodeStatus) Reset() {
	*x = WorkerNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeStatus) ProtoMessage() {}

func (x *WorkerNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *WorkerNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

// Reader node status information
type ReaderNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU usage percentage (0.0 to 100.0)
	CpuUsage float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// Memory usage in bytes
	MemoryUsage uint64 `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	// Number of requests processed in current heartbeat cycle
	RequestsInCycle uint32 `protobuf:"varint,3,opt,name=requests_in_cycle,json=requestsInCycle,proto3" json:"requests_in_cycle,omitempty"`
	// Cache hit rate percentage (0.0 to 100.0)
	CacheHitRate float64 `protobuf:"fixed64,4,opt,name=cache_hit_rate,json=cacheHitRate,proto3" json:"cache_hit_rate,omitempty"`
}

func (x *ReaderNodeStatus) Reset() {
	*x = ReaderNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReaderNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeStatus) ProtoMessage() {}

func (x *ReaderNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeStatus.ProtoReflect.Descriptor instead.
func (*ReaderNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{1}
}

func (x *ReaderNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ReaderNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ReaderNodeStatus) GetRequestsInCycle() uint32 {
	if x != nil {
		return x.RequestsInCycle
	}
	return 0
}

func (x *ReaderNodeStatus) GetCacheHitRate() float64 {
	if x != nil {
		return x.CacheHitRate
	}
	return 0
}

// Some fields may be duplicated with ShardManifestHeader,
// however, just leave them here.
type WorkerNodeShardStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartKey []byte `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// TODO shard_id is unique across tables and indexes.
	// We still need them because in meta service we are not currently maintain
	// this correspondence.
	TableId int64  `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId int64  `protobuf:"varint,4,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId uint64 `protobuf:"varint,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Epoch   uint64 `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Seq     uint64 `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *WorkerNodeShardStatus) Reset() {
	*x = WorkerNodeShardStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeShardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeShardStatus) ProtoMessage() {}

func (x *WorkerNodeShardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeShardStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeShardStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerNodeShardStatus) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *WorkerNodeShardStatus) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *WorkerNodeShardStatus) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type WorkerNodeCompactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkerNodeCompactionStatus) Reset() {
	*x = WorkerNodeCompactionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeCompactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeCompactionStatus) ProtoMessage() {}

func (x *WorkerNodeCompactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeCompactionStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeCompactionStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{3}
}

type WorkerNodeHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr        string                        `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status      *WorkerNodeStatus             `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Shards      []*WorkerNodeShardStatus      `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
	Compactions []*WorkerNodeCompactionStatus `protobuf:"bytes,4,rep,name=compactions,proto3" json:"compactions,omitempty"`
}

func (x *WorkerNodeHeartbeatRequest) Reset() {
	*x = WorkerNodeHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatRequest) ProtoMessage() {}

func (x *WorkerNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerNodeHeartbeatRequest) GetStatus() *WorkerNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetShards() []*WorkerNodeShardStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetCompactions() []*WorkerNodeCompactionStatus {
	if x != nil {
		return x.Compactions
	}
	return nil
}

type WorkerNodeHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status      int32              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ToAddShards []*AddShardRequest `protobuf:"bytes,2,rep,name=to_add_shards,json=toAddShards,proto3" json:"to_add_shards,omitempty"`
	// We assume the `shard_id`s are unique across tables,
	// So using `shard_id` is enough here.
	ToRemoveShards []uint64 `protobuf:"varint,3,rep,packed,name=to_remove_shards,json=toRemoveShards,proto3" json:"to_remove_shards,omitempty"`
}

func (x *WorkerNodeHeartbeatResponse) Reset() {
	*x = WorkerNodeHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatResponse) ProtoMessage() {}

func (x *WorkerNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{5}
}

func (x *WorkerNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WorkerNodeHeartbeatResponse) GetToAddShards() []*AddShardRequest {
	if x != nil {
		return x.ToAddShards
	}
	return nil
}

func (x *WorkerNodeHeartbeatResponse) GetToRemoveShards() []uint64 {
	if x != nil {
		return x.ToRemoveShards
	}
	return nil
}

// Reader node heartbeat request
type ReaderNodeHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reader node address
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Reader node status
	Status *ReaderNodeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// TiFlash server address
	TiflashServerAddr string `protobuf:"bytes,3,opt,name=tiflash_server_addr,json=tiflashServerAddr,proto3" json:"tiflash_server_addr,omitempty"`
	// List of cached shard IDs on this reader
	CachedShardIds []uint64 `protobuf:"varint,4,rep,packed,name=cached_shard_ids,json=cachedShardIds,proto3" json:"cached_shard_ids,omitempty"`
}

func (x *ReaderNodeHeartbeatRequest) Reset() {
	*x = ReaderNodeHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReaderNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeHeartbeatRequest) ProtoMessage() {}

func (x *ReaderNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*ReaderNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{6}
}

func (x *ReaderNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReaderNodeHeartbeatRequest) GetStatus() *ReaderNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReaderNodeHeartbeatRequest) GetTiflashServerAddr() string {
	if x != nil {
		return x.TiflashServerAddr
	}
	return ""
}

func (x *ReaderNodeHeartbeatRequest) GetCachedShardIds() []uint64 {
	if x != nil {
		return x.CachedShardIds
	}
	return nil
}

// Reader node heartbeat response
type ReaderNodeHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ReaderNodeHeartbeatResponse) Reset() {
	*x = ReaderNodeHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReaderNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeHeartbeatResponse) ProtoMessage() {}

func (x *ReaderNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*ReaderNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{7}
}

func (x *ReaderNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReaderNodeHeartbeatResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fragment metadata primarily stores all data files under a
// ​​fragment​​
type FragProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total file size of fragment.
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Distinct handle count in fragment.
	Count     uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	MinHandle []byte `protobuf:"bytes,3,opt,name=min_handle,json=minHandle,proto3" json:"min_handle,omitempty"`
	MidHandle []byte `protobuf:"bytes,4,opt,name=mid_handle,json=midHandle,proto3" json:"mid_handle,omitempty"`
	MaxHandle []byte `protobuf:"bytes,5,opt,name=max_handle,json=maxHandle,proto3" json:"max_handle,omitempty"`
}

func (x *FragProperty) Reset() {
	*x = FragProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragProperty) ProtoMessage() {}

func (x *FragProperty) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragProperty.ProtoReflect.Descriptor instead.
func (*FragProperty) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{8}
}

func (x *FragProperty) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FragProperty) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FragProperty) GetMinHandle() []byte {
	if x != nil {
		return x.MinHandle
	}
	return nil
}

func (x *FragProperty) GetMidHandle() []byte {
	if x != nil {
		return x.MidHandle
	}
	return nil
}

func (x *FragProperty) GetMaxHandle() []byte {
	if x != nil {
		return x.MaxHandle
	}
	return nil
}

type FragMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data format version​​, used for future iterative upgrades
	FormatVersion uint64 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// Root path of the fragment​​
	FragPath      string                   `protobuf:"bytes,2,opt,name=frag_path,json=fragPath,proto3" json:"frag_path,omitempty"`
	HasDeletedSet bool                     `protobuf:"varint,3,opt,name=has_deleted_set,json=hasDeletedSet,proto3" json:"has_deleted_set,omitempty"`
	Segs          []*FragMeta_IndexSegment `protobuf:"bytes,4,rep,name=segs,proto3" json:"segs,omitempty"`
	Property      *FragProperty            `protobuf:"bytes,5,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *FragMeta) Reset() {
	*x = FragMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragMeta) ProtoMessage() {}

func (x *FragMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragMeta.ProtoReflect.Descriptor instead.
func (*FragMeta) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{9}
}

func (x *FragMeta) GetFormatVersion() uint64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *FragMeta) GetFragPath() string {
	if x != nil {
		return x.FragPath
	}
	return ""
}

func (x *FragMeta) GetHasDeletedSet() bool {
	if x != nil {
		return x.HasDeletedSet
	}
	return false
}

func (x *FragMeta) GetSegs() []*FragMeta_IndexSegment {
	if x != nil {
		return x.Segs
	}
	return nil
}

func (x *FragMeta) GetProperty() *FragProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

type AppendFragMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId        int64       `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId        int64       `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId        uint64      `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	LastCdcFile    string      `protobuf:"bytes,4,opt,name=last_cdc_file,json=lastCdcFile,proto3" json:"last_cdc_file,omitempty"`
	WorkerNodeAddr string      `protobuf:"bytes,5,opt,name=worker_node_addr,json=workerNodeAddr,proto3" json:"worker_node_addr,omitempty"`
	FragMetas      []*FragMeta `protobuf:"bytes,6,rep,name=frag_metas,json=fragMetas,proto3" json:"frag_metas,omitempty"`
}

func (x *AppendFragMetaRequest) Reset() {
	*x = AppendFragMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendFragMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFragMetaRequest) ProtoMessage() {}

func (x *AppendFragMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFragMetaRequest.ProtoReflect.Descriptor instead.
func (*AppendFragMetaRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{10}
}

func (x *AppendFragMetaRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetLastCdcFile() string {
	if x != nil {
		return x.LastCdcFile
	}
	return ""
}

func (x *AppendFragMetaRequest) GetWorkerNodeAddr() string {
	if x != nil {
		return x.WorkerNodeAddr
	}
	return ""
}

func (x *AppendFragMetaRequest) GetFragMetas() []*FragMeta {
	if x != nil {
		return x.FragMetas
	}
	return nil
}

type AppendFragMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppendFragMetaResponse) Reset() {
	*x = AppendFragMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendFragMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFragMetaResponse) ProtoMessage() {}

func (x *AppendFragMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFragMetaResponse.ProtoReflect.Descriptor instead.
func (*AppendFragMetaResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{11}
}

func (x *AppendFragMetaResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// Key range definition
type KeyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive lower key bound
	StartKey []byte `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// Exclusive upper key bound
	EndKey []byte `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{12}
}

func (x *KeyRange) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *KeyRange) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

// Shard local cache information
type ShardLocalCacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard           *ShardManifestHeader `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	LocalCacheAddrs []string             `protobuf:"bytes,2,rep,name=local_cache_addrs,json=localCacheAddrs,proto3" json:"local_cache_addrs,omitempty"`
}

func (x *ShardLocalCacheInfo) Reset() {
	*x = ShardLocalCacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardLocalCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardLocalCacheInfo) ProtoMessage() {}

func (x *ShardLocalCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardLocalCacheInfo.ProtoReflect.Descriptor instead.
func (*ShardLocalCacheInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{13}
}

func (x *ShardLocalCacheInfo) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *ShardLocalCacheInfo) GetLocalCacheAddrs() []string {
	if x != nil {
		return x.LocalCacheAddrs
	}
	return nil
}

// Request to get shard local cache information
type GetShardLocalCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID to filter shards
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID to filter shards
	IndexId   int64       `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	KeyRanges []*KeyRange `protobuf:"bytes,3,rep,name=key_ranges,json=keyRanges,proto3" json:"key_ranges,omitempty"`
	// at most `limit` shards can be returned
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetShardLocalCacheRequest) Reset() {
	*x = GetShardLocalCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardLocalCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheRequest) ProtoMessage() {}

func (x *GetShardLocalCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheRequest.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{14}
}

func (x *GetShardLocalCacheRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetShardLocalCacheRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *GetShardLocalCacheRequest) GetKeyRanges() []*KeyRange {
	if x != nil {
		return x.KeyRanges
	}
	return nil
}

func (x *GetShardLocalCacheRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response containing shard local cache information
type GetShardLocalCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status               int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ShardLocalCacheInfos []*ShardLocalCacheInfo `protobuf:"bytes,2,rep,name=shard_local_cache_infos,json=shardLocalCacheInfos,proto3" json:"shard_local_cache_infos,omitempty"`
}

func (x *GetShardLocalCacheResponse) Reset() {
	*x = GetShardLocalCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardLocalCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheResponse) ProtoMessage() {}

func (x *GetShardLocalCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheResponse.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{15}
}

func (x *GetShardLocalCacheResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetShardLocalCacheResponse) GetShardLocalCacheInfos() []*ShardLocalCacheInfo {
	if x != nil {
		return x.ShardLocalCacheInfos
	}
	return nil
}

type DebugGetShardManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId  int64     `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId  int64     `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	KeyRange *KeyRange `protobuf:"bytes,3,opt,name=key_range,json=keyRange,proto3" json:"key_range,omitempty"`
}

func (x *DebugGetShardManifestRequest) Reset() {
	*x = DebugGetShardManifestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugGetShardManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugGetShardManifestRequest) ProtoMessage() {}

func (x *DebugGetShardManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugGetShardManifestRequest.ProtoReflect.Descriptor instead.
func (*DebugGetShardManifestRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{16}
}

func (x *DebugGetShardManifestRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DebugGetShardManifestRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *DebugGetShardManifestRequest) GetKeyRange() *KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

type DebugGetShardManifestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FragMetas []*FragMeta `protobuf:"bytes,1,rep,name=frag_metas,json=fragMetas,proto3" json:"frag_metas,omitempty"`
}

func (x *DebugGetShardManifestResponse) Reset() {
	*x = DebugGetShardManifestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugGetShardManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugGetShardManifestResponse) ProtoMessage() {}

func (x *DebugGetShardManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugGetShardManifestResponse.ProtoReflect.Descriptor instead.
func (*DebugGetShardManifestResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{17}
}

func (x *DebugGetShardManifestResponse) GetFragMetas() []*FragMeta {
	if x != nil {
		return x.FragMetas
	}
	return nil
}

type CompactFragRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard          *ShardManifestHeader `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	TableId        int64                `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId        int64                `protobuf:"varint,3,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	CompactionKey  string               `protobuf:"bytes,4,opt,name=compaction_key,json=compactionKey,proto3" json:"compaction_key,omitempty"`
	Seq            uint64               `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	Timestamp      uint64               `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LeaderTerm     string               `protobuf:"bytes,7,opt,name=leader_term,json=leaderTerm,proto3" json:"leader_term,omitempty"`
	InputFrags     []*FragMeta          `protobuf:"bytes,8,rep,name=input_frags,json=inputFrags,proto3" json:"input_frags,omitempty"`
	UploadLocation *S3Location          `protobuf:"bytes,9,opt,name=upload_location,json=uploadLocation,proto3" json:"upload_location,omitempty"`
	CompactType    CompactType          `protobuf:"varint,10,opt,name=compact_type,json=compactType,proto3,enum=tici.CompactType" json:"compact_type,omitempty"`
}

func (x *CompactFragRequest) Reset() {
	*x = CompactFragRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactFragRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactFragRequest) ProtoMessage() {}

func (x *CompactFragRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactFragRequest.ProtoReflect.Descriptor instead.
func (*CompactFragRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{18}
}

func (x *CompactFragRequest) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *CompactFragRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CompactFragRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *CompactFragRequest) GetCompactionKey() string {
	if x != nil {
		return x.CompactionKey
	}
	return ""
}

func (x *CompactFragRequest) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *CompactFragRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CompactFragRequest) GetLeaderTerm() string {
	if x != nil {
		return x.LeaderTerm
	}
	return ""
}

func (x *CompactFragRequest) GetInputFrags() []*FragMeta {
	if x != nil {
		return x.InputFrags
	}
	return nil
}

func (x *CompactFragRequest) GetUploadLocation() *S3Location {
	if x != nil {
		return x.UploadLocation
	}
	return nil
}

func (x *CompactFragRequest) GetCompactType() CompactType {
	if x != nil {
		return x.CompactType
	}
	return CompactType_Delta
}

type CompactFragResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CompactFragResponse) Reset() {
	*x = CompactFragResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactFragResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactFragResponse) ProtoMessage() {}

func (x *CompactFragResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactFragResponse.ProtoReflect.Descriptor instead.
func (*CompactFragResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{19}
}

func (x *CompactFragResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type FinishCompactFragRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr          string               `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Shard         *ShardManifestHeader `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	TableId       int64                `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId       int64                `protobuf:"varint,4,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	CompactionKey string               `protobuf:"bytes,5,opt,name=compaction_key,json=compactionKey,proto3" json:"compaction_key,omitempty"`
	Seq           uint64               `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	Timestamp     uint64               `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LeaderTerm    string               `protobuf:"bytes,8,opt,name=leader_term,json=leaderTerm,proto3" json:"leader_term,omitempty"`
	OutputFrags   []*FragMeta          `protobuf:"bytes,9,rep,name=output_frags,json=outputFrags,proto3" json:"output_frags,omitempty"`
}

func (x *FinishCompactFragRequest) Reset() {
	*x = FinishCompactFragRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishCompactFragRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishCompactFragRequest) ProtoMessage() {}

func (x *FinishCompactFragRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishCompactFragRequest.ProtoReflect.Descriptor instead.
func (*FinishCompactFragRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{20}
}

func (x *FinishCompactFragRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *FinishCompactFragRequest) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *FinishCompactFragRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *FinishCompactFragRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *FinishCompactFragRequest) GetCompactionKey() string {
	if x != nil {
		return x.CompactionKey
	}
	return ""
}

func (x *FinishCompactFragRequest) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *FinishCompactFragRequest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FinishCompactFragRequest) GetLeaderTerm() string {
	if x != nil {
		return x.LeaderTerm
	}
	return ""
}

func (x *FinishCompactFragRequest) GetOutputFrags() []*FragMeta {
	if x != nil {
		return x.OutputFrags
	}
	return nil
}

type FinishCompactFragResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FinishCompactFragResponse) Reset() {
	*x = FinishCompactFragResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishCompactFragResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishCompactFragResponse) ProtoMessage() {}

func (x *FinishCompactFragResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishCompactFragResponse.ProtoReflect.Descriptor instead.
func (*FinishCompactFragResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{21}
}

func (x *FinishCompactFragResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ShardManifestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardId  uint64 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	StartKey []byte `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Epoch    uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ShardManifestHeader) Reset() {
	*x = ShardManifestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardManifestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardManifestHeader) ProtoMessage() {}

func (x *ShardManifestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardManifestHeader.ProtoReflect.Descriptor instead.
func (*ShardManifestHeader) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{22}
}

func (x *ShardManifestHeader) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardManifestHeader) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ShardManifestHeader) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *ShardManifestHeader) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type S3Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *S3Location) Reset() {
	*x = S3Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Location) ProtoMessage() {}

func (x *S3Location) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Location.ProtoReflect.Descriptor instead.
func (*S3Location) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{23}
}

func (x *S3Location) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3Location) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

// AddShardRequest is sent from meta service to worker node
type AddShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard *ShardManifestHeader `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	// Index information
	IndexInfo *IndexInfo `protobuf:"bytes,2,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Table information
	TableInfo *TableInfo `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	// If the shard is created from scratch, this field is empty
	CdcS3LastFile  string      `protobuf:"bytes,4,opt,name=cdc_s3_last_file,json=cdcS3LastFile,proto3" json:"cdc_s3_last_file,omitempty"`
	CdcLocation    *S3Location `protobuf:"bytes,5,opt,name=cdc_location,json=cdcLocation,proto3" json:"cdc_location,omitempty"`
	UploadLocation *S3Location `protobuf:"bytes,6,opt,name=upload_location,json=uploadLocation,proto3" json:"upload_location,omitempty"`
}

func (x *AddShardRequest) Reset() {
	*x = AddShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardRequest) ProtoMessage() {}

func (x *AddShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardRequest.ProtoReflect.Descriptor instead.
func (*AddShardRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{24}
}

func (x *AddShardRequest) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *AddShardRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *AddShardRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *AddShardRequest) GetCdcS3LastFile() string {
	if x != nil {
		return x.CdcS3LastFile
	}
	return ""
}

func (x *AddShardRequest) GetCdcLocation() *S3Location {
	if x != nil {
		return x.CdcLocation
	}
	return nil
}

func (x *AddShardRequest) GetUploadLocation() *S3Location {
	if x != nil {
		return x.UploadLocation
	}
	return nil
}

// AddShardResponse
type AddShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddShardResponse) Reset() {
	*x = AddShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardResponse) ProtoMessage() {}

func (x *AddShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardResponse.ProtoReflect.Descriptor instead.
func (*AddShardResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{25}
}

func (x *AddShardResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// CreateIndexRequest is a request to create an index
type CreateIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index information
	IndexInfo *IndexInfo `protobuf:"bytes,1,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Table information
	TableInfo *TableInfo `protobuf:"bytes,2,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{26}
}

func (x *CreateIndexRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateIndexRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// CreateIndexResponse is a response to the index creation request
type CreateIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Created index ID
	IndexId string `protobuf:"bytes,3,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{27}
}

func (x *CreateIndexResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateIndexResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateIndexResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// DropIndexRequest is a request to drop an index
type DropIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *DropIndexRequest) Reset() {
	*x = DropIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexRequest) ProtoMessage() {}

func (x *DropIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexRequest.ProtoReflect.Descriptor instead.
func (*DropIndexRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{28}
}

func (x *DropIndexRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DropIndexRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

// DropIndexResponse is a response to the index drop request
type DropIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *DropIndexResponse) Reset() {
	*x = DropIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexResponse) ProtoMessage() {}

func (x *DropIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexResponse.ProtoReflect.Descriptor instead.
func (*DropIndexResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{29}
}

func (x *DropIndexResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DropIndexResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// TableInfo represents table information
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Table name
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Database name
	DatabaseName string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// Table version
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Column information
	Columns []*ColumnInfo `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{30}
}

func (x *TableInfo) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableInfo) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *TableInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TableInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

// ColumnInfo represents column information
type ColumnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column ID
	ColumnId int64 `protobuf:"varint,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// Column name
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// MySQL type
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// Collation
	Collation int32 `protobuf:"varint,4,opt,name=collation,proto3" json:"collation,omitempty"`
	// Column length
	ColumnLength int32 `protobuf:"varint,5,opt,name=column_length,json=columnLength,proto3" json:"column_length,omitempty"`
	// Decimal places
	Decimal int32 `protobuf:"varint,6,opt,name=decimal,proto3" json:"decimal,omitempty"`
	// Flags
	Flag int32 `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	// Enum elements
	Elems []string `protobuf:"bytes,8,rep,name=elems,proto3" json:"elems,omitempty"`
	// Default value
	DefaultVal []byte `protobuf:"bytes,9,opt,name=default_val,json=defaultVal,proto3" json:"default_val,omitempty"`
	// Whether it's a primary key
	IsPrimaryKey bool `protobuf:"varint,10,opt,name=is_primary_key,json=isPrimaryKey,proto3" json:"is_primary_key,omitempty"`
	// Whether it's an array
	IsArray bool `protobuf:"varint,11,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
}

func (x *ColumnInfo) Reset() {
	*x = ColumnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnInfo) ProtoMessage() {}

func (x *ColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnInfo.ProtoReflect.Descriptor instead.
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{31}
}

func (x *ColumnInfo) GetColumnId() int64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *ColumnInfo) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ColumnInfo) GetCollation() int32 {
	if x != nil {
		return x.Collation
	}
	return 0
}

func (x *ColumnInfo) GetColumnLength() int32 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

func (x *ColumnInfo) GetDecimal() int32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *ColumnInfo) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *ColumnInfo) GetElems() []string {
	if x != nil {
		return x.Elems
	}
	return nil
}

func (x *ColumnInfo) GetDefaultVal() []byte {
	if x != nil {
		return x.DefaultVal
	}
	return nil
}

func (x *ColumnInfo) GetIsPrimaryKey() bool {
	if x != nil {
		return x.IsPrimaryKey
	}
	return false
}

func (x *ColumnInfo) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

// IndexInfo represents index information
type IndexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// Index type (fulltext, custom)
	IndexType IndexType `protobuf:"varint,4,opt,name=index_type,json=indexType,proto3,enum=tici.IndexType" json:"index_type,omitempty"`
	// Index columns
	Columns []*ColumnInfo `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	// Whether the index is unique
	IsUnique bool `protobuf:"varint,6,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	// Parser information
	ParserInfo *ParserInfo `protobuf:"bytes,7,opt,name=parser_info,json=parserInfo,proto3" json:"parser_info,omitempty"`
	// Other index parameters
	OtherParams map[string]string `protobuf:"bytes,8,rep,name=other_params,json=otherParams,proto3" json:"other_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IndexInfo) Reset() {
	*x = IndexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfo) ProtoMessage() {}

func (x *IndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfo.ProtoReflect.Descriptor instead.
func (*IndexInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{32}
}

func (x *IndexInfo) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *IndexInfo) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *IndexInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexInfo) GetIndexType() IndexType {
	if x != nil {
		return x.IndexType
	}
	return IndexType_UNKNOWN
}

func (x *IndexInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexInfo) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *IndexInfo) GetParserInfo() *ParserInfo {
	if x != nil {
		return x.ParserInfo
	}
	return nil
}

func (x *IndexInfo) GetOtherParams() map[string]string {
	if x != nil {
		return x.OtherParams
	}
	return nil
}

// ParserInfo represents parser information
type ParserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parser type
	ParserType ParserType `protobuf:"varint,1,opt,name=parser_type,json=parserType,proto3,enum=tici.ParserType" json:"parser_type,omitempty"`
	// Parser parameters
	ParserParams map[string]string `protobuf:"bytes,2,rep,name=parser_params,json=parserParams,proto3" json:"parser_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParserInfo) Reset() {
	*x = ParserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParserInfo) ProtoMessage() {}

func (x *ParserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParserInfo.ProtoReflect.Descriptor instead.
func (*ParserInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{33}
}

func (x *ParserInfo) GetParserType() ParserType {
	if x != nil {
		return x.ParserType
	}
	return ParserType_UNKNOWN_PARSER
}

func (x *ParserInfo) GetParserParams() map[string]string {
	if x != nil {
		return x.ParserParams
	}
	return nil
}

// GetIndexProgressRequest is a request to get the progress of an index build
type GetIndexProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID
	IndexId int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *GetIndexProgressRequest) Reset() {
	*x = GetIndexProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexProgressRequest) ProtoMessage() {}

func (x *GetIndexProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexProgressRequest.ProtoReflect.Descriptor instead.
func (*GetIndexProgressRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{34}
}

func (x *GetIndexProgressRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetIndexProgressRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

// GetIndexProgressResponse is a response containing index build progress
type GetIndexProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Number of documents indexed so far
	DocumentCount uint64 `protobuf:"varint,3,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`
	// Build task state (PENDING, RUNNING, COMPLETED, FAILED)
	State GetIndexProgressResponse_State `protobuf:"varint,4,opt,name=state,proto3,enum=tici.GetIndexProgressResponse_State" json:"state,omitempty"`
	// Whether index has been uploaded to S3
	IsUploaded bool `protobuf:"varint,5,opt,name=is_uploaded,json=isUploaded,proto3" json:"is_uploaded,omitempty"`
	// Last S3 upload time in RFC3339 format
	LastUploadTime string `protobuf:"bytes,6,opt,name=last_upload_time,json=lastUploadTime,proto3" json:"last_upload_time,omitempty"`
	// S3 path where the index is stored
	S3Path string `protobuf:"bytes,7,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
}

func (x *GetIndexProgressResponse) Reset() {
	*x = GetIndexProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexProgressResponse) ProtoMessage() {}

func (x *GetIndexProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexProgressResponse.ProtoReflect.Descriptor instead.
func (*GetIndexProgressResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{35}
}

func (x *GetIndexProgressResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetIndexProgressResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetIndexProgressResponse) GetDocumentCount() uint64 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *GetIndexProgressResponse) GetState() GetIndexProgressResponse_State {
	if x != nil {
		return x.State
	}
	return GetIndexProgressResponse_PENDING
}

func (x *GetIndexProgressResponse) GetIsUploaded() bool {
	if x != nil {
		return x.IsUploaded
	}
	return false
}

func (x *GetIndexProgressResponse) GetLastUploadTime() string {
	if x != nil {
		return x.LastUploadTime
	}
	return ""
}

func (x *GetIndexProgressResponse) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

type GetImportStoragePathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detailed schema of the fts being built.
	IndexInfo *IndexInfo `protobuf:"bytes,1,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Parent table metadata.
	TableInfo *TableInfo `protobuf:"bytes,2,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	// Inclusive lower key bound (encoded handle/rowID), non-empty.
	LowerBound []byte `protobuf:"bytes,3,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// Exclusive upper key bound, non-empty.
	UpperBound []byte `protobuf:"bytes,4,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *GetImportStoragePathRequest) Reset() {
	*x = GetImportStoragePathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImportStoragePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImportStoragePathRequest) ProtoMessage() {}

func (x *GetImportStoragePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImportStoragePathRequest.ProtoReflect.Descriptor instead.
func (*GetImportStoragePathRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{36}
}

func (x *GetImportStoragePathRequest) GetIndexInfo() *IndexInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *GetImportStoragePathRequest) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *GetImportStoragePathRequest) GetLowerBound() []byte {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *GetImportStoragePathRequest) GetUpperBound() []byte {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type GetImportStoragePathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional human‑readable diagnostics, only defined when status ≠ 0.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Object key inside the bucket that TiDB Import should write to.
	// The format is "s3://bucket/prefix/filename".
	S3Path string `protobuf:"bytes,3,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
}

func (x *GetImportStoragePathResponse) Reset() {
	*x = GetImportStoragePathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImportStoragePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImportStoragePathResponse) ProtoMessage() {}

func (x *GetImportStoragePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImportStoragePathResponse.ProtoReflect.Descriptor instead.
func (*GetImportStoragePathResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{37}
}

func (x *GetImportStoragePathResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetImportStoragePathResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetImportStoragePathResponse) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

type MarkPartitionUploadFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The same S3 path previously returned by GetCloudStoragePath.
	// We assume the path is unique for each partition so it can be used to
	// identify the partition.
	S3Path string `protobuf:"bytes,1,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
}

func (x *MarkPartitionUploadFinishedRequest) Reset() {
	*x = MarkPartitionUploadFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkPartitionUploadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPartitionUploadFinishedRequest) ProtoMessage() {}

func (x *MarkPartitionUploadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPartitionUploadFinishedRequest.ProtoReflect.Descriptor instead.
func (*MarkPartitionUploadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{38}
}

func (x *MarkPartitionUploadFinishedRequest) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

// DXF receives this in-band result so callers can
// inspect the status and customized results.
type MarkPartitionUploadFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional human‑readable diagnostics, only defined when status ≠ 0.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *MarkPartitionUploadFinishedResponse) Reset() {
	*x = MarkPartitionUploadFinishedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkPartitionUploadFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPartitionUploadFinishedResponse) ProtoMessage() {}

func (x *MarkPartitionUploadFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPartitionUploadFinishedResponse.ProtoReflect.Descriptor instead.
func (*MarkPartitionUploadFinishedResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{39}
}

func (x *MarkPartitionUploadFinishedResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MarkPartitionUploadFinishedResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type MarkTableUploadFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table ID of the target table.
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID of the target index.
	IndexId int64 `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *MarkTableUploadFinishedRequest) Reset() {
	*x = MarkTableUploadFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTableUploadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTableUploadFinishedRequest) ProtoMessage() {}

func (x *MarkTableUploadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTableUploadFinishedRequest.ProtoReflect.Descriptor instead.
func (*MarkTableUploadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{40}
}

func (x *MarkTableUploadFinishedRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MarkTableUploadFinishedRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

type MarkTableUploadFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 - success
	// ... other error codes
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional human‑readable diagnostics, only defined when status ≠ 0.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *MarkTableUploadFinishedResponse) Reset() {
	*x = MarkTableUploadFinishedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkTableUploadFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTableUploadFinishedResponse) ProtoMessage() {}

func (x *MarkTableUploadFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTableUploadFinishedResponse.ProtoReflect.Descriptor instead.
func (*MarkTableUploadFinishedResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{41}
}

func (x *MarkTableUploadFinishedResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MarkTableUploadFinishedResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FragMeta_IndexSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegId     string `protobuf:"bytes,1,opt,name=seg_id,json=segId,proto3" json:"seg_id,omitempty"`
	DelSuffix string `protobuf:"bytes,2,opt,name=del_suffix,json=delSuffix,proto3" json:"del_suffix,omitempty"`
}

func (x *FragMeta_IndexSegment) Reset() {
	*x = FragMeta_IndexSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tici_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragMeta_IndexSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragMeta_IndexSegment) ProtoMessage() {}

func (x *FragMeta_IndexSegment) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragMeta_IndexSegment.ProtoReflect.Descriptor instead.
func (*FragMeta_IndexSegment) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{9, 0}
}

func (x *FragMeta_IndexSegment) GetSegId() string {
	if x != nil {
		return x.SegId
	}
	return ""
}

func (x *FragMeta_IndexSegment) GetDelSuffix() string {
	if x != nil {
		return x.DelSuffix
	}
	return ""
}

var File_tici_proto protoreflect.FileDescriptor

var file_tici_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x69,
	0x63, 0x69, 0x22, 0x52, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x49, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x68, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x1c, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0xba, 0x01,
	0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x1b, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x67, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x69, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x9d,
	0x02, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x65, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x46, 0x72, 0x61,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x73, 0x65, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x63,
	0x69, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0x44, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xe5,
	0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x64, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69,
	0x63, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x13, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x64, 0x64, 0x72, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50,
	0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x63,
	0x69, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x1d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x63, 0x69,
	0x2e, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63,
	0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x72, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x53, 0x33, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74,
	0x69, 0x63, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69,
	0x63, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x72, 0x61, 0x67, 0x73, 0x22, 0x33,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x7c, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x22, 0x3c, 0x0a, 0x0a, 0x53, 0x33, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0xbb, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x33, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x64, 0x63, 0x53, 0x33, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x0c, 0x63, 0x64, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x53, 0x33, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69,
	0x63, 0x69, 0x2e, 0x53, 0x33, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x48,
	0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xc7, 0x02,
	0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69,
	0x63, 0x69, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x69, 0x63, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x33, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x33, 0x50, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x74, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x33, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x33, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x33, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x33, 0x50, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x1e, 0x4d,
	0x61, 0x72, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0x2c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10,
	0x02, 0x2a, 0x33, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x52, 0x10, 0x02, 0x32, 0xbc,
	0x08, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a,
	0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x74,
	0x69, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x69,
	0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x2e,
	0x74, 0x69, 0x63, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x69, 0x63,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x44, 0x65, 0x62, 0x75, 0x67, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x63,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x74, 0x69, 0x63, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x28, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x69, 0x63,
	0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x24, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x93, 0x01,
	0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x74, 0x69,
	0x63, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18,
	0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tici_proto_rawDescOnce sync.Once
	file_tici_proto_rawDescData = file_tici_proto_rawDesc
)

func file_tici_proto_rawDescGZIP() []byte {
	file_tici_proto_rawDescOnce.Do(func() {
		file_tici_proto_rawDescData = protoimpl.X.CompressGZIP(file_tici_proto_rawDescData)
	})
	return file_tici_proto_rawDescData
}

var file_tici_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tici_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_tici_proto_goTypes = []interface{}{
	(CompactType)(0),                            // 0: tici.CompactType
	(IndexType)(0),                              // 1: tici.IndexType
	(ParserType)(0),                             // 2: tici.ParserType
	(GetIndexProgressResponse_State)(0),         // 3: tici.GetIndexProgressResponse.State
	(*WorkerNodeStatus)(nil),                    // 4: tici.WorkerNodeStatus
	(*ReaderNodeStatus)(nil),                    // 5: tici.ReaderNodeStatus
	(*WorkerNodeShardStatus)(nil),               // 6: tici.WorkerNodeShardStatus
	(*WorkerNodeCompactionStatus)(nil),          // 7: tici.WorkerNodeCompactionStatus
	(*WorkerNodeHeartbeatRequest)(nil),          // 8: tici.WorkerNodeHeartbeatRequest
	(*WorkerNodeHeartbeatResponse)(nil),         // 9: tici.WorkerNodeHeartbeatResponse
	(*ReaderNodeHeartbeatRequest)(nil),          // 10: tici.ReaderNodeHeartbeatRequest
	(*ReaderNodeHeartbeatResponse)(nil),         // 11: tici.ReaderNodeHeartbeatResponse
	(*FragProperty)(nil),                        // 12: tici.FragProperty
	(*FragMeta)(nil),                            // 13: tici.FragMeta
	(*AppendFragMetaRequest)(nil),               // 14: tici.AppendFragMetaRequest
	(*AppendFragMetaResponse)(nil),              // 15: tici.AppendFragMetaResponse
	(*KeyRange)(nil),                            // 16: tici.KeyRange
	(*ShardLocalCacheInfo)(nil),                 // 17: tici.ShardLocalCacheInfo
	(*GetShardLocalCacheRequest)(nil),           // 18: tici.GetShardLocalCacheRequest
	(*GetShardLocalCacheResponse)(nil),          // 19: tici.GetShardLocalCacheResponse
	(*DebugGetShardManifestRequest)(nil),        // 20: tici.DebugGetShardManifestRequest
	(*DebugGetShardManifestResponse)(nil),       // 21: tici.DebugGetShardManifestResponse
	(*CompactFragRequest)(nil),                  // 22: tici.CompactFragRequest
	(*CompactFragResponse)(nil),                 // 23: tici.CompactFragResponse
	(*FinishCompactFragRequest)(nil),            // 24: tici.FinishCompactFragRequest
	(*FinishCompactFragResponse)(nil),           // 25: tici.FinishCompactFragResponse
	(*ShardManifestHeader)(nil),                 // 26: tici.ShardManifestHeader
	(*S3Location)(nil),                          // 27: tici.S3Location
	(*AddShardRequest)(nil),                     // 28: tici.AddShardRequest
	(*AddShardResponse)(nil),                    // 29: tici.AddShardResponse
	(*CreateIndexRequest)(nil),                  // 30: tici.CreateIndexRequest
	(*CreateIndexResponse)(nil),                 // 31: tici.CreateIndexResponse
	(*DropIndexRequest)(nil),                    // 32: tici.DropIndexRequest
	(*DropIndexResponse)(nil),                   // 33: tici.DropIndexResponse
	(*TableInfo)(nil),                           // 34: tici.TableInfo
	(*ColumnInfo)(nil),                          // 35: tici.ColumnInfo
	(*IndexInfo)(nil),                           // 36: tici.IndexInfo
	(*ParserInfo)(nil),                          // 37: tici.ParserInfo
	(*GetIndexProgressRequest)(nil),             // 38: tici.GetIndexProgressRequest
	(*GetIndexProgressResponse)(nil),            // 39: tici.GetIndexProgressResponse
	(*GetImportStoragePathRequest)(nil),         // 40: tici.GetImportStoragePathRequest
	(*GetImportStoragePathResponse)(nil),        // 41: tici.GetImportStoragePathResponse
	(*MarkPartitionUploadFinishedRequest)(nil),  // 42: tici.MarkPartitionUploadFinishedRequest
	(*MarkPartitionUploadFinishedResponse)(nil), // 43: tici.MarkPartitionUploadFinishedResponse
	(*MarkTableUploadFinishedRequest)(nil),      // 44: tici.MarkTableUploadFinishedRequest
	(*MarkTableUploadFinishedResponse)(nil),     // 45: tici.MarkTableUploadFinishedResponse
	(*FragMeta_IndexSegment)(nil),               // 46: tici.FragMeta.IndexSegment
	nil,                                         // 47: tici.IndexInfo.OtherParamsEntry
	nil,                                         // 48: tici.ParserInfo.ParserParamsEntry
}
var file_tici_proto_depIdxs = []int32{
	4,  // 0: tici.WorkerNodeHeartbeatRequest.status:type_name -> tici.WorkerNodeStatus
	6,  // 1: tici.WorkerNodeHeartbeatRequest.shards:type_name -> tici.WorkerNodeShardStatus
	7,  // 2: tici.WorkerNodeHeartbeatRequest.compactions:type_name -> tici.WorkerNodeCompactionStatus
	28, // 3: tici.WorkerNodeHeartbeatResponse.to_add_shards:type_name -> tici.AddShardRequest
	5,  // 4: tici.ReaderNodeHeartbeatRequest.status:type_name -> tici.ReaderNodeStatus
	46, // 5: tici.FragMeta.segs:type_name -> tici.FragMeta.IndexSegment
	12, // 6: tici.FragMeta.property:type_name -> tici.FragProperty
	13, // 7: tici.AppendFragMetaRequest.frag_metas:type_name -> tici.FragMeta
	26, // 8: tici.ShardLocalCacheInfo.shard:type_name -> tici.ShardManifestHeader
	16, // 9: tici.GetShardLocalCacheRequest.key_ranges:type_name -> tici.KeyRange
	17, // 10: tici.GetShardLocalCacheResponse.shard_local_cache_infos:type_name -> tici.ShardLocalCacheInfo
	16, // 11: tici.DebugGetShardManifestRequest.key_range:type_name -> tici.KeyRange
	13, // 12: tici.DebugGetShardManifestResponse.frag_metas:type_name -> tici.FragMeta
	26, // 13: tici.CompactFragRequest.shard:type_name -> tici.ShardManifestHeader
	13, // 14: tici.CompactFragRequest.input_frags:type_name -> tici.FragMeta
	27, // 15: tici.CompactFragRequest.upload_location:type_name -> tici.S3Location
	0,  // 16: tici.CompactFragRequest.compact_type:type_name -> tici.CompactType
	26, // 17: tici.FinishCompactFragRequest.shard:type_name -> tici.ShardManifestHeader
	13, // 18: tici.FinishCompactFragRequest.output_frags:type_name -> tici.FragMeta
	26, // 19: tici.AddShardRequest.shard:type_name -> tici.ShardManifestHeader
	36, // 20: tici.AddShardRequest.index_info:type_name -> tici.IndexInfo
	34, // 21: tici.AddShardRequest.table_info:type_name -> tici.TableInfo
	27, // 22: tici.AddShardRequest.cdc_location:type_name -> tici.S3Location
	27, // 23: tici.AddShardRequest.upload_location:type_name -> tici.S3Location
	36, // 24: tici.CreateIndexRequest.index_info:type_name -> tici.IndexInfo
	34, // 25: tici.CreateIndexRequest.table_info:type_name -> tici.TableInfo
	35, // 26: tici.TableInfo.columns:type_name -> tici.ColumnInfo
	1,  // 27: tici.IndexInfo.index_type:type_name -> tici.IndexType
	35, // 28: tici.IndexInfo.columns:type_name -> tici.ColumnInfo
	37, // 29: tici.IndexInfo.parser_info:type_name -> tici.ParserInfo
	47, // 30: tici.IndexInfo.other_params:type_name -> tici.IndexInfo.OtherParamsEntry
	2,  // 31: tici.ParserInfo.parser_type:type_name -> tici.ParserType
	48, // 32: tici.ParserInfo.parser_params:type_name -> tici.ParserInfo.ParserParamsEntry
	3,  // 33: tici.GetIndexProgressResponse.state:type_name -> tici.GetIndexProgressResponse.State
	36, // 34: tici.GetImportStoragePathRequest.index_info:type_name -> tici.IndexInfo
	34, // 35: tici.GetImportStoragePathRequest.table_info:type_name -> tici.TableInfo
	8,  // 36: tici.MetaService.WorkerNodeHeartbeat:input_type -> tici.WorkerNodeHeartbeatRequest
	10, // 37: tici.MetaService.ReaderNodeHeartbeat:input_type -> tici.ReaderNodeHeartbeatRequest
	30, // 38: tici.MetaService.CreateIndex:input_type -> tici.CreateIndexRequest
	32, // 39: tici.MetaService.DropIndex:input_type -> tici.DropIndexRequest
	38, // 40: tici.MetaService.GetIndexProgress:input_type -> tici.GetIndexProgressRequest
	14, // 41: tici.MetaService.AppendFragMeta:input_type -> tici.AppendFragMetaRequest
	18, // 42: tici.MetaService.GetShardLocalCacheInfo:input_type -> tici.GetShardLocalCacheRequest
	20, // 43: tici.MetaService.DebugGetShardManifest:input_type -> tici.DebugGetShardManifestRequest
	24, // 44: tici.MetaService.FinishCompactFragments:input_type -> tici.FinishCompactFragRequest
	40, // 45: tici.MetaService.GetImportStoragePath:input_type -> tici.GetImportStoragePathRequest
	42, // 46: tici.MetaService.MarkPartitionUploadFinished:input_type -> tici.MarkPartitionUploadFinishedRequest
	44, // 47: tici.MetaService.MarkTableUploadFinished:input_type -> tici.MarkTableUploadFinishedRequest
	28, // 48: tici.WorkerService.AddShard:input_type -> tici.AddShardRequest
	22, // 49: tici.WorkerService.CompactFragments:input_type -> tici.CompactFragRequest
	9,  // 50: tici.MetaService.WorkerNodeHeartbeat:output_type -> tici.WorkerNodeHeartbeatResponse
	11, // 51: tici.MetaService.ReaderNodeHeartbeat:output_type -> tici.ReaderNodeHeartbeatResponse
	31, // 52: tici.MetaService.CreateIndex:output_type -> tici.CreateIndexResponse
	33, // 53: tici.MetaService.DropIndex:output_type -> tici.DropIndexResponse
	39, // 54: tici.MetaService.GetIndexProgress:output_type -> tici.GetIndexProgressResponse
	15, // 55: tici.MetaService.AppendFragMeta:output_type -> tici.AppendFragMetaResponse
	19, // 56: tici.MetaService.GetShardLocalCacheInfo:output_type -> tici.GetShardLocalCacheResponse
	21, // 57: tici.MetaService.DebugGetShardManifest:output_type -> tici.DebugGetShardManifestResponse
	25, // 58: tici.MetaService.FinishCompactFragments:output_type -> tici.FinishCompactFragResponse
	41, // 59: tici.MetaService.GetImportStoragePath:output_type -> tici.GetImportStoragePathResponse
	43, // 60: tici.MetaService.MarkPartitionUploadFinished:output_type -> tici.MarkPartitionUploadFinishedResponse
	45, // 61: tici.MetaService.MarkTableUploadFinished:output_type -> tici.MarkTableUploadFinishedResponse
	29, // 62: tici.WorkerService.AddShard:output_type -> tici.AddShardResponse
	23, // 63: tici.WorkerService.CompactFragments:output_type -> tici.CompactFragResponse
	50, // [50:64] is the sub-list for method output_type
	36, // [36:50] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_tici_proto_init() }
func file_tici_proto_init() {
	if File_tici_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tici_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReaderNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeShardStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeCompactionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerNodeHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReaderNodeHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReaderNodeHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendFragMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendFragMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardLocalCacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardLocalCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardLocalCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugGetShardManifestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugGetShardManifestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactFragRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactFragResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishCompactFragRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishCompactFragResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardManifestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndexProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImportStoragePathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImportStoragePathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkPartitionUploadFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkPartitionUploadFinishedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTableUploadFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkTableUploadFinishedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tici_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragMeta_IndexSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tici_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tici_proto_goTypes,
		DependencyIndexes: file_tici_proto_depIdxs,
		EnumInfos:         file_tici_proto_enumTypes,
		MessageInfos:      file_tici_proto_msgTypes,
	}.Build()
	File_tici_proto = out.File
	file_tici_proto_rawDesc = nil
	file_tici_proto_goTypes = nil
	file_tici_proto_depIdxs = nil
}
