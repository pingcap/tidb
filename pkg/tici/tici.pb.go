// Copyright 2025 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: tici.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerNodeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO Need more metrics, such as disk usage, quotas, cache miss rates
	CpuUsage      float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage   uint64  `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeStatus) Reset() {
	*x = WorkerNodeStatus{}
	mi := &file_tici_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeStatus) ProtoMessage() {}

func (x *WorkerNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *WorkerNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

// Reader node status information
type ReaderNodeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU usage percentage (0.0 to 100.0)
	CpuUsage float64 `protobuf:"fixed64,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	// Memory usage in bytes
	MemoryUsage uint64 `protobuf:"varint,2,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	// Number of requests processed in current heartbeat cycle
	RequestsInCycle uint32 `protobuf:"varint,3,opt,name=requests_in_cycle,json=requestsInCycle,proto3" json:"requests_in_cycle,omitempty"`
	// Cache hit rate percentage (0.0 to 100.0)
	CacheHitRate  float64 `protobuf:"fixed64,4,opt,name=cache_hit_rate,json=cacheHitRate,proto3" json:"cache_hit_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReaderNodeStatus) Reset() {
	*x = ReaderNodeStatus{}
	mi := &file_tici_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaderNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeStatus) ProtoMessage() {}

func (x *ReaderNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeStatus.ProtoReflect.Descriptor instead.
func (*ReaderNodeStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{1}
}

func (x *ReaderNodeStatus) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ReaderNodeStatus) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ReaderNodeStatus) GetRequestsInCycle() uint32 {
	if x != nil {
		return x.RequestsInCycle
	}
	return 0
}

func (x *ReaderNodeStatus) GetCacheHitRate() float64 {
	if x != nil {
		return x.CacheHitRate
	}
	return 0
}

// Some fields may be duplicated with ShardManifestHeader,
// however, just leave them here.
type WorkerNodeShardStatus struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StartKey []byte                 `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte                 `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// TODO shard_id is unique across tables and indexes.
	// We still need them because in meta service we are not currently maintain this correspondence.
	TableId       int64  `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId       int64  `protobuf:"varint,4,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId       uint64 `protobuf:"varint,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	Epoch         uint64 `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Seq           uint64 `protobuf:"varint,7,opt,name=seq,proto3" json:"seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeShardStatus) Reset() {
	*x = WorkerNodeShardStatus{}
	mi := &file_tici_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeShardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeShardStatus) ProtoMessage() {}

func (x *WorkerNodeShardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeShardStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeShardStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerNodeShardStatus) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *WorkerNodeShardStatus) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *WorkerNodeShardStatus) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *WorkerNodeShardStatus) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type WorkerNodeCompactionStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeCompactionStatus) Reset() {
	*x = WorkerNodeCompactionStatus{}
	mi := &file_tici_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeCompactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeCompactionStatus) ProtoMessage() {}

func (x *WorkerNodeCompactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeCompactionStatus.ProtoReflect.Descriptor instead.
func (*WorkerNodeCompactionStatus) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{3}
}

type WorkerNodeHeartbeatRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Addr          string                        `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status        *WorkerNodeStatus             `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Shards        []*WorkerNodeShardStatus      `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
	Compactions   []*WorkerNodeCompactionStatus `protobuf:"bytes,4,rep,name=compactions,proto3" json:"compactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerNodeHeartbeatRequest) Reset() {
	*x = WorkerNodeHeartbeatRequest{}
	mi := &file_tici_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatRequest) ProtoMessage() {}

func (x *WorkerNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{4}
}

func (x *WorkerNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerNodeHeartbeatRequest) GetStatus() *WorkerNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetShards() []*WorkerNodeShardStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *WorkerNodeHeartbeatRequest) GetCompactions() []*WorkerNodeCompactionStatus {
	if x != nil {
		return x.Compactions
	}
	return nil
}

type WorkerNodeHeartbeatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status      int32              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ToAddShards []*AddShardRequest `protobuf:"bytes,2,rep,name=to_add_shards,json=toAddShards,proto3" json:"to_add_shards,omitempty"`
	// We assume the `shard_id`s are unique across tables,
	// So using `shard_id` is enough here.
	ToRemoveShards []uint64 `protobuf:"varint,3,rep,packed,name=to_remove_shards,json=toRemoveShards,proto3" json:"to_remove_shards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerNodeHeartbeatResponse) Reset() {
	*x = WorkerNodeHeartbeatResponse{}
	mi := &file_tici_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerNodeHeartbeatResponse) ProtoMessage() {}

func (x *WorkerNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*WorkerNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{5}
}

func (x *WorkerNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WorkerNodeHeartbeatResponse) GetToAddShards() []*AddShardRequest {
	if x != nil {
		return x.ToAddShards
	}
	return nil
}

func (x *WorkerNodeHeartbeatResponse) GetToRemoveShards() []uint64 {
	if x != nil {
		return x.ToRemoveShards
	}
	return nil
}

// Reader node heartbeat request
type ReaderNodeHeartbeatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reader node address
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Reader node status
	Status        *ReaderNodeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReaderNodeHeartbeatRequest) Reset() {
	*x = ReaderNodeHeartbeatRequest{}
	mi := &file_tici_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaderNodeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeHeartbeatRequest) ProtoMessage() {}

func (x *ReaderNodeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*ReaderNodeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{6}
}

func (x *ReaderNodeHeartbeatRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReaderNodeHeartbeatRequest) GetStatus() *ReaderNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Reader node heartbeat response
type ReaderNodeHeartbeatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReaderNodeHeartbeatResponse) Reset() {
	*x = ReaderNodeHeartbeatResponse{}
	mi := &file_tici_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReaderNodeHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReaderNodeHeartbeatResponse) ProtoMessage() {}

func (x *ReaderNodeHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReaderNodeHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*ReaderNodeHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{7}
}

func (x *ReaderNodeHeartbeatResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReaderNodeHeartbeatResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fragment metadata primarily stores all data files under a ​​fragment​​
type FragMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data format version​​, used for future iterative upgrades
	FormatVersion uint64 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// Root path of the fragment​​
	FragPath string `protobuf:"bytes,2,opt,name=frag_path,json=fragPath,proto3" json:"frag_path,omitempty"`
	// Data files under the fragment​​, relative path under frag_path
	DataFiles     []string `protobuf:"bytes,3,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FragMeta) Reset() {
	*x = FragMeta{}
	mi := &file_tici_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FragMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragMeta) ProtoMessage() {}

func (x *FragMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragMeta.ProtoReflect.Descriptor instead.
func (*FragMeta) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{8}
}

func (x *FragMeta) GetFormatVersion() uint64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *FragMeta) GetFragPath() string {
	if x != nil {
		return x.FragPath
	}
	return ""
}

func (x *FragMeta) GetDataFiles() []string {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

type AppendFragMetaRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TableId        int64                  `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId        int64                  `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	ShardId        uint64                 `protobuf:"varint,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	LastCdcFile    string                 `protobuf:"bytes,4,opt,name=last_cdc_file,json=lastCdcFile,proto3" json:"last_cdc_file,omitempty"`
	WorkerNodeAddr string                 `protobuf:"bytes,5,opt,name=worker_node_addr,json=workerNodeAddr,proto3" json:"worker_node_addr,omitempty"`
	FragMetas      []*FragMeta            `protobuf:"bytes,6,rep,name=frag_metas,json=fragMetas,proto3" json:"frag_metas,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppendFragMetaRequest) Reset() {
	*x = AppendFragMetaRequest{}
	mi := &file_tici_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendFragMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFragMetaRequest) ProtoMessage() {}

func (x *AppendFragMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFragMetaRequest.ProtoReflect.Descriptor instead.
func (*AppendFragMetaRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{9}
}

func (x *AppendFragMetaRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *AppendFragMetaRequest) GetLastCdcFile() string {
	if x != nil {
		return x.LastCdcFile
	}
	return ""
}

func (x *AppendFragMetaRequest) GetWorkerNodeAddr() string {
	if x != nil {
		return x.WorkerNodeAddr
	}
	return ""
}

func (x *AppendFragMetaRequest) GetFragMetas() []*FragMeta {
	if x != nil {
		return x.FragMetas
	}
	return nil
}

type AppendFragMetaResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0 - success
	// ... other error codes
	Status        int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendFragMetaResponse) Reset() {
	*x = AppendFragMetaResponse{}
	mi := &file_tici_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendFragMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFragMetaResponse) ProtoMessage() {}

func (x *AppendFragMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFragMetaResponse.ProtoReflect.Descriptor instead.
func (*AppendFragMetaResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{10}
}

func (x *AppendFragMetaResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// Key range definition for shard cache queries
type KeyRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartKey      []byte                 `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey        []byte                 `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	mi := &file_tici_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{11}
}

func (x *KeyRange) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *KeyRange) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

// Shard local cache information
type ShardLocalCacheInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Shard           *ShardManifestHeader   `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	LocalCacheAddrs []string               `protobuf:"bytes,2,rep,name=local_cache_addrs,json=localCacheAddrs,proto3" json:"local_cache_addrs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShardLocalCacheInfo) Reset() {
	*x = ShardLocalCacheInfo{}
	mi := &file_tici_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardLocalCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardLocalCacheInfo) ProtoMessage() {}

func (x *ShardLocalCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardLocalCacheInfo.ProtoReflect.Descriptor instead.
func (*ShardLocalCacheInfo) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{12}
}

func (x *ShardLocalCacheInfo) GetShard() *ShardManifestHeader {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *ShardLocalCacheInfo) GetLocalCacheAddrs() []string {
	if x != nil {
		return x.LocalCacheAddrs
	}
	return nil
}

// Request to get shard local cache information
type GetShardLocalCacheRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID to filter shards
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Index ID to filter shards
	IndexId   int64       `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	KeyRanges []*KeyRange `protobuf:"bytes,3,rep,name=key_ranges,json=keyRanges,proto3" json:"key_ranges,omitempty"`
	// at most `limit` shards can be returned
	Limit         int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShardLocalCacheRequest) Reset() {
	*x = GetShardLocalCacheRequest{}
	mi := &file_tici_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardLocalCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheRequest) ProtoMessage() {}

func (x *GetShardLocalCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheRequest.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{13}
}

func (x *GetShardLocalCacheRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *GetShardLocalCacheRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *GetShardLocalCacheRequest) GetKeyRanges() []*KeyRange {
	if x != nil {
		return x.KeyRanges
	}
	return nil
}

func (x *GetShardLocalCacheRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response containing shard local cache information
type GetShardLocalCacheResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation result status code, 0 means success
	Status               int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ShardLocalCacheInfos []*ShardLocalCacheInfo `protobuf:"bytes,2,rep,name=shard_local_cache_infos,json=shardLocalCacheInfos,proto3" json:"shard_local_cache_infos,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetShardLocalCacheResponse) Reset() {
	*x = GetShardLocalCacheResponse{}
	mi := &file_tici_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShardLocalCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLocalCacheResponse) ProtoMessage() {}

func (x *GetShardLocalCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLocalCacheResponse.ProtoReflect.Descriptor instead.
func (*GetShardLocalCacheResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{14}
}

func (x *GetShardLocalCacheResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetShardLocalCacheResponse) GetShardLocalCacheInfos() []*ShardLocalCacheInfo {
	if x != nil {
		return x.ShardLocalCacheInfos
	}
	return nil
}

type DebugGetShardManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       int64                  `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IndexId       int64                  `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Keyrange      *KeyRange              `protobuf:"bytes,3,opt,name=keyrange,proto3" json:"keyrange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugGetShardManifestRequest) Reset() {
	*x = DebugGetShardManifestRequest{}
	mi := &file_tici_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugGetShardManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugGetShardManifestRequest) ProtoMessage() {}

func (x *DebugGetShardManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugGetShardManifestRequest.ProtoReflect.Descriptor instead.
func (*DebugGetShardManifestRequest) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{15}
}

func (x *DebugGetShardManifestRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *DebugGetShardManifestRequest) GetIndexId() int64 {
	if x != nil {
		return x.IndexId
	}
	return 0
}

func (x *DebugGetShardManifestRequest) GetKeyrange() *KeyRange {
	if x != nil {
		return x.Keyrange
	}
	return nil
}

type DebugGetShardManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FragMetas     []*FragMeta            `protobuf:"bytes,1,rep,name=frag_metas,json=fragMetas,proto3" json:"frag_metas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugGetShardManifestResponse) Reset() {
	*x = DebugGetShardManifestResponse{}
	mi := &file_tici_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugGetShardManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugGetShardManifestResponse) ProtoMessage() {}

func (x *DebugGetShardManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tici_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugGetShardManifestResponse.ProtoReflect.Descriptor instead.
func (*DebugGetShardManifestResponse) Descriptor() ([]byte, []int) {
	return file_tici_proto_rawDescGZIP(), []int{16}
}

func (x *DebugGetShardManifestResponse) GetFragMetas() []*FragMeta {
	if x != nil {
		return x.FragMetas
	}
	return nil
}

var File_tici_proto protoreflect.FileDescriptor

const file_tici_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"tici.proto\x12\x04tici\x1a\rindexer.proto\"R\n" +
	"\x10WorkerNodeStatus\x12\x1b\n" +
	"\tcpu_usage\x18\x01 \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x02 \x01(\x04R\vmemoryUsage\"\xa4\x01\n" +
	"\x10ReaderNodeStatus\x12\x1b\n" +
	"\tcpu_usage\x18\x01 \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x02 \x01(\x04R\vmemoryUsage\x12*\n" +
	"\x11requests_in_cycle\x18\x03 \x01(\rR\x0frequestsInCycle\x12$\n" +
	"\x0ecache_hit_rate\x18\x04 \x01(\x01R\fcacheHitRate\"\xc6\x01\n" +
	"\x15WorkerNodeShardStatus\x12\x1b\n" +
	"\tstart_key\x18\x01 \x01(\fR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x02 \x01(\fR\x06endKey\x12\x19\n" +
	"\btable_id\x18\x03 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x04 \x01(\x03R\aindexId\x12\x19\n" +
	"\bshard_id\x18\x05 \x01(\x04R\ashardId\x12\x14\n" +
	"\x05epoch\x18\x06 \x01(\x04R\x05epoch\x12\x10\n" +
	"\x03seq\x18\a \x01(\x04R\x03seq\"\x1c\n" +
	"\x1aWorkerNodeCompactionStatus\"\xd9\x01\n" +
	"\x1aWorkerNodeHeartbeatRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12.\n" +
	"\x06status\x18\x02 \x01(\v2\x16.tici.WorkerNodeStatusR\x06status\x123\n" +
	"\x06shards\x18\x03 \x03(\v2\x1b.tici.WorkerNodeShardStatusR\x06shards\x12B\n" +
	"\vcompactions\x18\x04 \x03(\v2 .tici.WorkerNodeCompactionStatusR\vcompactions\"\x9d\x01\n" +
	"\x1bWorkerNodeHeartbeatResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12<\n" +
	"\rto_add_shards\x18\x02 \x03(\v2\x18.indexer.AddShardRequestR\vtoAddShards\x12(\n" +
	"\x10to_remove_shards\x18\x03 \x03(\x04R\x0etoRemoveShards\"`\n" +
	"\x1aReaderNodeHeartbeatRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12.\n" +
	"\x06status\x18\x02 \x01(\v2\x16.tici.ReaderNodeStatusR\x06status\"Z\n" +
	"\x1bReaderNodeHeartbeatResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"m\n" +
	"\bFragMeta\x12%\n" +
	"\x0eformat_version\x18\x01 \x01(\x04R\rformatVersion\x12\x1b\n" +
	"\tfrag_path\x18\x02 \x01(\tR\bfragPath\x12\x1d\n" +
	"\n" +
	"data_files\x18\x03 \x03(\tR\tdataFiles\"\xe5\x01\n" +
	"\x15AppendFragMetaRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12\x19\n" +
	"\bshard_id\x18\x03 \x01(\x04R\ashardId\x12\"\n" +
	"\rlast_cdc_file\x18\x04 \x01(\tR\vlastCdcFile\x12(\n" +
	"\x10worker_node_addr\x18\x05 \x01(\tR\x0eworkerNodeAddr\x12-\n" +
	"\n" +
	"frag_metas\x18\x06 \x03(\v2\x0e.tici.FragMetaR\tfragMetas\"0\n" +
	"\x16AppendFragMetaResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\"@\n" +
	"\bKeyRange\x12\x1b\n" +
	"\tstart_key\x18\x01 \x01(\fR\bstartKey\x12\x17\n" +
	"\aend_key\x18\x02 \x01(\fR\x06endKey\"u\n" +
	"\x13ShardLocalCacheInfo\x122\n" +
	"\x05shard\x18\x01 \x01(\v2\x1c.indexer.ShardManifestHeaderR\x05shard\x12*\n" +
	"\x11local_cache_addrs\x18\x02 \x03(\tR\x0flocalCacheAddrs\"\x96\x01\n" +
	"\x19GetShardLocalCacheRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12-\n" +
	"\n" +
	"key_ranges\x18\x03 \x03(\v2\x0e.tici.KeyRangeR\tkeyRanges\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"\x86\x01\n" +
	"\x1aGetShardLocalCacheResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12P\n" +
	"\x17shard_local_cache_infos\x18\x02 \x03(\v2\x19.tici.ShardLocalCacheInfoR\x14shardLocalCacheInfos\"\x80\x01\n" +
	"\x1cDebugGetShardManifestRequest\x12\x19\n" +
	"\btable_id\x18\x01 \x01(\x03R\atableId\x12\x19\n" +
	"\bindex_id\x18\x02 \x01(\x03R\aindexId\x12*\n" +
	"\bkeyrange\x18\x03 \x01(\v2\x0e.tici.KeyRangeR\bkeyrange\"N\n" +
	"\x1dDebugGetShardManifestResponse\x12-\n" +
	"\n" +
	"frag_metas\x18\x01 \x03(\v2\x0e.tici.FragMetaR\tfragMetas2\xb8\x05\n" +
	"\vMetaService\x12Z\n" +
	"\x13WorkerNodeHeartbeat\x12 .tici.WorkerNodeHeartbeatRequest\x1a!.tici.WorkerNodeHeartbeatResponse\x12Z\n" +
	"\x13ReaderNodeHeartbeat\x12 .tici.ReaderNodeHeartbeatRequest\x1a!.tici.ReaderNodeHeartbeatResponse\x12H\n" +
	"\vCreateIndex\x12\x1b.indexer.CreateIndexRequest\x1a\x1c.indexer.CreateIndexResponse\x12B\n" +
	"\tDropIndex\x12\x19.indexer.DropIndexRequest\x1a\x1a.indexer.DropIndexResponse\x12W\n" +
	"\x10GetIndexProgress\x12 .indexer.GetIndexProgressRequest\x1a!.indexer.GetIndexProgressResponse\x12K\n" +
	"\x0eAppendFragMeta\x12\x1b.tici.AppendFragMetaRequest\x1a\x1c.tici.AppendFragMetaResponse\x12[\n" +
	"\x16GetShardLocalCacheInfo\x12\x1f.tici.GetShardLocalCacheRequest\x1a .tici.GetShardLocalCacheResponse\x12`\n" +
	"\x15DebugGetShardManifest\x12\".tici.DebugGetShardManifestRequest\x1a#.tici.DebugGetShardManifestResponseB\x03Z\x01.b\x06proto3"

var (
	file_tici_proto_rawDescOnce sync.Once
	file_tici_proto_rawDescData []byte
)

func file_tici_proto_rawDescGZIP() []byte {
	file_tici_proto_rawDescOnce.Do(func() {
		file_tici_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tici_proto_rawDesc), len(file_tici_proto_rawDesc)))
	})
	return file_tici_proto_rawDescData
}

var file_tici_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_tici_proto_goTypes = []any{
	(*WorkerNodeStatus)(nil),              // 0: tici.WorkerNodeStatus
	(*ReaderNodeStatus)(nil),              // 1: tici.ReaderNodeStatus
	(*WorkerNodeShardStatus)(nil),         // 2: tici.WorkerNodeShardStatus
	(*WorkerNodeCompactionStatus)(nil),    // 3: tici.WorkerNodeCompactionStatus
	(*WorkerNodeHeartbeatRequest)(nil),    // 4: tici.WorkerNodeHeartbeatRequest
	(*WorkerNodeHeartbeatResponse)(nil),   // 5: tici.WorkerNodeHeartbeatResponse
	(*ReaderNodeHeartbeatRequest)(nil),    // 6: tici.ReaderNodeHeartbeatRequest
	(*ReaderNodeHeartbeatResponse)(nil),   // 7: tici.ReaderNodeHeartbeatResponse
	(*FragMeta)(nil),                      // 8: tici.FragMeta
	(*AppendFragMetaRequest)(nil),         // 9: tici.AppendFragMetaRequest
	(*AppendFragMetaResponse)(nil),        // 10: tici.AppendFragMetaResponse
	(*KeyRange)(nil),                      // 11: tici.KeyRange
	(*ShardLocalCacheInfo)(nil),           // 12: tici.ShardLocalCacheInfo
	(*GetShardLocalCacheRequest)(nil),     // 13: tici.GetShardLocalCacheRequest
	(*GetShardLocalCacheResponse)(nil),    // 14: tici.GetShardLocalCacheResponse
	(*DebugGetShardManifestRequest)(nil),  // 15: tici.DebugGetShardManifestRequest
	(*DebugGetShardManifestResponse)(nil), // 16: tici.DebugGetShardManifestResponse
	(*AddShardRequest)(nil),               // 17: indexer.AddShardRequest
	(*ShardManifestHeader)(nil),           // 18: indexer.ShardManifestHeader
	(*CreateIndexRequest)(nil),            // 19: indexer.CreateIndexRequest
	(*DropIndexRequest)(nil),              // 20: indexer.DropIndexRequest
	(*GetIndexProgressRequest)(nil),       // 21: indexer.GetIndexProgressRequest
	(*CreateIndexResponse)(nil),           // 22: indexer.CreateIndexResponse
	(*DropIndexResponse)(nil),             // 23: indexer.DropIndexResponse
	(*GetIndexProgressResponse)(nil),      // 24: indexer.GetIndexProgressResponse
}
var file_tici_proto_depIdxs = []int32{
	0,  // 0: tici.WorkerNodeHeartbeatRequest.status:type_name -> tici.WorkerNodeStatus
	2,  // 1: tici.WorkerNodeHeartbeatRequest.shards:type_name -> tici.WorkerNodeShardStatus
	3,  // 2: tici.WorkerNodeHeartbeatRequest.compactions:type_name -> tici.WorkerNodeCompactionStatus
	17, // 3: tici.WorkerNodeHeartbeatResponse.to_add_shards:type_name -> indexer.AddShardRequest
	1,  // 4: tici.ReaderNodeHeartbeatRequest.status:type_name -> tici.ReaderNodeStatus
	8,  // 5: tici.AppendFragMetaRequest.frag_metas:type_name -> tici.FragMeta
	18, // 6: tici.ShardLocalCacheInfo.shard:type_name -> indexer.ShardManifestHeader
	11, // 7: tici.GetShardLocalCacheRequest.key_ranges:type_name -> tici.KeyRange
	12, // 8: tici.GetShardLocalCacheResponse.shard_local_cache_infos:type_name -> tici.ShardLocalCacheInfo
	11, // 9: tici.DebugGetShardManifestRequest.keyrange:type_name -> tici.KeyRange
	8,  // 10: tici.DebugGetShardManifestResponse.frag_metas:type_name -> tici.FragMeta
	4,  // 11: tici.MetaService.WorkerNodeHeartbeat:input_type -> tici.WorkerNodeHeartbeatRequest
	6,  // 12: tici.MetaService.ReaderNodeHeartbeat:input_type -> tici.ReaderNodeHeartbeatRequest
	19, // 13: tici.MetaService.CreateIndex:input_type -> indexer.CreateIndexRequest
	20, // 14: tici.MetaService.DropIndex:input_type -> indexer.DropIndexRequest
	21, // 15: tici.MetaService.GetIndexProgress:input_type -> indexer.GetIndexProgressRequest
	9,  // 16: tici.MetaService.AppendFragMeta:input_type -> tici.AppendFragMetaRequest
	13, // 17: tici.MetaService.GetShardLocalCacheInfo:input_type -> tici.GetShardLocalCacheRequest
	15, // 18: tici.MetaService.DebugGetShardManifest:input_type -> tici.DebugGetShardManifestRequest
	5,  // 19: tici.MetaService.WorkerNodeHeartbeat:output_type -> tici.WorkerNodeHeartbeatResponse
	7,  // 20: tici.MetaService.ReaderNodeHeartbeat:output_type -> tici.ReaderNodeHeartbeatResponse
	22, // 21: tici.MetaService.CreateIndex:output_type -> indexer.CreateIndexResponse
	23, // 22: tici.MetaService.DropIndex:output_type -> indexer.DropIndexResponse
	24, // 23: tici.MetaService.GetIndexProgress:output_type -> indexer.GetIndexProgressResponse
	10, // 24: tici.MetaService.AppendFragMeta:output_type -> tici.AppendFragMetaResponse
	14, // 25: tici.MetaService.GetShardLocalCacheInfo:output_type -> tici.GetShardLocalCacheResponse
	16, // 26: tici.MetaService.DebugGetShardManifest:output_type -> tici.DebugGetShardManifestResponse
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_tici_proto_init() }
func file_tici_proto_init() {
	if File_tici_proto != nil {
		return
	}
	file_indexer_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tici_proto_rawDesc), len(file_tici_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tici_proto_goTypes,
		DependencyIndexes: file_tici_proto_depIdxs,
		MessageInfos:      file_tici_proto_msgTypes,
	}.Build()
	File_tici_proto = out.File
	file_tici_proto_goTypes = nil
	file_tici_proto_depIdxs = nil
}
