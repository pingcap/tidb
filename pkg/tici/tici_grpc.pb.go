// Copyright 2025 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: tici.proto

package tici

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetaService_WorkerNodeHeartbeat_FullMethodName    = "/tici.MetaService/WorkerNodeHeartbeat"
	MetaService_ReaderNodeHeartbeat_FullMethodName    = "/tici.MetaService/ReaderNodeHeartbeat"
	MetaService_CreateIndex_FullMethodName            = "/tici.MetaService/CreateIndex"
	MetaService_DropIndex_FullMethodName              = "/tici.MetaService/DropIndex"
	MetaService_GetIndexProgress_FullMethodName       = "/tici.MetaService/GetIndexProgress"
	MetaService_AppendFragMeta_FullMethodName         = "/tici.MetaService/AppendFragMeta"
	MetaService_GetShardLocalCacheInfo_FullMethodName = "/tici.MetaService/GetShardLocalCacheInfo"
	MetaService_DebugGetShardManifest_FullMethodName  = "/tici.MetaService/DebugGetShardManifest"
)

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServiceClient interface {
	// Maintains heartbeat from worker nodes(such as writers, compactors) to meta service.
	WorkerNodeHeartbeat(ctx context.Context, in *WorkerNodeHeartbeatRequest, opts ...grpc.CallOption) (*WorkerNodeHeartbeatResponse, error)
	// Maintains heartbeat from reader nodes to meta service.
	ReaderNodeHeartbeat(ctx context.Context, in *ReaderNodeHeartbeatRequest, opts ...grpc.CallOption) (*ReaderNodeHeartbeatResponse, error)
	// TODO It will eventually replace the same RPCs in indexer.rs
	// CreateIndex creates a new index
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	// DropIndex removes an existing index
	DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*DropIndexResponse, error)
	// GetIndexProgress retrieves the current progress of an index build
	GetIndexProgress(ctx context.Context, in *GetIndexProgressRequest, opts ...grpc.CallOption) (*GetIndexProgressResponse, error)
	AppendFragMeta(ctx context.Context, in *AppendFragMetaRequest, opts ...grpc.CallOption) (*AppendFragMetaResponse, error)
	// Get shard local cache information
	GetShardLocalCacheInfo(ctx context.Context, in *GetShardLocalCacheRequest, opts ...grpc.CallOption) (*GetShardLocalCacheResponse, error)
	// Debug usage: get shard manifest from meta service writer
	DebugGetShardManifest(ctx context.Context, in *DebugGetShardManifestRequest, opts ...grpc.CallOption) (*DebugGetShardManifestResponse, error)
}

type metaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServiceClient(cc grpc.ClientConnInterface) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) WorkerNodeHeartbeat(ctx context.Context, in *WorkerNodeHeartbeatRequest, opts ...grpc.CallOption) (*WorkerNodeHeartbeatResponse, error) {
	out := new(WorkerNodeHeartbeatResponse)
	err := c.cc.Invoke(ctx, MetaService_WorkerNodeHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) ReaderNodeHeartbeat(ctx context.Context, in *ReaderNodeHeartbeatRequest, opts ...grpc.CallOption) (*ReaderNodeHeartbeatResponse, error) {
	out := new(ReaderNodeHeartbeatResponse)
	err := c.cc.Invoke(ctx, MetaService_ReaderNodeHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, MetaService_CreateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*DropIndexResponse, error) {
	out := new(DropIndexResponse)
	err := c.cc.Invoke(ctx, MetaService_DropIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetIndexProgress(ctx context.Context, in *GetIndexProgressRequest, opts ...grpc.CallOption) (*GetIndexProgressResponse, error) {
	out := new(GetIndexProgressResponse)
	err := c.cc.Invoke(ctx, MetaService_GetIndexProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) AppendFragMeta(ctx context.Context, in *AppendFragMetaRequest, opts ...grpc.CallOption) (*AppendFragMetaResponse, error) {
	out := new(AppendFragMetaResponse)
	err := c.cc.Invoke(ctx, MetaService_AppendFragMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetShardLocalCacheInfo(ctx context.Context, in *GetShardLocalCacheRequest, opts ...grpc.CallOption) (*GetShardLocalCacheResponse, error) {
	out := new(GetShardLocalCacheResponse)
	err := c.cc.Invoke(ctx, MetaService_GetShardLocalCacheInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) DebugGetShardManifest(ctx context.Context, in *DebugGetShardManifestRequest, opts ...grpc.CallOption) (*DebugGetShardManifestResponse, error) {
	out := new(DebugGetShardManifestResponse)
	err := c.cc.Invoke(ctx, MetaService_DebugGetShardManifest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
// All implementations must embed UnimplementedMetaServiceServer
// for forward compatibility
type MetaServiceServer interface {
	// Maintains heartbeat from worker nodes(such as writers, compactors) to meta service.
	WorkerNodeHeartbeat(context.Context, *WorkerNodeHeartbeatRequest) (*WorkerNodeHeartbeatResponse, error)
	// Maintains heartbeat from reader nodes to meta service.
	ReaderNodeHeartbeat(context.Context, *ReaderNodeHeartbeatRequest) (*ReaderNodeHeartbeatResponse, error)
	// TODO It will eventually replace the same RPCs in indexer.rs
	// CreateIndex creates a new index
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	// DropIndex removes an existing index
	DropIndex(context.Context, *DropIndexRequest) (*DropIndexResponse, error)
	// GetIndexProgress retrieves the current progress of an index build
	GetIndexProgress(context.Context, *GetIndexProgressRequest) (*GetIndexProgressResponse, error)
	AppendFragMeta(context.Context, *AppendFragMetaRequest) (*AppendFragMetaResponse, error)
	// Get shard local cache information
	GetShardLocalCacheInfo(context.Context, *GetShardLocalCacheRequest) (*GetShardLocalCacheResponse, error)
	// Debug usage: get shard manifest from meta service writer
	DebugGetShardManifest(context.Context, *DebugGetShardManifestRequest) (*DebugGetShardManifestResponse, error)
	mustEmbedUnimplementedMetaServiceServer()
}

// UnimplementedMetaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServiceServer struct {
}

func (UnimplementedMetaServiceServer) WorkerNodeHeartbeat(context.Context, *WorkerNodeHeartbeatRequest) (*WorkerNodeHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerNodeHeartbeat not implemented")
}
func (UnimplementedMetaServiceServer) ReaderNodeHeartbeat(context.Context, *ReaderNodeHeartbeatRequest) (*ReaderNodeHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReaderNodeHeartbeat not implemented")
}
func (UnimplementedMetaServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedMetaServiceServer) DropIndex(context.Context, *DropIndexRequest) (*DropIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedMetaServiceServer) GetIndexProgress(context.Context, *GetIndexProgressRequest) (*GetIndexProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexProgress not implemented")
}
func (UnimplementedMetaServiceServer) AppendFragMeta(context.Context, *AppendFragMetaRequest) (*AppendFragMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendFragMeta not implemented")
}
func (UnimplementedMetaServiceServer) GetShardLocalCacheInfo(context.Context, *GetShardLocalCacheRequest) (*GetShardLocalCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardLocalCacheInfo not implemented")
}
func (UnimplementedMetaServiceServer) DebugGetShardManifest(context.Context, *DebugGetShardManifestRequest) (*DebugGetShardManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugGetShardManifest not implemented")
}
func (UnimplementedMetaServiceServer) mustEmbedUnimplementedMetaServiceServer() {}

// UnsafeMetaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServiceServer will
// result in compilation errors.
type UnsafeMetaServiceServer interface {
	mustEmbedUnimplementedMetaServiceServer()
}

func RegisterMetaServiceServer(s grpc.ServiceRegistrar, srv MetaServiceServer) {
	s.RegisterService(&MetaService_ServiceDesc, srv)
}

func _MetaService_WorkerNodeHeartbeat_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(WorkerNodeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).WorkerNodeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_WorkerNodeHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).WorkerNodeHeartbeat(ctx, req.(*WorkerNodeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_ReaderNodeHeartbeat_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(ReaderNodeHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).ReaderNodeHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_ReaderNodeHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).ReaderNodeHeartbeat(ctx, req.(*ReaderNodeHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_CreateIndex_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_DropIndex_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_DropIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).DropIndex(ctx, req.(*DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetIndexProgress_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(GetIndexProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetIndexProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_GetIndexProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).GetIndexProgress(ctx, req.(*GetIndexProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_AppendFragMeta_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(AppendFragMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).AppendFragMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_AppendFragMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).AppendFragMeta(ctx, req.(*AppendFragMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetShardLocalCacheInfo_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(GetShardLocalCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetShardLocalCacheInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_GetShardLocalCacheInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).GetShardLocalCacheInfo(ctx, req.(*GetShardLocalCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_DebugGetShardManifest_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(DebugGetShardManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).DebugGetShardManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaService_DebugGetShardManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(MetaServiceServer).DebugGetShardManifest(ctx, req.(*DebugGetShardManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaService_ServiceDesc is the grpc.ServiceDesc for MetaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tici.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkerNodeHeartbeat",
			Handler:    _MetaService_WorkerNodeHeartbeat_Handler,
		},
		{
			MethodName: "ReaderNodeHeartbeat",
			Handler:    _MetaService_ReaderNodeHeartbeat_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MetaService_CreateIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MetaService_DropIndex_Handler,
		},
		{
			MethodName: "GetIndexProgress",
			Handler:    _MetaService_GetIndexProgress_Handler,
		},
		{
			MethodName: "AppendFragMeta",
			Handler:    _MetaService_AppendFragMeta_Handler,
		},
		{
			MethodName: "GetShardLocalCacheInfo",
			Handler:    _MetaService_GetShardLocalCacheInfo_Handler,
		},
		{
			MethodName: "DebugGetShardManifest",
			Handler:    _MetaService_DebugGetShardManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tici.proto",
}
