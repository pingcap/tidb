// Code generated by goyacc DO NOT EDIT.

// Copyright 2020 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

package parser

import __yyfmt__ "fmt"

import (
	"math"
	"strconv"

	"github.com/pingcap/tidb/pkg/parser/ast"
)

type yyhintSymType struct {
	yys            int
	offset         int
	ident          string
	number         uint64
	hint           *ast.TableOptimizerHint
	hints          []*ast.TableOptimizerHint
	table          ast.HintTable
	modelIdents    []ast.CIStr
	leadingList    *ast.LeadingList
	leadingElement interface{} // Modified: Represents either *ast.HintTable or *ast.LeadingList
}

type yyhintXError struct {
	state, xsym int
}

const (
	yyhintDefault             = 57434
	yyhintEOFCode             = 57344
	yyhintErrCode             = 57345
	hintAggToCop              = 57380
	hintBCJoin                = 57402
	hintBKA                   = 57355
	hintBNL                   = 57357
	hintDupsWeedOut           = 57430
	hintFalse                 = 57426
	hintFirstMatch            = 57431
	hintForceIndex            = 57416
	hintGB                    = 57429
	hintHashAgg               = 57382
	hintHashJoin              = 57359
	hintHashJoinBuild         = 57360
	hintHashJoinProbe         = 57361
	hintHypoIndex             = 57379
	hintIdentifier            = 57347
	hintIgnoreIndex           = 57385
	hintIgnorePlanCache       = 57381
	hintIndexHashJoin         = 57389
	hintIndexJoin             = 57386
	hintIndexMerge            = 57365
	hintIndexMergeJoin        = 57393
	hintInlHashJoin           = 57388
	hintInlJoin               = 57391
	hintInlMergeJoin          = 57392
	hintIntLit                = 57346
	hintInvalid               = 57348
	hintJoinFixedOrder        = 57351
	hintJoinOrder             = 57352
	hintJoinPrefix            = 57353
	hintJoinSuffix            = 57354
	hintLeading               = 57418
	hintLimitToCop            = 57415
	hintLooseScan             = 57432
	hintMB                    = 57428
	hintMRR                   = 57367
	hintMaterialization       = 57433
	hintMaxExecutionTime      = 57375
	hintMemoryQuota           = 57395
	hintMerge                 = 57363
	hintMpp1PhaseAgg          = 57383
	hintMpp2PhaseAgg          = 57384
	hintNoBKA                 = 57356
	hintNoBNL                 = 57358
	hintNoDecorrelate         = 57420
	hintNoHashJoin            = 57362
	hintNoICP                 = 57369
	hintNoIndexHashJoin       = 57390
	hintNoIndexJoin           = 57387
	hintNoIndexMerge          = 57366
	hintNoIndexMergeJoin      = 57394
	hintNoMRR                 = 57368
	hintNoMerge               = 57364
	hintNoOrderIndex          = 57409
	hintNoRangeOptimization   = 57370
	hintNoSMJoin              = 57401
	hintNoSemijoin            = 57374
	hintNoSkipScan            = 57372
	hintNoSwapJoinInputs      = 57396
	hintNthPlan               = 57414
	hintOLAP                  = 57421
	hintOLTP                  = 57422
	hintOrderIndex            = 57408
	hintPartition             = 57423
	hintQBName                = 57378
	hintQueryType             = 57397
	hintReadConsistentReplica = 57398
	hintReadFromStorage       = 57399
	hintResourceGroup         = 57377
	hintSMJoin                = 57400
	hintSemiJoinRewrite       = 57419
	hintSemijoin              = 57373
	hintSetVar                = 57376
	hintShuffleJoin           = 57403
	hintSingleAtIdentifier    = 57349
	hintSkipScan              = 57371
	hintStraightJoin          = 57417
	hintStreamAgg             = 57404
	hintStringLit             = 57350
	hintSwapJoinInputs        = 57405
	hintTiFlash               = 57425
	hintTiKV                  = 57424
	hintTimeRange             = 57412
	hintTrue                  = 57427
	hintUseCascades           = 57413
	hintUseIndex              = 57407
	hintUseIndexMerge         = 57406
	hintUsePlanCache          = 57410
	hintUseToja               = 57411

	yyhintMaxDepth = 200
	yyhintTabOfs   = -225
)

var (
	yyhintXLAT = map[int]int{
		41:    0,   // ')' (173x)
		57380: 1,   // hintAggToCop (158x)
		57402: 2,   // hintBCJoin (158x)
		57355: 3,   // hintBKA (158x)
		57357: 4,   // hintBNL (158x)
		57416: 5,   // hintForceIndex (158x)
		57382: 6,   // hintHashAgg (158x)
		57359: 7,   // hintHashJoin (158x)
		57360: 8,   // hintHashJoinBuild (158x)
		57361: 9,   // hintHashJoinProbe (158x)
		57379: 10,  // hintHypoIndex (158x)
		57347: 11,  // hintIdentifier (158x)
		57385: 12,  // hintIgnoreIndex (158x)
		57381: 13,  // hintIgnorePlanCache (158x)
		57389: 14,  // hintIndexHashJoin (158x)
		57386: 15,  // hintIndexJoin (158x)
		57365: 16,  // hintIndexMerge (158x)
		57393: 17,  // hintIndexMergeJoin (158x)
		57388: 18,  // hintInlHashJoin (158x)
		57391: 19,  // hintInlJoin (158x)
		57392: 20,  // hintInlMergeJoin (158x)
		57351: 21,  // hintJoinFixedOrder (158x)
		57352: 22,  // hintJoinOrder (158x)
		57353: 23,  // hintJoinPrefix (158x)
		57354: 24,  // hintJoinSuffix (158x)
		57418: 25,  // hintLeading (158x)
		57415: 26,  // hintLimitToCop (158x)
		57375: 27,  // hintMaxExecutionTime (158x)
		57395: 28,  // hintMemoryQuota (158x)
		57363: 29,  // hintMerge (158x)
		57383: 30,  // hintMpp1PhaseAgg (158x)
		57384: 31,  // hintMpp2PhaseAgg (158x)
		57367: 32,  // hintMRR (158x)
		57356: 33,  // hintNoBKA (158x)
		57358: 34,  // hintNoBNL (158x)
		57420: 35,  // hintNoDecorrelate (158x)
		57362: 36,  // hintNoHashJoin (158x)
		57369: 37,  // hintNoICP (158x)
		57390: 38,  // hintNoIndexHashJoin (158x)
		57387: 39,  // hintNoIndexJoin (158x)
		57366: 40,  // hintNoIndexMerge (158x)
		57394: 41,  // hintNoIndexMergeJoin (158x)
		57364: 42,  // hintNoMerge (158x)
		57368: 43,  // hintNoMRR (158x)
		57409: 44,  // hintNoOrderIndex (158x)
		57370: 45,  // hintNoRangeOptimization (158x)
		57374: 46,  // hintNoSemijoin (158x)
		57372: 47,  // hintNoSkipScan (158x)
		57401: 48,  // hintNoSMJoin (158x)
		57396: 49,  // hintNoSwapJoinInputs (158x)
		57414: 50,  // hintNthPlan (158x)
		57408: 51,  // hintOrderIndex (158x)
		57378: 52,  // hintQBName (158x)
		57397: 53,  // hintQueryType (158x)
		57398: 54,  // hintReadConsistentReplica (158x)
		57399: 55,  // hintReadFromStorage (158x)
		57377: 56,  // hintResourceGroup (158x)
		57373: 57,  // hintSemijoin (158x)
		57419: 58,  // hintSemiJoinRewrite (158x)
		57376: 59,  // hintSetVar (158x)
		57403: 60,  // hintShuffleJoin (158x)
		57371: 61,  // hintSkipScan (158x)
		57400: 62,  // hintSMJoin (158x)
		57417: 63,  // hintStraightJoin (158x)
		57404: 64,  // hintStreamAgg (158x)
		57405: 65,  // hintSwapJoinInputs (158x)
		57412: 66,  // hintTimeRange (158x)
		57413: 67,  // hintUseCascades (158x)
		57407: 68,  // hintUseIndex (158x)
		57406: 69,  // hintUseIndexMerge (158x)
		57410: 70,  // hintUsePlanCache (158x)
		57411: 71,  // hintUseToja (158x)
		44:    72,  // ',' (157x)
		57430: 73,  // hintDupsWeedOut (130x)
		57431: 74,  // hintFirstMatch (130x)
		57432: 75,  // hintLooseScan (130x)
		57433: 76,  // hintMaterialization (130x)
		57425: 77,  // hintTiFlash (130x)
		57424: 78,  // hintTiKV (130x)
		57426: 79,  // hintFalse (129x)
		57421: 80,  // hintOLAP (129x)
		57422: 81,  // hintOLTP (129x)
		57427: 82,  // hintTrue (129x)
		57429: 83,  // hintGB (128x)
		57428: 84,  // hintMB (128x)
		57349: 85,  // hintSingleAtIdentifier (107x)
		57346: 86,  // hintIntLit (101x)
		46:    87,  // '.' (94x)
		93:    88,  // ']' (94x)
		57423: 89,  // hintPartition (90x)
		61:    90,  // '=' (85x)
		40:    91,  // '(' (83x)
		57344: 92,  // $end (30x)
		57446: 93,  // Identifier (23x)
		57456: 94,  // QueryBlockOpt (21x)
		57442: 95,  // HintTable (7x)
		57350: 96,  // hintStringLit (6x)
		57436: 97,  // CommaOpt (5x)
		57443: 98,  // HintTableList (4x)
		57455: 99,  // PartitionListOpt (4x)
		91:    100, // '[' (3x)
		57450: 101, // LeadingTableElement (3x)
		43:    102, // '+' (2x)
		45:    103, // '-' (2x)
		57435: 104, // BooleanHintName (2x)
		57437: 105, // HintIndexList (2x)
		57439: 106, // HintStorageType (2x)
		57440: 107, // HintStorageTypeAndTable (2x)
		57444: 108, // HintTableListOpt (2x)
		57449: 109, // JoinOrderOptimizerHintName (2x)
		57451: 110, // LeadingTableList (2x)
		57452: 111, // NullaryHintName (2x)
		57454: 112, // PartitionList (2x)
		57458: 113, // StorageOptimizerHintOpt (2x)
		57459: 114, // SubqueryOptimizerHintName (2x)
		57462: 115, // SubqueryStrategy (2x)
		57463: 116, // SupportedIndexLevelOptimizerHintName (2x)
		57464: 117, // SupportedTableLevelOptimizerHintName (2x)
		57465: 118, // TableOptimizerHintOpt (2x)
		57467: 119, // UnsupportedIndexLevelOptimizerHintName (2x)
		57468: 120, // UnsupportedTableLevelOptimizerHintName (2x)
		57469: 121, // Value (2x)
		57470: 122, // ViewName (2x)
		57438: 123, // HintQueryType (1x)
		57441: 124, // HintStorageTypeAndTableList (1x)
		57445: 125, // HintTrueOrFalse (1x)
		57447: 126, // IndexNameList (1x)
		57448: 127, // IndexNameListOpt (1x)
		57453: 128, // OptimizerHintList (1x)
		57457: 129, // Start (1x)
		57460: 130, // SubqueryStrategies (1x)
		57461: 131, // SubqueryStrategiesOpt (1x)
		57466: 132, // UnitOfBytes (1x)
		57471: 133, // ViewNameList (1x)
		57434: 134, // $default (0x)
		57345: 135, // error (0x)
		57348: 136, // hintInvalid (0x)
	}

	yyhintSymNames = []string{
		"')'",
		"hintAggToCop",
		"hintBCJoin",
		"hintBKA",
		"hintBNL",
		"hintForceIndex",
		"hintHashAgg",
		"hintHashJoin",
		"hintHashJoinBuild",
		"hintHashJoinProbe",
		"hintHypoIndex",
		"hintIdentifier",
		"hintIgnoreIndex",
		"hintIgnorePlanCache",
		"hintIndexHashJoin",
		"hintIndexJoin",
		"hintIndexMerge",
		"hintIndexMergeJoin",
		"hintInlHashJoin",
		"hintInlJoin",
		"hintInlMergeJoin",
		"hintJoinFixedOrder",
		"hintJoinOrder",
		"hintJoinPrefix",
		"hintJoinSuffix",
		"hintLeading",
		"hintLimitToCop",
		"hintMaxExecutionTime",
		"hintMemoryQuota",
		"hintMerge",
		"hintMpp1PhaseAgg",
		"hintMpp2PhaseAgg",
		"hintMRR",
		"hintNoBKA",
		"hintNoBNL",
		"hintNoDecorrelate",
		"hintNoHashJoin",
		"hintNoICP",
		"hintNoIndexHashJoin",
		"hintNoIndexJoin",
		"hintNoIndexMerge",
		"hintNoIndexMergeJoin",
		"hintNoMerge",
		"hintNoMRR",
		"hintNoOrderIndex",
		"hintNoRangeOptimization",
		"hintNoSemijoin",
		"hintNoSkipScan",
		"hintNoSMJoin",
		"hintNoSwapJoinInputs",
		"hintNthPlan",
		"hintOrderIndex",
		"hintQBName",
		"hintQueryType",
		"hintReadConsistentReplica",
		"hintReadFromStorage",
		"hintResourceGroup",
		"hintSemijoin",
		"hintSemiJoinRewrite",
		"hintSetVar",
		"hintShuffleJoin",
		"hintSkipScan",
		"hintSMJoin",
		"hintStraightJoin",
		"hintStreamAgg",
		"hintSwapJoinInputs",
		"hintTimeRange",
		"hintUseCascades",
		"hintUseIndex",
		"hintUseIndexMerge",
		"hintUsePlanCache",
		"hintUseToja",
		"','",
		"hintDupsWeedOut",
		"hintFirstMatch",
		"hintLooseScan",
		"hintMaterialization",
		"hintTiFlash",
		"hintTiKV",
		"hintFalse",
		"hintOLAP",
		"hintOLTP",
		"hintTrue",
		"hintGB",
		"hintMB",
		"hintSingleAtIdentifier",
		"hintIntLit",
		"'.'",
		"']'",
		"hintPartition",
		"'='",
		"'('",
		"$end",
		"Identifier",
		"QueryBlockOpt",
		"HintTable",
		"hintStringLit",
		"CommaOpt",
		"HintTableList",
		"PartitionListOpt",
		"'['",
		"LeadingTableElement",
		"'+'",
		"'-'",
		"BooleanHintName",
		"HintIndexList",
		"HintStorageType",
		"HintStorageTypeAndTable",
		"HintTableListOpt",
		"JoinOrderOptimizerHintName",
		"LeadingTableList",
		"NullaryHintName",
		"PartitionList",
		"StorageOptimizerHintOpt",
		"SubqueryOptimizerHintName",
		"SubqueryStrategy",
		"SupportedIndexLevelOptimizerHintName",
		"SupportedTableLevelOptimizerHintName",
		"TableOptimizerHintOpt",
		"UnsupportedIndexLevelOptimizerHintName",
		"UnsupportedTableLevelOptimizerHintName",
		"Value",
		"ViewName",
		"HintQueryType",
		"HintStorageTypeAndTableList",
		"HintTrueOrFalse",
		"IndexNameList",
		"IndexNameListOpt",
		"OptimizerHintList",
		"Start",
		"SubqueryStrategies",
		"SubqueryStrategiesOpt",
		"UnitOfBytes",
		"ViewNameList",
		"$default",
		"error",
		"hintInvalid",
	}

	yyhintReductions = []struct{ xsym, components int }{
		{0, 1},
		{129, 1},
		{128, 1},
		{128, 3},
		{128, 1},
		{128, 3},
		{118, 4},
		{118, 4},
		{118, 4},
		{118, 4},
		{118, 4},
		{118, 4},
		{118, 4},
		{118, 5},
		{118, 5},
		{118, 5},
		{118, 6},
		{118, 4},
		{118, 4},
		{118, 6},
		{118, 6},
		{118, 6},
		{118, 5},
		{118, 4},
		{118, 5},
		{118, 5},
		{118, 4},
		{118, 6},
		{118, 6},
		{113, 5},
		{124, 1},
		{124, 3},
		{107, 4},
		{110, 1},
		{110, 3},
		{101, 1},
		{101, 3},
		{101, 5},
		{101, 3},
		{94, 0},
		{94, 1},
		{97, 0},
		{97, 1},
		{99, 0},
		{99, 4},
		{112, 1},
		{112, 3},
		{108, 1},
		{108, 1},
		{98, 2},
		{98, 3},
		{95, 3},
		{95, 5},
		{133, 3},
		{133, 1},
		{122, 2},
		{122, 1},
		{105, 4},
		{127, 0},
		{127, 1},
		{126, 1},
		{126, 3},
		{131, 0},
		{131, 1},
		{130, 1},
		{130, 3},
		{121, 1},
		{121, 1},
		{121, 1},
		{121, 2},
		{121, 2},
		{132, 1},
		{132, 1},
		{125, 1},
		{125, 1},
		{109, 1},
		{109, 1},
		{109, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{119, 1},
		{119, 1},
		{119, 1},
		{119, 1},
		{119, 1},
		{119, 1},
		{119, 1},
		{116, 1},
		{116, 1},
		{116, 1},
		{116, 1},
		{116, 1},
		{116, 1},
		{114, 1},
		{114, 1},
		{115, 1},
		{115, 1},
		{115, 1},
		{115, 1},
		{104, 1},
		{104, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{123, 1},
		{123, 1},
		{106, 1},
		{106, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
		{93, 1},
	}

	yyhintXErrors = map[yyhintXError]string{}

	yyhintParseTab = [334][]uint16{
		// 0
		{1: 301, 260, 253, 255, 289, 297, 274, 276, 277, 278, 248, 287, 305, 267, 263, 279, 272, 266, 262, 271, 230, 250, 251, 252, 234, 302, 238, 243, 265, 298, 299, 280, 254, 256, 308, 275, 282, 268, 264, 303, 273, 257, 281, 291, 283, 293, 285, 259, 270, 239, 290, 242, 247, 304, 249, 241, 292, 307, 240, 261, 284, 258, 306, 300, 269, 244, 295, 286, 288, 296, 294, 104: 245, 109: 231, 111: 246, 113: 229, 237, 116: 236, 233, 228, 235, 232, 128: 227, 226},
		{92: 225},
		{1: 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 414, 92: 224, 97: 556},
		{1: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 92: 223},
		{1: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 92: 221},
		// 5
		{91: 553},
		{91: 550},
		{91: 547},
		{91: 542},
		{91: 526},
		// 10
		{91: 523},
		{91: 512},
		{91: 500},
		{91: 496},
		{91: 492},
		// 15
		{91: 487},
		{91: 484},
		{91: 472},
		{91: 465},
		{91: 460},
		// 20
		{91: 454},
		{91: 451},
		{91: 445},
		{91: 425},
		{91: 309},
		// 25
		{91: 150},
		{91: 149},
		{91: 148},
		{91: 147},
		{91: 146},
		// 30
		{91: 145},
		{91: 144},
		{91: 143},
		{91: 142},
		{91: 141},
		// 35
		{91: 140},
		{91: 139},
		{91: 138},
		{91: 137},
		{91: 136},
		// 40
		{91: 135},
		{91: 134},
		{91: 133},
		{91: 132},
		{91: 131},
		// 45
		{91: 130},
		{91: 129},
		{91: 128},
		{91: 127},
		{91: 126},
		// 50
		{91: 125},
		{91: 124},
		{91: 123},
		{91: 122},
		{91: 121},
		// 55
		{91: 120},
		{91: 119},
		{91: 118},
		{91: 117},
		{91: 116},
		// 60
		{91: 115},
		{91: 114},
		{91: 113},
		{91: 112},
		{91: 111},
		// 65
		{91: 110},
		{91: 109},
		{91: 108},
		{91: 107},
		{91: 102},
		// 70
		{91: 101},
		{91: 100},
		{91: 99},
		{91: 98},
		{91: 97},
		// 75
		{91: 96},
		{91: 95},
		{91: 94},
		{91: 93},
		{91: 92},
		// 80
		{91: 91},
		{91: 90},
		{91: 89},
		{91: 88},
		{77: 186, 186, 85: 311, 94: 310},
		// 85
		{77: 316, 315, 106: 314, 313, 124: 312},
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 86: 185, 185, 185, 185},
		{422, 72: 423},
		{195, 72: 195},
		{100: 317},
		// 90
		{100: 85},
		{100: 84},
		{1: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 73: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 94: 319, 98: 318},
		{72: 420, 88: 419},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 321, 95: 320},
		// 95
		{176, 72: 176, 88: 176},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 87: 406, 186, 186, 94: 405},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		// 100
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		// 105
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		// 110
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		// 115
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 120
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 125
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 130
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 135
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 140
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 145
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		// 150
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 155
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 160
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		// 165
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 170
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 175
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// 180
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 88: 182, 409, 99: 418},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 407},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 88: 186, 186, 94: 408},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 88: 182, 409, 99: 410},
		{91: 411},
		// 185
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 88: 173},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 413, 112: 412},
		{415, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 414, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 97: 416},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 73: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 86: 183, 96: 183},
		// 190
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 88: 181},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 417},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 86: 179},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 88: 174},
		{193, 72: 193},
		// 195
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 321, 95: 421},
		{175, 72: 175, 88: 175},
		{1: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 92: 196},
		{77: 316, 315, 106: 314, 424},
		{194, 72: 194},
		// 200
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 311, 186, 93: 428, 426, 112: 427},
		{86: 443},
		{439, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 414, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 86: 184, 97: 440},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 86: 180, 90: 429},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 86: 433, 93: 432, 96: 431, 102: 434, 435, 121: 430},
		// 205
		{438},
		{159},
		{158},
		{157},
		{86: 437},
		// 210
		{86: 436},
		{155},
		{156},
		{1: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 92: 197},
		{1: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 92: 199},
		// 215
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 86: 441, 93: 417},
		{442},
		{1: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 92: 198},
		{444},
		{1: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 92: 200},
		// 220
		{80: 186, 186, 85: 311, 94: 446},
		{80: 448, 449, 123: 447},
		{450},
		{87},
		{86},
		// 225
		{1: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 92: 201},
		{186, 85: 311, 94: 452},
		{453},
		{1: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 92: 202},
		{79: 186, 82: 186, 85: 311, 94: 455},
		// 230
		{79: 458, 82: 457, 125: 456},
		{459},
		{152},
		{151},
		{1: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 92: 203},
		// 235
		{96: 461},
		{72: 414, 96: 184, 462},
		{96: 463},
		{464},
		{1: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 92: 204},
		// 240
		{85: 311, 186, 94: 466},
		{86: 467},
		{83: 470, 469, 132: 468},
		{471},
		{154},
		// 245
		{153},
		{1: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 92: 205},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 473},
		{474, 72: 475},
		{1: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 92: 207},
		// 250
		{186, 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 311, 87: 186, 93: 478, 479, 122: 477, 133: 476},
		{481, 87: 482},
		{171, 87: 171},
		{186, 85: 311, 87: 186, 94: 480},
		{169, 87: 169},
		// 255
		{170, 87: 170},
		{1: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 92: 206},
		{186, 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 311, 87: 186, 93: 478, 479, 122: 483},
		{172, 87: 172},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 485},
		// 260
		{486},
		{1: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 92: 208},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 488},
		{90: 489},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 86: 433, 93: 432, 96: 431, 102: 434, 435, 121: 490},
		// 265
		{491},
		{1: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 92: 209},
		{85: 311, 186, 94: 493},
		{86: 494},
		{495},
		// 270
		{1: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 92: 210},
		{85: 311, 186, 94: 497},
		{86: 498},
		{499},
		{1: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 92: 211},
		// 275
		{186, 73: 186, 186, 186, 186, 85: 311, 94: 501},
		{163, 73: 505, 506, 507, 508, 115: 504, 130: 503, 502},
		{511},
		{162, 72: 509},
		{161, 72: 161},
		// 280
		{106, 72: 106},
		{105, 72: 105},
		{104, 72: 104},
		{103, 72: 103},
		{73: 505, 506, 507, 508, 115: 510},
		// 285
		{160, 72: 160},
		{1: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 92: 212},
		{1: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 73: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 94: 514, 105: 513},
		{522},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 321, 95: 515},
		// 290
		{184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 414, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 97: 516},
		{167, 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 519, 126: 518, 517},
		{168},
		{166, 72: 520},
		{165, 72: 165},
		// 295
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 521},
		{164, 72: 164},
		{1: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 92: 213},
		{1: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 73: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 94: 514, 105: 524},
		{525},
		// 300
		{1: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 92: 214},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 530, 91: 531, 93: 321, 95: 529, 101: 528, 110: 527},
		{541, 72: 533},
		{192, 72: 192},
		{190, 72: 190},
		// 305
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 536},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 530, 91: 531, 93: 321, 95: 529, 101: 528, 110: 532},
		{534, 72: 533},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 530, 91: 531, 93: 321, 95: 529, 101: 535},
		{187, 72: 187},
		// 310
		{191, 72: 191},
		{182, 72: 182, 87: 538, 89: 409, 99: 537},
		{189, 72: 189},
		{1: 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 539},
		{182, 72: 182, 89: 409, 99: 540},
		// 315
		{188, 72: 188},
		{1: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 92: 215},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 73: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 94: 545, 98: 544, 108: 543},
		{546},
		{178, 72: 420},
		// 320
		{177, 352, 375, 327, 329, 388, 355, 331, 332, 333, 351, 322, 358, 354, 360, 363, 337, 366, 359, 362, 365, 323, 324, 325, 326, 390, 353, 347, 368, 335, 356, 357, 339, 328, 330, 392, 334, 341, 361, 364, 338, 367, 336, 340, 382, 342, 346, 344, 374, 369, 387, 381, 350, 370, 371, 372, 349, 345, 391, 348, 376, 343, 373, 389, 377, 378, 385, 386, 380, 379, 383, 384, 73: 401, 402, 403, 404, 396, 395, 397, 393, 394, 398, 400, 399, 93: 321, 95: 320},
		{1: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 92: 216},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 73: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 94: 545, 98: 544, 108: 548},
		{549},
		{1: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 92: 217},
		// 325
		{1: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 73: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 311, 94: 319, 98: 551},
		{552, 72: 420},
		{1: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 92: 218},
		{186, 85: 311, 94: 554},
		{555},
		// 330
		{1: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 92: 219},
		{1: 301, 260, 253, 255, 289, 297, 274, 276, 277, 278, 248, 287, 305, 267, 263, 279, 272, 266, 262, 271, 230, 250, 251, 252, 234, 302, 238, 243, 265, 298, 299, 280, 254, 256, 308, 275, 282, 268, 264, 303, 273, 257, 281, 291, 283, 293, 285, 259, 270, 239, 290, 242, 247, 304, 249, 241, 292, 307, 240, 261, 284, 258, 306, 300, 269, 244, 295, 286, 288, 296, 294, 104: 245, 109: 231, 111: 246, 113: 558, 237, 116: 236, 233, 557, 235, 232},
		{1: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 92: 222},
		{1: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 92: 220},
	}
)

var yyhintDebug = 0

type yyhintLexer interface {
	Lex(lval *yyhintSymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyhintLexerEx interface {
	yyhintLexer
	Reduced(rule, state int, lval *yyhintSymType) bool
}

func yyhintSymName(c int) (s string) {
	x, ok := yyhintXLAT[c]
	if ok {
		return yyhintSymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yyhintlex1(yylex yyhintLexer, lval *yyhintSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyhintEOFCode
	}
	if yyhintDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yyhintSymName(n), n, n, lval)
	}
	return n
}

func yyhintParse(yylex yyhintLexer, parser *hintParser) int {
	const yyError = 135

	yyEx, _ := yylex.(yyhintLexerEx)
	var yyn int
	parser.yylval = yyhintSymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yyhintlex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyhintXLAT[yychar]; !ok {
			yyxchar = len(yyhintSymNames) // > tab width
		}
	}
	if yyhintDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyhintParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyhintTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyhintDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyhintDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yyhintSymName(yychar), yystate)
			}
			msg, ok := yyhintXErrors[yyhintXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyhintParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyhintTabOfs
					if yyn > 0 { // hit
						if yyhintDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyhintDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyhintSymName(yychar))
			}
			if yychar == yyhintEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyhintReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyhintParseTab[yyS[yyp].yys][x]) + yyhintTabOfs
	/* reduction by production r */
	if yyhintDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yyhintSymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			parser.result = yyS[yypt-0].hints
		}
	case 2:
		{
			if yyS[yypt-0].hint != nil {
				parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
			}
		}
	case 3:
		{
			if yyS[yypt-0].hint != nil {
				parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
			} else {
				parser.yyVAL.hints = yyS[yypt-2].hints
			}
		}
	case 4:
		{
			parser.yyVAL.hints = yyS[yypt-0].hints
		}
	case 5:
		{
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hints...)
		}
	case 6:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 7:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 8:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 9:
		{
			h := yyS[yypt-1].hint
			h.HintName = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 10:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				HintData: yyS[yypt-1].leadingList,
			}
			for _, item := range yyS[yypt-1].leadingList.Items {
				if t, ok := item.(*ast.HintTable); ok && t.QBName.L != "" {
					parser.yyVAL.hint.QBName = t.QBName
					t.QBName = ast.CIStr{}
					break
				}
			}
		}
	case 11:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 12:
		{
			h := yyS[yypt-1].hint
			h.HintName = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 13:
		{
			parser.warnUnsupportedHint(yyS[yypt-4].ident)
			parser.yyVAL.hint = nil
		}
	case 14:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: yyS[yypt-1].number,
			}
		}
	case 15:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: int64(yyS[yypt-1].number),
			}
		}
	case 16:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-5].ident),
				HintData: ast.HintSetVar{
					VarName: yyS[yypt-3].ident,
					Value:   yyS[yypt-1].ident,
				},
			}
		}
	case 17:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				HintData: yyS[yypt-1].ident,
			}
		}
	case 18:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				QBName:   ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 19:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-5].ident),
				QBName:   ast.NewCIStr(yyS[yypt-3].ident),
				Tables:   yyS[yypt-1].hint.Tables,
			}
		}
	case 20:
		{
			maxValue := uint64(math.MaxInt64) / yyS[yypt-1].number
			if yyS[yypt-2].number <= maxValue {
				parser.yyVAL.hint = &ast.TableOptimizerHint{
					HintName: ast.NewCIStr(yyS[yypt-5].ident),
					HintData: int64(yyS[yypt-2].number * yyS[yypt-1].number),
					QBName:   ast.NewCIStr(yyS[yypt-3].ident),
				}
			} else {
				yylex.AppendError(ErrWarnMemoryQuotaOverflow.GenWithStackByArgs(math.MaxInt))
				parser.lastErrorAsWarn()
				parser.yyVAL.hint = nil
			}
		}
	case 21:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-5].ident),
				HintData: ast.HintTimeRange{
					From: yyS[yypt-3].ident,
					To:   yyS[yypt-1].ident,
				},
			}
		}
	case 22:
		{
			h := yyS[yypt-1].hint
			h.HintName = ast.NewCIStr(yyS[yypt-4].ident)
			h.QBName = ast.NewCIStr(yyS[yypt-2].ident)
			parser.yyVAL.hint = h
		}
	case 23:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				QBName:   ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 24:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 25:
		{
			parser.warnUnsupportedHint(yyS[yypt-4].ident)
			parser.yyVAL.hint = nil
		}
	case 26:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 27:
		{
			parser.warnUnsupportedHint(yyS[yypt-5].ident)
			parser.yyVAL.hint = nil
		}
	case 28:
		{
			parser.warnUnsupportedHint(yyS[yypt-5].ident)
			parser.yyVAL.hint = nil
		}
	case 29:
		{
			hs := yyS[yypt-1].hints
			name := ast.NewCIStr(yyS[yypt-4].ident)
			qb := ast.NewCIStr(yyS[yypt-2].ident)
			for _, h := range hs {
				h.HintName = name
				h.QBName = qb
			}
			parser.yyVAL.hints = hs
		}
	case 30:
		{
			parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
		}
	case 31:
		{
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
		}
	case 32:
		{
			h := yyS[yypt-1].hint
			h.HintData = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 33:
		{
			parser.yyVAL.leadingList = &ast.LeadingList{Items: []interface{}{yyS[yypt-0].leadingElement}}
		}
	case 34:
		{
			parser.yyVAL.leadingList = &ast.LeadingList{Items: append(yyS[yypt-2].leadingList.Items, yyS[yypt-0].leadingElement)}
		}
	case 35:
		{
			tmp := yyS[yypt-0].table
			tmp.FormatStyle = ast.QBNameAfterTable
			parser.yyVAL.leadingElement = &tmp
		}
	case 36:
		{
			tmp := ast.HintTable{
				TableName:     ast.NewCIStr(yyS[yypt-1].ident),
				QBName:        ast.NewCIStr(yyS[yypt-2].ident),
				PartitionList: yyS[yypt-0].modelIdents,
				FormatStyle:   ast.QBNameBeforeTable,
			}
			parser.yyVAL.leadingElement = &tmp
		}
	case 37:
		{
			tmp := ast.HintTable{
				DBName:        ast.NewCIStr(yyS[yypt-3].ident),
				TableName:     ast.NewCIStr(yyS[yypt-1].ident),
				QBName:        ast.NewCIStr(yyS[yypt-4].ident),
				PartitionList: yyS[yypt-0].modelIdents,
			}
			parser.yyVAL.leadingElement = &tmp
		}
	case 38:
		{
			parser.yyVAL.leadingElement = yyS[yypt-1].leadingList
		}
	case 39:
		{
			parser.yyVAL.ident = ""
		}
	case 43:
		{
			parser.yyVAL.modelIdents = nil
		}
	case 44:
		{
			parser.yyVAL.modelIdents = yyS[yypt-1].modelIdents
		}
	case 45:
		{
			parser.yyVAL.modelIdents = []ast.CIStr{ast.NewCIStr(yyS[yypt-0].ident)}
		}
	case 46:
		{
			parser.yyVAL.modelIdents = append(yyS[yypt-2].modelIdents, ast.NewCIStr(yyS[yypt-0].ident))
		}
	case 48:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				QBName: ast.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 49:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
				QBName: ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 50:
		{
			h := yyS[yypt-2].hint
			h.Tables = append(h.Tables, yyS[yypt-0].table)
			parser.yyVAL.hint = h
		}
	case 51:
		{
			parser.yyVAL.table = ast.HintTable{
				TableName:     ast.NewCIStr(yyS[yypt-2].ident),
				QBName:        ast.NewCIStr(yyS[yypt-1].ident),
				PartitionList: yyS[yypt-0].modelIdents,
			}
		}
	case 52:
		{
			parser.yyVAL.table = ast.HintTable{
				DBName:        ast.NewCIStr(yyS[yypt-4].ident),
				TableName:     ast.NewCIStr(yyS[yypt-2].ident),
				QBName:        ast.NewCIStr(yyS[yypt-1].ident),
				PartitionList: yyS[yypt-0].modelIdents,
			}
		}
	case 53:
		{
			h := yyS[yypt-2].hint
			h.Tables = append(h.Tables, yyS[yypt-0].table)
			parser.yyVAL.hint = h
		}
	case 54:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
			}
		}
	case 55:
		{
			parser.yyVAL.table = ast.HintTable{
				TableName: ast.NewCIStr(yyS[yypt-1].ident),
				QBName:    ast.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 56:
		{
			parser.yyVAL.table = ast.HintTable{
				QBName: ast.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 57:
		{
			h := yyS[yypt-0].hint
			h.Tables = []ast.HintTable{yyS[yypt-2].table}
			h.QBName = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 58:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{}
		}
	case 60:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Indexes: []ast.CIStr{ast.NewCIStr(yyS[yypt-0].ident)},
			}
		}
	case 61:
		{
			h := yyS[yypt-2].hint
			h.Indexes = append(h.Indexes, ast.NewCIStr(yyS[yypt-0].ident))
			parser.yyVAL.hint = h
		}
	case 68:
		{
			parser.yyVAL.ident = strconv.FormatUint(yyS[yypt-0].number, 10)
		}
	case 69:
		{
			parser.yyVAL.ident = strconv.FormatUint(yyS[yypt-0].number, 10)
		}
	case 70:
		{
			if yyS[yypt-0].number > 9223372036854775808 {
				yylex.AppendError(yylex.Errorf("the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."))
				return 1
			} else if yyS[yypt-0].number == 9223372036854775808 {
				signed_one := int64(1)
				parser.yyVAL.ident = strconv.FormatInt(signed_one<<63, 10)
			} else {
				parser.yyVAL.ident = strconv.FormatInt(-int64(yyS[yypt-0].number), 10)
			}
		}
	case 71:
		{
			parser.yyVAL.number = 1024 * 1024
		}
	case 72:
		{
			parser.yyVAL.number = 1024 * 1024 * 1024
		}
	case 73:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{HintData: true}
		}
	case 74:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{HintData: false}
		}

	}

	if !parser.lexer.skipPositionRecording {
		yyhintSetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
