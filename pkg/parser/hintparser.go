// Code generated by goyacc DO NOT EDIT.

// Copyright 2020 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

package parser

import __yyfmt__ "fmt"

import (
	"math"
	"strconv"

	"github.com/pingcap/tidb/pkg/parser/ast"
)

type yyhintSymType struct {
	yys            int
	offset         int
	ident          string
	number         uint64
	hint           *ast.TableOptimizerHint
	hints          []*ast.TableOptimizerHint
	table          ast.HintTable
	modelIdents    []ast.CIStr
	leadingList    *ast.LeadingList
	leadingElement interface{} // Modified: Represents either *ast.HintTable or *ast.LeadingList
}

type yyhintXError struct {
	state, xsym int
}

const (
	yyhintDefault             = 57435
	yyhintEOFCode             = 57344
	yyhintErrCode             = 57345
	hintAggToCop              = 57380
	hintBCJoin                = 57402
	hintBKA                   = 57355
	hintBNL                   = 57357
	hintDupsWeedOut           = 57431
	hintFalse                 = 57427
	hintFirstMatch            = 57432
	hintForceIndex            = 57417
	hintGB                    = 57430
	hintHashAgg               = 57382
	hintHashJoin              = 57359
	hintHashJoinBuild         = 57360
	hintHashJoinProbe         = 57361
	hintHypoIndex             = 57379
	hintIdentifier            = 57347
	hintIgnoreIndex           = 57385
	hintIgnorePlanCache       = 57381
	hintIndexHashJoin         = 57389
	hintIndexJoin             = 57386
	hintIndexLookUpPushDown   = 57410
	hintIndexMerge            = 57365
	hintIndexMergeJoin        = 57393
	hintInlHashJoin           = 57388
	hintInlJoin               = 57391
	hintInlMergeJoin          = 57392
	hintIntLit                = 57346
	hintInvalid               = 57348
	hintJoinFixedOrder        = 57351
	hintJoinOrder             = 57352
	hintJoinPrefix            = 57353
	hintJoinSuffix            = 57354
	hintLeading               = 57419
	hintLimitToCop            = 57416
	hintLooseScan             = 57433
	hintMB                    = 57429
	hintMRR                   = 57367
	hintMaterialization       = 57434
	hintMaxExecutionTime      = 57375
	hintMemoryQuota           = 57395
	hintMerge                 = 57363
	hintMpp1PhaseAgg          = 57383
	hintMpp2PhaseAgg          = 57384
	hintNoBKA                 = 57356
	hintNoBNL                 = 57358
	hintNoDecorrelate         = 57421
	hintNoHashJoin            = 57362
	hintNoICP                 = 57369
	hintNoIndexHashJoin       = 57390
	hintNoIndexJoin           = 57387
	hintNoIndexMerge          = 57366
	hintNoIndexMergeJoin      = 57394
	hintNoMRR                 = 57368
	hintNoMerge               = 57364
	hintNoOrderIndex          = 57409
	hintNoRangeOptimization   = 57370
	hintNoSMJoin              = 57401
	hintNoSemijoin            = 57374
	hintNoSkipScan            = 57372
	hintNoSwapJoinInputs      = 57396
	hintNthPlan               = 57415
	hintOLAP                  = 57422
	hintOLTP                  = 57423
	hintOrderIndex            = 57408
	hintPartition             = 57424
	hintQBName                = 57378
	hintQueryType             = 57397
	hintReadConsistentReplica = 57398
	hintReadFromStorage       = 57399
	hintResourceGroup         = 57377
	hintSMJoin                = 57400
	hintSemiJoinRewrite       = 57420
	hintSemijoin              = 57373
	hintSetVar                = 57376
	hintShuffleJoin           = 57403
	hintSingleAtIdentifier    = 57349
	hintSkipScan              = 57371
	hintStraightJoin          = 57418
	hintStreamAgg             = 57404
	hintStringLit             = 57350
	hintSwapJoinInputs        = 57405
	hintTiFlash               = 57426
	hintTiKV                  = 57425
	hintTimeRange             = 57413
	hintTrue                  = 57428
	hintUseCascades           = 57414
	hintUseIndex              = 57407
	hintUseIndexMerge         = 57406
	hintUsePlanCache          = 57411
	hintUseToja               = 57412

	yyhintMaxDepth = 200
	yyhintTabOfs   = -225
)

var (
	yyhintXLAT = map[int]int{
		41:    0,   // ')' (170x)
		57380: 1,   // hintAggToCop (158x)
		57402: 2,   // hintBCJoin (158x)
		57355: 3,   // hintBKA (158x)
		57357: 4,   // hintBNL (158x)
		57417: 5,   // hintForceIndex (158x)
		57382: 6,   // hintHashAgg (158x)
		57359: 7,   // hintHashJoin (158x)
		57360: 8,   // hintHashJoinBuild (158x)
		57361: 9,   // hintHashJoinProbe (158x)
		57379: 10,  // hintHypoIndex (158x)
		57347: 11,  // hintIdentifier (158x)
		57385: 12,  // hintIgnoreIndex (158x)
		57381: 13,  // hintIgnorePlanCache (158x)
		57389: 14,  // hintIndexHashJoin (158x)
		57386: 15,  // hintIndexJoin (158x)
		57410: 16,  // hintIndexLookUpPushDown (158x)
		57365: 17,  // hintIndexMerge (158x)
		57393: 18,  // hintIndexMergeJoin (158x)
		57388: 19,  // hintInlHashJoin (158x)
		57391: 20,  // hintInlJoin (158x)
		57392: 21,  // hintInlMergeJoin (158x)
		57351: 22,  // hintJoinFixedOrder (158x)
		57352: 23,  // hintJoinOrder (158x)
		57353: 24,  // hintJoinPrefix (158x)
		57354: 25,  // hintJoinSuffix (158x)
		57419: 26,  // hintLeading (158x)
		57416: 27,  // hintLimitToCop (158x)
		57375: 28,  // hintMaxExecutionTime (158x)
		57395: 29,  // hintMemoryQuota (158x)
		57363: 30,  // hintMerge (158x)
		57383: 31,  // hintMpp1PhaseAgg (158x)
		57384: 32,  // hintMpp2PhaseAgg (158x)
		57367: 33,  // hintMRR (158x)
		57356: 34,  // hintNoBKA (158x)
		57358: 35,  // hintNoBNL (158x)
		57421: 36,  // hintNoDecorrelate (158x)
		57362: 37,  // hintNoHashJoin (158x)
		57369: 38,  // hintNoICP (158x)
		57390: 39,  // hintNoIndexHashJoin (158x)
		57387: 40,  // hintNoIndexJoin (158x)
		57366: 41,  // hintNoIndexMerge (158x)
		57394: 42,  // hintNoIndexMergeJoin (158x)
		57364: 43,  // hintNoMerge (158x)
		57368: 44,  // hintNoMRR (158x)
		57409: 45,  // hintNoOrderIndex (158x)
		57370: 46,  // hintNoRangeOptimization (158x)
		57374: 47,  // hintNoSemijoin (158x)
		57372: 48,  // hintNoSkipScan (158x)
		57401: 49,  // hintNoSMJoin (158x)
		57396: 50,  // hintNoSwapJoinInputs (158x)
		57415: 51,  // hintNthPlan (158x)
		57408: 52,  // hintOrderIndex (158x)
		57378: 53,  // hintQBName (158x)
		57397: 54,  // hintQueryType (158x)
		57398: 55,  // hintReadConsistentReplica (158x)
		57399: 56,  // hintReadFromStorage (158x)
		57377: 57,  // hintResourceGroup (158x)
		57373: 58,  // hintSemijoin (158x)
		57420: 59,  // hintSemiJoinRewrite (158x)
		57376: 60,  // hintSetVar (158x)
		57403: 61,  // hintShuffleJoin (158x)
		57371: 62,  // hintSkipScan (158x)
		57400: 63,  // hintSMJoin (158x)
		57418: 64,  // hintStraightJoin (158x)
		57404: 65,  // hintStreamAgg (158x)
		57405: 66,  // hintSwapJoinInputs (158x)
		57413: 67,  // hintTimeRange (158x)
		57414: 68,  // hintUseCascades (158x)
		57407: 69,  // hintUseIndex (158x)
		57406: 70,  // hintUseIndexMerge (158x)
		57411: 71,  // hintUsePlanCache (158x)
		57412: 72,  // hintUseToja (158x)
		44:    73,  // ',' (154x)
		57431: 74,  // hintDupsWeedOut (130x)
		57432: 75,  // hintFirstMatch (130x)
		57433: 76,  // hintLooseScan (130x)
		57434: 77,  // hintMaterialization (130x)
		57426: 78,  // hintTiFlash (130x)
		57425: 79,  // hintTiKV (130x)
		57427: 80,  // hintFalse (129x)
		57422: 81,  // hintOLAP (129x)
		57423: 82,  // hintOLTP (129x)
		57428: 83,  // hintTrue (129x)
		57430: 84,  // hintGB (128x)
		57429: 85,  // hintMB (128x)
		57349: 86,  // hintSingleAtIdentifier (106x)
		57346: 87,  // hintIntLit (102x)
		93:    88,  // ']' (95x)
		46:    89,  // '.' (94x)
		57424: 90,  // hintPartition (89x)
		40:    91,  // '(' (86x)
		61:    92,  // '=' (86x)
		57344: 93,  // $end (30x)
		57457: 94,  // QueryBlockOpt (22x)
		57447: 95,  // Identifier (21x)
		57443: 96,  // HintTable (7x)
		57350: 97,  // hintStringLit (6x)
		57437: 98,  // CommaOpt (5x)
		57444: 99,  // HintTableList (4x)
		91:    100, // '[' (3x)
		57451: 101, // LeadingTableElement (3x)
		43:    102, // '+' (2x)
		45:    103, // '-' (2x)
		57436: 104, // BooleanHintName (2x)
		57438: 105, // HintIndexList (2x)
		57440: 106, // HintStorageType (2x)
		57441: 107, // HintStorageTypeAndTable (2x)
		57445: 108, // HintTableListOpt (2x)
		57450: 109, // JoinOrderOptimizerHintName (2x)
		57452: 110, // LeadingTableList (2x)
		57453: 111, // NullaryHintName (2x)
		57455: 112, // PartitionList (2x)
		57456: 113, // PartitionListOpt (2x)
		57459: 114, // StorageOptimizerHintOpt (2x)
		57460: 115, // SubqueryOptimizerHintName (2x)
		57463: 116, // SubqueryStrategy (2x)
		57464: 117, // SupportedIndexLevelOptimizerHintName (2x)
		57465: 118, // SupportedTableLevelOptimizerHintName (2x)
		57466: 119, // TableOptimizerHintOpt (2x)
		57468: 120, // UnsupportedIndexLevelOptimizerHintName (2x)
		57469: 121, // UnsupportedTableLevelOptimizerHintName (2x)
		57470: 122, // Value (2x)
		57471: 123, // ViewName (2x)
		57439: 124, // HintQueryType (1x)
		57442: 125, // HintStorageTypeAndTableList (1x)
		57446: 126, // HintTrueOrFalse (1x)
		57448: 127, // IndexNameList (1x)
		57449: 128, // IndexNameListOpt (1x)
		57454: 129, // OptimizerHintList (1x)
		57458: 130, // Start (1x)
		57461: 131, // SubqueryStrategies (1x)
		57462: 132, // SubqueryStrategiesOpt (1x)
		57467: 133, // UnitOfBytes (1x)
		57472: 134, // ViewNameList (1x)
		57435: 135, // $default (0x)
		57345: 136, // error (0x)
		57348: 137, // hintInvalid (0x)
	}

	yyhintSymNames = []string{
		"')'",
		"hintAggToCop",
		"hintBCJoin",
		"hintBKA",
		"hintBNL",
		"hintForceIndex",
		"hintHashAgg",
		"hintHashJoin",
		"hintHashJoinBuild",
		"hintHashJoinProbe",
		"hintHypoIndex",
		"hintIdentifier",
		"hintIgnoreIndex",
		"hintIgnorePlanCache",
		"hintIndexHashJoin",
		"hintIndexJoin",
		"hintIndexLookUpPushDown",
		"hintIndexMerge",
		"hintIndexMergeJoin",
		"hintInlHashJoin",
		"hintInlJoin",
		"hintInlMergeJoin",
		"hintJoinFixedOrder",
		"hintJoinOrder",
		"hintJoinPrefix",
		"hintJoinSuffix",
		"hintLeading",
		"hintLimitToCop",
		"hintMaxExecutionTime",
		"hintMemoryQuota",
		"hintMerge",
		"hintMpp1PhaseAgg",
		"hintMpp2PhaseAgg",
		"hintMRR",
		"hintNoBKA",
		"hintNoBNL",
		"hintNoDecorrelate",
		"hintNoHashJoin",
		"hintNoICP",
		"hintNoIndexHashJoin",
		"hintNoIndexJoin",
		"hintNoIndexMerge",
		"hintNoIndexMergeJoin",
		"hintNoMerge",
		"hintNoMRR",
		"hintNoOrderIndex",
		"hintNoRangeOptimization",
		"hintNoSemijoin",
		"hintNoSkipScan",
		"hintNoSMJoin",
		"hintNoSwapJoinInputs",
		"hintNthPlan",
		"hintOrderIndex",
		"hintQBName",
		"hintQueryType",
		"hintReadConsistentReplica",
		"hintReadFromStorage",
		"hintResourceGroup",
		"hintSemijoin",
		"hintSemiJoinRewrite",
		"hintSetVar",
		"hintShuffleJoin",
		"hintSkipScan",
		"hintSMJoin",
		"hintStraightJoin",
		"hintStreamAgg",
		"hintSwapJoinInputs",
		"hintTimeRange",
		"hintUseCascades",
		"hintUseIndex",
		"hintUseIndexMerge",
		"hintUsePlanCache",
		"hintUseToja",
		"','",
		"hintDupsWeedOut",
		"hintFirstMatch",
		"hintLooseScan",
		"hintMaterialization",
		"hintTiFlash",
		"hintTiKV",
		"hintFalse",
		"hintOLAP",
		"hintOLTP",
		"hintTrue",
		"hintGB",
		"hintMB",
		"hintSingleAtIdentifier",
		"hintIntLit",
		"']'",
		"'.'",
		"hintPartition",
		"'('",
		"'='",
		"$end",
		"QueryBlockOpt",
		"Identifier",
		"HintTable",
		"hintStringLit",
		"CommaOpt",
		"HintTableList",
		"'['",
		"LeadingTableElement",
		"'+'",
		"'-'",
		"BooleanHintName",
		"HintIndexList",
		"HintStorageType",
		"HintStorageTypeAndTable",
		"HintTableListOpt",
		"JoinOrderOptimizerHintName",
		"LeadingTableList",
		"NullaryHintName",
		"PartitionList",
		"PartitionListOpt",
		"StorageOptimizerHintOpt",
		"SubqueryOptimizerHintName",
		"SubqueryStrategy",
		"SupportedIndexLevelOptimizerHintName",
		"SupportedTableLevelOptimizerHintName",
		"TableOptimizerHintOpt",
		"UnsupportedIndexLevelOptimizerHintName",
		"UnsupportedTableLevelOptimizerHintName",
		"Value",
		"ViewName",
		"HintQueryType",
		"HintStorageTypeAndTableList",
		"HintTrueOrFalse",
		"IndexNameList",
		"IndexNameListOpt",
		"OptimizerHintList",
		"Start",
		"SubqueryStrategies",
		"SubqueryStrategiesOpt",
		"UnitOfBytes",
		"ViewNameList",
		"$default",
		"error",
		"hintInvalid",
	}

	yyhintReductions = []struct{ xsym, components int }{
		{0, 1},
		{130, 1},
		{129, 1},
		{129, 3},
		{129, 1},
		{129, 3},
		{119, 4},
		{119, 4},
		{119, 4},
		{119, 4},
		{119, 5},
		{119, 4},
		{119, 4},
		{119, 5},
		{119, 5},
		{119, 5},
		{119, 6},
		{119, 4},
		{119, 4},
		{119, 6},
		{119, 6},
		{119, 6},
		{119, 5},
		{119, 4},
		{119, 5},
		{119, 5},
		{119, 4},
		{119, 6},
		{119, 6},
		{114, 5},
		{125, 1},
		{125, 3},
		{107, 4},
		{110, 1},
		{110, 3},
		{101, 1},
		{101, 3},
		{94, 0},
		{94, 1},
		{98, 0},
		{98, 1},
		{113, 0},
		{113, 4},
		{112, 1},
		{112, 3},
		{108, 1},
		{108, 1},
		{99, 2},
		{99, 3},
		{96, 3},
		{96, 5},
		{134, 3},
		{134, 1},
		{123, 2},
		{123, 1},
		{105, 4},
		{128, 0},
		{128, 1},
		{127, 1},
		{127, 3},
		{132, 0},
		{132, 1},
		{131, 1},
		{131, 3},
		{122, 1},
		{122, 1},
		{122, 1},
		{122, 2},
		{122, 2},
		{133, 1},
		{133, 1},
		{126, 1},
		{126, 1},
		{109, 1},
		{109, 1},
		{109, 1},
		{121, 1},
		{121, 1},
		{121, 1},
		{121, 1},
		{121, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{120, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{117, 1},
		{115, 1},
		{115, 1},
		{116, 1},
		{116, 1},
		{116, 1},
		{116, 1},
		{104, 1},
		{104, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{111, 1},
		{124, 1},
		{124, 1},
		{106, 1},
		{106, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
		{95, 1},
	}

	yyhintXErrors = map[yyhintXError]string{}

	yyhintParseTab = [331][]uint16{
		// 0
		{1: 302, 260, 253, 255, 289, 298, 274, 276, 277, 278, 248, 287, 306, 267, 263, 292, 279, 272, 266, 262, 271, 230, 250, 251, 252, 234, 303, 238, 243, 265, 299, 300, 280, 254, 256, 309, 275, 282, 268, 264, 304, 273, 257, 281, 291, 283, 294, 285, 259, 270, 239, 290, 242, 247, 305, 249, 241, 293, 308, 240, 261, 284, 258, 307, 301, 269, 244, 296, 286, 288, 297, 295, 104: 245, 109: 231, 111: 246, 114: 229, 237, 117: 236, 233, 228, 235, 232, 129: 227, 226},
		{93: 225},
		{1: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 416, 93: 224, 98: 553},
		{1: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 93: 223},
		{1: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 93: 221},
		// 5
		{91: 550},
		{91: 547},
		{91: 544},
		{91: 539},
		{91: 528},
		// 10
		{91: 525},
		{91: 514},
		{91: 502},
		{91: 498},
		{91: 494},
		// 15
		{91: 489},
		{91: 486},
		{91: 474},
		{91: 467},
		{91: 462},
		// 20
		{91: 456},
		{91: 453},
		{91: 447},
		{91: 427},
		{91: 310},
		// 25
		{91: 152},
		{91: 151},
		{91: 150},
		{91: 149},
		{91: 148},
		// 30
		{91: 147},
		{91: 146},
		{91: 145},
		{91: 144},
		{91: 143},
		// 35
		{91: 142},
		{91: 141},
		{91: 140},
		{91: 139},
		{91: 138},
		// 40
		{91: 137},
		{91: 136},
		{91: 135},
		{91: 134},
		{91: 133},
		// 45
		{91: 132},
		{91: 131},
		{91: 130},
		{91: 129},
		{91: 128},
		// 50
		{91: 127},
		{91: 126},
		{91: 125},
		{91: 124},
		{91: 123},
		// 55
		{91: 122},
		{91: 121},
		{91: 120},
		{91: 119},
		{91: 118},
		// 60
		{91: 117},
		{91: 116},
		{91: 115},
		{91: 114},
		{91: 113},
		// 65
		{91: 112},
		{91: 111},
		{91: 110},
		{91: 109},
		{91: 108},
		// 70
		{91: 103},
		{91: 102},
		{91: 101},
		{91: 100},
		{91: 99},
		// 75
		{91: 98},
		{91: 97},
		{91: 96},
		{91: 95},
		{91: 94},
		// 80
		{91: 93},
		{91: 92},
		{91: 91},
		{91: 90},
		{91: 89},
		// 85
		{78: 188, 188, 86: 312, 94: 311},
		{78: 317, 316, 106: 315, 314, 125: 313},
		{187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 87: 187, 187, 187, 187, 187},
		{424, 73: 425},
		{195, 73: 195},
		// 90
		{100: 318},
		{100: 86},
		{100: 85},
		{1: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 94: 320, 99: 319},
		{73: 422, 88: 421},
		// 95
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 322, 321},
		{178, 73: 178, 88: 178},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 88: 188, 408, 188, 94: 407},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 92: 84},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 92: 83},
		// 100
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 92: 82},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 92: 81},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 92: 80},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 92: 79},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 92: 78},
		// 105
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 92: 77},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 92: 76},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 92: 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 92: 74},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 92: 73},
		// 110
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 92: 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 92: 71},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 92: 70},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 92: 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 92: 68},
		// 115
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 92: 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 92: 66},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 92: 65},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 92: 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 92: 63},
		// 120
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 92: 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 92: 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 92: 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 92: 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 92: 58},
		// 125
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 92: 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 92: 56},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 92: 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 92: 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 92: 53},
		// 130
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 92: 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 92: 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 92: 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 92: 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 92: 48},
		// 135
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 92: 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 92: 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 92: 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 92: 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 92: 43},
		// 140
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 92: 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 92: 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 92: 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 92: 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 92: 38},
		// 145
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 92: 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 92: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 92: 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 92: 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 92: 33},
		// 150
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 92: 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 92: 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 92: 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 92: 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 92: 28},
		// 155
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 92: 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 92: 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 92: 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 92: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 92: 23},
		// 160
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 92: 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 92: 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92: 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 92: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 92: 18},
		// 165
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 92: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 92: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 92: 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 92: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 13},
		// 170
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 92: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 92: 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 92: 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 8},
		// 175
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 92: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 92: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 92: 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 92: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 92: 3},
		// 180
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 92: 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 92: 1},
		{184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 88: 184, 90: 411, 113: 420},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 409},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 88: 188, 90: 188, 94: 410},
		// 185
		{184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 88: 184, 90: 411, 113: 412},
		{91: 413},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 88: 175},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 415, 112: 414},
		{417, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 416, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 98: 418},
		// 190
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 74: 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 87: 185, 97: 185},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 88: 183},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 419},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 87: 181},
		// 195
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 88: 176},
		{193, 73: 193},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 322, 423},
		{177, 73: 177, 88: 177},
		{1: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 93: 196},
		// 200
		{78: 317, 316, 106: 315, 426},
		{194, 73: 194},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 312, 188, 94: 428, 430, 112: 429},
		{87: 445},
		{441, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 416, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 87: 186, 98: 442},
		// 205
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 87: 182, 92: 431},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 87: 435, 95: 434, 97: 433, 102: 436, 437, 122: 432},
		{440},
		{161},
		{160},
		// 210
		{159},
		{87: 439},
		{87: 438},
		{157},
		{158},
		// 215
		{1: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 93: 197},
		{1: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 93: 199},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 87: 443, 95: 419},
		{444},
		{1: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 93: 198},
		// 220
		{446},
		{1: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 93: 200},
		{81: 188, 188, 86: 312, 94: 448},
		{81: 450, 451, 124: 449},
		{452},
		// 225
		{88},
		{87},
		{1: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 93: 201},
		{188, 86: 312, 94: 454},
		{455},
		// 230
		{1: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 93: 202},
		{80: 188, 83: 188, 86: 312, 94: 457},
		{80: 460, 83: 459, 126: 458},
		{461},
		{154},
		// 235
		{153},
		{1: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 93: 203},
		{97: 463},
		{73: 416, 97: 186, 464},
		{97: 465},
		// 240
		{466},
		{1: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 93: 204},
		{86: 312, 188, 94: 468},
		{87: 469},
		{84: 472, 471, 133: 470},
		// 245
		{473},
		{156},
		{155},
		{1: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 93: 205},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 475},
		// 250
		{476, 73: 477},
		{1: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 93: 207},
		{188, 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 312, 89: 188, 94: 481, 480, 123: 479, 134: 478},
		{483, 89: 484},
		{173, 89: 173},
		// 255
		{188, 86: 312, 89: 188, 94: 482},
		{171, 89: 171},
		{172, 89: 172},
		{1: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 93: 206},
		{188, 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 312, 89: 188, 94: 481, 480, 123: 485},
		// 260
		{174, 89: 174},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 487},
		{488},
		{1: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 93: 208},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 490},
		// 265
		{92: 491},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 87: 435, 95: 434, 97: 433, 102: 436, 437, 122: 492},
		{493},
		{1: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 93: 209},
		{86: 312, 188, 94: 495},
		// 270
		{87: 496},
		{497},
		{1: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 93: 210},
		{86: 312, 188, 94: 499},
		{87: 500},
		// 275
		{501},
		{1: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 93: 211},
		{188, 74: 188, 188, 188, 188, 86: 312, 94: 503},
		{165, 74: 507, 508, 509, 510, 116: 506, 131: 505, 504},
		{513},
		// 280
		{164, 73: 511},
		{163, 73: 163},
		{107, 73: 107},
		{106, 73: 106},
		{105, 73: 105},
		// 285
		{104, 73: 104},
		{74: 507, 508, 509, 510, 116: 512},
		{162, 73: 162},
		{1: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 93: 212},
		{1: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 94: 516, 105: 515},
		// 290
		{524},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 322, 517},
		{186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 416, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 98: 518},
		{169, 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 521, 127: 520, 519},
		{170},
		// 295
		{168, 73: 522},
		{167, 73: 167},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 523},
		{166, 73: 166},
		{1: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 93: 213},
		// 300
		{1: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 94: 516, 105: 526},
		{527},
		{1: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 93: 214},
		{1: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 91: 188, 94: 529},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 91: 533, 95: 322, 532, 101: 531, 110: 530},
		// 305
		{538, 73: 535},
		{192, 73: 192},
		{190, 73: 190},
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 91: 533, 95: 322, 532, 101: 531, 110: 534},
		{536, 73: 535},
		// 310
		{1: 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 91: 533, 95: 322, 532, 101: 537},
		{189, 73: 189},
		{191, 73: 191},
		{1: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 93: 215},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 94: 542, 99: 541, 108: 540},
		// 315
		{543},
		{180, 73: 422},
		{179, 353, 376, 328, 330, 390, 356, 332, 333, 334, 352, 323, 359, 355, 361, 364, 384, 338, 367, 360, 363, 366, 324, 325, 326, 327, 392, 354, 348, 369, 336, 357, 358, 340, 329, 331, 394, 335, 342, 362, 365, 339, 368, 337, 341, 383, 343, 347, 345, 375, 370, 389, 382, 351, 371, 372, 373, 350, 346, 393, 349, 377, 344, 374, 391, 378, 379, 387, 388, 381, 380, 385, 386, 74: 403, 404, 405, 406, 398, 397, 399, 395, 396, 400, 402, 401, 95: 322, 321},
		{1: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 93: 216},
		{188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 94: 542, 99: 541, 108: 545},
		// 320
		{546},
		{1: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 93: 217},
		{1: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 74: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 312, 94: 320, 99: 548},
		{549, 73: 422},
		{1: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 93: 218},
		// 325
		{188, 86: 312, 94: 551},
		{552},
		{1: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 93: 219},
		{1: 302, 260, 253, 255, 289, 298, 274, 276, 277, 278, 248, 287, 306, 267, 263, 292, 279, 272, 266, 262, 271, 230, 250, 251, 252, 234, 303, 238, 243, 265, 299, 300, 280, 254, 256, 309, 275, 282, 268, 264, 304, 273, 257, 281, 291, 283, 294, 285, 259, 270, 239, 290, 242, 247, 305, 249, 241, 293, 308, 240, 261, 284, 258, 307, 301, 269, 244, 296, 286, 288, 297, 295, 104: 245, 109: 231, 111: 246, 114: 555, 237, 117: 236, 233, 554, 235, 232},
		{1: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 93: 222},
		// 330
		{1: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 93: 220},
	}
)

var yyhintDebug = 0

type yyhintLexer interface {
	Lex(lval *yyhintSymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyhintLexerEx interface {
	yyhintLexer
	Reduced(rule, state int, lval *yyhintSymType) bool
}

func yyhintSymName(c int) (s string) {
	x, ok := yyhintXLAT[c]
	if ok {
		return yyhintSymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yyhintlex1(yylex yyhintLexer, lval *yyhintSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyhintEOFCode
	}
	if yyhintDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yyhintSymName(n), n, n, lval)
	}
	return n
}

func yyhintParse(yylex yyhintLexer, parser *hintParser) int {
	const yyError = 136

	yyEx, _ := yylex.(yyhintLexerEx)
	var yyn int
	parser.yylval = yyhintSymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yyhintlex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyhintXLAT[yychar]; !ok {
			yyxchar = len(yyhintSymNames) // > tab width
		}
	}
	if yyhintDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyhintParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyhintTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyhintDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyhintDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yyhintSymName(yychar), yystate)
			}
			msg, ok := yyhintXErrors[yyhintXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyhintParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyhintTabOfs
					if yyn > 0 { // hit
						if yyhintDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyhintDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyhintSymName(yychar))
			}
			if yychar == yyhintEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyhintReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyhintParseTab[yyS[yyp].yys][x]) + yyhintTabOfs
	/* reduction by production r */
	if yyhintDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yyhintSymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			parser.result = yyS[yypt-0].hints
		}
	case 2:
		{
			if yyS[yypt-0].hint != nil {
				parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
			}
		}
	case 3:
		{
			if yyS[yypt-0].hint != nil {
				parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
			} else {
				parser.yyVAL.hints = yyS[yypt-2].hints
			}
		}
	case 4:
		{
			parser.yyVAL.hints = yyS[yypt-0].hints
		}
	case 5:
		{
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hints...)
		}
	case 6:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 7:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 8:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 9:
		{
			h := yyS[yypt-1].hint
			h.HintName = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 10:
		{
			h := &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: yyS[yypt-1].leadingList,
			}
			// For LEADING hints we need to maintain two views of the tables:
			// h.HintData:
			//   - Stores the structured AST node (LeadingList).
			//   - Preserves the nesting and order information of LEADING(...),
			//
			// h.Tables:
			//   - Stores a flat slice of all HintTable elements inside the LeadingList.
			//   - Only used for initialization.
			if leadingList, ok := h.HintData.(*ast.LeadingList); ok {
				// be compatible with the prior flatten writing style
				h.Tables = ast.FlattenLeadingList(leadingList)
			}
			parser.yyVAL.hint = h
		}
	case 11:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 12:
		{
			h := yyS[yypt-1].hint
			h.HintName = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 13:
		{
			parser.warnUnsupportedHint(yyS[yypt-4].ident)
			parser.yyVAL.hint = nil
		}
	case 14:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: yyS[yypt-1].number,
			}
		}
	case 15:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: int64(yyS[yypt-1].number),
			}
		}
	case 16:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-5].ident),
				HintData: ast.HintSetVar{
					VarName: yyS[yypt-3].ident,
					Value:   yyS[yypt-1].ident,
				},
			}
		}
	case 17:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				HintData: yyS[yypt-1].ident,
			}
		}
	case 18:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				QBName:   ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 19:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-5].ident),
				QBName:   ast.NewCIStr(yyS[yypt-3].ident),
				Tables:   yyS[yypt-1].hint.Tables,
			}
		}
	case 20:
		{
			maxValue := uint64(math.MaxInt64) / yyS[yypt-1].number
			if yyS[yypt-2].number <= maxValue {
				parser.yyVAL.hint = &ast.TableOptimizerHint{
					HintName: ast.NewCIStr(yyS[yypt-5].ident),
					HintData: int64(yyS[yypt-2].number * yyS[yypt-1].number),
					QBName:   ast.NewCIStr(yyS[yypt-3].ident),
				}
			} else {
				yylex.AppendError(ErrWarnMemoryQuotaOverflow.GenWithStackByArgs(math.MaxInt))
				parser.lastErrorAsWarn()
				parser.yyVAL.hint = nil
			}
		}
	case 21:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-5].ident),
				HintData: ast.HintTimeRange{
					From: yyS[yypt-3].ident,
					To:   yyS[yypt-1].ident,
				},
			}
		}
	case 22:
		{
			h := yyS[yypt-1].hint
			h.HintName = ast.NewCIStr(yyS[yypt-4].ident)
			h.QBName = ast.NewCIStr(yyS[yypt-2].ident)
			parser.yyVAL.hint = h
		}
	case 23:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-3].ident),
				QBName:   ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 24:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: ast.NewCIStr(yyS[yypt-4].ident),
				QBName:   ast.NewCIStr(yyS[yypt-2].ident),
				HintData: ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 25:
		{
			parser.warnUnsupportedHint(yyS[yypt-4].ident)
			parser.yyVAL.hint = nil
		}
	case 26:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 27:
		{
			parser.warnUnsupportedHint(yyS[yypt-5].ident)
			parser.yyVAL.hint = nil
		}
	case 28:
		{
			parser.warnUnsupportedHint(yyS[yypt-5].ident)
			parser.yyVAL.hint = nil
		}
	case 29:
		{
			hs := yyS[yypt-1].hints
			name := ast.NewCIStr(yyS[yypt-4].ident)
			qb := ast.NewCIStr(yyS[yypt-2].ident)
			for _, h := range hs {
				h.HintName = name
				h.QBName = qb
			}
			parser.yyVAL.hints = hs
		}
	case 30:
		{
			parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
		}
	case 31:
		{
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
		}
	case 32:
		{
			h := yyS[yypt-1].hint
			h.HintData = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 33:
		{
			parser.yyVAL.leadingList = &ast.LeadingList{Items: []interface{}{yyS[yypt-0].leadingElement}}
		}
	case 34:
		{
			parser.yyVAL.leadingList = yyS[yypt-2].leadingList
			parser.yyVAL.leadingList.Items = append(parser.yyVAL.leadingList.Items, yyS[yypt-0].leadingElement)
		}
	case 35:
		{
			tmp := yyS[yypt-0].table
			parser.yyVAL.leadingElement = &tmp
		}
	case 36:
		{
			parser.yyVAL.leadingElement = yyS[yypt-1].leadingList
		}
	case 37:
		{
			parser.yyVAL.ident = ""
		}
	case 41:
		{
			parser.yyVAL.modelIdents = nil
		}
	case 42:
		{
			parser.yyVAL.modelIdents = yyS[yypt-1].modelIdents
		}
	case 43:
		{
			parser.yyVAL.modelIdents = []ast.CIStr{ast.NewCIStr(yyS[yypt-0].ident)}
		}
	case 44:
		{
			parser.yyVAL.modelIdents = append(yyS[yypt-2].modelIdents, ast.NewCIStr(yyS[yypt-0].ident))
		}
	case 46:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				QBName: ast.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 47:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
				QBName: ast.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 48:
		{
			h := yyS[yypt-2].hint
			h.Tables = append(h.Tables, yyS[yypt-0].table)
			parser.yyVAL.hint = h
		}
	case 49:
		{
			parser.yyVAL.table = ast.HintTable{
				TableName:     ast.NewCIStr(yyS[yypt-2].ident),
				QBName:        ast.NewCIStr(yyS[yypt-1].ident),
				PartitionList: yyS[yypt-0].modelIdents,
			}
		}
	case 50:
		{
			parser.yyVAL.table = ast.HintTable{
				DBName:        ast.NewCIStr(yyS[yypt-4].ident),
				TableName:     ast.NewCIStr(yyS[yypt-2].ident),
				QBName:        ast.NewCIStr(yyS[yypt-1].ident),
				PartitionList: yyS[yypt-0].modelIdents,
			}
		}
	case 51:
		{
			h := yyS[yypt-2].hint
			h.Tables = append(h.Tables, yyS[yypt-0].table)
			parser.yyVAL.hint = h
		}
	case 52:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
			}
		}
	case 53:
		{
			parser.yyVAL.table = ast.HintTable{
				TableName: ast.NewCIStr(yyS[yypt-1].ident),
				QBName:    ast.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 54:
		{
			parser.yyVAL.table = ast.HintTable{
				QBName: ast.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 55:
		{
			h := yyS[yypt-0].hint
			h.Tables = []ast.HintTable{yyS[yypt-2].table}
			h.QBName = ast.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 56:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{}
		}
	case 58:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Indexes: []ast.CIStr{ast.NewCIStr(yyS[yypt-0].ident)},
			}
		}
	case 59:
		{
			h := yyS[yypt-2].hint
			h.Indexes = append(h.Indexes, ast.NewCIStr(yyS[yypt-0].ident))
			parser.yyVAL.hint = h
		}
	case 66:
		{
			parser.yyVAL.ident = strconv.FormatUint(yyS[yypt-0].number, 10)
		}
	case 67:
		{
			parser.yyVAL.ident = strconv.FormatUint(yyS[yypt-0].number, 10)
		}
	case 68:
		{
			if yyS[yypt-0].number > 9223372036854775808 {
				yylex.AppendError(yylex.Errorf("the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."))
				return 1
			} else if yyS[yypt-0].number == 9223372036854775808 {
				signed_one := int64(1)
				parser.yyVAL.ident = strconv.FormatInt(signed_one<<63, 10)
			} else {
				parser.yyVAL.ident = strconv.FormatInt(-int64(yyS[yypt-0].number), 10)
			}
		}
	case 69:
		{
			parser.yyVAL.number = 1024 * 1024
		}
	case 70:
		{
			parser.yyVAL.number = 1024 * 1024 * 1024
		}
	case 71:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{HintData: true}
		}
	case 72:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{HintData: false}
		}

	}

	if !parser.lexer.skipPositionRecording {
		yyhintSetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
