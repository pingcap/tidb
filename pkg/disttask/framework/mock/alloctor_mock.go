// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/pkg/disttask/framework/alloctor (interfaces: Alloctor)
//
// Generated by this command:
//
//	mockgen -package mock github.com/pingcap/tidb/pkg/disttask/framework/alloctor Alloctor
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAlloctor is a mock of Alloctor interface.
type MockAlloctor struct {
	ctrl     *gomock.Controller
	recorder *MockAlloctorMockRecorder
}

// MockAlloctorMockRecorder is the mock recorder for MockAlloctor.
type MockAlloctorMockRecorder struct {
	mock *MockAlloctor
}

// NewMockAlloctor creates a new mock instance.
func NewMockAlloctor(ctrl *gomock.Controller) *MockAlloctor {
	mock := &MockAlloctor{ctrl: ctrl}
	mock.recorder = &MockAlloctorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlloctor) EXPECT() *MockAlloctorMockRecorder {
	return m.recorder
}

// Alloc mocks base method.
func (m *MockAlloctor) Alloc(arg0 int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alloc", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Alloc indicates an expected call of Alloc.
func (mr *MockAlloctorMockRecorder) Alloc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alloc", reflect.TypeOf((*MockAlloctor)(nil).Alloc), arg0)
}

// Free mocks base method.
func (m *MockAlloctor) Free(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", arg0)
}

// Free indicates an expected call of Free.
func (mr *MockAlloctorMockRecorder) Free(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockAlloctor)(nil).Free), arg0)
}

// Quota mocks base method.
func (m *MockAlloctor) Quota() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quota")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Quota indicates an expected call of Quota.
func (mr *MockAlloctorMockRecorder) Quota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quota", reflect.TypeOf((*MockAlloctor)(nil).Quota))
}
