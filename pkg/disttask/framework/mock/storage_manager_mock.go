// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/pkg/disttask/framework/storage (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package mock github.com/pingcap/tidb/pkg/disttask/framework/storage Manager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/pingcap/tidb/pkg/disttask/framework/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockManager) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetCPUCountOfNode mocks base method.
func (m *MockManager) GetCPUCountOfNode(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUCountOfNode", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUCountOfNode indicates an expected call of GetCPUCountOfNode.
func (mr *MockManagerMockRecorder) GetCPUCountOfNode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUCountOfNode", reflect.TypeOf((*MockManager)(nil).GetCPUCountOfNode), arg0)
}

// GetTaskByID mocks base method.
func (m *MockManager) GetTaskByID(arg0 context.Context, arg1 int64) (*proto.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockManagerMockRecorder) GetTaskByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockManager)(nil).GetTaskByID), arg0, arg1)
}

// ModifyTaskByID mocks base method.
func (m *MockManager) ModifyTaskByID(arg0 context.Context, arg1 int64, arg2 *proto.ModifyParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyTaskByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyTaskByID indicates an expected call of ModifyTaskByID.
func (mr *MockManagerMockRecorder) ModifyTaskByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyTaskByID", reflect.TypeOf((*MockManager)(nil).ModifyTaskByID), arg0, arg1, arg2)
}
