// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/pkg/ddl/systable (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package mock github.com/pingcap/tidb/pkg/ddl/systable Manager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/pingcap/tidb/pkg/meta/model"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetJobByID mocks base method.
func (m *MockManager) GetJobByID(ctx context.Context, jobID int64) (*model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, jobID)
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockManagerMockRecorder) GetJobByID(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockManager)(nil).GetJobByID), ctx, jobID)
}

// GetMDLVer mocks base method.
func (m *MockManager) GetMDLVer(ctx context.Context, jobID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMDLVer", ctx, jobID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMDLVer indicates an expected call of GetMDLVer.
func (mr *MockManagerMockRecorder) GetMDLVer(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMDLVer", reflect.TypeOf((*MockManager)(nil).GetMDLVer), ctx, jobID)
}

// GetMinJobID mocks base method.
func (m *MockManager) GetMinJobID(ctx context.Context, prevMinJobID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinJobID", ctx, prevMinJobID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinJobID indicates an expected call of GetMinJobID.
func (mr *MockManagerMockRecorder) GetMinJobID(ctx, prevMinJobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinJobID", reflect.TypeOf((*MockManager)(nil).GetMinJobID), ctx, prevMinJobID)
}

// HasFlashbackClusterJob mocks base method.
func (m *MockManager) HasFlashbackClusterJob(ctx context.Context, minJobID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFlashbackClusterJob", ctx, minJobID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasFlashbackClusterJob indicates an expected call of HasFlashbackClusterJob.
func (mr *MockManagerMockRecorder) HasFlashbackClusterJob(ctx, minJobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFlashbackClusterJob", reflect.TypeOf((*MockManager)(nil).HasFlashbackClusterJob), ctx, minJobID)
}
