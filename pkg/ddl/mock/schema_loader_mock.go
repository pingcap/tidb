// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/pkg/ddl (interfaces: SchemaLoader)
//
// Generated by this command:
//
//	mockgen -package mock github.com/pingcap/tidb/pkg/ddl SchemaLoader
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSchemaLoader is a mock of SchemaLoader interface.
type MockSchemaLoader struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaLoaderMockRecorder
}

// MockSchemaLoaderMockRecorder is the mock recorder for MockSchemaLoader.
type MockSchemaLoaderMockRecorder struct {
	mock *MockSchemaLoader
}

// NewMockSchemaLoader creates a new mock instance.
func NewMockSchemaLoader(ctrl *gomock.Controller) *MockSchemaLoader {
	mock := &MockSchemaLoader{ctrl: ctrl}
	mock.recorder = &MockSchemaLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaLoader) EXPECT() *MockSchemaLoaderMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSchemaLoader) ISGOMOCK() struct{} {
	return struct{}{}
}

// Reload mocks base method.
func (m *MockSchemaLoader) Reload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSchemaLoaderMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSchemaLoader)(nil).Reload))
}
