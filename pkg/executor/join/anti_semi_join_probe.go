// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package join

// TODO merge common codes in semi join and anti-semi join
type antiSemiJoinProbe struct {
	baseJoinProbe
	isLeftSideBuild bool

	// used when right side is build side and has other condition
	// One probe row may match multi build rows and generate multi result rows.
	// We see these result rows that generated by the same probe row as one group.
	groupMark []int

	// used when left side is build side
	rowIter *rowIter

	nextProcessProbeRowIdx int

	// used in other condition to record which rows are being processed now
	processedProbeRowIdxSet map[int]struct{}

	// used in other condition to record if `j.selected` of this row has been set to true
	// so that we can skip this row.
	skipRowIdxSet map[int]struct{}
}

func newAntiSemiJoinProbe(base baseJoinProbe, isLeftSideBuild bool) *semiJoinProbe {
	probe := &semiJoinProbe{
		baseJoinProbe:           base,
		isLeftSideBuild:         isLeftSideBuild,
		processedProbeRowIdxSet: make(map[int]struct{}),
		skipRowIdxSet:           make(map[int]struct{}),
	}
	return probe
}

