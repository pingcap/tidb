// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package join

import (
	"github.com/pingcap/tidb/pkg/expression"
	"github.com/pingcap/tidb/pkg/util/chunk"
	"github.com/pingcap/tidb/pkg/util/sqlkiller"
)

type leftOuterSemiJoinProbe struct {
	baseJoinProbe
	// build/probe side used columns and offset in result chunk
	probeColUsed []int

	// used when use inner side to build, isMatchedRows is indexed by logical row index
	isMatchedRows []bool
	// used when use inner side to build, isNullRows is indexed by logical row index
	isNullRows []bool

	// buffer isNull for other condition evaluation
	isNulls []bool

	// One probe row may match multi build rows and generate multi result rows.
	// We see these result rows that generated by the same probe row as one group.
	nextProcessProbeRowIdx int

	// used in other condition to record which rows are being processed now
	processedProbeRowIdxSet map[int]struct{}
}

var _ ProbeV2 = &leftOuterSemiJoinProbe{}

func newLeftOuterSemiJoinProbe(base baseJoinProbe) *leftOuterSemiJoinProbe {
	probe := &leftOuterSemiJoinProbe{
		baseJoinProbe:           base,
		processedProbeRowIdxSet: make(map[int]struct{}),
	}
	probe.probeColUsed = base.lUsed
	return probe
}

func (j *leftOuterSemiJoinProbe) SetChunkForProbe(chunk *chunk.Chunk) (err error) {
	err = j.baseJoinProbe.SetChunkForProbe(chunk)
	if err != nil {
		return err
	}
	j.isMatchedRows = j.isMatchedRows[:0]
	for i := 0; i < j.chunkRows; i++ {
		j.isMatchedRows = append(j.isMatchedRows, false)
	}
	j.isNullRows = j.isNullRows[:0]
	for i := 0; i < j.chunkRows; i++ {
		j.isNullRows = append(j.isNullRows, false)
	}
	return nil
}

func (*leftOuterSemiJoinProbe) NeedScanRowTable() bool {
	return false
}

func (*leftOuterSemiJoinProbe) IsScanRowTableDone() bool {
	panic("should not reach here")
}

func (*leftOuterSemiJoinProbe) InitForScanRowTable() {
	panic("should not reach here")
}

func (*leftOuterSemiJoinProbe) ScanRowTable(joinResult *hashjoinWorkerResult, _ *sqlkiller.SQLKiller) *hashjoinWorkerResult {
	return joinResult
}

func (j *leftOuterSemiJoinProbe) Probe(joinResult *hashjoinWorkerResult, sqlKiller *sqlkiller.SQLKiller) (ok bool, _ *hashjoinWorkerResult) {
	joinedChk, remainCap, err := j.prepareForProbe(joinResult.chk)
	if err != nil {
		joinResult.err = err
		return false, joinResult
	}

	if j.ctx.hasOtherCondition() {
		err = j.probeForInnerSideBuildWithOtherCondition(joinResult.chk, joinedChk, sqlKiller)
	} else {
		err = j.probeForInnerSideBuildWithoutOtherCondition(joinResult.chk, joinedChk, remainCap, sqlKiller)
	}
	if err != nil {
		joinResult.err = err
		return false, joinResult
	}
	return true, joinResult
}

func (j *leftOuterSemiJoinProbe) probeForInnerSideBuildWithOtherCondition(chk, joinedChk *chunk.Chunk, sqlKiller *sqlkiller.SQLKiller) (err error) {
	j.nextProcessProbeRowIdx = j.currentProbeRow
	err = j.concatenateProbeAndBuildRows(joinedChk, sqlKiller)
	if err != nil {
		return err
	}

	// To avoid `Previous chunk is not probed yet` error
	j.currentProbeRow = j.nextProcessProbeRowIdx
	if joinedChk.NumRows() > 0 {
		j.selected, j.isNulls, err = expression.VecEvalBool(j.ctx.SessCtx.GetExprCtx().GetEvalCtx(), false, j.ctx.OtherCondition, joinedChk, j.selected, j.isNulls)
		if err != nil {
			return err
		}

		for i := 0; i < joinedChk.NumRows(); i++ {
			if j.selected[i] {
				j.isMatchedRows[j.rowIndexInfos[i].probeRowIndex] = true
			}
			if j.isNulls[i] {
				j.isNullRows[j.rowIndexInfos[i].probeRowIndex] = true
			}
		}
	}

	if j.currentProbeRow == j.chunkRows && len(j.processedProbeRowIdxSet) == 0 {
		j.buildResult(chk, 0)
	}
	return
}

func (j *leftOuterSemiJoinProbe) probeForInnerSideBuildWithoutOtherCondition(_, joinedChk *chunk.Chunk, remainCap int, sqlKiller *sqlkiller.SQLKiller) (err error) {
	meta := j.ctx.hashTableMeta
	startProbeRow := j.currentProbeRow
	tagHelper := j.ctx.hashTableContext.tagHelper

	for remainCap > 0 && j.currentProbeRow < j.chunkRows {
		if j.matchedRowsHeaders[j.currentProbeRow] != 0 {
			candidateRow := tagHelper.toUnsafePointer(j.matchedRowsHeaders[j.currentProbeRow])
			if !isKeyMatched(meta.keyMode, j.serializedKeys[j.currentProbeRow], candidateRow, meta) {
				j.probeCollision++
				j.matchedRowsHeaders[j.currentProbeRow] = getNextRowAddress(candidateRow, tagHelper, j.matchedRowsHashValue[j.currentProbeRow])
				continue
			}
			j.isMatchedRows[j.currentProbeRow] = true
		}
		j.matchedRowsHeaders[j.currentProbeRow] = 0
		remainCap--
		j.currentProbeRow++
	}

	err = checkSQLKiller(sqlKiller, "killedDuringProbe")

	if err != nil {
		return err
	}

	j.buildResult(joinedChk, startProbeRow)
	return nil
}

func (j *leftOuterSemiJoinProbe) buildResult(chk *chunk.Chunk, startProbeRow int) {
	selected := make([]bool, j.chunkRows)
	for i := startProbeRow; i < j.currentProbeRow; i++ {
		selected[i] = true
	}
	for index, colIndex := range j.probeColUsed {
		dstCol := chk.Column(index)
		srcCol := j.currentChunk.Column(colIndex)
		chunk.CopySelectedRows(dstCol, srcCol, selected)
	}
	for i := startProbeRow; i < j.currentProbeRow; i++ {
		if j.isMatchedRows[i] {
			chk.AppendInt64(len(j.probeColUsed), 1)
		} else if j.isNullRows[i] {
			chk.AppendNull(len(j.probeColUsed))
		} else {
			chk.AppendInt64(len(j.probeColUsed), 0)
		}
	}
	chk.SetNumVirtualRows(chk.NumRows())
}

var maxMatchedRowNum = 4

func (j *leftOuterSemiJoinProbe) matchMultiBuildRows(joinedChk *chunk.Chunk, joinedChkRemainCap *int) {
	tagHelper := j.ctx.hashTableContext.tagHelper
	meta := j.ctx.hashTableMeta
	for j.matchedRowsHeaders[j.currentProbeRow] != 0 && *joinedChkRemainCap > 0 && j.matchedRowsForCurrentProbeRow < maxMatchedRowNum {
		candidateRow := tagHelper.toUnsafePointer(j.matchedRowsHeaders[j.currentProbeRow])
		if isKeyMatched(meta.keyMode, j.serializedKeys[j.currentProbeRow], candidateRow, meta) {
			j.appendBuildRowToCachedBuildRowsV1(j.currentProbeRow, candidateRow, joinedChk, 0, true)
			j.matchedRowsForCurrentProbeRow++
			*joinedChkRemainCap--
		} else {
			j.probeCollision++
		}
		j.matchedRowsHeaders[j.currentProbeRow] = getNextRowAddress(candidateRow, tagHelper, j.matchedRowsHashValue[j.currentProbeRow])
	}

	j.finishLookupCurrentProbeRow()
}

func (j *leftOuterSemiJoinProbe) concatenateProbeAndBuildRows(joinedChk *chunk.Chunk, sqlKiller *sqlkiller.SQLKiller) error {
	joinedChkRemainCap := joinedChk.Capacity()

	for joinedChkRemainCap > 0 && (len(j.processedProbeRowIdxSet) > 0 || j.nextProcessProbeRowIdx < j.chunkRows) {
		for probeRowIdx := range j.processedProbeRowIdxSet {
			if j.isMatchedRows[probeRowIdx] {
				delete(j.processedProbeRowIdxSet, probeRowIdx)
				continue
			}
			j.currentProbeRow = probeRowIdx
			j.matchMultiBuildRows(joinedChk, &joinedChkRemainCap)

			if j.matchedRowsHeaders[probeRowIdx] == 0 {
				delete(j.processedProbeRowIdxSet, probeRowIdx)
			}

			if joinedChkRemainCap == 0 {
				break
			}
		}

		for joinedChkRemainCap > 0 && j.nextProcessProbeRowIdx < j.chunkRows {
			j.currentProbeRow = j.nextProcessProbeRowIdx
			j.matchMultiBuildRows(joinedChk, &joinedChkRemainCap)

			if j.matchedRowsHeaders[j.currentProbeRow] != 0 {
				j.processedProbeRowIdxSet[j.currentProbeRow] = struct{}{}
			}
			j.nextProcessProbeRowIdx++
		}
	}

	err := checkSQLKiller(sqlKiller, "killedDuringProbe")
	if err != nil {
		return err
	}

	j.finishCurrentLookupLoop(joinedChk)
	return nil
}
