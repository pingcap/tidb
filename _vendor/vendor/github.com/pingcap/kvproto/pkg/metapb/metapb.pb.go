// Code generated by protoc-gen-go.
// source: metapb.proto
// DO NOT EDIT!

/*
Package metapb is a generated protocol buffer package.

It is generated from these files:
	metapb.proto

It has these top-level messages:
	Cluster
	Store
	RegionEpoch
	Region
	Peer
*/
package metapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Cluster struct {
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// max peer number for a region.
	// pd will do the auto-balance if region peer number mismatches.
	MaxPeerNumber    *uint32 `protobuf:"varint,2,opt,name=max_peer_number" json:"max_peer_number,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Cluster) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Cluster) GetMaxPeerNumber() uint32 {
	if m != nil && m.MaxPeerNumber != nil {
		return *m.MaxPeerNumber
	}
	return 0
}

type Store struct {
	Id               *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address          *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Store) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Store) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type RegionEpoch struct {
	// Conf change version, auto increment when add or remove peer
	ConfVer *uint64 `protobuf:"varint,1,opt,name=conf_ver" json:"conf_ver,omitempty"`
	// Region version, auto increment when split or merge
	Version          *uint64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RegionEpoch) Reset()                    { *m = RegionEpoch{} }
func (m *RegionEpoch) String() string            { return proto.CompactTextString(m) }
func (*RegionEpoch) ProtoMessage()               {}
func (*RegionEpoch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegionEpoch) GetConfVer() uint64 {
	if m != nil && m.ConfVer != nil {
		return *m.ConfVer
	}
	return 0
}

func (m *RegionEpoch) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type Region struct {
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Region key range [start_key, end_key).
	StartKey         []byte       `protobuf:"bytes,2,opt,name=start_key" json:"start_key,omitempty"`
	EndKey           []byte       `protobuf:"bytes,3,opt,name=end_key" json:"end_key,omitempty"`
	RegionEpoch      *RegionEpoch `protobuf:"bytes,4,opt,name=region_epoch" json:"region_epoch,omitempty"`
	Peers            []*Peer      `protobuf:"bytes,5,rep,name=peers" json:"peers,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Region) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Region) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *Region) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *Region) GetRegionEpoch() *RegionEpoch {
	if m != nil {
		return m.RegionEpoch
	}
	return nil
}

func (m *Region) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Id               *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StoreId          *uint64 `protobuf:"varint,2,opt,name=store_id" json:"store_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Peer) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Peer) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func init() {
	proto.RegisterType((*Cluster)(nil), "metapb.Cluster")
	proto.RegisterType((*Store)(nil), "metapb.Store")
	proto.RegisterType((*RegionEpoch)(nil), "metapb.RegionEpoch")
	proto.RegisterType((*Region)(nil), "metapb.Region")
	proto.RegisterType((*Peer)(nil), "metapb.Peer")
}

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xd9, 0x76, 0xb7, 0xb5, 0xd3, 0x95, 0x6a, 0x3c, 0x18, 0xf0, 0x52, 0x82, 0x07, 0xbd,
	0x2c, 0xe2, 0x5f, 0x10, 0xef, 0xa2, 0x3f, 0x20, 0xa4, 0xcd, 0xa8, 0x45, 0x37, 0x09, 0x93, 0x54,
	0xf4, 0xe6, 0x4f, 0x77, 0x92, 0x55, 0xe9, 0x9e, 0xc2, 0xbc, 0x7c, 0x6f, 0xe6, 0x3d, 0x68, 0x7b,
	0x4c, 0x26, 0x6c, 0xba, 0x40, 0x3e, 0x79, 0x31, 0x1b, 0x26, 0xd5, 0xc1, 0xfc, 0xee, 0x7d, 0x1f,
	0x13, 0x92, 0x00, 0x98, 0xec, 0xac, 0xac, 0xd6, 0xd5, 0x55, 0x2d, 0xce, 0x61, 0xd5, 0x9b, 0x4f,
	0x1d, 0x10, 0x49, 0xbb, 0x7d, 0xbf, 0x41, 0x92, 0x13, 0xfe, 0x38, 0x56, 0x97, 0xd0, 0x3c, 0x25,
	0x4f, 0x38, 0xa2, 0x57, 0x30, 0x37, 0xd6, 0x12, 0xc6, 0x58, 0xa8, 0x85, 0xba, 0x81, 0xe5, 0x23,
	0xbe, 0xec, 0xbc, 0xbb, 0x0f, 0x7e, 0xfb, 0x2a, 0x4e, 0xe0, 0x68, 0xeb, 0xdd, 0xb3, 0xfe, 0xe0,
	0x35, 0xff, 0x0e, 0x1e, 0x22, 0x13, 0xc5, 0x51, 0xab, 0xef, 0x0a, 0x66, 0x83, 0x65, 0xb4, 0xf9,
	0x14, 0x16, 0x31, 0x19, 0x4a, 0xfa, 0x0d, 0xbf, 0x0a, 0xd9, 0x66, 0x2b, 0x3a, 0x5b, 0x84, 0x69,
	0x11, 0xae, 0xa1, 0xa5, 0xe2, 0xd4, 0x98, 0xaf, 0xc9, 0x9a, 0xd5, 0xe5, 0xed, 0x59, 0xf7, 0xdb,
	0xf7, 0x30, 0xc8, 0x05, 0x34, 0xb9, 0x52, 0x94, 0xcd, 0x7a, 0xca, 0x4c, 0xfb, 0xc7, 0x3c, 0xb0,
	0xc8, 0xd5, 0xea, 0xfc, 0x8e, 0xee, 0x73, 0xf2, 0x98, 0xeb, 0x6a, 0x56, 0x4a, 0xd0, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xce, 0x9f, 0x41, 0x67, 0x47, 0x01, 0x00, 0x00,
}
