// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: analyze.proto

/*
	Package tipb is a generated protocol buffer package.

	It is generated from these files:
		analyze.proto
		executor.proto
		expression.proto
		schema.proto
		select.proto

	It has these top-level messages:
		AnalyzeReq
		AnalyzeIndexReq
		AnalyzeColumnsReq
		AnalyzeColumnsResp
		AnalyzeIndexResp
		Bucket
		Histogram
		FMSketch
		SampleCollector
		Executor
		TableScan
		IndexScan
		Selection
		Projection
		Aggregation
		TopN
		Limit
		FieldType
		Expr
		ByItem
		TableInfo
		ColumnInfo
		IndexInfo
		KeyRange
		SelectRequest
		Row
		Error
		SelectResponse
		Chunk
		RowMeta
		DAGRequest
*/
package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AnalyzeType int32

const (
	AnalyzeType_TypeIndex  AnalyzeType = 0
	AnalyzeType_TypeColumn AnalyzeType = 1
)

var AnalyzeType_name = map[int32]string{
	0: "TypeIndex",
	1: "TypeColumn",
}
var AnalyzeType_value = map[string]int32{
	"TypeIndex":  0,
	"TypeColumn": 1,
}

func (x AnalyzeType) Enum() *AnalyzeType {
	p := new(AnalyzeType)
	*p = x
	return p
}
func (x AnalyzeType) String() string {
	return proto.EnumName(AnalyzeType_name, int32(x))
}
func (x *AnalyzeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AnalyzeType_value, data, "AnalyzeType")
	if err != nil {
		return err
	}
	*x = AnalyzeType(value)
	return nil
}
func (AnalyzeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{0} }

type AnalyzeReq struct {
	Tp               AnalyzeType        `protobuf:"varint,1,opt,name=tp,enum=tipb.AnalyzeType" json:"tp"`
	StartTs          uint64             `protobuf:"varint,2,opt,name=start_ts,json=startTs" json:"start_ts"`
	Flags            uint64             `protobuf:"varint,3,opt,name=flags" json:"flags"`
	TimeZoneOffset   int64              `protobuf:"varint,4,opt,name=time_zone_offset,json=timeZoneOffset" json:"time_zone_offset"`
	IdxReq           *AnalyzeIndexReq   `protobuf:"bytes,5,opt,name=idx_req,json=idxReq" json:"idx_req,omitempty"`
	ColReq           *AnalyzeColumnsReq `protobuf:"bytes,6,opt,name=col_req,json=colReq" json:"col_req,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *AnalyzeReq) Reset()                    { *m = AnalyzeReq{} }
func (m *AnalyzeReq) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeReq) ProtoMessage()               {}
func (*AnalyzeReq) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{0} }

func (m *AnalyzeReq) GetTp() AnalyzeType {
	if m != nil {
		return m.Tp
	}
	return AnalyzeType_TypeIndex
}

func (m *AnalyzeReq) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *AnalyzeReq) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *AnalyzeReq) GetTimeZoneOffset() int64 {
	if m != nil {
		return m.TimeZoneOffset
	}
	return 0
}

func (m *AnalyzeReq) GetIdxReq() *AnalyzeIndexReq {
	if m != nil {
		return m.IdxReq
	}
	return nil
}

func (m *AnalyzeReq) GetColReq() *AnalyzeColumnsReq {
	if m != nil {
		return m.ColReq
	}
	return nil
}

type AnalyzeIndexReq struct {
	// bucket_size is the max histograms bucket size.
	BucketSize int64 `protobuf:"varint,1,opt,name=bucket_size,json=bucketSize" json:"bucket_size"`
	// num_columns is the number of columns in the index.
	NumColumns       int32  `protobuf:"varint,2,opt,name=num_columns,json=numColumns" json:"num_columns"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AnalyzeIndexReq) Reset()                    { *m = AnalyzeIndexReq{} }
func (m *AnalyzeIndexReq) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeIndexReq) ProtoMessage()               {}
func (*AnalyzeIndexReq) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{1} }

func (m *AnalyzeIndexReq) GetBucketSize() int64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *AnalyzeIndexReq) GetNumColumns() int32 {
	if m != nil {
		return m.NumColumns
	}
	return 0
}

type AnalyzeColumnsReq struct {
	// bucket_size is the max histograms bucket size, we need this because when primary key is handle,
	// the histogram will be directly built.
	BucketSize int64 `protobuf:"varint,1,opt,name=bucket_size,json=bucketSize" json:"bucket_size"`
	// sample_size is the max number of samples that will be collected.
	SampleSize int64 `protobuf:"varint,2,opt,name=sample_size,json=sampleSize" json:"sample_size"`
	// sketch_size is the max sketch size.
	SketchSize int64 `protobuf:"varint,3,opt,name=sketch_size,json=sketchSize" json:"sketch_size"`
	// columns_info is the info of all the columns that needs to be analyzed.
	ColumnsInfo      []*ColumnInfo `protobuf:"bytes,4,rep,name=columns_info,json=columnsInfo" json:"columns_info,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *AnalyzeColumnsReq) Reset()                    { *m = AnalyzeColumnsReq{} }
func (m *AnalyzeColumnsReq) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeColumnsReq) ProtoMessage()               {}
func (*AnalyzeColumnsReq) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{2} }

func (m *AnalyzeColumnsReq) GetBucketSize() int64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetSampleSize() int64 {
	if m != nil {
		return m.SampleSize
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetSketchSize() int64 {
	if m != nil {
		return m.SketchSize
	}
	return 0
}

func (m *AnalyzeColumnsReq) GetColumnsInfo() []*ColumnInfo {
	if m != nil {
		return m.ColumnsInfo
	}
	return nil
}

type AnalyzeColumnsResp struct {
	// collectors is the sample collectors for columns.
	Collectors []*SampleCollector `protobuf:"bytes,1,rep,name=collectors" json:"collectors,omitempty"`
	// pk_hist is the histogram for primary key when it is the handle.
	PkHist           *Histogram `protobuf:"bytes,2,opt,name=pk_hist,json=pkHist" json:"pk_hist,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AnalyzeColumnsResp) Reset()                    { *m = AnalyzeColumnsResp{} }
func (m *AnalyzeColumnsResp) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeColumnsResp) ProtoMessage()               {}
func (*AnalyzeColumnsResp) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{3} }

func (m *AnalyzeColumnsResp) GetCollectors() []*SampleCollector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *AnalyzeColumnsResp) GetPkHist() *Histogram {
	if m != nil {
		return m.PkHist
	}
	return nil
}

type AnalyzeIndexResp struct {
	Hist             *Histogram `protobuf:"bytes,1,opt,name=hist" json:"hist,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AnalyzeIndexResp) Reset()                    { *m = AnalyzeIndexResp{} }
func (m *AnalyzeIndexResp) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeIndexResp) ProtoMessage()               {}
func (*AnalyzeIndexResp) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{4} }

func (m *AnalyzeIndexResp) GetHist() *Histogram {
	if m != nil {
		return m.Hist
	}
	return nil
}

// Bucket is an element of histogram.
type Bucket struct {
	Count            int64  `protobuf:"varint,1,opt,name=count" json:"count"`
	LowerBound       []byte `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	UpperBound       []byte `protobuf:"bytes,3,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	Repeats          int64  `protobuf:"varint,4,opt,name=repeats" json:"repeats"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Bucket) Reset()                    { *m = Bucket{} }
func (m *Bucket) String() string            { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()               {}
func (*Bucket) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{5} }

func (m *Bucket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Bucket) GetLowerBound() []byte {
	if m != nil {
		return m.LowerBound
	}
	return nil
}

func (m *Bucket) GetUpperBound() []byte {
	if m != nil {
		return m.UpperBound
	}
	return nil
}

func (m *Bucket) GetRepeats() int64 {
	if m != nil {
		return m.Repeats
	}
	return 0
}

type Histogram struct {
	// ndv is the number of distinct values.
	Ndv int64 `protobuf:"varint,1,opt,name=ndv" json:"ndv"`
	// buckets represents all the buckets.
	Buckets          []*Bucket `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Histogram) Reset()                    { *m = Histogram{} }
func (m *Histogram) String() string            { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()               {}
func (*Histogram) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{6} }

func (m *Histogram) GetNdv() int64 {
	if m != nil {
		return m.Ndv
	}
	return 0
}

func (m *Histogram) GetBuckets() []*Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

// FMSketch is used to count distinct values for columns.
type FMSketch struct {
	Mask             uint64   `protobuf:"varint,1,opt,name=mask" json:"mask"`
	Hashset          []uint64 `protobuf:"varint,2,rep,name=hashset" json:"hashset,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FMSketch) Reset()                    { *m = FMSketch{} }
func (m *FMSketch) String() string            { return proto.CompactTextString(m) }
func (*FMSketch) ProtoMessage()               {}
func (*FMSketch) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{7} }

func (m *FMSketch) GetMask() uint64 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *FMSketch) GetHashset() []uint64 {
	if m != nil {
		return m.Hashset
	}
	return nil
}

// SampleCollector is used for collect samples and calculate the count and ndv of an column.
type SampleCollector struct {
	Samples          [][]byte  `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
	NullCount        int64     `protobuf:"varint,2,opt,name=null_count,json=nullCount" json:"null_count"`
	Count            int64     `protobuf:"varint,3,opt,name=count" json:"count"`
	Sketch           *FMSketch `protobuf:"bytes,4,opt,name=sketch" json:"sketch,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *SampleCollector) Reset()                    { *m = SampleCollector{} }
func (m *SampleCollector) String() string            { return proto.CompactTextString(m) }
func (*SampleCollector) ProtoMessage()               {}
func (*SampleCollector) Descriptor() ([]byte, []int) { return fileDescriptorAnalyze, []int{8} }

func (m *SampleCollector) GetSamples() [][]byte {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *SampleCollector) GetNullCount() int64 {
	if m != nil {
		return m.NullCount
	}
	return 0
}

func (m *SampleCollector) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SampleCollector) GetSketch() *FMSketch {
	if m != nil {
		return m.Sketch
	}
	return nil
}

func init() {
	proto.RegisterType((*AnalyzeReq)(nil), "tipb.AnalyzeReq")
	proto.RegisterType((*AnalyzeIndexReq)(nil), "tipb.AnalyzeIndexReq")
	proto.RegisterType((*AnalyzeColumnsReq)(nil), "tipb.AnalyzeColumnsReq")
	proto.RegisterType((*AnalyzeColumnsResp)(nil), "tipb.AnalyzeColumnsResp")
	proto.RegisterType((*AnalyzeIndexResp)(nil), "tipb.AnalyzeIndexResp")
	proto.RegisterType((*Bucket)(nil), "tipb.Bucket")
	proto.RegisterType((*Histogram)(nil), "tipb.Histogram")
	proto.RegisterType((*FMSketch)(nil), "tipb.FMSketch")
	proto.RegisterType((*SampleCollector)(nil), "tipb.SampleCollector")
	proto.RegisterEnum("tipb.AnalyzeType", AnalyzeType_name, AnalyzeType_value)
}
func (m *AnalyzeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Tp))
	dAtA[i] = 0x10
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.StartTs))
	dAtA[i] = 0x18
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Flags))
	dAtA[i] = 0x20
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.TimeZoneOffset))
	if m.IdxReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(m.IdxReq.Size()))
		n1, err := m.IdxReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ColReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(m.ColReq.Size()))
		n2, err := m.ColReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnalyzeIndexReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeIndexReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.BucketSize))
	dAtA[i] = 0x10
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.NumColumns))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnalyzeColumnsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeColumnsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.BucketSize))
	dAtA[i] = 0x10
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.SampleSize))
	dAtA[i] = 0x18
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.SketchSize))
	if len(m.ColumnsInfo) > 0 {
		for _, msg := range m.ColumnsInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintAnalyze(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnalyzeColumnsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeColumnsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collectors) > 0 {
		for _, msg := range m.Collectors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnalyze(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PkHist != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(m.PkHist.Size()))
		n3, err := m.PkHist.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnalyzeIndexResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeIndexResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hist != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(m.Hist.Size()))
		n4, err := m.Hist.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Bucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Count))
	if m.LowerBound != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(len(m.LowerBound)))
		i += copy(dAtA[i:], m.LowerBound)
	}
	if m.UpperBound != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(len(m.UpperBound)))
		i += copy(dAtA[i:], m.UpperBound)
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Repeats))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Histogram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Histogram) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Ndv))
	if len(m.Buckets) > 0 {
		for _, msg := range m.Buckets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnalyze(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FMSketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMSketch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Mask))
	if len(m.Hashset) > 0 {
		for _, num := range m.Hashset {
			dAtA[i] = 0x10
			i++
			i = encodeVarintAnalyze(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SampleCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleCollector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, b := range m.Samples {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnalyze(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.NullCount))
	dAtA[i] = 0x18
	i++
	i = encodeVarintAnalyze(dAtA, i, uint64(m.Count))
	if m.Sketch != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAnalyze(dAtA, i, uint64(m.Sketch.Size()))
		n5, err := m.Sketch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Analyze(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Analyze(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAnalyze(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AnalyzeReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Tp))
	n += 1 + sovAnalyze(uint64(m.StartTs))
	n += 1 + sovAnalyze(uint64(m.Flags))
	n += 1 + sovAnalyze(uint64(m.TimeZoneOffset))
	if m.IdxReq != nil {
		l = m.IdxReq.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.ColReq != nil {
		l = m.ColReq.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyzeIndexReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.BucketSize))
	n += 1 + sovAnalyze(uint64(m.NumColumns))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyzeColumnsReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.BucketSize))
	n += 1 + sovAnalyze(uint64(m.SampleSize))
	n += 1 + sovAnalyze(uint64(m.SketchSize))
	if len(m.ColumnsInfo) > 0 {
		for _, e := range m.ColumnsInfo {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyzeColumnsResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if m.PkHist != nil {
		l = m.PkHist.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyzeIndexResp) Size() (n int) {
	var l int
	_ = l
	if m.Hist != nil {
		l = m.Hist.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bucket) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Count))
	if m.LowerBound != nil {
		l = len(m.LowerBound)
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.UpperBound != nil {
		l = len(m.UpperBound)
		n += 1 + l + sovAnalyze(uint64(l))
	}
	n += 1 + sovAnalyze(uint64(m.Repeats))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Histogram) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Ndv))
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FMSketch) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAnalyze(uint64(m.Mask))
	if len(m.Hashset) > 0 {
		for _, e := range m.Hashset {
			n += 1 + sovAnalyze(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SampleCollector) Size() (n int) {
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, b := range m.Samples {
			l = len(b)
			n += 1 + l + sovAnalyze(uint64(l))
		}
	}
	n += 1 + sovAnalyze(uint64(m.NullCount))
	n += 1 + sovAnalyze(uint64(m.Count))
	if m.Sketch != nil {
		l = m.Sketch.Size()
		n += 1 + l + sovAnalyze(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAnalyze(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAnalyze(x uint64) (n int) {
	return sovAnalyze(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnalyzeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (AnalyzeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZoneOffset", wireType)
			}
			m.TimeZoneOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeZoneOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdxReq == nil {
				m.IdxReq = &AnalyzeIndexReq{}
			}
			if err := m.IdxReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColReq == nil {
				m.ColReq = &AnalyzeColumnsReq{}
			}
			if err := m.ColReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeIndexReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeIndexReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeIndexReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumColumns", wireType)
			}
			m.NumColumns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumColumns |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeColumnsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeColumnsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeColumnsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleSize", wireType)
			}
			m.SampleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SketchSize", wireType)
			}
			m.SketchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SketchSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnsInfo = append(m.ColumnsInfo, &ColumnInfo{})
			if err := m.ColumnsInfo[len(m.ColumnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeColumnsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeColumnsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeColumnsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, &SampleCollector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkHist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PkHist == nil {
				m.PkHist = &Histogram{}
			}
			if err := m.PkHist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeIndexResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeIndexResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeIndexResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hist == nil {
				m.Hist = &Histogram{}
			}
			if err := m.Hist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerBound = append(m.LowerBound[:0], dAtA[iNdEx:postIndex]...)
			if m.LowerBound == nil {
				m.LowerBound = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperBound = append(m.UpperBound[:0], dAtA[iNdEx:postIndex]...)
			if m.UpperBound == nil {
				m.UpperBound = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeats", wireType)
			}
			m.Repeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repeats |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Histogram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Histogram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Histogram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ndv", wireType)
			}
			m.Ndv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ndv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, &Bucket{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMSketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMSketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMSketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			m.Mask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mask |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Hashset = append(m.Hashset, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalyze
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalyze
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Hashset = append(m.Hashset, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashset", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SampleCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampleCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampleCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, make([]byte, postIndex-iNdEx))
			copy(m.Samples[len(m.Samples)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCount", wireType)
			}
			m.NullCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sketch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalyze
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sketch == nil {
				m.Sketch = &FMSketch{}
			}
			if err := m.Sketch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalyze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalyze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnalyze(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnalyze
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalyze
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAnalyze
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAnalyze
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAnalyze(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAnalyze = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnalyze   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("analyze.proto", fileDescriptorAnalyze) }

var fileDescriptorAnalyze = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0x26, 0x6e, 0xd2, 0x8e, 0xd3, 0x34, 0x5d, 0x51, 0xb0, 0x7a, 0x48, 0x23, 0x57, 0x94,
	0x80, 0x90, 0x41, 0x41, 0x88, 0x1b, 0x12, 0xa9, 0x84, 0xa8, 0x10, 0x02, 0xb9, 0x3d, 0x71, 0xb1,
	0x1c, 0x67, 0x93, 0x58, 0xb1, 0x77, 0x37, 0xde, 0x35, 0xb4, 0x39, 0x23, 0xbe, 0x80, 0x03, 0x3f,
	0xc3, 0xbd, 0x47, 0xbe, 0x00, 0xa1, 0xf2, 0x23, 0x68, 0x77, 0xed, 0x28, 0x6e, 0xb9, 0x70, 0xb2,
	0xf7, 0xbd, 0x37, 0xb3, 0x33, 0x6f, 0xc6, 0x86, 0x9d, 0x90, 0x86, 0xc9, 0xe5, 0x92, 0x78, 0x3c,
	0x63, 0x92, 0x61, 0x4b, 0xc6, 0x7c, 0x74, 0xd0, 0x12, 0xd1, 0x8c, 0xa4, 0xa1, 0xc1, 0x0e, 0xee,
	0x4c, 0xd9, 0x94, 0xe9, 0xd7, 0x27, 0xea, 0xcd, 0xa0, 0xee, 0x97, 0x1a, 0xc0, 0x2b, 0x13, 0xeb,
	0x93, 0x05, 0x7e, 0x00, 0x35, 0xc9, 0x1d, 0xd4, 0x43, 0xfd, 0xf6, 0x60, 0xcf, 0x53, 0x59, 0xbc,
	0x82, 0x3d, 0xbf, 0xe4, 0x64, 0x68, 0x5d, 0xfd, 0x3a, 0xdc, 0xf0, 0x6b, 0x92, 0xe3, 0x43, 0xd8,
	0x12, 0x32, 0xcc, 0x64, 0x20, 0x85, 0x53, 0xeb, 0xa1, 0xbe, 0x55, 0x70, 0x4d, 0x8d, 0x9e, 0x0b,
	0x7c, 0x00, 0x9b, 0x93, 0x24, 0x9c, 0x0a, 0xa7, 0xbe, 0xc6, 0x1a, 0x08, 0x7b, 0xd0, 0x91, 0x71,
	0x4a, 0x82, 0x25, 0xa3, 0x24, 0x60, 0x93, 0x89, 0x20, 0xd2, 0xb1, 0x7a, 0xa8, 0x5f, 0x2f, 0x64,
	0x6d, 0xc5, 0x7e, 0x64, 0x94, 0xbc, 0xd7, 0x1c, 0xf6, 0xa0, 0x19, 0x8f, 0x2f, 0x82, 0x8c, 0x2c,
	0x9c, 0xcd, 0x1e, 0xea, 0xdb, 0x83, 0xfd, 0x4a, 0x69, 0xa7, 0x74, 0x4c, 0x2e, 0x7c, 0xb2, 0xf0,
	0x1b, 0xf1, 0x58, 0x3d, 0xf1, 0x53, 0x68, 0x46, 0x2c, 0xd1, 0xfa, 0x86, 0xd6, 0xdf, 0xab, 0xe8,
	0x4f, 0x58, 0x92, 0xa7, 0x54, 0xe8, 0x88, 0x88, 0x25, 0x3e, 0x59, 0xb8, 0x01, 0xec, 0xde, 0x48,
	0x86, 0xef, 0x83, 0x3d, 0xca, 0xa3, 0x39, 0x91, 0x81, 0x88, 0x97, 0x44, 0x7b, 0x52, 0xd6, 0x07,
	0x86, 0x38, 0x8b, 0x97, 0x44, 0xc9, 0x68, 0x9e, 0x06, 0x91, 0xc9, 0xa9, 0xbd, 0xd8, 0x2c, 0x65,
	0x34, 0x4f, 0x8b, 0xbb, 0xdc, 0x1f, 0x08, 0xf6, 0x6e, 0x5d, 0xff, 0x1f, 0x77, 0x88, 0x30, 0xe5,
	0x09, 0x31, 0xb2, 0xda, 0xba, 0xcc, 0x10, 0x2b, 0xd9, 0x9c, 0xc8, 0x68, 0x66, 0x64, 0xf5, 0x8a,
	0x4c, 0x13, 0x5a, 0xf6, 0x0c, 0x5a, 0x45, 0xb5, 0x41, 0x4c, 0x27, 0xcc, 0xb1, 0x7a, 0xf5, 0xbe,
	0x3d, 0xe8, 0x18, 0x8b, 0x4c, 0x71, 0xa7, 0x74, 0xc2, 0x7c, 0xbb, 0x50, 0xa9, 0x83, 0x9b, 0x03,
	0xbe, 0x59, 0xbe, 0xe0, 0xf8, 0x39, 0x40, 0xc4, 0x92, 0x84, 0x44, 0x92, 0x65, 0xc2, 0x41, 0x3a,
	0x51, 0x31, 0x9b, 0x33, 0x5d, 0xd7, 0x49, 0xc9, 0xfa, 0x6b, 0x42, 0xdc, 0x87, 0x26, 0x9f, 0x07,
	0xb3, 0x58, 0x48, 0xdd, 0x8b, 0x3d, 0xd8, 0x35, 0x31, 0x6f, 0x62, 0x21, 0xd9, 0x34, 0x0b, 0x53,
	0xbf, 0xc1, 0xe7, 0xea, 0xe0, 0xbe, 0x80, 0x4e, 0x75, 0x2e, 0x82, 0xe3, 0x23, 0xb0, 0x74, 0x28,
	0xfa, 0x77, 0xa8, 0x26, 0xdd, 0xaf, 0x08, 0x1a, 0x43, 0xed, 0xa0, 0xda, 0xc4, 0x88, 0xe5, 0x54,
	0x56, 0xec, 0x35, 0x10, 0x3e, 0x04, 0x3b, 0x61, 0x9f, 0x49, 0x16, 0x8c, 0x58, 0x4e, 0xc7, 0xba,
	0x9a, 0x96, 0x0f, 0x1a, 0x1a, 0x2a, 0x44, 0x09, 0x72, 0xce, 0x57, 0x82, 0xba, 0x11, 0x68, 0xc8,
	0x08, 0xba, 0xd0, 0xcc, 0x08, 0x27, 0xa1, 0x14, 0x95, 0x15, 0x2e, 0x41, 0xf7, 0x2d, 0x6c, 0xaf,
	0x6a, 0xc3, 0x77, 0xa1, 0x4e, 0xc7, 0x9f, 0x2a, 0x85, 0x28, 0x00, 0x1f, 0x43, 0xd3, 0x8c, 0x5b,
	0x2d, 0x90, 0x32, 0xb1, 0x65, 0xba, 0x32, 0x1d, 0xf8, 0x25, 0xe9, 0xbe, 0x84, 0xad, 0xd7, 0xef,
	0xce, 0xf4, 0x28, 0xb1, 0x03, 0x56, 0x1a, 0x8a, 0xb9, 0x4e, 0x56, 0x7e, 0x5f, 0x1a, 0xc1, 0x0e,
	0x34, 0x67, 0xa1, 0x98, 0xa9, 0xaf, 0x4a, 0x65, 0xb3, 0xfc, 0xf2, 0xe8, 0x7e, 0x43, 0xb0, 0x7b,
	0x63, 0x30, 0x4a, 0x6d, 0x76, 0xc8, 0x0c, 0xb0, 0xe5, 0x97, 0x47, 0x7c, 0x04, 0x40, 0xf3, 0x24,
	0x09, 0x8c, 0x7b, 0xeb, 0x5b, 0xb7, 0xad, 0xf0, 0x13, 0xed, 0xe0, 0xca, 0xdd, 0xfa, 0x6d, 0x77,
	0x8f, 0xa1, 0x61, 0xf6, 0x4e, 0x5b, 0x63, 0x0f, 0xda, 0xa6, 0xab, 0xb2, 0x05, 0xbf, 0x60, 0x1f,
	0x3d, 0x06, 0x7b, 0xed, 0x2f, 0x83, 0x77, 0x60, 0x5b, 0x3d, 0xf5, 0xc4, 0x3b, 0x1b, 0xb8, 0x0d,
	0xa0, 0x8e, 0x66, 0xef, 0x3a, 0x68, 0xf8, 0xf0, 0xea, 0xba, 0x8b, 0x7e, 0x5e, 0x77, 0xd1, 0xef,
	0xeb, 0x2e, 0xfa, 0xfe, 0xa7, 0xbb, 0x01, 0xfb, 0x11, 0x4b, 0x3d, 0x1e, 0xd3, 0x69, 0x14, 0x72,
	0x4f, 0xc6, 0xe3, 0x91, 0xbe, 0xe7, 0x03, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x5a, 0xfa,
	0xde, 0x17, 0x05, 0x00, 0x00,
}
