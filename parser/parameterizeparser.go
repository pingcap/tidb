// Code generated by goyacc DO NOT EDIT.

// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/pingcap/tidb/parser/ast"
)

type yyparameterizeSymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      string
	statement string
}

type yyparameterizeXError struct {
	state, xsym int
}

const (
	yyparameterizeDefault    = 57373
	yyparameterizeEOFCode    = 57344
	yyparameterizeErrCode    = 57345
	pAnd                     = 57352
	pAndand                  = 57349
	pAndnot                  = 57363
	pAs                      = 57351
	pAssignmentEq            = 57364
	pEmpty                   = 57371
	pEq                      = 57365
	pFalseKwd                = 57357
	pFloatLit                = 57361
	pFrom                    = 57353
	pGe                      = 57366
	pIdentifier              = 57346
	pIntLit                  = 57362
	pIntType                 = 57354
	pInvalid                 = 57348
	pLe                      = 57367
	pLowerThanStringLitToken = 57372
	pNeq                     = 57368
	pNeqSynonym              = 57369
	pNull                    = 57359
	pNulleq                  = 57370
	pOr                      = 57360
	pPipes                   = 57350
	pSelectKwd               = 57355
	pStringLit               = 57347
	pTrueKwd                 = 57358
	pWhere                   = 57356

	yyparameterizeMaxDepth = 200
	yyparameterizeTabOfs   = -67
)

var (
	yyparameterizeXLAT = map[int]int{
		57344: 0,  // $end (46x)
		57346: 1,  // pIdentifier (33x)
		57352: 2,  // pAnd (27x)
		57349: 3,  // pAndand (27x)
		57360: 4,  // pOr (27x)
		42:    5,  // '*' (25x)
		60:    6,  // '<' (24x)
		62:    7,  // '>' (24x)
		57365: 8,  // pEq (24x)
		57366: 9,  // pGe (24x)
		57367: 10, // pLe (24x)
		57368: 11, // pNeq (24x)
		57369: 12, // pNeqSynonym (24x)
		57370: 13, // pNulleq (24x)
		38:    14, // '&' (21x)
		43:    15, // '+' (21x)
		45:    16, // '-' (21x)
		47:    17, // '/' (21x)
		124:   18, // '|' (21x)
		57357: 19, // pFalseKwd (21x)
		57361: 20, // pFloatLit (21x)
		57362: 21, // pIntLit (21x)
		57359: 22, // pNull (21x)
		57347: 23, // pStringLit (21x)
		57358: 24, // pTrueKwd (21x)
		57382: 25, // Identifier (19x)
		57356: 26, // pWhere (13x)
		57374: 27, // BitExpr (10x)
		57383: 28, // Literal (10x)
		57389: 29, // SimpleExpr (10x)
		57390: 30, // SimpleIdent (10x)
		57394: 31, // StringLiteral (10x)
		57353: 32, // pFrom (8x)
		44:    33, // ',' (6x)
		46:    34, // '.' (6x)
		57351: 35, // pAs (4x)
		57384: 36, // PredicateExpr (4x)
		57375: 37, // BoolPri (3x)
		57379: 38, // Expression (3x)
		57404: 39, // logAnd (3x)
		57405: 40, // logOr (3x)
		57380: 41, // Field (2x)
		57377: 42, // CompareOp (1x)
		57378: 43, // EscapedTableRef (1x)
		57381: 44, // FieldList (1x)
		57355: 45, // pSelectKwd (1x)
		57385: 46, // SelectStmt (1x)
		57386: 47, // SelectStmtBasic (1x)
		57387: 48, // SelectStmtFieldList (1x)
		57388: 49, // SelectStmtFromTable (1x)
		57391: 50, // Start (1x)
		57392: 51, // Statement (1x)
		57393: 52, // StatementList (1x)
		57395: 53, // TableAsName (1x)
		57396: 54, // TableAsNameOpt (1x)
		57397: 55, // TableFactor (1x)
		57398: 56, // TableName (1x)
		57399: 57, // TableRef (1x)
		57400: 58, // TableRefs (1x)
		57401: 59, // TableRefsClause (1x)
		57402: 60, // WhereClause (1x)
		57403: 61, // WhereClauseOptional (1x)
		57373: 62, // $default (0x)
		37:    63, // '%' (0x)
		57376: 64, // ColumnName (0x)
		57345: 65, // error (0x)
		57363: 66, // pAndnot (0x)
		57364: 67, // pAssignmentEq (0x)
		57371: 68, // pEmpty (0x)
		57354: 69, // pIntType (0x)
		57348: 70, // pInvalid (0x)
		57372: 71, // pLowerThanStringLitToken (0x)
		57350: 72, // pPipes (0x)
	}

	yyparameterizeSymNames = []string{
		"$end",
		"pIdentifier",
		"pAnd",
		"pAndand",
		"pOr",
		"'*'",
		"'<'",
		"'>'",
		"pEq",
		"pGe",
		"pLe",
		"pNeq",
		"pNeqSynonym",
		"pNulleq",
		"'&'",
		"'+'",
		"'-'",
		"'/'",
		"'|'",
		"pFalseKwd",
		"pFloatLit",
		"pIntLit",
		"pNull",
		"pStringLit",
		"pTrueKwd",
		"Identifier",
		"pWhere",
		"BitExpr",
		"Literal",
		"SimpleExpr",
		"SimpleIdent",
		"StringLiteral",
		"pFrom",
		"','",
		"'.'",
		"pAs",
		"PredicateExpr",
		"BoolPri",
		"Expression",
		"logAnd",
		"logOr",
		"Field",
		"CompareOp",
		"EscapedTableRef",
		"FieldList",
		"pSelectKwd",
		"SelectStmt",
		"SelectStmtBasic",
		"SelectStmtFieldList",
		"SelectStmtFromTable",
		"Start",
		"Statement",
		"StatementList",
		"TableAsName",
		"TableAsNameOpt",
		"TableFactor",
		"TableName",
		"TableRef",
		"TableRefs",
		"TableRefsClause",
		"WhereClause",
		"WhereClauseOptional",
		"$default",
		"'%'",
		"ColumnName",
		"error",
		"pAndnot",
		"pAssignmentEq",
		"pEmpty",
		"pIntType",
		"pInvalid",
		"pLowerThanStringLitToken",
		"pPipes",
	}

	yyparameterizeReductions = []struct{ xsym, components int }{
		{0, 1},
		{50, 1},
		{52, 1},
		{64, 1},
		{64, 3},
		{64, 5},
		{44, 1},
		{44, 3},
		{41, 1},
		{41, 3},
		{41, 5},
		{46, 1},
		{49, 4},
		{47, 2},
		{48, 1},
		{59, 1},
		{58, 1},
		{43, 1},
		{57, 1},
		{55, 2},
		{54, 0},
		{54, 1},
		{53, 1},
		{53, 2},
		{56, 1},
		{56, 3},
		{61, 0},
		{61, 1},
		{60, 2},
		{38, 3},
		{38, 3},
		{38, 1},
		{37, 3},
		{37, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{42, 1},
		{36, 1},
		{27, 3},
		{27, 3},
		{27, 3},
		{27, 3},
		{27, 3},
		{27, 3},
		{27, 1},
		{29, 1},
		{29, 1},
		{30, 1},
		{30, 3},
		{30, 5},
		{28, 1},
		{28, 1},
		{28, 1},
		{28, 1},
		{28, 1},
		{28, 1},
		{31, 1},
		{40, 1},
		{39, 1},
		{39, 1},
		{51, 1},
		{25, 1},
	}

	yyparameterizeXErrors = map[yyparameterizeXError]string{}

	yyparameterizeParseTab = [87][]uint16{
		// 0
		{45: 73, 74, 72, 49: 71, 68, 70, 69},
		{67},
		{66},
		{65},
		{56},
		// 5
		{32: 88},
		{1: 80, 5: 77, 25: 78, 41: 75, 44: 76, 48: 79},
		{2},
		{32: 61, 61},
		{32: 53, 86},
		// 10
		{32: 59, 59},
		{34: 81},
		{32: 54},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26: 1, 34: 1, 1},
		{1: 80, 5: 82, 25: 83},
		// 15
		{32: 58, 58},
		{34: 84},
		{5: 85},
		{32: 57, 57},
		{1: 80, 5: 77, 25: 78, 41: 87},
		// 20
		{32: 60, 60},
		{1: 80, 25: 95, 43: 91, 55: 93, 94, 92, 90, 89},
		{41, 26: 105, 60: 104, 103},
		{52, 26: 52},
		{51, 26: 51},
		// 25
		{50, 26: 50},
		{49, 26: 49},
		{47, 80, 25: 100, 47, 35: 101, 53: 99, 98},
		{43, 43, 26: 43, 34: 96, 43},
		{1: 80, 25: 97},
		// 30
		{42, 42, 26: 42, 35: 42},
		{48, 26: 48},
		{46, 26: 46},
		{45, 26: 45},
		{1: 80, 25: 102},
		// 35
		{44, 26: 44},
		{55},
		{40},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 109, 112, 110, 111, 119, 36: 108, 107, 106},
		{39, 2: 151, 150, 149, 39: 148, 147},
		// 40
		{36, 2: 36, 36, 36, 6: 141, 139, 144, 138, 140, 142, 143, 145, 42: 137},
		{34, 2: 34, 34, 34, 6: 34, 34, 34, 34, 34, 34, 34, 34},
		{25, 2: 25, 25, 25, 129, 25, 25, 25, 25, 25, 25, 25, 25, 126, 127, 128, 130, 125},
		{18, 2: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{17, 2: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		// 45
		{16, 2: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 2: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 34: 121},
		{12, 2: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 2: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 2: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		// 50
		{9, 2: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 2: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 2: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 2: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{1: 80, 25: 122},
		// 55
		{14, 2: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 34: 123},
		{1: 80, 25: 124},
		{13, 2: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 136, 112, 110, 111, 119},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 135, 112, 110, 111, 119},
		// 60
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 134, 112, 110, 111, 119},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 133, 112, 110, 111, 119},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 132, 112, 110, 111, 119},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 131, 112, 110, 111, 119},
		{19, 2: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		// 65
		{20, 2: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{21, 2: 21, 21, 21, 129, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 130, 21},
		{22, 2: 22, 22, 22, 129, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 130, 22},
		{23, 2: 23, 23, 23, 129, 23, 23, 23, 23, 23, 23, 23, 23, 23, 127, 128, 130, 23},
		{24, 2: 24, 24, 24, 129, 24, 24, 24, 24, 24, 24, 24, 24, 126, 127, 128, 130, 24},
		// 70
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 109, 112, 110, 111, 119, 36: 146},
		{1: 33, 19: 33, 33, 33, 33, 33, 33},
		{1: 32, 19: 32, 32, 32, 32, 32, 32},
		{1: 31, 19: 31, 31, 31, 31, 31, 31},
		{1: 30, 19: 30, 30, 30, 30, 30, 30},
		// 75
		{1: 29, 19: 29, 29, 29, 29, 29, 29},
		{1: 28, 19: 28, 28, 28, 28, 28, 28},
		{1: 27, 19: 27, 27, 27, 27, 27, 27},
		{1: 26, 19: 26, 26, 26, 26, 26, 26},
		{35, 2: 35, 35, 35, 6: 35, 35, 35, 35, 35, 35, 35, 35},
		// 80
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 109, 112, 110, 111, 119, 36: 108, 107, 153},
		{1: 80, 19: 114, 117, 118, 115, 120, 116, 113, 27: 109, 112, 110, 111, 119, 36: 108, 107, 152},
		{1: 5, 19: 5, 5, 5, 5, 5, 5},
		{1: 4, 19: 4, 4, 4, 4, 4, 4},
		{1: 3, 19: 3, 3, 3, 3, 3, 3},
		// 85
		{37, 2: 37, 37, 37, 39: 148, 147},
		{38, 2: 151, 150, 149, 39: 148, 147},
	}
)

var yyparameterizeDebug = 0

type yyparameterizeLexer interface {
	Lex(lval *yyparameterizeSymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyparameterizeLexerEx interface {
	yyparameterizeLexer
	Reduced(rule, state int, lval *yyparameterizeSymType) bool
}

func yyparameterizeSymName(c int) (s string) {
	x, ok := yyparameterizeXLAT[c]
	if ok {
		return yyparameterizeSymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yyparameterizelex1(yylex yyparameterizeLexer, lval *yyparameterizeSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyparameterizeEOFCode
	}
	if yyparameterizeDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yyparameterizeSymName(n), n, n, lval)
	}
	return n
}

func yyparameterizeParse(yylex yyparameterizeLexer, parser *parameterizeParser) int {
	const yyError = 65

	yyEx, _ := yylex.(yyparameterizeLexerEx)
	var yyn int
	parser.yylval = yyparameterizeSymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyparameterizeDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yyparameterizeSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yyparameterizelex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyparameterizeXLAT[yychar]; !ok {
			yyxchar = len(yyparameterizeSymNames) // > tab width
		}
	}
	if yyparameterizeDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyparameterizeParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyparameterizeTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyparameterizeDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyparameterizeDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyparameterizeDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yyparameterizeSymName(yychar), yystate)
			}
			msg, ok := yyparameterizeXErrors[yyparameterizeXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyparameterizeXErrors[yyparameterizeXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyparameterizeXErrors[yyparameterizeXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyparameterizeXErrors[yyparameterizeXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyparameterizeParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyparameterizeTabOfs
					if yyn > 0 { // hit
						if yyparameterizeDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyparameterizeDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyparameterizeDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyparameterizeDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyparameterizeSymName(yychar))
			}
			if yychar == yyparameterizeEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyparameterizeReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yyparameterizeSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyparameterizeParseTab[yyS[yyp].yys][x]) + yyparameterizeTabOfs
	/* reduction by production r */
	if yyparameterizeDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yyparameterizeSymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != "" {
				s := yyS[yypt-0].statement
				parser.result = append(parser.result, s)
			}
		}
	case 3:
		{
			parser.yyVAL.item = yyS[yypt-0].ident
		}
	case 4:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-0].ident)
			parser.yyVAL.item = builder.String()
		}
	case 5:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-4].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-0].ident)
			parser.yyVAL.item = builder.String()
		}
	case 7:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].item.(string))
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-0].item.(string))
			parser.yyVAL.item = builder.String()
		}
	case 8:
		{
			parser.yyVAL.item = "*"
		}
	case 9:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString("*")
			parser.yyVAL.item = builder.String()
		}
	case 10:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-4].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString("*")
			parser.yyVAL.item = builder.String()
		}
	case 11:
		{
			parser.yyVAL.statement = yyS[yypt-0].item.(string)
		}
	case 12:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-3].item.(string))
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(yyS[yypt-1].item.(string))
			builder.WriteString(yyS[yypt-0].item.(string))
			parser.yyVAL.item = builder.String()
		}
	case 13:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-1].ident)
			builder.WriteString(yyS[yypt-0].item.(string))
			parser.yyVAL.item = builder.String()
		}
	case 14:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 17:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 18:
		{
			parser.yyVAL.expr = yyS[yypt-0].item.(string)
		}
	case 19:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-1].item.(string))
			builder.WriteString(yyS[yypt-0].item.(string))
			parser.yyVAL.item = builder.String()
		}
	case 20:
		{
			parser.yyVAL.item = ""
		}
	case 21:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 22:
		{
			parser.yyVAL.item = yyS[yypt-0].ident
		}
	case 23:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-1].ident)
			builder.WriteString(yyS[yypt-0].ident)
			parser.yyVAL.item = builder.String()
		}
	case 24:
		{
			parser.yyVAL.item = yyS[yypt-0].ident
		}
	case 25:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-0].ident)
			parser.yyVAL.item = builder.String()
		}
	case 26:
		{
			parser.yyVAL.item = ""
		}
	case 28:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-1].ident)
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.item = builder.String()
		}
	case 29:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString(yyS[yypt-1].item.(string))
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 30:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString(yyS[yypt-1].item.(string))
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 32:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString(yyS[yypt-1].item.(string))
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 34:
		{
			parser.yyVAL.item = ">="
		}
	case 35:
		{
			parser.yyVAL.item = ">"
		}
	case 36:
		{
			parser.yyVAL.item = "<="
		}
	case 37:
		{
			parser.yyVAL.item = "<"
		}
	case 38:
		{
			parser.yyVAL.item = "!="
		}
	case 39:
		{
			parser.yyVAL.item = "<>"
		}
	case 40:
		{
			parser.yyVAL.item = "="
		}
	case 41:
		{
			parser.yyVAL.item = "<=>"
		}
	case 43:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString("|")
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 44:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString("&")
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 45:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString("+")
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 46:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString("-")
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 47:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString("*")
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 48:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].expr)
			builder.WriteString("/")
			builder.WriteString(yyS[yypt-0].expr)
			parser.yyVAL.expr = builder.String()
		}
	case 50:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 51:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 52:
		{
			parser.yyVAL.expr = yyS[yypt-0].ident
		}
	case 53:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-0].ident)
			parser.yyVAL.expr = builder.String()
		}
	case 54:
		{
			var builder strings.Builder
			builder.WriteString(yyS[yypt-4].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-2].ident)
			builder.WriteString(".")
			builder.WriteString(yyS[yypt-0].ident)
			parser.yyVAL.expr = builder.String()
		}
	case 55:
		{
			s := ast.NewValueExpr(false, parser.charset, parser.collation)
			parser.params = append(parser.params, s)
			parser.yyVAL.expr = "?"
		}
	case 56:
		{
			s := ast.NewValueExpr(nil, parser.charset, parser.collation)
			parser.params = append(parser.params, s)
			parser.yyVAL.expr = "?"
		}
	case 57:
		{
			s := ast.NewValueExpr(true, parser.charset, parser.collation)
			parser.params = append(parser.params, s)
			parser.yyVAL.expr = "?"
		}
	case 58:
		{
			s := ast.NewValueExpr(yyS[yypt-0].item, parser.charset, parser.collation)
			parser.params = append(parser.params, s)
			parser.yyVAL.expr = "?"
		}
	case 59:
		{
			s := ast.NewValueExpr(yyS[yypt-0].item, parser.charset, parser.collation)
			parser.params = append(parser.params, s)
			parser.yyVAL.expr = "?"
		}
	case 61:
		{
			s := ast.NewValueExpr(yyS[yypt-0].ident, parser.charset, parser.collation)
			parser.params = append(parser.params, s)
			parser.yyVAL.expr = "?"
		}
	case 62:
		{
			parser.yyVAL.item = "OR"
		}
	case 63:
		{
			parser.yyVAL.item = "&&"
		}
	case 64:
		{
			parser.yyVAL.item = "AND"
		}

	}

	if !parser.lexer.skipPositionRecording {
		yyparameterizeSetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
