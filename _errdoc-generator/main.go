
package main

import (
	"bytes"
	"flag"
	"io/ioutil"
	"os"
	"reflect"
	"fmt"
	"sort"
	"strings"

	"github.com/BurntSushi/toml"
	"github.com/pingcap/errors"
	structure "github.com/pingcap/tidb/structure"
	util_watcher "github.com/pingcap/tidb/util/watcher"
	meta "github.com/pingcap/tidb/meta"
	statistics "github.com/pingcap/tidb/statistics"
	store_mockstore_unistore_tikv_kverrors "github.com/pingcap/tidb/store/mockstore/unistore/tikv/kverrors"
	sessionctx_sessionstates "github.com/pingcap/tidb/sessionctx/sessionstates"
	table_tables "github.com/pingcap/tidb/table/tables"
	ddl_resourcegroup "github.com/pingcap/tidb/ddl/resourcegroup"
	domain_infosync "github.com/pingcap/tidb/domain/infosync"
	executor "github.com/pingcap/tidb/executor"
	expression "github.com/pingcap/tidb/expression"
	session "github.com/pingcap/tidb/session"
	util_collate "github.com/pingcap/tidb/util/collate"
	planner_core "github.com/pingcap/tidb/planner/core"
	util_logutil_consistency "github.com/pingcap/tidb/util/logutil/consistency"
	br_pkg_lightning_common "github.com/pingcap/tidb/br/pkg/lightning/common"
	ddl_label "github.com/pingcap/tidb/ddl/label"
	kv "github.com/pingcap/tidb/kv"
	sessionctx_variable "github.com/pingcap/tidb/sessionctx/variable"
	table "github.com/pingcap/tidb/table"
	util_chunk "github.com/pingcap/tidb/util/chunk"
	util_parser "github.com/pingcap/tidb/util/parser"
	util_ranger "github.com/pingcap/tidb/util/ranger"
	br_pkg_errors "github.com/pingcap/tidb/br/pkg/errors"
	br_pkg_lightning_checkpoints_checkpointspb "github.com/pingcap/tidb/br/pkg/lightning/checkpoints/checkpointspb"
	domain "github.com/pingcap/tidb/domain"
	meta_autoid "github.com/pingcap/tidb/meta/autoid"
	util_admin "github.com/pingcap/tidb/util/admin"
	util_dbterror_exeerrors "github.com/pingcap/tidb/util/dbterror/exeerrors"
	util_stringutil "github.com/pingcap/tidb/util/stringutil"
	ddl_placement "github.com/pingcap/tidb/ddl/placement"
	infoschema "github.com/pingcap/tidb/infoschema"
	lock "github.com/pingcap/tidb/lock"
	store_mockstore_unistore_tikv_dbreader "github.com/pingcap/tidb/store/mockstore/unistore/tikv/dbreader"
	types "github.com/pingcap/tidb/types"
	br_pkg_lightning_mydump "github.com/pingcap/tidb/br/pkg/lightning/mydump"
	privilege_privileges "github.com/pingcap/tidb/privilege/privileges"
	resourcemanager_pool "github.com/pingcap/tidb/resourcemanager/pool"
	store_driver_error "github.com/pingcap/tidb/store/driver/error"
	util_dbterror "github.com/pingcap/tidb/util/dbterror"
	util_dbutil "github.com/pingcap/tidb/util/dbutil"
)

func main() {
	var outpath string
	flag.StringVar(&outpath, "output", "", "Specify the error documentation output file path")
	flag.Parse()
	if outpath == "" {
		println("Usage: ./_errdoc-generator --output /path/to/errors.toml")
		os.Exit(1)
	}

	// Read-in the exists file and merge the description/workaround from exists file
	existDefinition := map[string]spec{}
	if file, err := ioutil.ReadFile(outpath); err == nil {
		err = toml.Unmarshal(file, &existDefinition)
		if err != nil {
			println(fmt.Sprintf("Invalid toml file %s when merging exists description/workaround: %v", outpath, err))
			os.Exit(1)
		}
	}
	
	var allErrors []error
	allErrors = append(allErrors, structure.ErrInvalidHashKeyFlag)
	allErrors = append(allErrors, structure.ErrInvalidListIndex)
	allErrors = append(allErrors, structure.ErrInvalidListMetaData)
	allErrors = append(allErrors, structure.ErrWriteOnSnapshot)
	allErrors = append(allErrors, util_watcher.ErrWatcherStarted)
	allErrors = append(allErrors, util_watcher.ErrWatcherClosed)
	allErrors = append(allErrors, meta.ErrDBExists)
	allErrors = append(allErrors, meta.ErrDBNotExists)
	allErrors = append(allErrors, meta.ErrPolicyExists)
	allErrors = append(allErrors, meta.ErrPolicyNotExists)
	allErrors = append(allErrors, meta.ErrResourceGroupExists)
	allErrors = append(allErrors, meta.ErrResourceGroupNotExists)
	allErrors = append(allErrors, meta.ErrTableExists)
	allErrors = append(allErrors, meta.ErrTableNotExists)
	allErrors = append(allErrors, meta.ErrDDLReorgElementNotExist)
	allErrors = append(allErrors, meta.ErrInvalidString)
	allErrors = append(allErrors, statistics.ErrQueryInterrupted)
	allErrors = append(allErrors, store_mockstore_unistore_tikv_kverrors.ErrLockNotFound)
	allErrors = append(allErrors, store_mockstore_unistore_tikv_kverrors.ErrAlreadyRollback)
	allErrors = append(allErrors, store_mockstore_unistore_tikv_kverrors.ErrReplaced)
	allErrors = append(allErrors, sessionctx_sessionstates.ErrCannotMigrateSession)
	allErrors = append(allErrors, table_tables.ErrInconsistentRowValue)
	allErrors = append(allErrors, table_tables.ErrInconsistentHandle)
	allErrors = append(allErrors, table_tables.ErrInconsistentIndexedValue)
	allErrors = append(allErrors, ddl_resourcegroup.ErrInvalidGroupSettings)
	allErrors = append(allErrors, ddl_resourcegroup.ErrTooLongResourceGroupName)
	allErrors = append(allErrors, ddl_resourcegroup.ErrInvalidResourceGroupFormat)
	allErrors = append(allErrors, ddl_resourcegroup.ErrInvalidResourceGroupDuplicatedMode)
	allErrors = append(allErrors, ddl_resourcegroup.ErrUnknownResourceGroupMode)
	allErrors = append(allErrors, ddl_resourcegroup.ErrDroppingInternalResourceGroup)
	allErrors = append(allErrors, domain_infosync.ErrHTTPServiceError)
	allErrors = append(allErrors, domain_infosync.ErrPrometheusAddrIsNotSet)
	allErrors = append(allErrors, executor.ErrSavepointNotSupportedWithBinlog)
	allErrors = append(allErrors, expression.ErrIncorrectParameterCount)
	allErrors = append(allErrors, expression.ErrDivisionByZero)
	allErrors = append(allErrors, expression.ErrRegexp)
	allErrors = append(allErrors, expression.ErrOperandColumns)
	allErrors = append(allErrors, expression.ErrCutValueGroupConcat)
	allErrors = append(allErrors, expression.ErrFunctionsNoopImpl)
	allErrors = append(allErrors, expression.ErrInvalidArgumentForLogarithm)
	allErrors = append(allErrors, expression.ErrIncorrectType)
	allErrors = append(allErrors, expression.ErrInvalidTypeForJSON)
	allErrors = append(allErrors, expression.ErrInvalidTableSample)
	allErrors = append(allErrors, expression.ErrInternal)
	allErrors = append(allErrors, expression.ErrNoDB)
	allErrors = append(allErrors, expression.ErrNotSupportedYet)
	allErrors = append(allErrors, expression.ErrInvalidJSONForFuncIndex)
	allErrors = append(allErrors, expression.ErrDataOutOfRangeFuncIndex)
	allErrors = append(allErrors, expression.ErrFuncIndexDataIsTooLong)
	allErrors = append(allErrors, session.ErrNonTransactionalJobFailure)
	allErrors = append(allErrors, session.ErrForUpdateCantRetry)
	allErrors = append(allErrors, util_collate.ErrUnsupportedCollation)
	allErrors = append(allErrors, util_collate.ErrIllegalMixCollation)
	allErrors = append(allErrors, util_collate.ErrIllegalMix2Collation)
	allErrors = append(allErrors, util_collate.ErrIllegalMix3Collation)
	allErrors = append(allErrors, planner_core.ErrUnsupportedType)
	allErrors = append(allErrors, planner_core.ErrAnalyzeMissIndex)
	allErrors = append(allErrors, planner_core.ErrAnalyzeMissColumn)
	allErrors = append(allErrors, planner_core.ErrWrongParamCount)
	allErrors = append(allErrors, planner_core.ErrSchemaChanged)
	allErrors = append(allErrors, planner_core.ErrTablenameNotAllowedHere)
	allErrors = append(allErrors, planner_core.ErrNotSupportedYet)
	allErrors = append(allErrors, planner_core.ErrWrongUsage)
	allErrors = append(allErrors, planner_core.ErrUnknown)
	allErrors = append(allErrors, planner_core.ErrUnknownTable)
	allErrors = append(allErrors, planner_core.ErrNoSuchTable)
	allErrors = append(allErrors, planner_core.ErrViewRecursive)
	allErrors = append(allErrors, planner_core.ErrWrongArguments)
	allErrors = append(allErrors, planner_core.ErrWrongNumberOfColumnsInSelect)
	allErrors = append(allErrors, planner_core.ErrBadGeneratedColumn)
	allErrors = append(allErrors, planner_core.ErrFieldNotInGroupBy)
	allErrors = append(allErrors, planner_core.ErrAggregateOrderNonAggQuery)
	allErrors = append(allErrors, planner_core.ErrFieldInOrderNotSelect)
	allErrors = append(allErrors, planner_core.ErrAggregateInOrderNotSelect)
	allErrors = append(allErrors, planner_core.ErrBadTable)
	allErrors = append(allErrors, planner_core.ErrKeyDoesNotExist)
	allErrors = append(allErrors, planner_core.ErrOperandColumns)
	allErrors = append(allErrors, planner_core.ErrInvalidGroupFuncUse)
	allErrors = append(allErrors, planner_core.ErrIllegalReference)
	allErrors = append(allErrors, planner_core.ErrNoDB)
	allErrors = append(allErrors, planner_core.ErrUnknownExplainFormat)
	allErrors = append(allErrors, planner_core.ErrWrongGroupField)
	allErrors = append(allErrors, planner_core.ErrDupFieldName)
	allErrors = append(allErrors, planner_core.ErrNonUpdatableTable)
	allErrors = append(allErrors, planner_core.ErrMultiUpdateKeyConflict)
	allErrors = append(allErrors, planner_core.ErrInternal)
	allErrors = append(allErrors, planner_core.ErrNonUniqTable)
	allErrors = append(allErrors, planner_core.ErrWindowInvalidWindowFuncUse)
	allErrors = append(allErrors, planner_core.ErrWindowInvalidWindowFuncAliasUse)
	allErrors = append(allErrors, planner_core.ErrWindowNoSuchWindow)
	allErrors = append(allErrors, planner_core.ErrWindowCircularityInWindowGraph)
	allErrors = append(allErrors, planner_core.ErrWindowNoChildPartitioning)
	allErrors = append(allErrors, planner_core.ErrWindowNoInherentFrame)
	allErrors = append(allErrors, planner_core.ErrWindowNoRedefineOrderBy)
	allErrors = append(allErrors, planner_core.ErrWindowDuplicateName)
	allErrors = append(allErrors, planner_core.ErrPartitionClauseOnNonpartitioned)
	allErrors = append(allErrors, planner_core.ErrWindowFrameStartIllegal)
	allErrors = append(allErrors, planner_core.ErrWindowFrameEndIllegal)
	allErrors = append(allErrors, planner_core.ErrWindowFrameIllegal)
	allErrors = append(allErrors, planner_core.ErrWindowRangeFrameOrderType)
	allErrors = append(allErrors, planner_core.ErrWindowRangeFrameTemporalType)
	allErrors = append(allErrors, planner_core.ErrWindowRangeFrameNumericType)
	allErrors = append(allErrors, planner_core.ErrWindowRangeBoundNotConstant)
	allErrors = append(allErrors, planner_core.ErrWindowRowsIntervalUse)
	allErrors = append(allErrors, planner_core.ErrWindowFunctionIgnoresFrame)
	allErrors = append(allErrors, planner_core.ErrUnsupportedOnGeneratedColumn)
	allErrors = append(allErrors, planner_core.ErrPrivilegeCheckFail)
	allErrors = append(allErrors, planner_core.ErrInvalidWildCard)
	allErrors = append(allErrors, planner_core.ErrMixOfGroupFuncAndFields)
	allErrors = append(allErrors, planner_core.ErrDBaccessDenied)
	allErrors = append(allErrors, planner_core.ErrTableaccessDenied)
	allErrors = append(allErrors, planner_core.ErrSpecificAccessDenied)
	allErrors = append(allErrors, planner_core.ErrViewNoExplain)
	allErrors = append(allErrors, planner_core.ErrWrongValueCountOnRow)
	allErrors = append(allErrors, planner_core.ErrViewInvalid)
	allErrors = append(allErrors, planner_core.ErrNoSuchThread)
	allErrors = append(allErrors, planner_core.ErrUnknownColumn)
	allErrors = append(allErrors, planner_core.ErrCartesianProductUnsupported)
	allErrors = append(allErrors, planner_core.ErrStmtNotFound)
	allErrors = append(allErrors, planner_core.ErrAmbiguous)
	allErrors = append(allErrors, planner_core.ErrUnresolvedHintName)
	allErrors = append(allErrors, planner_core.ErrNotHintUpdatable)
	allErrors = append(allErrors, planner_core.ErrWarnConflictingHint)
	allErrors = append(allErrors, planner_core.ErrCTERecursiveRequiresUnion)
	allErrors = append(allErrors, planner_core.ErrCTERecursiveRequiresNonRecursiveFirst)
	allErrors = append(allErrors, planner_core.ErrCTERecursiveForbidsAggregation)
	allErrors = append(allErrors, planner_core.ErrCTERecursiveForbiddenJoinOrder)
	allErrors = append(allErrors, planner_core.ErrInvalidRequiresSingleReference)
	allErrors = append(allErrors, planner_core.ErrSQLInReadOnlyMode)
	allErrors = append(allErrors, planner_core.ErrAccessDenied)
	allErrors = append(allErrors, planner_core.ErrBadNull)
	allErrors = append(allErrors, planner_core.ErrNotSupportedWithSem)
	allErrors = append(allErrors, planner_core.ErrAsOf)
	allErrors = append(allErrors, planner_core.ErrOptOnTemporaryTable)
	allErrors = append(allErrors, planner_core.ErrOptOnCacheTable)
	allErrors = append(allErrors, planner_core.ErrDropTableOnTemporaryTable)
	allErrors = append(allErrors, planner_core.ErrPartitionNoTemporary)
	allErrors = append(allErrors, planner_core.ErrViewSelectTemporaryTable)
	allErrors = append(allErrors, planner_core.ErrSubqueryMoreThan1Row)
	allErrors = append(allErrors, planner_core.ErrKeyPart0)
	allErrors = append(allErrors, planner_core.ErrGettingNoopVariable)
	allErrors = append(allErrors, planner_core.ErrPrepareMulti)
	allErrors = append(allErrors, planner_core.ErrUnsupportedPs)
	allErrors = append(allErrors, planner_core.ErrPsManyParam)
	allErrors = append(allErrors, planner_core.ErrPrepareDDL)
	allErrors = append(allErrors, planner_core.ErrRowIsReferenced2)
	allErrors = append(allErrors, planner_core.ErrNoReferencedRow2)
	allErrors = append(allErrors, util_logutil_consistency.ErrAdminCheckInconsistent)
	allErrors = append(allErrors, util_logutil_consistency.ErrLookupInconsistent)
	allErrors = append(allErrors, util_logutil_consistency.ErrAdminCheckInconsistentWithColInfo)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrUnknown)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidArgument)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrVersionMismatch)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrReadConfigFile)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrParseConfigFile)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidConfig)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidTLSConfig)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidSortedKVDir)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrStorageUnknown)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidPermission)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidStorageConfig)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrEmptySourceDir)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrTableRoute)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidSchemaFile)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrTooManySourceFiles)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrSystemRequirementNotMet)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckpointSchemaConflict)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrPreCheckFailed)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckClusterRegion)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckLocalResource)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckTableEmpty)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckCSVHeader)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckDataSource)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckCDCPiTR)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrOpenCheckpoint)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrReadCheckpoint)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrUpdateCheckpoint)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrUnknownCheckpointDriver)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidCheckpoint)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckpointNotFound)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInitCheckpoint)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCleanCheckpoint)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrMetaMgrUnknown)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrDBConnect)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInitErrManager)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInitMetaManager)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrUpdatePD)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCreatePDClient)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrPauseGC)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckKVVersion)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCreateKVClient)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckMultiIngest)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVEpochNotMatch)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVNotLeader)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVServerIsBusy)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVRegionNotFound)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVReadIndexNotReady)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVIngestFailed)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrKVRaftProposalDropped)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrUnknownBackend)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCheckLocalFile)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrOpenDuplicateDB)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrSchemaNotExists)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidSchemaStmt)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrCreateSchema)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrUnknownColumns)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrChecksumMismatch)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrRestoreTable)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrEncodeKV)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrAllocTableRowIDs)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrInvalidMetaStatus)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrTableIsChecksuming)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrResolveDuplicateRows)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrFoundDuplicateKeys)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrAddIndexFailed)
	allErrors = append(allErrors, br_pkg_lightning_common.ErrDropIndexFailed)
	allErrors = append(allErrors, ddl_label.ErrInvalidAttributesFormat)
	allErrors = append(allErrors, kv.ErrNotExist)
	allErrors = append(allErrors, kv.ErrTxnRetryable)
	allErrors = append(allErrors, kv.ErrCannotSetNilValue)
	allErrors = append(allErrors, kv.ErrInvalidTxn)
	allErrors = append(allErrors, kv.ErrTxnTooLarge)
	allErrors = append(allErrors, kv.ErrEntryTooLarge)
	allErrors = append(allErrors, kv.ErrKeyExists)
	allErrors = append(allErrors, kv.ErrNotImplemented)
	allErrors = append(allErrors, kv.ErrWriteConflict)
	allErrors = append(allErrors, kv.ErrWriteConflictInTiDB)
	allErrors = append(allErrors, kv.ErrLockExpire)
	allErrors = append(allErrors, kv.ErrAssertionFailed)
	allErrors = append(allErrors, sessionctx_variable.ErrSnapshotTooOld)
	allErrors = append(allErrors, sessionctx_variable.ErrUnsupportedValueForVar)
	allErrors = append(allErrors, sessionctx_variable.ErrUnknownSystemVar)
	allErrors = append(allErrors, sessionctx_variable.ErrIncorrectScope)
	allErrors = append(allErrors, sessionctx_variable.ErrUnknownTimeZone)
	allErrors = append(allErrors, sessionctx_variable.ErrReadOnly)
	allErrors = append(allErrors, sessionctx_variable.ErrWrongValueForVar)
	allErrors = append(allErrors, sessionctx_variable.ErrWrongTypeForVar)
	allErrors = append(allErrors, sessionctx_variable.ErrTruncatedWrongValue)
	allErrors = append(allErrors, sessionctx_variable.ErrMaxPreparedStmtCountReached)
	allErrors = append(allErrors, sessionctx_variable.ErrUnsupportedIsolationLevel)
	allErrors = append(allErrors, sessionctx_variable.ErrStmtNotFound)
	allErrors = append(allErrors, sessionctx_variable.ErrNotValidPassword)
	allErrors = append(allErrors, sessionctx_variable.ErrFunctionsNoopImpl)
	allErrors = append(allErrors, sessionctx_variable.ErrVariableNoLongerSupported)
	allErrors = append(allErrors, table.ErrColumnCantNull)
	allErrors = append(allErrors, table.ErrUnknownColumn)
	allErrors = append(allErrors, table.ErrWarnNullToNotnull)
	allErrors = append(allErrors, table.ErrNoDefaultValue)
	allErrors = append(allErrors, table.ErrIndexOutBound)
	allErrors = append(allErrors, table.ErrUnsupportedOp)
	allErrors = append(allErrors, table.ErrRowNotFound)
	allErrors = append(allErrors, table.ErrTableStateCantNone)
	allErrors = append(allErrors, table.ErrColumnStateCantNone)
	allErrors = append(allErrors, table.ErrColumnStateNonPublic)
	allErrors = append(allErrors, table.ErrIndexStateCantNone)
	allErrors = append(allErrors, table.ErrInvalidRecordKey)
	allErrors = append(allErrors, table.ErrTruncatedWrongValueForField)
	allErrors = append(allErrors, table.ErrUnknownPartition)
	allErrors = append(allErrors, table.ErrNoPartitionForGivenValue)
	allErrors = append(allErrors, table.ErrLockOrActiveTransaction)
	allErrors = append(allErrors, table.ErrSequenceHasRunOut)
	allErrors = append(allErrors, table.ErrRowDoesNotMatchGivenPartitionSet)
	allErrors = append(allErrors, table.ErrTempTableFull)
	allErrors = append(allErrors, table.ErrOptOnCacheTable)
	allErrors = append(allErrors, util_chunk.ErrCannotAddBecauseSorted)
	allErrors = append(allErrors, util_parser.ErrPatternNotMatch)
	allErrors = append(allErrors, util_ranger.ErrUnsupportedType)
	allErrors = append(allErrors, br_pkg_errors.ErrUnknown)
	allErrors = append(allErrors, br_pkg_errors.ErrInvalidArgument)
	allErrors = append(allErrors, br_pkg_errors.ErrUndefinedRestoreDbOrTable)
	allErrors = append(allErrors, br_pkg_errors.ErrVersionMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrFailedToConnect)
	allErrors = append(allErrors, br_pkg_errors.ErrInvalidMetaFile)
	allErrors = append(allErrors, br_pkg_errors.ErrEnvNotSpecified)
	allErrors = append(allErrors, br_pkg_errors.ErrUnsupportedOperation)
	allErrors = append(allErrors, br_pkg_errors.ErrPDUpdateFailed)
	allErrors = append(allErrors, br_pkg_errors.ErrPDLeaderNotFound)
	allErrors = append(allErrors, br_pkg_errors.ErrPDInvalidResponse)
	allErrors = append(allErrors, br_pkg_errors.ErrPDBatchScanRegion)
	allErrors = append(allErrors, br_pkg_errors.ErrBackupChecksumMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrBackupInvalidRange)
	allErrors = append(allErrors, br_pkg_errors.ErrBackupNoLeader)
	allErrors = append(allErrors, br_pkg_errors.ErrBackupGCSafepointExceeded)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreModeMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreRangeMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreChecksumMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreTableIDMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreRejectStore)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreNoPeer)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreSplitFailed)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreInvalidRewrite)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreInvalidBackup)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreInvalidRange)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreWriteAndIngest)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreSchemaNotExists)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreNotFreshCluster)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreIncompatibleSys)
	allErrors = append(allErrors, br_pkg_errors.ErrUnsupportedSystemTable)
	allErrors = append(allErrors, br_pkg_errors.ErrDatabasesAlreadyExisted)
	allErrors = append(allErrors, br_pkg_errors.ErrStreamLogTaskExist)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreRTsConstrain)
	allErrors = append(allErrors, br_pkg_errors.ErrPiTRInvalidCDCLogFormat)
	allErrors = append(allErrors, br_pkg_errors.ErrPiTRTaskNotFound)
	allErrors = append(allErrors, br_pkg_errors.ErrPiTRInvalidTaskInfo)
	allErrors = append(allErrors, br_pkg_errors.ErrPiTRMalformedMetadata)
	allErrors = append(allErrors, br_pkg_errors.ErrStorageUnknown)
	allErrors = append(allErrors, br_pkg_errors.ErrStorageInvalidConfig)
	allErrors = append(allErrors, br_pkg_errors.ErrStorageInvalidPermission)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreTotalKVMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreInvalidPeer)
	allErrors = append(allErrors, br_pkg_errors.ErrRestoreRegionWithoutPeer)
	allErrors = append(allErrors, br_pkg_errors.ErrKVStorage)
	allErrors = append(allErrors, br_pkg_errors.ErrKVUnknown)
	allErrors = append(allErrors, br_pkg_errors.ErrKVClusterIDMismatch)
	allErrors = append(allErrors, br_pkg_errors.ErrKVNotLeader)
	allErrors = append(allErrors, br_pkg_errors.ErrKVNotTiKV)
	allErrors = append(allErrors, br_pkg_errors.ErrKVEpochNotMatch)
	allErrors = append(allErrors, br_pkg_errors.ErrKVKeyNotInRegion)
	allErrors = append(allErrors, br_pkg_errors.ErrKVRewriteRuleNotFound)
	allErrors = append(allErrors, br_pkg_errors.ErrKVRangeIsEmpty)
	allErrors = append(allErrors, br_pkg_errors.ErrKVDownloadFailed)
	allErrors = append(allErrors, br_pkg_errors.ErrKVIngestFailed)
	allErrors = append(allErrors, br_pkg_lightning_checkpoints_checkpointspb.ErrInvalidLengthFileCheckpoints)
	allErrors = append(allErrors, br_pkg_lightning_checkpoints_checkpointspb.ErrIntOverflowFileCheckpoints)
	allErrors = append(allErrors, br_pkg_lightning_checkpoints_checkpointspb.ErrUnexpectedEndOfGroupFileCheckpoints)
	allErrors = append(allErrors, domain.ErrInfoSchemaExpired)
	allErrors = append(allErrors, domain.ErrInfoSchemaChanged)
	allErrors = append(allErrors, meta_autoid.ErrAutoincReadFailed)
	allErrors = append(allErrors, meta_autoid.ErrWrongAutoKey)
	allErrors = append(allErrors, meta_autoid.ErrInvalidAllocatorType)
	allErrors = append(allErrors, meta_autoid.ErrAutoRandReadFailed)
	allErrors = append(allErrors, util_admin.ErrAdminCheckTable)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrGetStartTS)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrUnknownPlan)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPrepareMulti)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPrepareDDL)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrResultIsEmpty)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBuildExecutor)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBatchInsertFail)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrUnsupportedPs)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrSubqueryMoreThan1Row)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrIllegalGrantForTable)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrColumnsNotMatched)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrCantCreateUserWithGrant)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPasswordNoMatch)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrCannotUser)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrGrantRole)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPasswordFormat)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrCantChangeTxCharacteristics)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPsManyParam)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrAdminCheckTable)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrDBaccessDenied)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrTableaccessDenied)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBadDB)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrWrongObject)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrWrongUsage)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrRoleNotGranted)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrDeadlock)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrQueryInterrupted)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrDynamicPrivilegeNotRegistered)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrIllegalPrivilegeLevel)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrInvalidSplitRegionRanges)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrViewInvalid)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrInstanceScope)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrSettingNoopVariable)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLazyUniquenessCheckFailure)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBRIEBackupFailed)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBRIERestoreFailed)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBRIEImportFailed)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrBRIEExportFailed)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrCTEMaxRecursionDepth)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrNotSupportedWithSem)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPluginIsNotLoaded)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrSetPasswordAuthPlugin)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrFuncNotEnabled)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrSavepointNotExists)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrForeignKeyCascadeDepthExceeded)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrPasswordExpireAnonymousUser)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrMustChangePassword)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrWrongStringLength)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrUnsupportedFlashbackTmpTable)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrTruncateWrongInsertValue)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrExistsInHistoryPassword)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrWarnTooFewRecords)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrWarnTooManyRecords)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataFromServerDisk)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadParquetFromLocal)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataEmptyPath)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataUnsupportedFormat)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataInvalidURI)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataCantAccess)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataCantRead)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataWrongFormatConfig)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrUnknownOption)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrInvalidOptionVal)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrDuplicateOption)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataUnsupportedOption)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataJobNotFound)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataInvalidOperation)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataLocalUnsupportedOption)
	allErrors = append(allErrors, util_dbterror_exeerrors.ErrLoadDataPreCheckFailed)
	allErrors = append(allErrors, util_stringutil.ErrSyntax)
	allErrors = append(allErrors, ddl_placement.ErrInvalidConstraintFormat)
	allErrors = append(allErrors, ddl_placement.ErrUnsupportedConstraint)
	allErrors = append(allErrors, ddl_placement.ErrConflictingConstraints)
	allErrors = append(allErrors, ddl_placement.ErrInvalidConstraintsMapcnt)
	allErrors = append(allErrors, ddl_placement.ErrInvalidConstraintsFormat)
	allErrors = append(allErrors, ddl_placement.ErrInvalidSurvivalPreferenceFormat)
	allErrors = append(allErrors, ddl_placement.ErrInvalidConstraintsRelicas)
	allErrors = append(allErrors, ddl_placement.ErrInvalidBundleID)
	allErrors = append(allErrors, ddl_placement.ErrInvalidBundleIDFormat)
	allErrors = append(allErrors, ddl_placement.ErrLeaderReplicasMustOne)
	allErrors = append(allErrors, ddl_placement.ErrMissingRoleField)
	allErrors = append(allErrors, ddl_placement.ErrNoRulesToDrop)
	allErrors = append(allErrors, ddl_placement.ErrInvalidPlacementOptions)
	allErrors = append(allErrors, ddl_placement.ErrInvalidConstraintsMappingWrongSeparator)
	allErrors = append(allErrors, ddl_placement.ErrInvalidConstraintsMappingNoColonFound)
	allErrors = append(allErrors, infoschema.ErrDatabaseExists)
	allErrors = append(allErrors, infoschema.ErrDatabaseDropExists)
	allErrors = append(allErrors, infoschema.ErrAccessDenied)
	allErrors = append(allErrors, infoschema.ErrDatabaseNotExists)
	allErrors = append(allErrors, infoschema.ErrPlacementPolicyExists)
	allErrors = append(allErrors, infoschema.ErrPlacementPolicyNotExists)
	allErrors = append(allErrors, infoschema.ErrResourceGroupExists)
	allErrors = append(allErrors, infoschema.ErrResourceGroupNotExists)
	allErrors = append(allErrors, infoschema.ErrReservedSyntax)
	allErrors = append(allErrors, infoschema.ErrTableExists)
	allErrors = append(allErrors, infoschema.ErrTableDropExists)
	allErrors = append(allErrors, infoschema.ErrSequenceDropExists)
	allErrors = append(allErrors, infoschema.ErrColumnNotExists)
	allErrors = append(allErrors, infoschema.ErrColumnExists)
	allErrors = append(allErrors, infoschema.ErrKeyNameDuplicate)
	allErrors = append(allErrors, infoschema.ErrNonuniqTable)
	allErrors = append(allErrors, infoschema.ErrMultiplePriKey)
	allErrors = append(allErrors, infoschema.ErrTooManyKeyParts)
	allErrors = append(allErrors, infoschema.ErrForeignKeyNotExists)
	allErrors = append(allErrors, infoschema.ErrTableNotLockedForWrite)
	allErrors = append(allErrors, infoschema.ErrTableNotLocked)
	allErrors = append(allErrors, infoschema.ErrTableNotExists)
	allErrors = append(allErrors, infoschema.ErrKeyNotExists)
	allErrors = append(allErrors, infoschema.ErrCannotAddForeign)
	allErrors = append(allErrors, infoschema.ErrForeignKeyOnPartitioned)
	allErrors = append(allErrors, infoschema.ErrForeignKeyNotMatch)
	allErrors = append(allErrors, infoschema.ErrIndexExists)
	allErrors = append(allErrors, infoschema.ErrUserDropExists)
	allErrors = append(allErrors, infoschema.ErrUserAlreadyExists)
	allErrors = append(allErrors, infoschema.ErrTableLocked)
	allErrors = append(allErrors, infoschema.ErrWrongObject)
	allErrors = append(allErrors, infoschema.ErrAdminCheckTable)
	allErrors = append(allErrors, infoschema.ErrEmptyDatabase)
	allErrors = append(allErrors, infoschema.ErrForbidSchemaChange)
	allErrors = append(allErrors, infoschema.ErrTableWithoutPrimaryKey)
	allErrors = append(allErrors, infoschema.ErrForeignKeyCannotUseVirtualColumn)
	allErrors = append(allErrors, infoschema.ErrForeignKeyCannotOpenParent)
	allErrors = append(allErrors, infoschema.ErrForeignKeyNoColumnInParent)
	allErrors = append(allErrors, infoschema.ErrForeignKeyNoIndexInParent)
	allErrors = append(allErrors, infoschema.ErrForeignKeyColumnNotNull)
	allErrors = append(allErrors, infoschema.ErrResourceGroupSupportDisabled)
	allErrors = append(allErrors, lock.ErrLockedTableDropped)
	allErrors = append(allErrors, store_mockstore_unistore_tikv_dbreader.ErrScanBreak)
	allErrors = append(allErrors, types.ErrDataTooLong)
	allErrors = append(allErrors, types.ErrIllegalValueForType)
	allErrors = append(allErrors, types.ErrTruncated)
	allErrors = append(allErrors, types.ErrOverflow)
	allErrors = append(allErrors, types.ErrDivByZero)
	allErrors = append(allErrors, types.ErrTooBigDisplayWidth)
	allErrors = append(allErrors, types.ErrTooBigFieldLength)
	allErrors = append(allErrors, types.ErrTooBigSet)
	allErrors = append(allErrors, types.ErrTooBigScale)
	allErrors = append(allErrors, types.ErrTooBigPrecision)
	allErrors = append(allErrors, types.ErrBadNumber)
	allErrors = append(allErrors, types.ErrInvalidFieldSize)
	allErrors = append(allErrors, types.ErrMBiggerThanD)
	allErrors = append(allErrors, types.ErrWarnDataOutOfRange)
	allErrors = append(allErrors, types.ErrDuplicatedValueInType)
	allErrors = append(allErrors, types.ErrDatetimeFunctionOverflow)
	allErrors = append(allErrors, types.ErrCastAsSignedOverflow)
	allErrors = append(allErrors, types.ErrCastNegIntAsUnsigned)
	allErrors = append(allErrors, types.ErrInvalidYearFormat)
	allErrors = append(allErrors, types.ErrInvalidYear)
	allErrors = append(allErrors, types.ErrTruncatedWrongVal)
	allErrors = append(allErrors, types.ErrInvalidWeekModeFormat)
	allErrors = append(allErrors, types.ErrWrongFieldSpec)
	allErrors = append(allErrors, types.ErrSyntax)
	allErrors = append(allErrors, types.ErrWrongValue)
	allErrors = append(allErrors, types.ErrWrongValue2)
	allErrors = append(allErrors, types.ErrWrongValueForType)
	allErrors = append(allErrors, types.ErrPartitionStatsMissing)
	allErrors = append(allErrors, types.ErrPartitionColumnStatsMissing)
	allErrors = append(allErrors, types.ErrIncorrectDatetimeValue)
	allErrors = append(allErrors, types.ErrInvalidJSONText)
	allErrors = append(allErrors, types.ErrInvalidJSONPath)
	allErrors = append(allErrors, types.ErrInvalidJSONCharset)
	allErrors = append(allErrors, types.ErrInvalidJSONData)
	allErrors = append(allErrors, types.ErrInvalidJSONPathMultipleSelection)
	allErrors = append(allErrors, types.ErrInvalidJSONContainsPathType)
	allErrors = append(allErrors, types.ErrJSONDocumentNULLKey)
	allErrors = append(allErrors, types.ErrJSONDocumentTooDeep)
	allErrors = append(allErrors, types.ErrJSONObjectKeyTooLong)
	allErrors = append(allErrors, types.ErrInvalidJSONPathArrayCell)
	allErrors = append(allErrors, types.ErrUnsupportedSecondArgumentType)
	allErrors = append(allErrors, br_pkg_lightning_mydump.ErrInsertStatementNotFound)
	allErrors = append(allErrors, privilege_privileges.ErrNonexistingGrant)
	allErrors = append(allErrors, privilege_privileges.ErrAccessDenied)
	allErrors = append(allErrors, privilege_privileges.ErrMustChangePasswordLogin)
	allErrors = append(allErrors, resourcemanager_pool.ErrPoolClosed)
	allErrors = append(allErrors, resourcemanager_pool.ErrPoolOverload)
	allErrors = append(allErrors, resourcemanager_pool.ErrPoolParamsInvalid)
	allErrors = append(allErrors, store_driver_error.ErrTokenLimit)
	allErrors = append(allErrors, store_driver_error.ErrTiKVServerTimeout)
	allErrors = append(allErrors, store_driver_error.ErrTiFlashServerTimeout)
	allErrors = append(allErrors, store_driver_error.ErrGCTooEarly)
	allErrors = append(allErrors, store_driver_error.ErrTiKVStaleCommand)
	allErrors = append(allErrors, store_driver_error.ErrQueryInterrupted)
	allErrors = append(allErrors, store_driver_error.ErrTiKVMaxTimestampNotSynced)
	allErrors = append(allErrors, store_driver_error.ErrLockAcquireFailAndNoWaitSet)
	allErrors = append(allErrors, store_driver_error.ErrResolveLockTimeout)
	allErrors = append(allErrors, store_driver_error.ErrLockWaitTimeout)
	allErrors = append(allErrors, store_driver_error.ErrTiKVServerBusy)
	allErrors = append(allErrors, store_driver_error.ErrTiFlashServerBusy)
	allErrors = append(allErrors, store_driver_error.ErrPDServerTimeout)
	allErrors = append(allErrors, store_driver_error.ErrRegionUnavailable)
	allErrors = append(allErrors, store_driver_error.ErrResourceGroupNotExists)
	allErrors = append(allErrors, store_driver_error.ErrResourceGroupConfigUnavailable)
	allErrors = append(allErrors, store_driver_error.ErrResourceGroupThrottled)
	allErrors = append(allErrors, store_driver_error.ErrUnknown)
	allErrors = append(allErrors, util_dbterror.ErrInvalidWorker)
	allErrors = append(allErrors, util_dbterror.ErrNotOwner)
	allErrors = append(allErrors, util_dbterror.ErrCantDecodeRecord)
	allErrors = append(allErrors, util_dbterror.ErrInvalidDDLJob)
	allErrors = append(allErrors, util_dbterror.ErrCancelledDDLJob)
	allErrors = append(allErrors, util_dbterror.ErrRunMultiSchemaChanges)
	allErrors = append(allErrors, util_dbterror.ErrOperateSameColumn)
	allErrors = append(allErrors, util_dbterror.ErrOperateSameIndex)
	allErrors = append(allErrors, util_dbterror.ErrWaitReorgTimeout)
	allErrors = append(allErrors, util_dbterror.ErrInvalidStoreVer)
	allErrors = append(allErrors, util_dbterror.ErrRepairTableFail)
	allErrors = append(allErrors, util_dbterror.ErrCantDropColWithIndex)
	allErrors = append(allErrors, util_dbterror.ErrCantDropColWithAutoInc)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAddColumn)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedModifyColumn)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedModifyCharset)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedModifyCollation)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedPKHandle)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedCharset)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedShardRowIDBits)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAlterTableWithValidation)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAlterTableWithoutValidation)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAlterTableOption)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAlterCacheForSysTable)
	allErrors = append(allErrors, util_dbterror.ErrBlobKeyWithoutLength)
	allErrors = append(allErrors, util_dbterror.ErrKeyPart0)
	allErrors = append(allErrors, util_dbterror.ErrIncorrectPrefixKey)
	allErrors = append(allErrors, util_dbterror.ErrTooLongKey)
	allErrors = append(allErrors, util_dbterror.ErrKeyColumnDoesNotExits)
	allErrors = append(allErrors, util_dbterror.ErrInvalidDDLJobVersion)
	allErrors = append(allErrors, util_dbterror.ErrInvalidUseOfNull)
	allErrors = append(allErrors, util_dbterror.ErrTooManyFields)
	allErrors = append(allErrors, util_dbterror.ErrTooManyKeys)
	allErrors = append(allErrors, util_dbterror.ErrInvalidSplitRegionRanges)
	allErrors = append(allErrors, util_dbterror.ErrReorgPanic)
	allErrors = append(allErrors, util_dbterror.ErrFkColumnCannotDrop)
	allErrors = append(allErrors, util_dbterror.ErrFkColumnCannotDropChild)
	allErrors = append(allErrors, util_dbterror.ErrFKIncompatibleColumns)
	allErrors = append(allErrors, util_dbterror.ErrOnlyOnRangeListPartition)
	allErrors = append(allErrors, util_dbterror.ErrWrongKeyColumn)
	allErrors = append(allErrors, util_dbterror.ErrWrongKeyColumnFunctionalIndex)
	allErrors = append(allErrors, util_dbterror.ErrWrongFKOptionForGeneratedColumn)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedOnGeneratedColumn)
	allErrors = append(allErrors, util_dbterror.ErrGeneratedColumnNonPrior)
	allErrors = append(allErrors, util_dbterror.ErrDependentByGeneratedColumn)
	allErrors = append(allErrors, util_dbterror.ErrJSONUsedAsKey)
	allErrors = append(allErrors, util_dbterror.ErrBlobCantHaveDefault)
	allErrors = append(allErrors, util_dbterror.ErrTooLongIndexComment)
	allErrors = append(allErrors, util_dbterror.ErrTooLongTableComment)
	allErrors = append(allErrors, util_dbterror.ErrTooLongFieldComment)
	allErrors = append(allErrors, util_dbterror.ErrTooLongTablePartitionComment)
	allErrors = append(allErrors, util_dbterror.ErrInvalidDefaultValue)
	allErrors = append(allErrors, util_dbterror.ErrDefValGeneratedNamedFunctionIsNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrGeneratedColumnRefAutoInc)
	allErrors = append(allErrors, util_dbterror.ErrExpressionIndexCanNotRefer)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAddPartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedCoalescePartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedReorganizePartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedCheckPartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedOptimizePartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedRebuildPartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedRemovePartition)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedRepairPartition)
	allErrors = append(allErrors, util_dbterror.ErrGeneratedColumnFunctionIsNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrGeneratedColumnRowValueIsNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedPartitionByRangeColumns)
	allErrors = append(allErrors, util_dbterror.ErrFunctionalIndexFunctionIsNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrFunctionalIndexRowValueIsNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedCreatePartition)
	allErrors = append(allErrors, util_dbterror.ErrTablePartitionDisabled)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedIndexType)
	allErrors = append(allErrors, util_dbterror.ErrWindowInvalidWindowFuncUse)
	allErrors = append(allErrors, util_dbterror.ErrDupKeyName)
	allErrors = append(allErrors, util_dbterror.ErrFkDupName)
	allErrors = append(allErrors, util_dbterror.ErrInvalidDDLState)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedModifyPrimaryKey)
	allErrors = append(allErrors, util_dbterror.ErrPKIndexCantBeInvisible)
	allErrors = append(allErrors, util_dbterror.ErrColumnBadNull)
	allErrors = append(allErrors, util_dbterror.ErrBadField)
	allErrors = append(allErrors, util_dbterror.ErrCantRemoveAllFields)
	allErrors = append(allErrors, util_dbterror.ErrCantDropFieldOrKey)
	allErrors = append(allErrors, util_dbterror.ErrInvalidOnUpdate)
	allErrors = append(allErrors, util_dbterror.ErrTooLongIdent)
	allErrors = append(allErrors, util_dbterror.ErrWrongDBName)
	allErrors = append(allErrors, util_dbterror.ErrWrongTableName)
	allErrors = append(allErrors, util_dbterror.ErrWrongColumnName)
	allErrors = append(allErrors, util_dbterror.ErrWrongPartitionName)
	allErrors = append(allErrors, util_dbterror.ErrWrongUsage)
	allErrors = append(allErrors, util_dbterror.ErrInvalidGroupFuncUse)
	allErrors = append(allErrors, util_dbterror.ErrTableMustHaveColumns)
	allErrors = append(allErrors, util_dbterror.ErrWrongNameForIndex)
	allErrors = append(allErrors, util_dbterror.ErrUnknownCharacterSet)
	allErrors = append(allErrors, util_dbterror.ErrUnknownCollation)
	allErrors = append(allErrors, util_dbterror.ErrCollationCharsetMismatch)
	allErrors = append(allErrors, util_dbterror.ErrConflictingDeclarations)
	allErrors = append(allErrors, util_dbterror.ErrPrimaryCantHaveNull)
	allErrors = append(allErrors, util_dbterror.ErrErrorOnRename)
	allErrors = append(allErrors, util_dbterror.ErrViewSelectClause)
	allErrors = append(allErrors, util_dbterror.ErrNotAllowedTypeInPartition)
	allErrors = append(allErrors, util_dbterror.ErrPartitionMgmtOnNonpartitioned)
	allErrors = append(allErrors, util_dbterror.ErrDropPartitionNonExistent)
	allErrors = append(allErrors, util_dbterror.ErrSameNamePartition)
	allErrors = append(allErrors, util_dbterror.ErrSameNamePartitionField)
	allErrors = append(allErrors, util_dbterror.ErrRangeNotIncreasing)
	allErrors = append(allErrors, util_dbterror.ErrPartitionMaxvalue)
	allErrors = append(allErrors, util_dbterror.ErrDropLastPartition)
	allErrors = append(allErrors, util_dbterror.ErrTooManyPartitions)
	allErrors = append(allErrors, util_dbterror.ErrPartitionConstDomain)
	allErrors = append(allErrors, util_dbterror.ErrPartitionFunctionIsNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrPartitionFuncNotAllowed)
	allErrors = append(allErrors, util_dbterror.ErrUniqueKeyNeedAllFieldsInPf)
	allErrors = append(allErrors, util_dbterror.ErrWrongExprInPartitionFunc)
	allErrors = append(allErrors, util_dbterror.ErrWarnDataTruncated)
	allErrors = append(allErrors, util_dbterror.ErrCoalesceOnlyOnHashPartition)
	allErrors = append(allErrors, util_dbterror.ErrViewWrongList)
	allErrors = append(allErrors, util_dbterror.ErrAlterOperationNotSupported)
	allErrors = append(allErrors, util_dbterror.ErrWrongObject)
	allErrors = append(allErrors, util_dbterror.ErrTableCantHandleFt)
	allErrors = append(allErrors, util_dbterror.ErrFieldNotFoundPart)
	allErrors = append(allErrors, util_dbterror.ErrWrongTypeColumnValue)
	allErrors = append(allErrors, util_dbterror.ErrValuesIsNotIntType)
	allErrors = append(allErrors, util_dbterror.ErrFunctionalIndexPrimaryKey)
	allErrors = append(allErrors, util_dbterror.ErrFunctionalIndexOnField)
	allErrors = append(allErrors, util_dbterror.ErrInvalidAutoRandom)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedConstraintCheck)
	allErrors = append(allErrors, util_dbterror.ErrDerivedMustHaveAlias)
	allErrors = append(allErrors, util_dbterror.ErrSequenceRunOut)
	allErrors = append(allErrors, util_dbterror.ErrSequenceInvalidData)
	allErrors = append(allErrors, util_dbterror.ErrSequenceAccessFail)
	allErrors = append(allErrors, util_dbterror.ErrNotSequence)
	allErrors = append(allErrors, util_dbterror.ErrUnknownSequence)
	allErrors = append(allErrors, util_dbterror.ErrSequenceUnsupportedTableOption)
	allErrors = append(allErrors, util_dbterror.ErrColumnTypeUnsupportedNextValue)
	allErrors = append(allErrors, util_dbterror.ErrAddColumnWithSequenceAsDefault)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedExpressionIndex)
	allErrors = append(allErrors, util_dbterror.ErrPartitionExchangePartTable)
	allErrors = append(allErrors, util_dbterror.ErrPartitionExchangeTempTable)
	allErrors = append(allErrors, util_dbterror.ErrTablesDifferentMetadata)
	allErrors = append(allErrors, util_dbterror.ErrRowDoesNotMatchPartition)
	allErrors = append(allErrors, util_dbterror.ErrPartitionExchangeForeignKey)
	allErrors = append(allErrors, util_dbterror.ErrCheckNoSuchTable)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedPartitionType)
	allErrors = append(allErrors, util_dbterror.ErrPartitionExchangeDifferentOption)
	allErrors = append(allErrors, util_dbterror.ErrTableOptionUnionUnsupported)
	allErrors = append(allErrors, util_dbterror.ErrTableOptionInsertMethodUnsupported)
	allErrors = append(allErrors, util_dbterror.ErrInvalidPlacementPolicyCheck)
	allErrors = append(allErrors, util_dbterror.ErrPlacementPolicyWithDirectOption)
	allErrors = append(allErrors, util_dbterror.ErrPlacementPolicyInUse)
	allErrors = append(allErrors, util_dbterror.ErrMultipleDefConstInListPart)
	allErrors = append(allErrors, util_dbterror.ErrTruncatedWrongValue)
	allErrors = append(allErrors, util_dbterror.ErrWarnDataOutOfRange)
	allErrors = append(allErrors, util_dbterror.ErrTooLongValueForType)
	allErrors = append(allErrors, util_dbterror.ErrUnknownEngine)
	allErrors = append(allErrors, util_dbterror.ErrExchangePartitionDisabled)
	allErrors = append(allErrors, util_dbterror.ErrPartitionNoTemporary)
	allErrors = append(allErrors, util_dbterror.ErrOptOnTemporaryTable)
	allErrors = append(allErrors, util_dbterror.ErrOptOnCacheTable)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedOnCommitPreserve)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedClusteredSecondaryKey)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedLocalTempTableDDL)
	allErrors = append(allErrors, util_dbterror.ErrInvalidAttributesSpec)
	allErrors = append(allErrors, util_dbterror.ErrFunctionalIndexOnJSONOrGeometryFunction)
	allErrors = append(allErrors, util_dbterror.ErrDependentByFunctionalIndex)
	allErrors = append(allErrors, util_dbterror.ErrFunctionalIndexOnBlob)
	allErrors = append(allErrors, util_dbterror.ErrDependentByPartitionFunctional)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedAlterTableSpec)
	allErrors = append(allErrors, util_dbterror.ErrGeneralUnsupportedDDL)
	allErrors = append(allErrors, util_dbterror.ErrAutoConvert)
	allErrors = append(allErrors, util_dbterror.ErrWrongStringLength)
	allErrors = append(allErrors, util_dbterror.ErrBinlogUnsafeSystemFunction)
	allErrors = append(allErrors, util_dbterror.ErrDDLJobNotFound)
	allErrors = append(allErrors, util_dbterror.ErrCancelFinishedDDLJob)
	allErrors = append(allErrors, util_dbterror.ErrCannotCancelDDLJob)
	allErrors = append(allErrors, util_dbterror.ErrDDLSetting)
	allErrors = append(allErrors, util_dbterror.ErrIngestFailed)
	allErrors = append(allErrors, util_dbterror.ErrColumnInChange)
	allErrors = append(allErrors, util_dbterror.ErrAlterTiFlashModeForTableWithoutTiFlashReplica)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedTiFlashOperationForSysOrMemTable)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedTiFlashOperationForUnsupportedCharsetTable)
	allErrors = append(allErrors, util_dbterror.ErrDropIndexNeededInForeignKey)
	allErrors = append(allErrors, util_dbterror.ErrForeignKeyCannotDropParent)
	allErrors = append(allErrors, util_dbterror.ErrTruncateIllegalForeignKey)
	allErrors = append(allErrors, util_dbterror.ErrForeignKeyColumnCannotChange)
	allErrors = append(allErrors, util_dbterror.ErrForeignKeyColumnCannotChangeChild)
	allErrors = append(allErrors, util_dbterror.ErrNoReferencedRow2)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedColumnInTTLConfig)
	allErrors = append(allErrors, util_dbterror.ErrTTLColumnCannotDrop)
	allErrors = append(allErrors, util_dbterror.ErrSetTTLOptionForNonTTLTable)
	allErrors = append(allErrors, util_dbterror.ErrTempTableNotAllowedWithTTL)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedTTLReferencedByFK)
	allErrors = append(allErrors, util_dbterror.ErrUnsupportedPrimaryKeyTypeWithTTL)
	allErrors = append(allErrors, util_dbterror.ErrNotSupportedYet)
	allErrors = append(allErrors, util_dbutil.ErrVersionNotFound)
	allErrors = append(allErrors, util_dbutil.ErrNoData)

	var dedup = map[string]spec{}
	for _, e := range allErrors {
		terr, ok := e.(*errors.Error)
		if !ok {
			println("Non-normalized error:", e.Error())
		} else {
			val := reflect.ValueOf(terr).Elem()
			codeText := val.FieldByName("codeText")
			message := val.FieldByName("message")
			if previous, found := dedup[codeText.String()]; found {
				println("Duplicated error code:", codeText.String())
				if message.String() < previous.Error {
					continue
				}
			}
			s := spec{
				Code:  codeText.String(),
				Error: message.String(),
			}
			if exist, found := existDefinition[s.Code]; found {
				s.Description = strings.TrimSpace(exist.Description)
				s.Workaround = strings.TrimSpace(exist.Workaround)
			}
			dedup[codeText.String()] = s
		}
	}

	var sorted []spec
	for _, item := range dedup {
		sorted = append(sorted, item)
	}
	sort.Slice(sorted, func(i, j int) bool {
		// TiDB exits duplicated code
		if sorted[i].Code == sorted[j].Code {
			return sorted[i].Error < sorted[j].Error
		}
		return sorted[i].Code < sorted[j].Code
	})

	// We don't use toml library to serialize it due to cannot reserve the order for map[string]spec
	buffer := bytes.NewBufferString("# AUTOGENERATED BY github.com/pingcap/errors/errdoc-gen\n" +
		"# YOU CAN CHANGE THE 'description'/'workaround' FIELDS IF THEM ARE IMPROPER.\n\n")
	for _, item := range sorted {
		buffer.WriteString(fmt.Sprintf("[\"%s\"]\nerror = '''\n%s\n'''\n", item.Code, item.Error))
		if item.Description != "" {
			buffer.WriteString(fmt.Sprintf("description = '''\n%s\n'''\n", item.Description))
		}
		if item.Workaround != "" {
			buffer.WriteString(fmt.Sprintf("workaround = '''\n%s\n'''\n", item.Workaround))
		}
		buffer.WriteString("\n")
	}
	if err := ioutil.WriteFile(outpath, buffer.Bytes(), 0644); err != nil {
		panic(err)
	}
}
type spec struct {
Code        string
Error       string `toml:"error"`
Description string `toml:"description"`
Workaround  string `toml:"workaround"`
}