// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: expression.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExprType int32

const (
	// Values are encoded bytes.
	ExprType_Null    ExprType = 0
	ExprType_Int64   ExprType = 1
	ExprType_Uint64  ExprType = 2
	ExprType_Float32 ExprType = 3
	ExprType_Float64 ExprType = 4
	ExprType_String  ExprType = 5
	ExprType_Bytes   ExprType = 6
	// Mysql specific types.
	ExprType_MysqlBit      ExprType = 101
	ExprType_MysqlDecimal  ExprType = 102
	ExprType_MysqlDuration ExprType = 103
	ExprType_MysqlEnum     ExprType = 104
	ExprType_MysqlHex      ExprType = 105
	ExprType_MysqlSet      ExprType = 106
	ExprType_MysqlTime     ExprType = 107
	ExprType_MysqlJson     ExprType = 108
	// Encoded value list.
	ExprType_ValueList ExprType = 151
	// Column reference. value is int64 column ID.
	ExprType_ColumnRef ExprType = 201
	// Aggregate functions.
	ExprType_Count       ExprType = 3001
	ExprType_Sum         ExprType = 3002
	ExprType_Avg         ExprType = 3003
	ExprType_Min         ExprType = 3004
	ExprType_Max         ExprType = 3005
	ExprType_First       ExprType = 3006
	ExprType_GroupConcat ExprType = 3007
	ExprType_Agg_BitAnd  ExprType = 3008
	ExprType_Agg_BitOr   ExprType = 3009
	ExprType_Agg_BitXor  ExprType = 3010
	ExprType_Std         ExprType = 3011
	ExprType_Stddev      ExprType = 3012
	ExprType_StddevPop   ExprType = 3013
	ExprType_StddevSamp  ExprType = 3014
	ExprType_VarPop      ExprType = 3015
	ExprType_VarSamp     ExprType = 3016
	ExprType_Variance    ExprType = 3017
	// Scalar Function
	ExprType_ScalarFunc ExprType = 10000
)

var ExprType_name = map[int32]string{
	0:     "Null",
	1:     "Int64",
	2:     "Uint64",
	3:     "Float32",
	4:     "Float64",
	5:     "String",
	6:     "Bytes",
	101:   "MysqlBit",
	102:   "MysqlDecimal",
	103:   "MysqlDuration",
	104:   "MysqlEnum",
	105:   "MysqlHex",
	106:   "MysqlSet",
	107:   "MysqlTime",
	108:   "MysqlJson",
	151:   "ValueList",
	201:   "ColumnRef",
	3001:  "Count",
	3002:  "Sum",
	3003:  "Avg",
	3004:  "Min",
	3005:  "Max",
	3006:  "First",
	3007:  "GroupConcat",
	3008:  "Agg_BitAnd",
	3009:  "Agg_BitOr",
	3010:  "Agg_BitXor",
	3011:  "Std",
	3012:  "Stddev",
	3013:  "StddevPop",
	3014:  "StddevSamp",
	3015:  "VarPop",
	3016:  "VarSamp",
	3017:  "Variance",
	10000: "ScalarFunc",
}
var ExprType_value = map[string]int32{
	"Null":          0,
	"Int64":         1,
	"Uint64":        2,
	"Float32":       3,
	"Float64":       4,
	"String":        5,
	"Bytes":         6,
	"MysqlBit":      101,
	"MysqlDecimal":  102,
	"MysqlDuration": 103,
	"MysqlEnum":     104,
	"MysqlHex":      105,
	"MysqlSet":      106,
	"MysqlTime":     107,
	"MysqlJson":     108,
	"ValueList":     151,
	"ColumnRef":     201,
	"Count":         3001,
	"Sum":           3002,
	"Avg":           3003,
	"Min":           3004,
	"Max":           3005,
	"First":         3006,
	"GroupConcat":   3007,
	"Agg_BitAnd":    3008,
	"Agg_BitOr":     3009,
	"Agg_BitXor":    3010,
	"Std":           3011,
	"Stddev":        3012,
	"StddevPop":     3013,
	"StddevSamp":    3014,
	"VarPop":        3015,
	"VarSamp":       3016,
	"Variance":      3017,
	"ScalarFunc":    10000,
}

func (x ExprType) Enum() *ExprType {
	p := new(ExprType)
	*p = x
	return p
}
func (x ExprType) String() string {
	return proto.EnumName(ExprType_name, int32(x))
}
func (x *ExprType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExprType_value, data, "ExprType")
	if err != nil {
		return err
	}
	*x = ExprType(value)
	return nil
}
func (ExprType) EnumDescriptor() ([]byte, []int) { return fileDescriptorExpression, []int{0} }

type ScalarFuncSig int32

const (
	// Casting
	ScalarFuncSig_CastIntAsInt           ScalarFuncSig = 0
	ScalarFuncSig_CastIntAsReal          ScalarFuncSig = 1
	ScalarFuncSig_CastIntAsString        ScalarFuncSig = 2
	ScalarFuncSig_CastIntAsDecimal       ScalarFuncSig = 3
	ScalarFuncSig_CastIntAsTime          ScalarFuncSig = 4
	ScalarFuncSig_CastIntAsDuration      ScalarFuncSig = 5
	ScalarFuncSig_CastIntAsJson          ScalarFuncSig = 6
	ScalarFuncSig_CastRealAsInt          ScalarFuncSig = 10
	ScalarFuncSig_CastRealAsReal         ScalarFuncSig = 11
	ScalarFuncSig_CastRealAsString       ScalarFuncSig = 12
	ScalarFuncSig_CastRealAsDecimal      ScalarFuncSig = 13
	ScalarFuncSig_CastRealAsTime         ScalarFuncSig = 14
	ScalarFuncSig_CastRealAsDuration     ScalarFuncSig = 15
	ScalarFuncSig_CastRealAsJson         ScalarFuncSig = 16
	ScalarFuncSig_CastDecimalAsInt       ScalarFuncSig = 20
	ScalarFuncSig_CastDecimalAsReal      ScalarFuncSig = 21
	ScalarFuncSig_CastDecimalAsString    ScalarFuncSig = 22
	ScalarFuncSig_CastDecimalAsDecimal   ScalarFuncSig = 23
	ScalarFuncSig_CastDecimalAsTime      ScalarFuncSig = 24
	ScalarFuncSig_CastDecimalAsDuration  ScalarFuncSig = 25
	ScalarFuncSig_CastDecimalAsJson      ScalarFuncSig = 26
	ScalarFuncSig_CastStringAsInt        ScalarFuncSig = 30
	ScalarFuncSig_CastStringAsReal       ScalarFuncSig = 31
	ScalarFuncSig_CastStringAsString     ScalarFuncSig = 32
	ScalarFuncSig_CastStringAsDecimal    ScalarFuncSig = 33
	ScalarFuncSig_CastStringAsTime       ScalarFuncSig = 34
	ScalarFuncSig_CastStringAsDuration   ScalarFuncSig = 35
	ScalarFuncSig_CastStringAsJson       ScalarFuncSig = 36
	ScalarFuncSig_CastTimeAsInt          ScalarFuncSig = 40
	ScalarFuncSig_CastTimeAsReal         ScalarFuncSig = 41
	ScalarFuncSig_CastTimeAsString       ScalarFuncSig = 42
	ScalarFuncSig_CastTimeAsDecimal      ScalarFuncSig = 43
	ScalarFuncSig_CastTimeAsTime         ScalarFuncSig = 44
	ScalarFuncSig_CastTimeAsDuration     ScalarFuncSig = 45
	ScalarFuncSig_CastTimeAsJson         ScalarFuncSig = 46
	ScalarFuncSig_CastDurationAsInt      ScalarFuncSig = 50
	ScalarFuncSig_CastDurationAsReal     ScalarFuncSig = 51
	ScalarFuncSig_CastDurationAsString   ScalarFuncSig = 52
	ScalarFuncSig_CastDurationAsDecimal  ScalarFuncSig = 53
	ScalarFuncSig_CastDurationAsTime     ScalarFuncSig = 54
	ScalarFuncSig_CastDurationAsDuration ScalarFuncSig = 55
	ScalarFuncSig_CastDurationAsJson     ScalarFuncSig = 56
	ScalarFuncSig_CastJsonAsInt          ScalarFuncSig = 60
	ScalarFuncSig_CastJsonAsReal         ScalarFuncSig = 61
	ScalarFuncSig_CastJsonAsString       ScalarFuncSig = 62
	ScalarFuncSig_CastJsonAsDecimal      ScalarFuncSig = 63
	ScalarFuncSig_CastJsonAsTime         ScalarFuncSig = 64
	ScalarFuncSig_CastJsonAsDuration     ScalarFuncSig = 65
	ScalarFuncSig_CastJsonAsJson         ScalarFuncSig = 66
	// compare
	ScalarFuncSig_CoalesceInt      ScalarFuncSig = 4201
	ScalarFuncSig_CoalesceReal     ScalarFuncSig = 4202
	ScalarFuncSig_CoalesceDecimal  ScalarFuncSig = 4203
	ScalarFuncSig_CoalesceString   ScalarFuncSig = 4204
	ScalarFuncSig_CoalesceTime     ScalarFuncSig = 4205
	ScalarFuncSig_CoalesceDuration ScalarFuncSig = 4206
	// unimplemented in tidb
	ScalarFuncSig_CoalesceJson    ScalarFuncSig = 4207
	ScalarFuncSig_LTInt           ScalarFuncSig = 100
	ScalarFuncSig_LTReal          ScalarFuncSig = 101
	ScalarFuncSig_LTDecimal       ScalarFuncSig = 102
	ScalarFuncSig_LTString        ScalarFuncSig = 103
	ScalarFuncSig_LTTime          ScalarFuncSig = 104
	ScalarFuncSig_LTDuration      ScalarFuncSig = 105
	ScalarFuncSig_LTJson          ScalarFuncSig = 106
	ScalarFuncSig_LEInt           ScalarFuncSig = 110
	ScalarFuncSig_LEReal          ScalarFuncSig = 111
	ScalarFuncSig_LEDecimal       ScalarFuncSig = 112
	ScalarFuncSig_LEString        ScalarFuncSig = 113
	ScalarFuncSig_LETime          ScalarFuncSig = 114
	ScalarFuncSig_LEDuration      ScalarFuncSig = 115
	ScalarFuncSig_LEJson          ScalarFuncSig = 116
	ScalarFuncSig_GTInt           ScalarFuncSig = 120
	ScalarFuncSig_GTReal          ScalarFuncSig = 121
	ScalarFuncSig_GTDecimal       ScalarFuncSig = 122
	ScalarFuncSig_GTString        ScalarFuncSig = 123
	ScalarFuncSig_GTTime          ScalarFuncSig = 124
	ScalarFuncSig_GTDuration      ScalarFuncSig = 125
	ScalarFuncSig_GTJson          ScalarFuncSig = 126
	ScalarFuncSig_GreatestInt     ScalarFuncSig = 4215
	ScalarFuncSig_GreatestReal    ScalarFuncSig = 4216
	ScalarFuncSig_GreatestDecimal ScalarFuncSig = 4217
	ScalarFuncSig_GreatestString  ScalarFuncSig = 4218
	ScalarFuncSig_GreatestTime    ScalarFuncSig = 4219
	ScalarFuncSig_LeastInt        ScalarFuncSig = 4220
	ScalarFuncSig_LeastReal       ScalarFuncSig = 4221
	ScalarFuncSig_LeastDecimal    ScalarFuncSig = 4222
	ScalarFuncSig_LeastString     ScalarFuncSig = 4223
	ScalarFuncSig_LeastTime       ScalarFuncSig = 4224
	ScalarFuncSig_IntervalInt     ScalarFuncSig = 4225
	ScalarFuncSig_IntervalReal    ScalarFuncSig = 4226
	ScalarFuncSig_GEInt           ScalarFuncSig = 130
	ScalarFuncSig_GEReal          ScalarFuncSig = 131
	ScalarFuncSig_GEDecimal       ScalarFuncSig = 132
	ScalarFuncSig_GEString        ScalarFuncSig = 133
	ScalarFuncSig_GETime          ScalarFuncSig = 134
	ScalarFuncSig_GEDuration      ScalarFuncSig = 135
	ScalarFuncSig_GEJson          ScalarFuncSig = 136
	ScalarFuncSig_EQInt           ScalarFuncSig = 140
	ScalarFuncSig_EQReal          ScalarFuncSig = 141
	ScalarFuncSig_EQDecimal       ScalarFuncSig = 142
	ScalarFuncSig_EQString        ScalarFuncSig = 143
	ScalarFuncSig_EQTime          ScalarFuncSig = 144
	ScalarFuncSig_EQDuration      ScalarFuncSig = 145
	ScalarFuncSig_EQJson          ScalarFuncSig = 146
	ScalarFuncSig_NEInt           ScalarFuncSig = 150
	ScalarFuncSig_NEReal          ScalarFuncSig = 151
	ScalarFuncSig_NEDecimal       ScalarFuncSig = 152
	ScalarFuncSig_NEString        ScalarFuncSig = 153
	ScalarFuncSig_NETime          ScalarFuncSig = 154
	ScalarFuncSig_NEDuration      ScalarFuncSig = 155
	ScalarFuncSig_NEJson          ScalarFuncSig = 156
	ScalarFuncSig_NullEQInt       ScalarFuncSig = 160
	ScalarFuncSig_NullEQReal      ScalarFuncSig = 161
	ScalarFuncSig_NullEQDecimal   ScalarFuncSig = 162
	ScalarFuncSig_NullEQString    ScalarFuncSig = 163
	ScalarFuncSig_NullEQTime      ScalarFuncSig = 164
	ScalarFuncSig_NullEQDuration  ScalarFuncSig = 165
	ScalarFuncSig_NullEQJson      ScalarFuncSig = 166
	// arithmetic
	ScalarFuncSig_PlusReal            ScalarFuncSig = 200
	ScalarFuncSig_PlusDecimal         ScalarFuncSig = 201
	ScalarFuncSig_PlusInt             ScalarFuncSig = 203
	ScalarFuncSig_MinusReal           ScalarFuncSig = 204
	ScalarFuncSig_MinusDecimal        ScalarFuncSig = 205
	ScalarFuncSig_MinusInt            ScalarFuncSig = 207
	ScalarFuncSig_MultiplyReal        ScalarFuncSig = 208
	ScalarFuncSig_MultiplyDecimal     ScalarFuncSig = 209
	ScalarFuncSig_MultiplyInt         ScalarFuncSig = 210
	ScalarFuncSig_DivideReal          ScalarFuncSig = 211
	ScalarFuncSig_DivideDecimal       ScalarFuncSig = 212
	ScalarFuncSig_IntDivideInt        ScalarFuncSig = 213
	ScalarFuncSig_IntDivideDecimal    ScalarFuncSig = 214
	ScalarFuncSig_ModReal             ScalarFuncSig = 215
	ScalarFuncSig_ModDecimal          ScalarFuncSig = 216
	ScalarFuncSig_ModInt              ScalarFuncSig = 217
	ScalarFuncSig_MultiplyIntUnsigned ScalarFuncSig = 218
	// math
	ScalarFuncSig_AbsInt            ScalarFuncSig = 2101
	ScalarFuncSig_AbsUInt           ScalarFuncSig = 2102
	ScalarFuncSig_AbsReal           ScalarFuncSig = 2103
	ScalarFuncSig_AbsDecimal        ScalarFuncSig = 2104
	ScalarFuncSig_CeilIntToDec      ScalarFuncSig = 2105
	ScalarFuncSig_CeilIntToInt      ScalarFuncSig = 2106
	ScalarFuncSig_CeilDecToInt      ScalarFuncSig = 2107
	ScalarFuncSig_CeilDecToDec      ScalarFuncSig = 2108
	ScalarFuncSig_CeilReal          ScalarFuncSig = 2109
	ScalarFuncSig_FloorIntToDec     ScalarFuncSig = 2110
	ScalarFuncSig_FloorIntToInt     ScalarFuncSig = 2111
	ScalarFuncSig_FloorDecToInt     ScalarFuncSig = 2112
	ScalarFuncSig_FloorDecToDec     ScalarFuncSig = 2113
	ScalarFuncSig_FloorReal         ScalarFuncSig = 2114
	ScalarFuncSig_RoundReal         ScalarFuncSig = 2121
	ScalarFuncSig_RoundInt          ScalarFuncSig = 2122
	ScalarFuncSig_RoundDec          ScalarFuncSig = 2123
	ScalarFuncSig_RoundWithFracReal ScalarFuncSig = 2124
	ScalarFuncSig_RoundWithFracInt  ScalarFuncSig = 2125
	ScalarFuncSig_RoundWithFracDec  ScalarFuncSig = 2126
	ScalarFuncSig_Log1Arg           ScalarFuncSig = 2131
	ScalarFuncSig_Log2Args          ScalarFuncSig = 2132
	ScalarFuncSig_Log2              ScalarFuncSig = 2133
	ScalarFuncSig_Log10             ScalarFuncSig = 2134
	ScalarFuncSig_Rand              ScalarFuncSig = 2135
	ScalarFuncSig_RandWithSeed      ScalarFuncSig = 2136
	ScalarFuncSig_Pow               ScalarFuncSig = 2137
	ScalarFuncSig_Conv              ScalarFuncSig = 2138
	ScalarFuncSig_CRC32             ScalarFuncSig = 2139
	ScalarFuncSig_Sign              ScalarFuncSig = 2140
	ScalarFuncSig_Sqrt              ScalarFuncSig = 2141
	ScalarFuncSig_Acos              ScalarFuncSig = 2142
	ScalarFuncSig_Asin              ScalarFuncSig = 2143
	ScalarFuncSig_Atan1Arg          ScalarFuncSig = 2144
	ScalarFuncSig_Atan2Args         ScalarFuncSig = 2145
	ScalarFuncSig_Cos               ScalarFuncSig = 2146
	ScalarFuncSig_Cot               ScalarFuncSig = 2147
	ScalarFuncSig_Degrees           ScalarFuncSig = 2148
	ScalarFuncSig_Exp               ScalarFuncSig = 2149
	ScalarFuncSig_PI                ScalarFuncSig = 2150
	ScalarFuncSig_Radians           ScalarFuncSig = 2151
	ScalarFuncSig_Sin               ScalarFuncSig = 2152
	ScalarFuncSig_Tan               ScalarFuncSig = 2153
	ScalarFuncSig_TruncateInt       ScalarFuncSig = 2154
	ScalarFuncSig_TruncateReal      ScalarFuncSig = 2155
	ScalarFuncSig_TruncateDecimal   ScalarFuncSig = 2156
	// op
	ScalarFuncSig_LogicalAnd        ScalarFuncSig = 3101
	ScalarFuncSig_LogicalOr         ScalarFuncSig = 3102
	ScalarFuncSig_LogicalXor        ScalarFuncSig = 3103
	ScalarFuncSig_UnaryNot          ScalarFuncSig = 3104
	ScalarFuncSig_UnaryMinusInt     ScalarFuncSig = 3108
	ScalarFuncSig_UnaryMinusReal    ScalarFuncSig = 3109
	ScalarFuncSig_UnaryMinusDecimal ScalarFuncSig = 3110
	ScalarFuncSig_DecimalIsNull     ScalarFuncSig = 3111
	ScalarFuncSig_DurationIsNull    ScalarFuncSig = 3112
	ScalarFuncSig_RealIsNull        ScalarFuncSig = 3113
	ScalarFuncSig_StringIsNull      ScalarFuncSig = 3114
	ScalarFuncSig_TimeIsNull        ScalarFuncSig = 3115
	ScalarFuncSig_IntIsNull         ScalarFuncSig = 3116
	// unimplemented in tidb
	ScalarFuncSig_JsonIsNull     ScalarFuncSig = 3117
	ScalarFuncSig_BitAndSig      ScalarFuncSig = 3118
	ScalarFuncSig_BitOrSig       ScalarFuncSig = 3119
	ScalarFuncSig_BitXorSig      ScalarFuncSig = 3120
	ScalarFuncSig_BitNegSig      ScalarFuncSig = 3121
	ScalarFuncSig_IntIsTrue      ScalarFuncSig = 3122
	ScalarFuncSig_RealIsTrue     ScalarFuncSig = 3123
	ScalarFuncSig_DecimalIsTrue  ScalarFuncSig = 3124
	ScalarFuncSig_IntIsFalse     ScalarFuncSig = 3125
	ScalarFuncSig_RealIsFalse    ScalarFuncSig = 3126
	ScalarFuncSig_DecimalIsFalse ScalarFuncSig = 3127
	ScalarFuncSig_LeftShift      ScalarFuncSig = 3129
	ScalarFuncSig_RightShift     ScalarFuncSig = 3130
	// other
	ScalarFuncSig_BitCount       ScalarFuncSig = 3128
	ScalarFuncSig_GetParamString ScalarFuncSig = 3131
	ScalarFuncSig_GetVar         ScalarFuncSig = 3132
	ScalarFuncSig_RowSig         ScalarFuncSig = 3133
	ScalarFuncSig_SetVar         ScalarFuncSig = 3134
	ScalarFuncSig_ValuesDecimal  ScalarFuncSig = 3135
	ScalarFuncSig_ValuesDuration ScalarFuncSig = 3136
	ScalarFuncSig_ValuesInt      ScalarFuncSig = 3137
	ScalarFuncSig_ValuesJSON     ScalarFuncSig = 3138
	ScalarFuncSig_ValuesReal     ScalarFuncSig = 3139
	ScalarFuncSig_ValuesString   ScalarFuncSig = 3140
	ScalarFuncSig_ValuesTime     ScalarFuncSig = 3141
	ScalarFuncSig_InInt          ScalarFuncSig = 4001
	ScalarFuncSig_InReal         ScalarFuncSig = 4002
	ScalarFuncSig_InDecimal      ScalarFuncSig = 4003
	ScalarFuncSig_InString       ScalarFuncSig = 4004
	ScalarFuncSig_InTime         ScalarFuncSig = 4005
	ScalarFuncSig_InDuration     ScalarFuncSig = 4006
	ScalarFuncSig_InJson         ScalarFuncSig = 4007
	// control
	ScalarFuncSig_IfNullInt        ScalarFuncSig = 4101
	ScalarFuncSig_IfNullReal       ScalarFuncSig = 4102
	ScalarFuncSig_IfNullDecimal    ScalarFuncSig = 4103
	ScalarFuncSig_IfNullString     ScalarFuncSig = 4104
	ScalarFuncSig_IfNullTime       ScalarFuncSig = 4105
	ScalarFuncSig_IfNullDuration   ScalarFuncSig = 4106
	ScalarFuncSig_IfInt            ScalarFuncSig = 4107
	ScalarFuncSig_IfReal           ScalarFuncSig = 4108
	ScalarFuncSig_IfDecimal        ScalarFuncSig = 4109
	ScalarFuncSig_IfString         ScalarFuncSig = 4110
	ScalarFuncSig_IfTime           ScalarFuncSig = 4111
	ScalarFuncSig_IfDuration       ScalarFuncSig = 4112
	ScalarFuncSig_IfNullJson       ScalarFuncSig = 4113
	ScalarFuncSig_IfJson           ScalarFuncSig = 4114
	ScalarFuncSig_CaseWhenInt      ScalarFuncSig = 4208
	ScalarFuncSig_CaseWhenReal     ScalarFuncSig = 4209
	ScalarFuncSig_CaseWhenDecimal  ScalarFuncSig = 4210
	ScalarFuncSig_CaseWhenString   ScalarFuncSig = 4211
	ScalarFuncSig_CaseWhenTime     ScalarFuncSig = 4212
	ScalarFuncSig_CaseWhenDuration ScalarFuncSig = 4213
	// unimplemented in tidb
	ScalarFuncSig_CaseWhenJson ScalarFuncSig = 4214
	// encryption
	ScalarFuncSig_AesDecrypt         ScalarFuncSig = 4501
	ScalarFuncSig_AesEncrypt         ScalarFuncSig = 4502
	ScalarFuncSig_Compress           ScalarFuncSig = 4503
	ScalarFuncSig_MD5                ScalarFuncSig = 4504
	ScalarFuncSig_Password           ScalarFuncSig = 4505
	ScalarFuncSig_RandomBytes        ScalarFuncSig = 4506
	ScalarFuncSig_SHA1               ScalarFuncSig = 4507
	ScalarFuncSig_SHA2               ScalarFuncSig = 4508
	ScalarFuncSig_Uncompress         ScalarFuncSig = 4509
	ScalarFuncSig_UncompressedLength ScalarFuncSig = 4510
	// info
	ScalarFuncSig_Database           ScalarFuncSig = 4521
	ScalarFuncSig_FoundRows          ScalarFuncSig = 4522
	ScalarFuncSig_CurrentUser        ScalarFuncSig = 4523
	ScalarFuncSig_User               ScalarFuncSig = 4524
	ScalarFuncSig_ConnectionID       ScalarFuncSig = 4525
	ScalarFuncSig_LastInsertID       ScalarFuncSig = 4526
	ScalarFuncSig_LastInsertIDWithID ScalarFuncSig = 4527
	ScalarFuncSig_Version            ScalarFuncSig = 4528
	ScalarFuncSig_TiDBVersion        ScalarFuncSig = 4529
	ScalarFuncSig_RowCount           ScalarFuncSig = 4530
	// miscellaneous
	ScalarFuncSig_Sleep            ScalarFuncSig = 4551
	ScalarFuncSig_Lock             ScalarFuncSig = 4552
	ScalarFuncSig_ReleaseLock      ScalarFuncSig = 4553
	ScalarFuncSig_DecimalAnyValue  ScalarFuncSig = 4554
	ScalarFuncSig_DurationAnyValue ScalarFuncSig = 4555
	ScalarFuncSig_IntAnyValue      ScalarFuncSig = 4556
	ScalarFuncSig_JSONAnyValue     ScalarFuncSig = 4557
	ScalarFuncSig_RealAnyValue     ScalarFuncSig = 4558
	ScalarFuncSig_StringAnyValue   ScalarFuncSig = 4559
	ScalarFuncSig_TimeAnyValue     ScalarFuncSig = 4560
	ScalarFuncSig_InetAton         ScalarFuncSig = 4561
	ScalarFuncSig_InetNtoa         ScalarFuncSig = 4562
	ScalarFuncSig_Inet6Aton        ScalarFuncSig = 4563
	ScalarFuncSig_Inet6Ntoa        ScalarFuncSig = 4564
	ScalarFuncSig_IsIPv4           ScalarFuncSig = 4565
	ScalarFuncSig_IsIPv4Compat     ScalarFuncSig = 4566
	ScalarFuncSig_IsIPv4Mapped     ScalarFuncSig = 4567
	ScalarFuncSig_IsIPv6           ScalarFuncSig = 4568
	ScalarFuncSig_UUID             ScalarFuncSig = 4569
	// like
	ScalarFuncSig_LikeSig         ScalarFuncSig = 4310
	ScalarFuncSig_RegexpBinarySig ScalarFuncSig = 4311
	ScalarFuncSig_RegexpSig       ScalarFuncSig = 4312
	// json
	ScalarFuncSig_JsonExtractSig  ScalarFuncSig = 5001
	ScalarFuncSig_JsonUnquoteSig  ScalarFuncSig = 5002
	ScalarFuncSig_JsonTypeSig     ScalarFuncSig = 5003
	ScalarFuncSig_JsonSetSig      ScalarFuncSig = 5004
	ScalarFuncSig_JsonInsertSig   ScalarFuncSig = 5005
	ScalarFuncSig_JsonReplaceSig  ScalarFuncSig = 5006
	ScalarFuncSig_JsonRemoveSig   ScalarFuncSig = 5007
	ScalarFuncSig_JsonMergeSig    ScalarFuncSig = 5008
	ScalarFuncSig_JsonObjectSig   ScalarFuncSig = 5009
	ScalarFuncSig_JsonArraySig    ScalarFuncSig = 5010
	ScalarFuncSig_JsonValidSig    ScalarFuncSig = 5011
	ScalarFuncSig_JsonContainsSig ScalarFuncSig = 5012
	// time
	ScalarFuncSig_DateFormatSig            ScalarFuncSig = 6001
	ScalarFuncSig_DateLiteral              ScalarFuncSig = 6002
	ScalarFuncSig_DateDiff                 ScalarFuncSig = 6003
	ScalarFuncSig_NullTimeDiff             ScalarFuncSig = 6004
	ScalarFuncSig_TimeStringTimeDiff       ScalarFuncSig = 6005
	ScalarFuncSig_DurationStringTimeDiff   ScalarFuncSig = 6006
	ScalarFuncSig_DurationDurationTimeDiff ScalarFuncSig = 6007
	ScalarFuncSig_StringTimeTimeDiff       ScalarFuncSig = 6008
	ScalarFuncSig_StringDurationTimeDiff   ScalarFuncSig = 6009
	ScalarFuncSig_StringStringTimeDiff     ScalarFuncSig = 6010
	ScalarFuncSig_TimeTimeTimeDiff         ScalarFuncSig = 6011
	ScalarFuncSig_Date                     ScalarFuncSig = 6012
	ScalarFuncSig_Hour                     ScalarFuncSig = 6013
	ScalarFuncSig_Minute                   ScalarFuncSig = 6014
	ScalarFuncSig_Second                   ScalarFuncSig = 6015
	ScalarFuncSig_MicroSecond              ScalarFuncSig = 6016
	ScalarFuncSig_Month                    ScalarFuncSig = 6017
	ScalarFuncSig_MonthName                ScalarFuncSig = 6018
	ScalarFuncSig_NowWithArg               ScalarFuncSig = 6019
	ScalarFuncSig_NowWithoutArg            ScalarFuncSig = 6020
	ScalarFuncSig_DayName                  ScalarFuncSig = 6021
	ScalarFuncSig_DayOfMonth               ScalarFuncSig = 6022
	ScalarFuncSig_DayOfWeek                ScalarFuncSig = 6023
	ScalarFuncSig_DayOfYear                ScalarFuncSig = 6024
	ScalarFuncSig_WeekWithMode             ScalarFuncSig = 6025
	ScalarFuncSig_WeekWithoutMode          ScalarFuncSig = 6026
	ScalarFuncSig_WeekDay                  ScalarFuncSig = 6027
	ScalarFuncSig_WeekOfYear               ScalarFuncSig = 6028
	ScalarFuncSig_Year                     ScalarFuncSig = 6029
	ScalarFuncSig_YearWeekWithMode         ScalarFuncSig = 6030
	ScalarFuncSig_YearWeekWithoutMode      ScalarFuncSig = 6031
	ScalarFuncSig_GetFormat                ScalarFuncSig = 6032
	ScalarFuncSig_SysDateWithFsp           ScalarFuncSig = 6033
	ScalarFuncSig_SysDateWithoutFsp        ScalarFuncSig = 6034
	ScalarFuncSig_CurrentDate              ScalarFuncSig = 6035
	ScalarFuncSig_CurrentTime0Arg          ScalarFuncSig = 6036
	ScalarFuncSig_CurrentTime1Arg          ScalarFuncSig = 6037
	ScalarFuncSig_Time                     ScalarFuncSig = 6038
	ScalarFuncSig_TimeLiteral              ScalarFuncSig = 6039
	ScalarFuncSig_UTCDate                  ScalarFuncSig = 6040
	ScalarFuncSig_UTCTimestampWithArg      ScalarFuncSig = 6041
	ScalarFuncSig_UTCTimestampWithoutArg   ScalarFuncSig = 6042
	ScalarFuncSig_AddDatetimeAndDuration   ScalarFuncSig = 6043
	ScalarFuncSig_AddDatetimeAndString     ScalarFuncSig = 6044
	ScalarFuncSig_AddTimeDateTimeNull      ScalarFuncSig = 6045
	ScalarFuncSig_AddStringAndDuration     ScalarFuncSig = 6046
	ScalarFuncSig_AddStringAndString       ScalarFuncSig = 6047
	ScalarFuncSig_AddTimeStringNull        ScalarFuncSig = 6048
	ScalarFuncSig_AddDurationAndDuration   ScalarFuncSig = 6049
	ScalarFuncSig_AddDurationAndString     ScalarFuncSig = 6050
	ScalarFuncSig_AddTimeDurationNull      ScalarFuncSig = 6051
	ScalarFuncSig_AddDateAndDuration       ScalarFuncSig = 6052
	ScalarFuncSig_AddDateAndString         ScalarFuncSig = 6053
	ScalarFuncSig_SubDatetimeAndDuration   ScalarFuncSig = 6054
	ScalarFuncSig_SubDatetimeAndString     ScalarFuncSig = 6055
	ScalarFuncSig_SubTimeDateTimeNull      ScalarFuncSig = 6056
	ScalarFuncSig_SubStringAndDuration     ScalarFuncSig = 6057
	ScalarFuncSig_SubStringAndString       ScalarFuncSig = 6058
	ScalarFuncSig_SubTimeStringNull        ScalarFuncSig = 6059
	ScalarFuncSig_SubDurationAndDuration   ScalarFuncSig = 6060
	ScalarFuncSig_SubDurationAndString     ScalarFuncSig = 6061
	ScalarFuncSig_SubTimeDurationNull      ScalarFuncSig = 6062
	ScalarFuncSig_SubDateAndDuration       ScalarFuncSig = 6063
	ScalarFuncSig_SubDateAndString         ScalarFuncSig = 6064
	ScalarFuncSig_UnixTimestampCurrent     ScalarFuncSig = 6065
	ScalarFuncSig_UnixTimestampInt         ScalarFuncSig = 6066
	ScalarFuncSig_UnixTimestampDec         ScalarFuncSig = 6067
	ScalarFuncSig_ConvertTz                ScalarFuncSig = 6068
	ScalarFuncSig_MakeDate                 ScalarFuncSig = 6069
	ScalarFuncSig_MakeTime                 ScalarFuncSig = 6070
	ScalarFuncSig_PeriodAdd                ScalarFuncSig = 6071
	ScalarFuncSig_PeriodDiff               ScalarFuncSig = 6072
	ScalarFuncSig_Quarter                  ScalarFuncSig = 6073
	ScalarFuncSig_SecToTime                ScalarFuncSig = 6074
	ScalarFuncSig_TimeToSec                ScalarFuncSig = 6075
	ScalarFuncSig_TimestampAdd             ScalarFuncSig = 6076
	ScalarFuncSig_ToDays                   ScalarFuncSig = 6077
	ScalarFuncSig_ToSeconds                ScalarFuncSig = 6078
	ScalarFuncSig_UTCTimeWithArg           ScalarFuncSig = 6079
	ScalarFuncSig_UTCTimeWithoutArg        ScalarFuncSig = 6080
	ScalarFuncSig_Timestamp1Arg            ScalarFuncSig = 6081
	ScalarFuncSig_Timestamp2Args           ScalarFuncSig = 6082
	ScalarFuncSig_TimestampLiteral         ScalarFuncSig = 6083
	ScalarFuncSig_LastDay                  ScalarFuncSig = 6084
	ScalarFuncSig_StrToDateDate            ScalarFuncSig = 6085
	ScalarFuncSig_StrToDateDatetime        ScalarFuncSig = 6086
	ScalarFuncSig_StrToDateDuration        ScalarFuncSig = 6087
	ScalarFuncSig_FromUnixTime1Arg         ScalarFuncSig = 6088
	ScalarFuncSig_FromUnixTime2Arg         ScalarFuncSig = 6089
	ScalarFuncSig_ExtractDatetime          ScalarFuncSig = 6090
	ScalarFuncSig_ExtractDuration          ScalarFuncSig = 6091
	ScalarFuncSig_AddDateStringString      ScalarFuncSig = 6092
	ScalarFuncSig_AddDateStringInt         ScalarFuncSig = 6093
	ScalarFuncSig_AddDateStringDecimal     ScalarFuncSig = 6094
	ScalarFuncSig_AddDateIntString         ScalarFuncSig = 6095
	ScalarFuncSig_AddDateIntInt            ScalarFuncSig = 6096
	ScalarFuncSig_AddDateDatetimeString    ScalarFuncSig = 6097
	ScalarFuncSig_AddDateDatetimeInt       ScalarFuncSig = 6098
	ScalarFuncSig_SubDateStringString      ScalarFuncSig = 6099
	ScalarFuncSig_SubDateStringInt         ScalarFuncSig = 6100
	ScalarFuncSig_SubDateStringDecimal     ScalarFuncSig = 6101
	ScalarFuncSig_SubDateIntString         ScalarFuncSig = 6102
	ScalarFuncSig_SubDateIntInt            ScalarFuncSig = 6103
	ScalarFuncSig_SubDateDatetimeString    ScalarFuncSig = 6104
	ScalarFuncSig_SubDateDatetimeInt       ScalarFuncSig = 6105
	ScalarFuncSig_FromDays                 ScalarFuncSig = 6106
	ScalarFuncSig_TimeFormat               ScalarFuncSig = 6107
	ScalarFuncSig_TimestampDiff            ScalarFuncSig = 6108
	// String functions
	ScalarFuncSig_BitLength            ScalarFuncSig = 7001
	ScalarFuncSig_Bin                  ScalarFuncSig = 7002
	ScalarFuncSig_ASCII                ScalarFuncSig = 7003
	ScalarFuncSig_Char                 ScalarFuncSig = 7004
	ScalarFuncSig_CharLength           ScalarFuncSig = 7005
	ScalarFuncSig_Concat               ScalarFuncSig = 7006
	ScalarFuncSig_ConcatWS             ScalarFuncSig = 7007
	ScalarFuncSig_Convert              ScalarFuncSig = 7008
	ScalarFuncSig_Elt                  ScalarFuncSig = 7009
	ScalarFuncSig_ExportSet3Arg        ScalarFuncSig = 7010
	ScalarFuncSig_ExportSet4Arg        ScalarFuncSig = 7011
	ScalarFuncSig_ExportSet5Arg        ScalarFuncSig = 7012
	ScalarFuncSig_FieldInt             ScalarFuncSig = 7013
	ScalarFuncSig_FieldReal            ScalarFuncSig = 7014
	ScalarFuncSig_FieldString          ScalarFuncSig = 7015
	ScalarFuncSig_FindInSet            ScalarFuncSig = 7016
	ScalarFuncSig_Format               ScalarFuncSig = 7017
	ScalarFuncSig_FormatWithLocale     ScalarFuncSig = 7018
	ScalarFuncSig_FromBase64           ScalarFuncSig = 7019
	ScalarFuncSig_HexIntArg            ScalarFuncSig = 7020
	ScalarFuncSig_HexStrArg            ScalarFuncSig = 7021
	ScalarFuncSig_Insert               ScalarFuncSig = 7022
	ScalarFuncSig_InsertBinary         ScalarFuncSig = 7023
	ScalarFuncSig_Instr                ScalarFuncSig = 7024
	ScalarFuncSig_InstrBinary          ScalarFuncSig = 7025
	ScalarFuncSig_LTrim                ScalarFuncSig = 7026
	ScalarFuncSig_Left                 ScalarFuncSig = 7027
	ScalarFuncSig_LeftBinary           ScalarFuncSig = 7028
	ScalarFuncSig_Length               ScalarFuncSig = 7029
	ScalarFuncSig_Locate2Args          ScalarFuncSig = 7030
	ScalarFuncSig_Locate3Args          ScalarFuncSig = 7031
	ScalarFuncSig_LocateBinary2Args    ScalarFuncSig = 7032
	ScalarFuncSig_LocateBinary3Args    ScalarFuncSig = 7033
	ScalarFuncSig_Lower                ScalarFuncSig = 7034
	ScalarFuncSig_Lpad                 ScalarFuncSig = 7035
	ScalarFuncSig_LpadBinary           ScalarFuncSig = 7036
	ScalarFuncSig_MakeSet              ScalarFuncSig = 7037
	ScalarFuncSig_OctInt               ScalarFuncSig = 7038
	ScalarFuncSig_OctString            ScalarFuncSig = 7039
	ScalarFuncSig_Ord                  ScalarFuncSig = 7040
	ScalarFuncSig_Quote                ScalarFuncSig = 7041
	ScalarFuncSig_RTrim                ScalarFuncSig = 7042
	ScalarFuncSig_Repeat               ScalarFuncSig = 7043
	ScalarFuncSig_Replace              ScalarFuncSig = 7044
	ScalarFuncSig_Reverse              ScalarFuncSig = 7045
	ScalarFuncSig_ReverseBinary        ScalarFuncSig = 7046
	ScalarFuncSig_Right                ScalarFuncSig = 7047
	ScalarFuncSig_RightBinary          ScalarFuncSig = 7048
	ScalarFuncSig_Rpad                 ScalarFuncSig = 7049
	ScalarFuncSig_RpadBinary           ScalarFuncSig = 7050
	ScalarFuncSig_Space                ScalarFuncSig = 7051
	ScalarFuncSig_Strcmp               ScalarFuncSig = 7052
	ScalarFuncSig_Substring2Args       ScalarFuncSig = 7053
	ScalarFuncSig_Substring3Args       ScalarFuncSig = 7054
	ScalarFuncSig_SubstringBinary2Args ScalarFuncSig = 7055
	ScalarFuncSig_SubstringBinary3Args ScalarFuncSig = 7056
	ScalarFuncSig_SubstringIndex       ScalarFuncSig = 7057
	ScalarFuncSig_ToBase64             ScalarFuncSig = 7058
	ScalarFuncSig_Trim1Arg             ScalarFuncSig = 7059
	ScalarFuncSig_Trim2Args            ScalarFuncSig = 7060
	ScalarFuncSig_Trim3Args            ScalarFuncSig = 7061
	ScalarFuncSig_UnHex                ScalarFuncSig = 7062
	ScalarFuncSig_Upper                ScalarFuncSig = 7063
)

var ScalarFuncSig_name = map[int32]string{
	0:    "CastIntAsInt",
	1:    "CastIntAsReal",
	2:    "CastIntAsString",
	3:    "CastIntAsDecimal",
	4:    "CastIntAsTime",
	5:    "CastIntAsDuration",
	6:    "CastIntAsJson",
	10:   "CastRealAsInt",
	11:   "CastRealAsReal",
	12:   "CastRealAsString",
	13:   "CastRealAsDecimal",
	14:   "CastRealAsTime",
	15:   "CastRealAsDuration",
	16:   "CastRealAsJson",
	20:   "CastDecimalAsInt",
	21:   "CastDecimalAsReal",
	22:   "CastDecimalAsString",
	23:   "CastDecimalAsDecimal",
	24:   "CastDecimalAsTime",
	25:   "CastDecimalAsDuration",
	26:   "CastDecimalAsJson",
	30:   "CastStringAsInt",
	31:   "CastStringAsReal",
	32:   "CastStringAsString",
	33:   "CastStringAsDecimal",
	34:   "CastStringAsTime",
	35:   "CastStringAsDuration",
	36:   "CastStringAsJson",
	40:   "CastTimeAsInt",
	41:   "CastTimeAsReal",
	42:   "CastTimeAsString",
	43:   "CastTimeAsDecimal",
	44:   "CastTimeAsTime",
	45:   "CastTimeAsDuration",
	46:   "CastTimeAsJson",
	50:   "CastDurationAsInt",
	51:   "CastDurationAsReal",
	52:   "CastDurationAsString",
	53:   "CastDurationAsDecimal",
	54:   "CastDurationAsTime",
	55:   "CastDurationAsDuration",
	56:   "CastDurationAsJson",
	60:   "CastJsonAsInt",
	61:   "CastJsonAsReal",
	62:   "CastJsonAsString",
	63:   "CastJsonAsDecimal",
	64:   "CastJsonAsTime",
	65:   "CastJsonAsDuration",
	66:   "CastJsonAsJson",
	4201: "CoalesceInt",
	4202: "CoalesceReal",
	4203: "CoalesceDecimal",
	4204: "CoalesceString",
	4205: "CoalesceTime",
	4206: "CoalesceDuration",
	4207: "CoalesceJson",
	100:  "LTInt",
	101:  "LTReal",
	102:  "LTDecimal",
	103:  "LTString",
	104:  "LTTime",
	105:  "LTDuration",
	106:  "LTJson",
	110:  "LEInt",
	111:  "LEReal",
	112:  "LEDecimal",
	113:  "LEString",
	114:  "LETime",
	115:  "LEDuration",
	116:  "LEJson",
	120:  "GTInt",
	121:  "GTReal",
	122:  "GTDecimal",
	123:  "GTString",
	124:  "GTTime",
	125:  "GTDuration",
	126:  "GTJson",
	4215: "GreatestInt",
	4216: "GreatestReal",
	4217: "GreatestDecimal",
	4218: "GreatestString",
	4219: "GreatestTime",
	4220: "LeastInt",
	4221: "LeastReal",
	4222: "LeastDecimal",
	4223: "LeastString",
	4224: "LeastTime",
	4225: "IntervalInt",
	4226: "IntervalReal",
	130:  "GEInt",
	131:  "GEReal",
	132:  "GEDecimal",
	133:  "GEString",
	134:  "GETime",
	135:  "GEDuration",
	136:  "GEJson",
	140:  "EQInt",
	141:  "EQReal",
	142:  "EQDecimal",
	143:  "EQString",
	144:  "EQTime",
	145:  "EQDuration",
	146:  "EQJson",
	150:  "NEInt",
	151:  "NEReal",
	152:  "NEDecimal",
	153:  "NEString",
	154:  "NETime",
	155:  "NEDuration",
	156:  "NEJson",
	160:  "NullEQInt",
	161:  "NullEQReal",
	162:  "NullEQDecimal",
	163:  "NullEQString",
	164:  "NullEQTime",
	165:  "NullEQDuration",
	166:  "NullEQJson",
	200:  "PlusReal",
	201:  "PlusDecimal",
	203:  "PlusInt",
	204:  "MinusReal",
	205:  "MinusDecimal",
	207:  "MinusInt",
	208:  "MultiplyReal",
	209:  "MultiplyDecimal",
	210:  "MultiplyInt",
	211:  "DivideReal",
	212:  "DivideDecimal",
	213:  "IntDivideInt",
	214:  "IntDivideDecimal",
	215:  "ModReal",
	216:  "ModDecimal",
	217:  "ModInt",
	218:  "MultiplyIntUnsigned",
	2101: "AbsInt",
	2102: "AbsUInt",
	2103: "AbsReal",
	2104: "AbsDecimal",
	2105: "CeilIntToDec",
	2106: "CeilIntToInt",
	2107: "CeilDecToInt",
	2108: "CeilDecToDec",
	2109: "CeilReal",
	2110: "FloorIntToDec",
	2111: "FloorIntToInt",
	2112: "FloorDecToInt",
	2113: "FloorDecToDec",
	2114: "FloorReal",
	2121: "RoundReal",
	2122: "RoundInt",
	2123: "RoundDec",
	2124: "RoundWithFracReal",
	2125: "RoundWithFracInt",
	2126: "RoundWithFracDec",
	2131: "Log1Arg",
	2132: "Log2Args",
	2133: "Log2",
	2134: "Log10",
	2135: "Rand",
	2136: "RandWithSeed",
	2137: "Pow",
	2138: "Conv",
	2139: "CRC32",
	2140: "Sign",
	2141: "Sqrt",
	2142: "Acos",
	2143: "Asin",
	2144: "Atan1Arg",
	2145: "Atan2Args",
	2146: "Cos",
	2147: "Cot",
	2148: "Degrees",
	2149: "Exp",
	2150: "PI",
	2151: "Radians",
	2152: "Sin",
	2153: "Tan",
	2154: "TruncateInt",
	2155: "TruncateReal",
	2156: "TruncateDecimal",
	3101: "LogicalAnd",
	3102: "LogicalOr",
	3103: "LogicalXor",
	3104: "UnaryNot",
	3108: "UnaryMinusInt",
	3109: "UnaryMinusReal",
	3110: "UnaryMinusDecimal",
	3111: "DecimalIsNull",
	3112: "DurationIsNull",
	3113: "RealIsNull",
	3114: "StringIsNull",
	3115: "TimeIsNull",
	3116: "IntIsNull",
	3117: "JsonIsNull",
	3118: "BitAndSig",
	3119: "BitOrSig",
	3120: "BitXorSig",
	3121: "BitNegSig",
	3122: "IntIsTrue",
	3123: "RealIsTrue",
	3124: "DecimalIsTrue",
	3125: "IntIsFalse",
	3126: "RealIsFalse",
	3127: "DecimalIsFalse",
	3129: "LeftShift",
	3130: "RightShift",
	3128: "BitCount",
	3131: "GetParamString",
	3132: "GetVar",
	3133: "RowSig",
	3134: "SetVar",
	3135: "ValuesDecimal",
	3136: "ValuesDuration",
	3137: "ValuesInt",
	3138: "ValuesJSON",
	3139: "ValuesReal",
	3140: "ValuesString",
	3141: "ValuesTime",
	4001: "InInt",
	4002: "InReal",
	4003: "InDecimal",
	4004: "InString",
	4005: "InTime",
	4006: "InDuration",
	4007: "InJson",
	4101: "IfNullInt",
	4102: "IfNullReal",
	4103: "IfNullDecimal",
	4104: "IfNullString",
	4105: "IfNullTime",
	4106: "IfNullDuration",
	4107: "IfInt",
	4108: "IfReal",
	4109: "IfDecimal",
	4110: "IfString",
	4111: "IfTime",
	4112: "IfDuration",
	4113: "IfNullJson",
	4114: "IfJson",
	4208: "CaseWhenInt",
	4209: "CaseWhenReal",
	4210: "CaseWhenDecimal",
	4211: "CaseWhenString",
	4212: "CaseWhenTime",
	4213: "CaseWhenDuration",
	4214: "CaseWhenJson",
	4501: "AesDecrypt",
	4502: "AesEncrypt",
	4503: "Compress",
	4504: "MD5",
	4505: "Password",
	4506: "RandomBytes",
	4507: "SHA1",
	4508: "SHA2",
	4509: "Uncompress",
	4510: "UncompressedLength",
	4521: "Database",
	4522: "FoundRows",
	4523: "CurrentUser",
	4524: "User",
	4525: "ConnectionID",
	4526: "LastInsertID",
	4527: "LastInsertIDWithID",
	4528: "Version",
	4529: "TiDBVersion",
	4530: "RowCount",
	4551: "Sleep",
	4552: "Lock",
	4553: "ReleaseLock",
	4554: "DecimalAnyValue",
	4555: "DurationAnyValue",
	4556: "IntAnyValue",
	4557: "JSONAnyValue",
	4558: "RealAnyValue",
	4559: "StringAnyValue",
	4560: "TimeAnyValue",
	4561: "InetAton",
	4562: "InetNtoa",
	4563: "Inet6Aton",
	4564: "Inet6Ntoa",
	4565: "IsIPv4",
	4566: "IsIPv4Compat",
	4567: "IsIPv4Mapped",
	4568: "IsIPv6",
	4569: "UUID",
	4310: "LikeSig",
	4311: "RegexpBinarySig",
	4312: "RegexpSig",
	5001: "JsonExtractSig",
	5002: "JsonUnquoteSig",
	5003: "JsonTypeSig",
	5004: "JsonSetSig",
	5005: "JsonInsertSig",
	5006: "JsonReplaceSig",
	5007: "JsonRemoveSig",
	5008: "JsonMergeSig",
	5009: "JsonObjectSig",
	5010: "JsonArraySig",
	5011: "JsonValidSig",
	5012: "JsonContainsSig",
	6001: "DateFormatSig",
	6002: "DateLiteral",
	6003: "DateDiff",
	6004: "NullTimeDiff",
	6005: "TimeStringTimeDiff",
	6006: "DurationStringTimeDiff",
	6007: "DurationDurationTimeDiff",
	6008: "StringTimeTimeDiff",
	6009: "StringDurationTimeDiff",
	6010: "StringStringTimeDiff",
	6011: "TimeTimeTimeDiff",
	6012: "Date",
	6013: "Hour",
	6014: "Minute",
	6015: "Second",
	6016: "MicroSecond",
	6017: "Month",
	6018: "MonthName",
	6019: "NowWithArg",
	6020: "NowWithoutArg",
	6021: "DayName",
	6022: "DayOfMonth",
	6023: "DayOfWeek",
	6024: "DayOfYear",
	6025: "WeekWithMode",
	6026: "WeekWithoutMode",
	6027: "WeekDay",
	6028: "WeekOfYear",
	6029: "Year",
	6030: "YearWeekWithMode",
	6031: "YearWeekWithoutMode",
	6032: "GetFormat",
	6033: "SysDateWithFsp",
	6034: "SysDateWithoutFsp",
	6035: "CurrentDate",
	6036: "CurrentTime0Arg",
	6037: "CurrentTime1Arg",
	6038: "Time",
	6039: "TimeLiteral",
	6040: "UTCDate",
	6041: "UTCTimestampWithArg",
	6042: "UTCTimestampWithoutArg",
	6043: "AddDatetimeAndDuration",
	6044: "AddDatetimeAndString",
	6045: "AddTimeDateTimeNull",
	6046: "AddStringAndDuration",
	6047: "AddStringAndString",
	6048: "AddTimeStringNull",
	6049: "AddDurationAndDuration",
	6050: "AddDurationAndString",
	6051: "AddTimeDurationNull",
	6052: "AddDateAndDuration",
	6053: "AddDateAndString",
	6054: "SubDatetimeAndDuration",
	6055: "SubDatetimeAndString",
	6056: "SubTimeDateTimeNull",
	6057: "SubStringAndDuration",
	6058: "SubStringAndString",
	6059: "SubTimeStringNull",
	6060: "SubDurationAndDuration",
	6061: "SubDurationAndString",
	6062: "SubTimeDurationNull",
	6063: "SubDateAndDuration",
	6064: "SubDateAndString",
	6065: "UnixTimestampCurrent",
	6066: "UnixTimestampInt",
	6067: "UnixTimestampDec",
	6068: "ConvertTz",
	6069: "MakeDate",
	6070: "MakeTime",
	6071: "PeriodAdd",
	6072: "PeriodDiff",
	6073: "Quarter",
	6074: "SecToTime",
	6075: "TimeToSec",
	6076: "TimestampAdd",
	6077: "ToDays",
	6078: "ToSeconds",
	6079: "UTCTimeWithArg",
	6080: "UTCTimeWithoutArg",
	6081: "Timestamp1Arg",
	6082: "Timestamp2Args",
	6083: "TimestampLiteral",
	6084: "LastDay",
	6085: "StrToDateDate",
	6086: "StrToDateDatetime",
	6087: "StrToDateDuration",
	6088: "FromUnixTime1Arg",
	6089: "FromUnixTime2Arg",
	6090: "ExtractDatetime",
	6091: "ExtractDuration",
	6092: "AddDateStringString",
	6093: "AddDateStringInt",
	6094: "AddDateStringDecimal",
	6095: "AddDateIntString",
	6096: "AddDateIntInt",
	6097: "AddDateDatetimeString",
	6098: "AddDateDatetimeInt",
	6099: "SubDateStringString",
	6100: "SubDateStringInt",
	6101: "SubDateStringDecimal",
	6102: "SubDateIntString",
	6103: "SubDateIntInt",
	6104: "SubDateDatetimeString",
	6105: "SubDateDatetimeInt",
	6106: "FromDays",
	6107: "TimeFormat",
	6108: "TimestampDiff",
	7001: "BitLength",
	7002: "Bin",
	7003: "ASCII",
	7004: "Char",
	7005: "CharLength",
	7006: "Concat",
	7007: "ConcatWS",
	7008: "Convert",
	7009: "Elt",
	7010: "ExportSet3Arg",
	7011: "ExportSet4Arg",
	7012: "ExportSet5Arg",
	7013: "FieldInt",
	7014: "FieldReal",
	7015: "FieldString",
	7016: "FindInSet",
	7017: "Format",
	7018: "FormatWithLocale",
	7019: "FromBase64",
	7020: "HexIntArg",
	7021: "HexStrArg",
	7022: "Insert",
	7023: "InsertBinary",
	7024: "Instr",
	7025: "InstrBinary",
	7026: "LTrim",
	7027: "Left",
	7028: "LeftBinary",
	7029: "Length",
	7030: "Locate2Args",
	7031: "Locate3Args",
	7032: "LocateBinary2Args",
	7033: "LocateBinary3Args",
	7034: "Lower",
	7035: "Lpad",
	7036: "LpadBinary",
	7037: "MakeSet",
	7038: "OctInt",
	7039: "OctString",
	7040: "Ord",
	7041: "Quote",
	7042: "RTrim",
	7043: "Repeat",
	7044: "Replace",
	7045: "Reverse",
	7046: "ReverseBinary",
	7047: "Right",
	7048: "RightBinary",
	7049: "Rpad",
	7050: "RpadBinary",
	7051: "Space",
	7052: "Strcmp",
	7053: "Substring2Args",
	7054: "Substring3Args",
	7055: "SubstringBinary2Args",
	7056: "SubstringBinary3Args",
	7057: "SubstringIndex",
	7058: "ToBase64",
	7059: "Trim1Arg",
	7060: "Trim2Args",
	7061: "Trim3Args",
	7062: "UnHex",
	7063: "Upper",
}
var ScalarFuncSig_value = map[string]int32{
	"CastIntAsInt":             0,
	"CastIntAsReal":            1,
	"CastIntAsString":          2,
	"CastIntAsDecimal":         3,
	"CastIntAsTime":            4,
	"CastIntAsDuration":        5,
	"CastIntAsJson":            6,
	"CastRealAsInt":            10,
	"CastRealAsReal":           11,
	"CastRealAsString":         12,
	"CastRealAsDecimal":        13,
	"CastRealAsTime":           14,
	"CastRealAsDuration":       15,
	"CastRealAsJson":           16,
	"CastDecimalAsInt":         20,
	"CastDecimalAsReal":        21,
	"CastDecimalAsString":      22,
	"CastDecimalAsDecimal":     23,
	"CastDecimalAsTime":        24,
	"CastDecimalAsDuration":    25,
	"CastDecimalAsJson":        26,
	"CastStringAsInt":          30,
	"CastStringAsReal":         31,
	"CastStringAsString":       32,
	"CastStringAsDecimal":      33,
	"CastStringAsTime":         34,
	"CastStringAsDuration":     35,
	"CastStringAsJson":         36,
	"CastTimeAsInt":            40,
	"CastTimeAsReal":           41,
	"CastTimeAsString":         42,
	"CastTimeAsDecimal":        43,
	"CastTimeAsTime":           44,
	"CastTimeAsDuration":       45,
	"CastTimeAsJson":           46,
	"CastDurationAsInt":        50,
	"CastDurationAsReal":       51,
	"CastDurationAsString":     52,
	"CastDurationAsDecimal":    53,
	"CastDurationAsTime":       54,
	"CastDurationAsDuration":   55,
	"CastDurationAsJson":       56,
	"CastJsonAsInt":            60,
	"CastJsonAsReal":           61,
	"CastJsonAsString":         62,
	"CastJsonAsDecimal":        63,
	"CastJsonAsTime":           64,
	"CastJsonAsDuration":       65,
	"CastJsonAsJson":           66,
	"CoalesceInt":              4201,
	"CoalesceReal":             4202,
	"CoalesceDecimal":          4203,
	"CoalesceString":           4204,
	"CoalesceTime":             4205,
	"CoalesceDuration":         4206,
	"CoalesceJson":             4207,
	"LTInt":                    100,
	"LTReal":                   101,
	"LTDecimal":                102,
	"LTString":                 103,
	"LTTime":                   104,
	"LTDuration":               105,
	"LTJson":                   106,
	"LEInt":                    110,
	"LEReal":                   111,
	"LEDecimal":                112,
	"LEString":                 113,
	"LETime":                   114,
	"LEDuration":               115,
	"LEJson":                   116,
	"GTInt":                    120,
	"GTReal":                   121,
	"GTDecimal":                122,
	"GTString":                 123,
	"GTTime":                   124,
	"GTDuration":               125,
	"GTJson":                   126,
	"GreatestInt":              4215,
	"GreatestReal":             4216,
	"GreatestDecimal":          4217,
	"GreatestString":           4218,
	"GreatestTime":             4219,
	"LeastInt":                 4220,
	"LeastReal":                4221,
	"LeastDecimal":             4222,
	"LeastString":              4223,
	"LeastTime":                4224,
	"IntervalInt":              4225,
	"IntervalReal":             4226,
	"GEInt":                    130,
	"GEReal":                   131,
	"GEDecimal":                132,
	"GEString":                 133,
	"GETime":                   134,
	"GEDuration":               135,
	"GEJson":                   136,
	"EQInt":                    140,
	"EQReal":                   141,
	"EQDecimal":                142,
	"EQString":                 143,
	"EQTime":                   144,
	"EQDuration":               145,
	"EQJson":                   146,
	"NEInt":                    150,
	"NEReal":                   151,
	"NEDecimal":                152,
	"NEString":                 153,
	"NETime":                   154,
	"NEDuration":               155,
	"NEJson":                   156,
	"NullEQInt":                160,
	"NullEQReal":               161,
	"NullEQDecimal":            162,
	"NullEQString":             163,
	"NullEQTime":               164,
	"NullEQDuration":           165,
	"NullEQJson":               166,
	"PlusReal":                 200,
	"PlusDecimal":              201,
	"PlusInt":                  203,
	"MinusReal":                204,
	"MinusDecimal":             205,
	"MinusInt":                 207,
	"MultiplyReal":             208,
	"MultiplyDecimal":          209,
	"MultiplyInt":              210,
	"DivideReal":               211,
	"DivideDecimal":            212,
	"IntDivideInt":             213,
	"IntDivideDecimal":         214,
	"ModReal":                  215,
	"ModDecimal":               216,
	"ModInt":                   217,
	"MultiplyIntUnsigned":      218,
	"AbsInt":                   2101,
	"AbsUInt":                  2102,
	"AbsReal":                  2103,
	"AbsDecimal":               2104,
	"CeilIntToDec":             2105,
	"CeilIntToInt":             2106,
	"CeilDecToInt":             2107,
	"CeilDecToDec":             2108,
	"CeilReal":                 2109,
	"FloorIntToDec":            2110,
	"FloorIntToInt":            2111,
	"FloorDecToInt":            2112,
	"FloorDecToDec":            2113,
	"FloorReal":                2114,
	"RoundReal":                2121,
	"RoundInt":                 2122,
	"RoundDec":                 2123,
	"RoundWithFracReal":        2124,
	"RoundWithFracInt":         2125,
	"RoundWithFracDec":         2126,
	"Log1Arg":                  2131,
	"Log2Args":                 2132,
	"Log2":                     2133,
	"Log10":                    2134,
	"Rand":                     2135,
	"RandWithSeed":             2136,
	"Pow":                      2137,
	"Conv":                     2138,
	"CRC32":                    2139,
	"Sign":                     2140,
	"Sqrt":                     2141,
	"Acos":                     2142,
	"Asin":                     2143,
	"Atan1Arg":                 2144,
	"Atan2Args":                2145,
	"Cos":                      2146,
	"Cot":                      2147,
	"Degrees":                  2148,
	"Exp":                      2149,
	"PI":                       2150,
	"Radians":                  2151,
	"Sin":                      2152,
	"Tan":                      2153,
	"TruncateInt":              2154,
	"TruncateReal":             2155,
	"TruncateDecimal":          2156,
	"LogicalAnd":               3101,
	"LogicalOr":                3102,
	"LogicalXor":               3103,
	"UnaryNot":                 3104,
	"UnaryMinusInt":            3108,
	"UnaryMinusReal":           3109,
	"UnaryMinusDecimal":        3110,
	"DecimalIsNull":            3111,
	"DurationIsNull":           3112,
	"RealIsNull":               3113,
	"StringIsNull":             3114,
	"TimeIsNull":               3115,
	"IntIsNull":                3116,
	"JsonIsNull":               3117,
	"BitAndSig":                3118,
	"BitOrSig":                 3119,
	"BitXorSig":                3120,
	"BitNegSig":                3121,
	"IntIsTrue":                3122,
	"RealIsTrue":               3123,
	"DecimalIsTrue":            3124,
	"IntIsFalse":               3125,
	"RealIsFalse":              3126,
	"DecimalIsFalse":           3127,
	"LeftShift":                3129,
	"RightShift":               3130,
	"BitCount":                 3128,
	"GetParamString":           3131,
	"GetVar":                   3132,
	"RowSig":                   3133,
	"SetVar":                   3134,
	"ValuesDecimal":            3135,
	"ValuesDuration":           3136,
	"ValuesInt":                3137,
	"ValuesJSON":               3138,
	"ValuesReal":               3139,
	"ValuesString":             3140,
	"ValuesTime":               3141,
	"InInt":                    4001,
	"InReal":                   4002,
	"InDecimal":                4003,
	"InString":                 4004,
	"InTime":                   4005,
	"InDuration":               4006,
	"InJson":                   4007,
	"IfNullInt":                4101,
	"IfNullReal":               4102,
	"IfNullDecimal":            4103,
	"IfNullString":             4104,
	"IfNullTime":               4105,
	"IfNullDuration":           4106,
	"IfInt":                    4107,
	"IfReal":                   4108,
	"IfDecimal":                4109,
	"IfString":                 4110,
	"IfTime":                   4111,
	"IfDuration":               4112,
	"IfNullJson":               4113,
	"IfJson":                   4114,
	"CaseWhenInt":              4208,
	"CaseWhenReal":             4209,
	"CaseWhenDecimal":          4210,
	"CaseWhenString":           4211,
	"CaseWhenTime":             4212,
	"CaseWhenDuration":         4213,
	"CaseWhenJson":             4214,
	"AesDecrypt":               4501,
	"AesEncrypt":               4502,
	"Compress":                 4503,
	"MD5":                      4504,
	"Password":                 4505,
	"RandomBytes":              4506,
	"SHA1":                     4507,
	"SHA2":                     4508,
	"Uncompress":               4509,
	"UncompressedLength":       4510,
	"Database":                 4521,
	"FoundRows":                4522,
	"CurrentUser":              4523,
	"User":                     4524,
	"ConnectionID":             4525,
	"LastInsertID":             4526,
	"LastInsertIDWithID":       4527,
	"Version":                  4528,
	"TiDBVersion":              4529,
	"RowCount":                 4530,
	"Sleep":                    4551,
	"Lock":                     4552,
	"ReleaseLock":              4553,
	"DecimalAnyValue":          4554,
	"DurationAnyValue":         4555,
	"IntAnyValue":              4556,
	"JSONAnyValue":             4557,
	"RealAnyValue":             4558,
	"StringAnyValue":           4559,
	"TimeAnyValue":             4560,
	"InetAton":                 4561,
	"InetNtoa":                 4562,
	"Inet6Aton":                4563,
	"Inet6Ntoa":                4564,
	"IsIPv4":                   4565,
	"IsIPv4Compat":             4566,
	"IsIPv4Mapped":             4567,
	"IsIPv6":                   4568,
	"UUID":                     4569,
	"LikeSig":                  4310,
	"RegexpBinarySig":          4311,
	"RegexpSig":                4312,
	"JsonExtractSig":           5001,
	"JsonUnquoteSig":           5002,
	"JsonTypeSig":              5003,
	"JsonSetSig":               5004,
	"JsonInsertSig":            5005,
	"JsonReplaceSig":           5006,
	"JsonRemoveSig":            5007,
	"JsonMergeSig":             5008,
	"JsonObjectSig":            5009,
	"JsonArraySig":             5010,
	"JsonValidSig":             5011,
	"JsonContainsSig":          5012,
	"DateFormatSig":            6001,
	"DateLiteral":              6002,
	"DateDiff":                 6003,
	"NullTimeDiff":             6004,
	"TimeStringTimeDiff":       6005,
	"DurationStringTimeDiff":   6006,
	"DurationDurationTimeDiff": 6007,
	"StringTimeTimeDiff":       6008,
	"StringDurationTimeDiff":   6009,
	"StringStringTimeDiff":     6010,
	"TimeTimeTimeDiff":         6011,
	"Date":                     6012,
	"Hour":                     6013,
	"Minute":                   6014,
	"Second":                   6015,
	"MicroSecond":              6016,
	"Month":                    6017,
	"MonthName":                6018,
	"NowWithArg":               6019,
	"NowWithoutArg":            6020,
	"DayName":                  6021,
	"DayOfMonth":               6022,
	"DayOfWeek":                6023,
	"DayOfYear":                6024,
	"WeekWithMode":             6025,
	"WeekWithoutMode":          6026,
	"WeekDay":                  6027,
	"WeekOfYear":               6028,
	"Year":                     6029,
	"YearWeekWithMode":         6030,
	"YearWeekWithoutMode":      6031,
	"GetFormat":                6032,
	"SysDateWithFsp":           6033,
	"SysDateWithoutFsp":        6034,
	"CurrentDate":              6035,
	"CurrentTime0Arg":          6036,
	"CurrentTime1Arg":          6037,
	"Time":                     6038,
	"TimeLiteral":              6039,
	"UTCDate":                  6040,
	"UTCTimestampWithArg":      6041,
	"UTCTimestampWithoutArg":   6042,
	"AddDatetimeAndDuration":   6043,
	"AddDatetimeAndString":     6044,
	"AddTimeDateTimeNull":      6045,
	"AddStringAndDuration":     6046,
	"AddStringAndString":       6047,
	"AddTimeStringNull":        6048,
	"AddDurationAndDuration":   6049,
	"AddDurationAndString":     6050,
	"AddTimeDurationNull":      6051,
	"AddDateAndDuration":       6052,
	"AddDateAndString":         6053,
	"SubDatetimeAndDuration":   6054,
	"SubDatetimeAndString":     6055,
	"SubTimeDateTimeNull":      6056,
	"SubStringAndDuration":     6057,
	"SubStringAndString":       6058,
	"SubTimeStringNull":        6059,
	"SubDurationAndDuration":   6060,
	"SubDurationAndString":     6061,
	"SubTimeDurationNull":      6062,
	"SubDateAndDuration":       6063,
	"SubDateAndString":         6064,
	"UnixTimestampCurrent":     6065,
	"UnixTimestampInt":         6066,
	"UnixTimestampDec":         6067,
	"ConvertTz":                6068,
	"MakeDate":                 6069,
	"MakeTime":                 6070,
	"PeriodAdd":                6071,
	"PeriodDiff":               6072,
	"Quarter":                  6073,
	"SecToTime":                6074,
	"TimeToSec":                6075,
	"TimestampAdd":             6076,
	"ToDays":                   6077,
	"ToSeconds":                6078,
	"UTCTimeWithArg":           6079,
	"UTCTimeWithoutArg":        6080,
	"Timestamp1Arg":            6081,
	"Timestamp2Args":           6082,
	"TimestampLiteral":         6083,
	"LastDay":                  6084,
	"StrToDateDate":            6085,
	"StrToDateDatetime":        6086,
	"StrToDateDuration":        6087,
	"FromUnixTime1Arg":         6088,
	"FromUnixTime2Arg":         6089,
	"ExtractDatetime":          6090,
	"ExtractDuration":          6091,
	"AddDateStringString":      6092,
	"AddDateStringInt":         6093,
	"AddDateStringDecimal":     6094,
	"AddDateIntString":         6095,
	"AddDateIntInt":            6096,
	"AddDateDatetimeString":    6097,
	"AddDateDatetimeInt":       6098,
	"SubDateStringString":      6099,
	"SubDateStringInt":         6100,
	"SubDateStringDecimal":     6101,
	"SubDateIntString":         6102,
	"SubDateIntInt":            6103,
	"SubDateDatetimeString":    6104,
	"SubDateDatetimeInt":       6105,
	"FromDays":                 6106,
	"TimeFormat":               6107,
	"TimestampDiff":            6108,
	"BitLength":                7001,
	"Bin":                      7002,
	"ASCII":                    7003,
	"Char":                     7004,
	"CharLength":               7005,
	"Concat":                   7006,
	"ConcatWS":                 7007,
	"Convert":                  7008,
	"Elt":                      7009,
	"ExportSet3Arg":            7010,
	"ExportSet4Arg":            7011,
	"ExportSet5Arg":            7012,
	"FieldInt":                 7013,
	"FieldReal":                7014,
	"FieldString":              7015,
	"FindInSet":                7016,
	"Format":                   7017,
	"FormatWithLocale":         7018,
	"FromBase64":               7019,
	"HexIntArg":                7020,
	"HexStrArg":                7021,
	"Insert":                   7022,
	"InsertBinary":             7023,
	"Instr":                    7024,
	"InstrBinary":              7025,
	"LTrim":                    7026,
	"Left":                     7027,
	"LeftBinary":               7028,
	"Length":                   7029,
	"Locate2Args":              7030,
	"Locate3Args":              7031,
	"LocateBinary2Args":        7032,
	"LocateBinary3Args":        7033,
	"Lower":                    7034,
	"Lpad":                     7035,
	"LpadBinary":               7036,
	"MakeSet":                  7037,
	"OctInt":                   7038,
	"OctString":                7039,
	"Ord":                      7040,
	"Quote":                    7041,
	"RTrim":                    7042,
	"Repeat":                   7043,
	"Replace":                  7044,
	"Reverse":                  7045,
	"ReverseBinary":            7046,
	"Right":                    7047,
	"RightBinary":              7048,
	"Rpad":                     7049,
	"RpadBinary":               7050,
	"Space":                    7051,
	"Strcmp":                   7052,
	"Substring2Args":           7053,
	"Substring3Args":           7054,
	"SubstringBinary2Args":     7055,
	"SubstringBinary3Args":     7056,
	"SubstringIndex":           7057,
	"ToBase64":                 7058,
	"Trim1Arg":                 7059,
	"Trim2Args":                7060,
	"Trim3Args":                7061,
	"UnHex":                    7062,
	"Upper":                    7063,
}

func (x ScalarFuncSig) Enum() *ScalarFuncSig {
	p := new(ScalarFuncSig)
	*p = x
	return p
}
func (x ScalarFuncSig) String() string {
	return proto.EnumName(ScalarFuncSig_name, int32(x))
}
func (x *ScalarFuncSig) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScalarFuncSig_value, data, "ScalarFuncSig")
	if err != nil {
		return err
	}
	*x = ScalarFuncSig(value)
	return nil
}
func (ScalarFuncSig) EnumDescriptor() ([]byte, []int) { return fileDescriptorExpression, []int{1} }

type FieldType struct {
	Tp               int32  `protobuf:"varint,1,opt,name=tp" json:"tp"`
	Flag             uint32 `protobuf:"varint,2,opt,name=flag" json:"flag"`
	Flen             int32  `protobuf:"varint,3,opt,name=flen" json:"flen"`
	Decimal          int32  `protobuf:"varint,4,opt,name=decimal" json:"decimal"`
	Collate          int32  `protobuf:"varint,5,opt,name=collate" json:"collate"`
	Charset          string `protobuf:"bytes,6,opt,name=charset" json:"charset"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FieldType) Reset()                    { *m = FieldType{} }
func (m *FieldType) String() string            { return proto.CompactTextString(m) }
func (*FieldType) ProtoMessage()               {}
func (*FieldType) Descriptor() ([]byte, []int) { return fileDescriptorExpression, []int{0} }

func (m *FieldType) GetTp() int32 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *FieldType) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *FieldType) GetFlen() int32 {
	if m != nil {
		return m.Flen
	}
	return 0
}

func (m *FieldType) GetDecimal() int32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *FieldType) GetCollate() int32 {
	if m != nil {
		return m.Collate
	}
	return 0
}

func (m *FieldType) GetCharset() string {
	if m != nil {
		return m.Charset
	}
	return ""
}

// Evaluators should implement evaluation functions for every expression type.
type Expr struct {
	Tp               ExprType      `protobuf:"varint,1,opt,name=tp,enum=tipb.ExprType" json:"tp"`
	Val              []byte        `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
	Children         []*Expr       `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	Sig              ScalarFuncSig `protobuf:"varint,4,opt,name=sig,enum=tipb.ScalarFuncSig" json:"sig"`
	FieldType        *FieldType    `protobuf:"bytes,5,opt,name=field_type,json=fieldType" json:"field_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Expr) Reset()                    { *m = Expr{} }
func (m *Expr) String() string            { return proto.CompactTextString(m) }
func (*Expr) ProtoMessage()               {}
func (*Expr) Descriptor() ([]byte, []int) { return fileDescriptorExpression, []int{1} }

func (m *Expr) GetTp() ExprType {
	if m != nil {
		return m.Tp
	}
	return ExprType_Null
}

func (m *Expr) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Expr) GetChildren() []*Expr {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Expr) GetSig() ScalarFuncSig {
	if m != nil {
		return m.Sig
	}
	return ScalarFuncSig_CastIntAsInt
}

func (m *Expr) GetFieldType() *FieldType {
	if m != nil {
		return m.FieldType
	}
	return nil
}

// ByItem type for group by and order by.
type ByItem struct {
	Expr             *Expr  `protobuf:"bytes,1,opt,name=expr" json:"expr,omitempty"`
	Desc             bool   `protobuf:"varint,2,opt,name=desc" json:"desc"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ByItem) Reset()                    { *m = ByItem{} }
func (m *ByItem) String() string            { return proto.CompactTextString(m) }
func (*ByItem) ProtoMessage()               {}
func (*ByItem) Descriptor() ([]byte, []int) { return fileDescriptorExpression, []int{2} }

func (m *ByItem) GetExpr() *Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (m *ByItem) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func init() {
	proto.RegisterType((*FieldType)(nil), "tipb.FieldType")
	proto.RegisterType((*Expr)(nil), "tipb.Expr")
	proto.RegisterType((*ByItem)(nil), "tipb.ByItem")
	proto.RegisterEnum("tipb.ExprType", ExprType_name, ExprType_value)
	proto.RegisterEnum("tipb.ScalarFuncSig", ScalarFuncSig_name, ScalarFuncSig_value)
}
func (m *FieldType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Tp))
	dAtA[i] = 0x10
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Flag))
	dAtA[i] = 0x18
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Flen))
	dAtA[i] = 0x20
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Decimal))
	dAtA[i] = 0x28
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Collate))
	dAtA[i] = 0x32
	i++
	i = encodeVarintExpression(dAtA, i, uint64(len(m.Charset)))
	i += copy(dAtA[i:], m.Charset)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Expr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Tp))
	if m.Val != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExpression(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExpression(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintExpression(dAtA, i, uint64(m.Sig))
	if m.FieldType != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExpression(dAtA, i, uint64(m.FieldType.Size()))
		n1, err := m.FieldType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ByItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExpression(dAtA, i, uint64(m.Expr.Size()))
		n2, err := m.Expr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x10
	i++
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExpression(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FieldType) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExpression(uint64(m.Tp))
	n += 1 + sovExpression(uint64(m.Flag))
	n += 1 + sovExpression(uint64(m.Flen))
	n += 1 + sovExpression(uint64(m.Decimal))
	n += 1 + sovExpression(uint64(m.Collate))
	l = len(m.Charset)
	n += 1 + l + sovExpression(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Expr) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovExpression(uint64(m.Tp))
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovExpression(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovExpression(uint64(l))
		}
	}
	n += 1 + sovExpression(uint64(m.Sig))
	if m.FieldType != nil {
		l = m.FieldType.Size()
		n += 1 + l + sovExpression(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ByItem) Size() (n int) {
	var l int
	_ = l
	if m.Expr != nil {
		l = m.Expr.Size()
		n += 1 + l + sovExpression(uint64(l))
	}
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExpression(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExpression(x uint64) (n int) {
	return sovExpression(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flen", wireType)
			}
			m.Flen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collate", wireType)
			}
			m.Collate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (ExprType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Expr{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			m.Sig = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sig |= (ScalarFuncSig(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldType == nil {
				m.FieldType = &FieldType{}
			}
			if err := m.FieldType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ByItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expr == nil {
				m.Expr = &Expr{}
			}
			if err := m.Expr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExpression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpression(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpression
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpression
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExpression
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExpression
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExpression(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExpression = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpression   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("expression.proto", fileDescriptorExpression) }

var fileDescriptorExpression = []byte{
	// 4160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x5a, 0x67, 0x74, 0x5c, 0xd5,
	0xb5, 0x66, 0x6c, 0x19, 0xec, 0xeb, 0xb6, 0xb9, 0xd8, 0x68, 0xe0, 0xad, 0x67, 0xcb, 0x4c, 0xd6,
	0xb3, 0x43, 0xde, 0xd3, 0x24, 0xb6, 0x19, 0xbd, 0x1f, 0xaf, 0x8d, 0x8a, 0xe5, 0xc9, 0x92, 0x64,
	0x5b, 0x33, 0x32, 0x79, 0xbf, 0xb2, 0xae, 0x66, 0x8e, 0x46, 0x17, 0xcf, 0xdc, 0x3b, 0xdc, 0x7b,
	0x46, 0x96, 0xf2, 0xca, 0xa2, 0x57, 0x57, 0x3a, 0x04, 0x08, 0x9d, 0xd0, 0x4b, 0x42, 0xef, 0x2d,
	0xd8, 0x74, 0x82, 0x71, 0x01, 0x42, 0x88, 0x49, 0xa3, 0x24, 0x84, 0xd0, 0x6b, 0xb2, 0xf6, 0x77,
	0xce, 0xb9, 0x73, 0x47, 0xe2, 0x97, 0xef, 0xfe, 0xce, 0xde, 0xdf, 0xfe, 0xce, 0x3e, 0x7d, 0x2c,
	0x8b, 0xc4, 0x78, 0x2d, 0x10, 0x61, 0xe8, 0xfa, 0x5e, 0x7b, 0x2d, 0xf0, 0xa5, 0x6f, 0xb7, 0x48,
	0xb7, 0x36, 0x7c, 0xf8, 0x82, 0xb2, 0x5f, 0xf6, 0x01, 0xa4, 0xf9, 0x4b, 0xb5, 0x1d, 0x71, 0x47,
	0xc2, 0x9a, 0xb5, 0xca, 0x15, 0x95, 0x52, 0x61, 0xa2, 0x26, 0xec, 0x05, 0xd6, 0x34, 0x59, 0x4b,
	0x26, 0xda, 0x12, 0xcb, 0x66, 0x74, 0xb6, 0xec, 0x78, 0x7d, 0xf1, 0x01, 0x83, 0xd3, 0x64, 0xcd,
	0x4e, 0x5a, 0x2d, 0x23, 0x15, 0xa7, 0x9c, 0x9c, 0xd6, 0x96, 0x58, 0x36, 0x57, 0xe3, 0x40, 0x54,
	0x8b, 0xf0, 0x92, 0xd3, 0x63, 0x11, 0x40, 0xec, 0x45, 0xd6, 0x41, 0x25, 0x51, 0x74, 0xab, 0x4e,
	0x25, 0xd9, 0x12, 0x6b, 0x34, 0x20, 0xb7, 0x17, 0xfd, 0x4a, 0xc5, 0x91, 0x22, 0x39, 0x23, 0xde,
	0xae, 0x41, 0xb4, 0x8f, 0x3a, 0x41, 0x28, 0x64, 0xf2, 0xc0, 0xb6, 0xc4, 0xb2, 0x59, 0x51, 0xbb,
	0x02, 0x8f, 0x78, 0x2c, 0x61, 0xb5, 0xf4, 0x8c, 0xd7, 0x02, 0xfb, 0x5b, 0x91, 0xe4, 0x79, 0xcb,
	0xe7, 0xb5, 0x73, 0x4f, 0xdb, 0x19, 0xe7, 0xee, 0xc4, 0xba, 0x40, 0xd6, 0xf4, 0x31, 0xa7, 0x82,
	0x1e, 0xcc, 0x19, 0xe4, 0x4f, 0xfb, 0x9f, 0xac, 0x99, 0xc5, 0x51, 0xb7, 0x52, 0x0a, 0x20, 0x7f,
	0xfa, 0xb2, 0xd9, 0xcb, 0xad, 0x46, 0xf4, 0x60, 0xd4, 0x66, 0x7f, 0xc7, 0x9a, 0x1e, 0xba, 0x65,
	0x74, 0x62, 0xde, 0xf2, 0x43, 0x94, 0x4b, 0xbe, 0xe8, 0x54, 0x9c, 0x60, 0x55, 0xdd, 0x2b, 0xe6,
	0xdd, 0xb2, 0xce, 0xc2, 0x5e, 0x76, 0xbb, 0x65, 0x8d, 0x70, 0x31, 0x7f, 0x28, 0x27, 0x6a, 0xaa,
	0x63, 0xb3, 0x97, 0xcf, 0x57, 0x31, 0x51, 0x91, 0x07, 0x67, 0x8d, 0x98, 0xcf, 0x23, 0x3a, 0xad,
	0x03, 0x3b, 0x27, 0x72, 0x52, 0x54, 0xed, 0x45, 0x56, 0x0b, 0x8f, 0x1b, 0x3a, 0xd2, 0x2c, 0x05,
	0x38, 0x57, 0xba, 0x24, 0xc2, 0x22, 0x7a, 0x30, 0xd3, 0x54, 0x9a, 0x91, 0x23, 0xdf, 0x9b, 0x6e,
	0xcd, 0x34, 0x3d, 0xb6, 0x67, 0x5a, 0x2d, 0x03, 0xf5, 0x4a, 0x85, 0x0e, 0xb0, 0x67, 0x59, 0x33,
	0x72, 0x9e, 0xcc, 0xac, 0xa4, 0x84, 0x6d, 0x59, 0x07, 0x0e, 0xb9, 0xf8, 0x9e, 0x66, 0xcf, 0xb6,
	0x0e, 0x5a, 0x55, 0xf1, 0x1d, 0xb9, 0x62, 0x39, 0x4d, 0x8f, 0x8c, 0xcc, 0x4a, 0x6a, 0x61, 0xaf,
	0xbc, 0x0c, 0x5c, 0xaf, 0x4c, 0x33, 0x38, 0xb8, 0x73, 0x42, 0x8a, 0x90, 0x0e, 0xb4, 0xe7, 0x58,
	0x33, 0xfb, 0x27, 0xc2, 0x63, 0x2b, 0x9d, 0xae, 0x24, 0x61, 0x93, 0x35, 0x07, 0x56, 0xb7, 0x1a,
	0x46, 0x1a, 0xb1, 0x0f, 0xb6, 0xe6, 0x2a, 0xa4, 0x1e, 0x38, 0xd2, 0xf5, 0x3d, 0x2a, 0xdb, 0x73,
	0xad, 0x59, 0x80, 0x7a, 0xbc, 0x7a, 0x95, 0x46, 0x23, 0x86, 0xd5, 0x62, 0x9c, 0xdc, 0xc8, 0xca,
	0x0b, 0x49, 0xc7, 0x44, 0xae, 0x05, 0xb7, 0x2a, 0x68, 0x43, 0x64, 0x7e, 0x3f, 0xf4, 0x3d, 0xaa,
	0xd8, 0xf3, 0xac, 0x59, 0xeb, 0x9d, 0x4a, 0x5d, 0xf4, 0xb9, 0xa1, 0xa4, 0xf3, 0x13, 0x6c, 0x77,
	0xf9, 0x95, 0x7a, 0xd5, 0x1b, 0x14, 0x23, 0xb4, 0x93, 0x3b, 0x36, 0xa3, 0xcb, 0xaf, 0x7b, 0x92,
	0xee, 0x69, 0xb5, 0x67, 0x5a, 0xd3, 0xf3, 0xf5, 0x2a, 0xdd, 0x8b, 0xaf, 0xec, 0x58, 0x99, 0xee,
	0xc3, 0x57, 0xbf, 0xeb, 0xd1, 0xfd, 0xea, 0xcb, 0x19, 0xa7, 0x07, 0x5a, 0x39, 0x66, 0x95, 0x1b,
	0x84, 0x92, 0x1e, 0x6c, 0xb5, 0xc9, 0x9a, 0xdd, 0x1b, 0xf8, 0xf5, 0x5a, 0x97, 0xef, 0x15, 0x1d,
	0x49, 0x0f, 0xb5, 0xda, 0xf3, 0x2d, 0x2b, 0x5b, 0x2e, 0xff, 0xb0, 0xd3, 0x95, 0x59, 0xaf, 0x44,
	0x0f, 0xb7, 0x72, 0x4a, 0x0d, 0xac, 0x09, 0xe8, 0x91, 0xb8, 0xc3, 0x0f, 0xfc, 0x80, 0x1e, 0x55,
	0x79, 0x65, 0x89, 0x1e, 0x6b, 0xb5, 0x67, 0x73, 0x01, 0x4b, 0x25, 0x31, 0x46, 0x8f, 0x23, 0x4e,
	0x19, 0x6b, 0xfd, 0x1a, 0x3d, 0x81, 0x38, 0x65, 0xe7, 0x9d, 0x6a, 0x8d, 0x7e, 0x01, 0xef, 0xf5,
	0x4e, 0xc0, 0xad, 0x4f, 0xb6, 0xda, 0x73, 0xac, 0x83, 0xd6, 0x3b, 0x01, 0x9a, 0x76, 0xb4, 0xda,
	0x73, 0xad, 0x99, 0xeb, 0x9d, 0xc0, 0x75, 0xbc, 0xa2, 0xa0, 0x9d, 0x2a, 0x34, 0x9a, 0x70, 0xb4,
	0x6d, 0xe0, 0xc8, 0x5d, 0x9d, 0xd6, 0xdc, 0xa6, 0x29, 0xc8, 0xc3, 0xd2, 0xe5, 0x84, 0x32, 0xe7,
	0xc9, 0x6c, 0x98, 0xf3, 0x24, 0x1d, 0xc0, 0xc3, 0x12, 0x21, 0x83, 0xc2, 0xa9, 0x50, 0xc2, 0x3e,
	0xc4, 0x9a, 0x1f, 0x41, 0x7a, 0xa4, 0xa7, 0xd9, 0x0b, 0x2c, 0x8a, 0x40, 0x33, 0xa8, 0xd3, 0x9b,
	0xa2, 0x31, 0x34, 0x2d, 0xf6, 0x42, 0xeb, 0xe0, 0x86, 0xa3, 0x19, 0xeb, 0x19, 0x4d, 0x9e, 0x18,
	0xb5, 0x03, 0x0d, 0xc4, 0x59, 0x95, 0x1a, 0xcb, 0xb6, 0xad, 0x79, 0x0d, 0x08, 0x72, 0x66, 0x9b,
	0xcc, 0x0a, 0xd3, 0x7a, 0xe6, 0x98, 0x34, 0x0a, 0x35, 0x82, 0xe6, 0x36, 0x13, 0x40, 0xd1, 0x3c,
	0xfb, 0x50, 0xcb, 0x8e, 0xb9, 0x1a, 0x49, 0xf3, 0x9b, 0x7d, 0xa1, 0x89, 0x4c, 0x32, 0x4d, 0xa8,
	0x64, 0x2d, 0x30, 0xc9, 0x22, 0x14, 0xca, 0x16, 0xda, 0xad, 0xd6, 0x21, 0x4d, 0xb0, 0x16, 0x77,
	0xa8, 0x9d, 0xb4, 0x16, 0x34, 0x35, 0x18, 0x7d, 0xad, 0x53, 0x98, 0x20, 0x31, 0x69, 0x1f, 0x66,
	0x2d, 0x6c, 0x0e, 0x30, 0x2a, 0x0f, 0x9b, 0x12, 0x01, 0xa1, 0x87, 0x9b, 0x41, 0x52, 0x29, 0x95,
	0xce, 0x45, 0x46, 0xbd, 0x01, 0x21, 0x73, 0xb1, 0xe9, 0xbf, 0x41, 0xb5, 0xca, 0x36, 0x23, 0xdf,
	0xe0, 0x46, 0xe4, 0x92, 0xc9, 0x34, 0xd0, 0x78, 0x84, 0xe9, 0x54, 0xe4, 0x6e, 0x24, 0xa6, 0x26,
	0xfb, 0x43, 0xe1, 0xb7, 0xcc, 0xf0, 0x72, 0xb4, 0xd2, 0xb7, 0xcc, 0x54, 0x5c, 0x41, 0x50, 0xf7,
	0x6d, 0x13, 0xac, 0x30, 0xad, 0xed, 0x48, 0xd3, 0x6b, 0x85, 0x1a, 0x65, 0xdf, 0x69, 0x26, 0x80,
	0xae, 0x7f, 0x36, 0xdd, 0xd3, 0xae, 0x46, 0xd5, 0xbf, 0x34, 0xfb, 0x42, 0x53, 0x7b, 0x54, 0x4c,
	0xed, 0xa5, 0x74, 0x2d, 0x37, 0x14, 0x0d, 0x18, 0xda, 0x56, 0x44, 0xe3, 0x18, 0xe1, 0x5a, 0xdf,
	0xca, 0x68, 0xc0, 0xa2, 0x16, 0xa3, 0xf1, 0xa8, 0xa9, 0x64, 0xd0, 0x99, 0xb1, 0x0f, 0xb7, 0x0e,
	0x9d, 0x14, 0x62, 0xb4, 0x76, 0x4c, 0x8d, 0x81, 0xde, 0x7f, 0x35, 0x35, 0x64, 0x4b, 0x69, 0xfd,
	0x37, 0xd3, 0x2d, 0x05, 0x41, 0xe7, 0xbf, 0x9b, 0x1a, 0x2a, 0x4c, 0x6b, 0xfc, 0x0f, 0xd3, 0x59,
	0x85, 0x1a, 0x7d, 0xff, 0xd9, 0x4c, 0x00, 0x6d, 0xff, 0x65, 0xf2, 0x6b, 0x57, 0xa3, 0x2b, 0xdb,
	0xec, 0x0b, 0x4d, 0x9d, 0xbc, 0x19, 0x76, 0xf9, 0x4e, 0x45, 0x84, 0x45, 0xc1, 0x8a, 0xde, 0x6a,
	0xb3, 0x0f, 0xb6, 0xe6, 0x18, 0x04, 0x82, 0xde, 0x6e, 0xb3, 0x17, 0x58, 0xf3, 0x0d, 0x64, 0x32,
	0xbf, 0xd3, 0x66, 0x1f, 0x62, 0xcd, 0x33, 0xa8, 0x56, 0xf9, 0x6e, 0x53, 0x34, 0xd4, 0xfc, 0xa9,
	0xcd, 0x5e, 0x68, 0x51, 0x14, 0x6d, 0xc4, 0xfc, 0xb9, 0xc9, 0x13, 0x5a, 0xde, 0x6b, 0xe3, 0x03,
	0xa8, 0xaf, 0xc0, 0x32, 0x4a, 0x7c, 0x2e, 0xf5, 0x15, 0x90, 0x5f, 0xf0, 0xf9, 0xd0, 0x57, 0x68,
	0x9c, 0x3d, 0x73, 0xac, 0x99, 0x7d, 0x05, 0x9d, 0xb1, 0xac, 0x1c, 0x91, 0x6a, 0xd4, 0x9e, 0x67,
	0x59, 0x7d, 0x85, 0x28, 0x87, 0xab, 0xda, 0x40, 0x7e, 0x0c, 0xb8, 0x7b, 0x98, 0xdb, 0x03, 0xdc,
	0x03, 0x6e, 0x1f, 0xdc, 0x3d, 0x86, 0xbb, 0x06, 0xee, 0x1e, 0xcd, 0x7d, 0xac, 0x72, 0x04, 0x77,
	0x00, 0xee, 0x9e, 0x88, 0x3b, 0x54, 0x6d, 0xe0, 0x96, 0xcc, 0xdd, 0x0b, 0xdd, 0xe3, 0x0c, 0xf7,
	0x2a, 0xdd, 0x13, 0xcc, 0xdd, 0x1b, 0xe9, 0xfe, 0x11, 0x73, 0xf7, 0x1a, 0xdd, 0xff, 0xa3, 0x1c,
	0xc1, 0xfd, 0xbf, 0xcc, 0xdd, 0xdb, 0xd0, 0xfd, 0x7f, 0xaa, 0x0d, 0xdc, 0xff, 0xaf, 0x4e, 0x2b,
	0xe1, 0x48, 0x81, 0xed, 0x96, 0x3e, 0x41, 0xe1, 0x0c, 0x82, 0x44, 0x9f, 0x62, 0x80, 0x0c, 0x64,
	0xf2, 0x7d, 0x86, 0x01, 0x32, 0xa8, 0x4e, 0xfb, 0x79, 0x53, 0x34, 0xb2, 0x7f, 0xd1, 0xc6, 0x27,
	0x4f, 0x9f, 0x50, 0xdb, 0x39, 0x7d, 0xd9, 0xc6, 0x87, 0x18, 0x4c, 0x90, 0x7f, 0x85, 0x08, 0xd8,
	0x86, 0xf9, 0xeb, 0x36, 0x16, 0x05, 0x48, 0xd3, 0xfe, 0xad, 0x11, 0x04, 0xce, 0xe3, 0x96, 0xb0,
	0x47, 0xce, 0x93, 0x22, 0x18, 0x73, 0x2a, 0x4c, 0x7b, 0xfc, 0x12, 0xa6, 0x31, 0x08, 0x98, 0x4f,
	0x58, 0xc2, 0xa7, 0x72, 0x2f, 0xc6, 0xe4, 0x84, 0x04, 0x9f, 0x8c, 0xbd, 0x6a, 0x50, 0x4e, 0xc4,
	0x91, 0xdf, 0x1b, 0x8d, 0xca, 0x49, 0x09, 0x56, 0xd8, 0x6b, 0x86, 0xe5, 0x64, 0xed, 0x8b, 0x4c,
	0xa7, 0x24, 0xf8, 0xa0, 0xec, 0x6d, 0x0c, 0xcc, 0xa9, 0xba, 0x15, 0xd5, 0x3b, 0x0d, 0x97, 0x85,
	0x9e, 0x75, 0x9c, 0x62, 0x13, 0x1a, 0x7a, 0xd6, 0x21, 0xc5, 0x66, 0xa4, 0xe8, 0x59, 0x67, 0x52,
	0x6c, 0x41, 0x8a, 0x9e, 0x75, 0x3a, 0xc5, 0x56, 0xed, 0x8b, 0x14, 0xdb, 0x90, 0xa2, 0x67, 0x5d,
	0x94, 0x62, 0xbb, 0x6e, 0x45, 0x8a, 0xb3, 0x90, 0x62, 0x00, 0xbd, 0x38, 0x0f, 0x0d, 0x03, 0xaa,
	0x17, 0xea, 0xe2, 0x32, 0x10, 0xf5, 0xe2, 0x02, 0xa4, 0x18, 0x30, 0xbd, 0xb8, 0x50, 0xfb, 0x22,
	0xc5, 0x45, 0x48, 0x31, 0xd0, 0xe8, 0xc5, 0x8f, 0x75, 0x2b, 0x52, 0x5c, 0xac, 0x98, 0xea, 0x95,
	0x8a, 0xea, 0xc9, 0x65, 0xca, 0x1b, 0x36, 0x52, 0x5d, 0x9e, 0xb0, 0x6d, 0x6b, 0xae, 0x02, 0x4c,
	0xba, 0x2b, 0x12, 0x5c, 0x70, 0x85, 0xe9, 0x94, 0x57, 0xc6, 0xe2, 0x90, 0xf6, 0x2a, 0xbe, 0x1d,
	0xcc, 0xd3, 0x71, 0x26, 0xf5, 0xd5, 0x31, 0x2f, 0xa4, 0xbf, 0x06, 0xc2, 0xd7, 0x56, 0xea, 0x6a,
	0x7f, 0xda, 0x91, 0xe0, 0xb1, 0x65, 0xd3, 0xa4, 0xda, 0x99, 0xe0, 0x9b, 0x0c, 0x23, 0xac, 0xee,
	0x69, 0xa8, 0xed, 0x77, 0x3d, 0xed, 0xff, 0x0c, 0x84, 0xc0, 0x36, 0x01, 0xcf, 0x82, 0x11, 0x10,
	0x47, 0x3c, 0xaf, 0x3c, 0xea, 0x15, 0xe9, 0xd6, 0x2a, 0x13, 0x08, 0x7a, 0x21, 0xc1, 0x53, 0xda,
	0x40, 0x26, 0xee, 0x45, 0xa4, 0x36, 0x28, 0x87, 0xfe, 0x12, 0x62, 0xbb, 0xdd, 0x31, 0xb7, 0xa4,
	0x36, 0xab, 0x97, 0x50, 0x0a, 0x05, 0x98, 0xb0, 0x5d, 0x09, 0x3d, 0xf7, 0x14, 0xcc, 0x71, 0x2f,
	0x27, 0x78, 0x57, 0x8a, 0x20, 0xe3, 0xb9, 0x1b, 0x3d, 0xe9, 0xf7, 0x4b, 0xe0, 0xda, 0x03, 0xf2,
	0x7e, 0xbf, 0x64, 0x9a, 0xf7, 0x62, 0x54, 0xfa, 0xfd, 0x12, 0x53, 0xec, 0x4b, 0xd8, 0x49, 0xeb,
	0x90, 0x98, 0x98, 0x21, 0x2f, 0x74, 0xcb, 0x9e, 0x28, 0xd1, 0x2b, 0x70, 0xcb, 0x0e, 0xa3, 0x73,
	0x77, 0x10, 0x53, 0x66, 0x87, 0xc3, 0x21, 0xb6, 0xee, 0x34, 0x16, 0x12, 0xdc, 0x45, 0xb8, 0x58,
	0x0e, 0x47, 0x85, 0xb9, 0x9b, 0xb0, 0x2b, 0x0a, 0x97, 0xd7, 0x4c, 0xc1, 0xef, 0x16, 0x45, 0xba,
	0xa7, 0x19, 0x62, 0x92, 0x7b, 0x23, 0xa8, 0x5b, 0x14, 0x15, 0x74, 0x5f, 0x33, 0xc4, 0x81, 0xf7,
	0x13, 0x17, 0x99, 0x21, 0xe4, 0x7a, 0x80, 0xb8, 0x30, 0xab, 0x2a, 0xbe, 0x1f, 0x44, 0xdc, 0x0f,
	0x4e, 0xc2, 0x98, 0xe9, 0xa1, 0x06, 0x16, 0xb1, 0x3f, 0x3c, 0x09, 0xe3, 0xd8, 0x47, 0x88, 0x87,
	0x19, 0x18, 0xf8, 0x1f, 0x85, 0x3d, 0xe8, 0xd7, 0x3d, 0x55, 0xbc, 0x9d, 0x48, 0x0f, 0x9b, 0x29,
	0x9e, 0x6a, 0x98, 0x1c, 0xfd, 0x34, 0xd9, 0x87, 0x5a, 0x07, 0xc3, 0x3c, 0xda, 0x95, 0xa3, 0xab,
	0x02, 0xa7, 0xa8, 0x26, 0x0b, 0xf1, 0xb8, 0x34, 0xe1, 0x1c, 0xfd, 0xec, 0x54, 0x98, 0x59, 0x9e,
	0x43, 0x35, 0xfb, 0xfc, 0xf2, 0xf7, 0xb2, 0x41, 0x99, 0x5e, 0x42, 0x8a, 0x3e, 0xbf, 0xbc, 0x3c,
	0x1b, 0x94, 0x43, 0xda, 0x45, 0xf6, 0x2c, 0xab, 0x85, 0x4d, 0x7a, 0x99, 0x78, 0x8d, 0xb2, 0xdf,
	0x77, 0x69, 0x37, 0xe0, 0x41, 0xc7, 0x2b, 0xd1, 0x1e, 0x14, 0x8d, 0x3f, 0x99, 0x34, 0x2f, 0x44,
	0x89, 0xf6, 0x12, 0xdf, 0xec, 0xd7, 0xfa, 0x1b, 0x69, 0x1f, 0xfc, 0xba, 0x7c, 0x6f, 0x8c, 0x5e,
	0x41, 0x78, 0xd7, 0x60, 0xd7, 0x8a, 0xe5, 0xf4, 0x2a, 0xe0, 0xbc, 0x5b, 0xf6, 0xe8, 0x35, 0xf5,
	0x79, 0x6c, 0x20, 0xe9, 0x57, 0xf8, 0xcc, 0x16, 0xfd, 0x90, 0x5e, 0x57, 0x9f, 0xa1, 0xeb, 0xd1,
	0xaf, 0x21, 0x28, 0x2b, 0x1d, 0x0f, 0xfa, 0xde, 0x40, 0x85, 0xd8, 0x54, 0x02, 0x7f, 0x83, 0x5c,
	0x5d, 0x7e, 0x48, 0xfb, 0xf5, 0x97, 0xa4, 0x37, 0xd1, 0xa3, 0x6e, 0x51, 0x0e, 0x84, 0x08, 0xe9,
	0xb7, 0xc0, 0x7b, 0xc6, 0x6b, 0xf4, 0x3b, 0xb2, 0x0f, 0xb2, 0xa6, 0xad, 0xcd, 0xd1, 0xef, 0xe1,
	0x30, 0xe8, 0x94, 0x5c, 0xc7, 0x0b, 0xe9, 0x0f, 0x70, 0xc8, 0xbb, 0x1e, 0xfd, 0x11, 0x5f, 0x05,
	0xc7, 0xa3, 0xb7, 0x88, 0x17, 0x49, 0x21, 0xa8, 0xf3, 0xe3, 0x06, 0x93, 0xfd, 0x6d, 0xf4, 0xd3,
	0x20, 0xa8, 0xf3, 0x3b, 0x7c, 0x37, 0x9e, 0x6f, 0x20, 0x33, 0xfd, 0xde, 0xc5, 0x7c, 0xec, 0xf3,
	0xcb, 0x6e, 0xd1, 0xa9, 0xf0, 0x4b, 0xe8, 0x92, 0x24, 0xf6, 0x75, 0x05, 0xac, 0x09, 0xe8, 0xd2,
	0x64, 0xcc, 0x81, 0x5f, 0x42, 0x3f, 0x49, 0x72, 0x17, 0x87, 0x3c, 0x27, 0x98, 0x18, 0xf0, 0x25,
	0x5d, 0x96, 0xe4, 0x89, 0x02, 0x33, 0x5a, 0xdd, 0x57, 0x25, 0x79, 0x93, 0x69, 0x60, 0xc8, 0x7f,
	0x75, 0x92, 0xc7, 0xbf, 0x01, 0x1a, 0x05, 0xd7, 0x80, 0x40, 0x5b, 0xb9, 0x10, 0x8f, 0xda, 0x6b,
	0x41, 0x60, 0xf6, 0x27, 0x0d, 0xfe, 0x14, 0x4a, 0x98, 0x4b, 0x03, 0xd7, 0x25, 0xb9, 0x93, 0x6a,
	0xa7, 0xd3, 0xd0, 0xf5, 0xf0, 0xe1, 0x9d, 0x4e, 0x03, 0x37, 0xa0, 0x3b, 0x39, 0x4f, 0x6a, 0xfb,
	0x46, 0x38, 0xf0, 0x26, 0xa7, 0x81, 0x9b, 0xe0, 0xa0, 0x9e, 0x81, 0x79, 0xb7, 0x4c, 0x37, 0xa3,
	0x7b, 0x78, 0x05, 0xb2, 0x79, 0x8b, 0x69, 0xfe, 0x81, 0x0f, 0xfb, 0x56, 0x63, 0x0f, 0x88, 0x32,
	0xdb, 0xb7, 0x35, 0xf8, 0x0b, 0x41, 0x5d, 0xd0, 0xed, 0x31, 0x91, 0x00, 0x7e, 0xd6, 0xdc, 0x3d,
	0x60, 0x3f, 0x87, 0x13, 0x82, 0x56, 0x39, 0x95, 0x50, 0xd0, 0x1d, 0x49, 0x1e, 0x40, 0x15, 0xa5,
	0x90, 0x3b, 0x55, 0x05, 0x4c, 0x98, 0x02, 0xef, 0x52, 0x63, 0x23, 0x46, 0x64, 0x7e, 0xd4, 0x1d,
	0x91, 0x74, 0x8f, 0x4a, 0xe6, 0x96, 0x47, 0x35, 0x70, 0xaf, 0x11, 0xaf, 0x1e, 0xcb, 0x77, 0x83,
	0xa4, 0x57, 0xc8, 0xb5, 0x4e, 0xe0, 0x54, 0xf5, 0x91, 0x70, 0x5f, 0x12, 0xa7, 0xa5, 0x90, 0xeb,
	0x9d, 0x80, 0xee, 0x87, 0x31, 0xe8, 0x6f, 0xe4, 0xbe, 0x3c, 0x00, 0x23, 0xaf, 0x5a, 0x1e, 0x84,
	0x6e, 0x3c, 0xca, 0xa3, 0xa1, 0x7a, 0x08, 0x7c, 0x1a, 0x33, 0x87, 0xc7, 0xc3, 0xc9, 0xe8, 0xf5,
	0x8e, 0xc1, 0x7f, 0x04, 0xa2, 0x94, 0xfd, 0xfd, 0xfc, 0x9a, 0x01, 0x7a, 0x34, 0x06, 0x60, 0x26,
	0x3c, 0x86, 0x71, 0x53, 0x80, 0x16, 0xf5, 0x78, 0xcc, 0x07, 0xe7, 0xd4, 0x13, 0x49, 0x5e, 0x80,
	0x39, 0x8f, 0x19, 0x2f, 0x5f, 0xcc, 0xba, 0x72, 0x1e, 0x82, 0xaf, 0x58, 0xac, 0x0a, 0x6e, 0x34,
	0x5d, 0xb9, 0x98, 0xbb, 0x9c, 0xf3, 0x34, 0xd1, 0x55, 0xda, 0x17, 0x24, 0x57, 0x2f, 0x56, 0x75,
	0x8e, 0xb4, 0x5e, 0xa3, 0x5b, 0x71, 0xc8, 0x5d, 0xab, 0x98, 0x46, 0x78, 0x1a, 0x70, 0x9a, 0x93,
	0xdb, 0xe0, 0x0d, 0x1b, 0xa9, 0x4e, 0x69, 0xe3, 0x12, 0x28, 0xc0, 0xa4, 0x3b, 0x15, 0x77, 0x23,
	0x85, 0xe9, 0x94, 0xa7, 0xc5, 0xe2, 0x90, 0xf6, 0x74, 0x5c, 0xc3, 0x74, 0x9c, 0x49, 0x7d, 0x46,
	0x1b, 0x3a, 0x34, 0xc2, 0x99, 0xce, 0x6c, 0x83, 0x8c, 0x11, 0x64, 0xd9, 0xd4, 0xa6, 0x64, 0x98,
	0x0c, 0x9b, 0x71, 0x39, 0xcb, 0x8d, 0x68, 0xf6, 0x2d, 0xda, 0x17, 0xcc, 0x5b, 0x75, 0xaa, 0x88,
	0x75, 0x5b, 0x2c, 0x37, 0x3a, 0xb5, 0x5d, 0xbb, 0xab, 0x8b, 0x0a, 0x6e, 0x6d, 0x5d, 0x4e, 0x28,
	0x8e, 0x1e, 0x15, 0x28, 0xe5, 0x5f, 0xd4, 0x1d, 0x5c, 0x23, 0xc8, 0xff, 0xbe, 0xba, 0xeb, 0x6b,
	0xc8, 0xa8, 0xf8, 0xab, 0xba, 0xeb, 0x6b, 0x54, 0x6b, 0xf9, 0xa0, 0x29, 0x1a, 0x8a, 0x3e, 0x54,
	0x77, 0x7d, 0x13, 0x6d, 0x74, 0x7d, 0xd4, 0xe4, 0x09, 0x31, 0x1f, 0x43, 0x6a, 0x16, 0xb3, 0x29,
	0x98, 0xa8, 0x49, 0x3a, 0x37, 0xa5, 0x81, 0x1e, 0x4f, 0x01, 0xe7, 0xa5, 0x70, 0x7c, 0xf9, 0x55,
	0xfc, 0xaa, 0x49, 0xe7, 0xa7, 0xf0, 0x63, 0x4e, 0xf7, 0x51, 0x74, 0x01, 0x1a, 0xd6, 0x3a, 0x61,
	0xb8, 0xd1, 0x0f, 0x4a, 0x74, 0x61, 0x0a, 0xab, 0xc5, 0xf1, 0x4a, 0x7e, 0x55, 0xfd, 0x78, 0x75,
	0x51, 0x0a, 0xfb, 0xf2, 0xea, 0xec, 0xf7, 0xe8, 0xc7, 0xe6, 0x73, 0x39, 0x5d, 0x8c, 0x04, 0x43,
	0x5e, 0xd1, 0x30, 0x5e, 0x92, 0xb2, 0x5b, 0x2d, 0xbb, 0x01, 0x88, 0x52, 0x9f, 0xf0, 0xca, 0x72,
	0x94, 0x2e, 0x45, 0x82, 0x6e, 0x47, 0x3a, 0xc3, 0x4e, 0x28, 0xe8, 0xba, 0x14, 0x0e, 0x3a, 0x1c,
	0x6c, 0xfe, 0xc6, 0x90, 0xae, 0x47, 0xc2, 0xae, 0x7a, 0x10, 0x08, 0x4f, 0x0e, 0x85, 0x22, 0xa0,
	0x1b, 0x90, 0x05, 0x9f, 0x37, 0xa6, 0xd4, 0xb3, 0xc6, 0xf3, 0x44, 0x11, 0xbb, 0x55, 0x37, 0xdd,
	0x04, 0xa8, 0x0f, 0xd7, 0xeb, 0x50, 0x04, 0x32, 0xd7, 0x4d, 0x37, 0x23, 0x75, 0x1c, 0xe2, 0x03,
	0x28, 0xd7, 0x4d, 0xb7, 0xa4, 0xf0, 0x9b, 0x90, 0x08, 0x42, 0xae, 0xdb, 0xad, 0xc8, 0x54, 0x70,
	0xbb, 0x3b, 0x0d, 0x72, 0x5b, 0x4a, 0x9d, 0xa2, 0x1b, 0xd5, 0x92, 0xbe, 0x3d, 0xc5, 0xd3, 0x28,
	0x5f, 0x11, 0xa2, 0x46, 0x4f, 0xa6, 0xd4, 0x71, 0x57, 0xdc, 0x40, 0x3b, 0x54, 0x49, 0x44, 0x45,
	0x38, 0xa1, 0x00, 0xb2, 0x93, 0x5f, 0xf5, 0xf3, 0xcd, 0x8f, 0x0e, 0xde, 0x04, 0xd6, 0x16, 0x3d,
	0x95, 0xe2, 0xe1, 0x8a, 0x5e, 0xa9, 0x06, 0x7e, 0x3a, 0xa5, 0x2f, 0xef, 0x11, 0xf2, 0x0c, 0xba,
	0xc0, 0xeb, 0x37, 0x82, 0x9e, 0x05, 0x84, 0x1f, 0x5b, 0x0c, 0xf4, 0x5c, 0x8a, 0x67, 0x89, 0xfe,
	0xd9, 0xc0, 0x80, 0xcf, 0xc3, 0x0f, 0xaf, 0x76, 0x03, 0xbd, 0x90, 0x52, 0x8b, 0x54, 0xc8, 0xac,
	0xf4, 0x3d, 0x7a, 0x31, 0x32, 0x07, 0xa4, 0xef, 0xd0, 0x2f, 0x53, 0x6a, 0x49, 0x0b, 0x99, 0x41,
	0xf3, 0x4b, 0x0d, 0x1b, 0xed, 0xbb, 0x52, 0x98, 0xd3, 0x61, 0x6e, 0xed, 0xd8, 0x4a, 0x7a, 0x19,
	0xec, 0xca, 0xe0, 0xa9, 0xe2, 0x48, 0xda, 0x1d, 0x83, 0xfa, 0x9d, 0x5a, 0x4d, 0x94, 0x68, 0x4f,
	0x23, 0x24, 0x43, 0x7b, 0xd5, 0x60, 0x0d, 0xe5, 0xba, 0x69, 0x1f, 0xaa, 0xdd, 0xe7, 0x6e, 0x10,
	0xbc, 0xe1, 0xed, 0x5e, 0xc2, 0x35, 0x1a, 0x14, 0x65, 0x31, 0x5e, 0xeb, 0x74, 0xf9, 0x64, 0x62,
	0x74, 0xcf, 0x12, 0x5c, 0x6b, 0x80, 0xb2, 0xbd, 0x77, 0x09, 0x77, 0x92, 0xe7, 0x70, 0xcf, 0xb8,
	0x0c, 0x9c, 0xa2, 0x64, 0xf0, 0xf4, 0xa5, 0x06, 0x1c, 0xf2, 0x8e, 0xad, 0xfb, 0x12, 0x7c, 0x67,
	0x2c, 0xe5, 0x32, 0x32, 0x58, 0x98, 0xa8, 0x01, 0x39, 0x73, 0xa9, 0x39, 0x6e, 0xf2, 0x02, 0x71,
	0x9b, 0x96, 0xf2, 0x9e, 0x82, 0xf3, 0x07, 0xf3, 0x80, 0xb1, 0xcd, 0x11, 0xd7, 0xa0, 0xa8, 0x55,
	0x9c, 0x22, 0x22, 0xb7, 0x44, 0x8e, 0x83, 0xa2, 0xea, 0x8f, 0x01, 0xdb, 0xba, 0x14, 0x83, 0x12,
	0xfa, 0x5e, 0xbf, 0x08, 0xca, 0x80, 0xb6, 0x45, 0x6e, 0x6b, 0x86, 0x8f, 0x11, 0x4a, 0xdb, 0xf6,
	0xc8, 0x2d, 0x1b, 0x04, 0x0e, 0xfa, 0x74, 0x56, 0x04, 0xad, 0x77, 0x2a, 0x2e, 0x0e, 0xba, 0xb3,
	0x97, 0x72, 0xe7, 0x19, 0xea, 0xf2, 0x3d, 0xe9, 0xb8, 0x5e, 0xc8, 0xe8, 0x39, 0xe0, 0xeb, 0x76,
	0xa4, 0x58, 0xe5, 0x07, 0x55, 0x07, 0x7c, 0xef, 0xb7, 0x73, 0xb7, 0x18, 0xeb, 0x73, 0xa5, 0x08,
	0x78, 0x77, 0x68, 0xd7, 0xeb, 0x45, 0x74, 0xbb, 0x23, 0x23, 0xf4, 0x41, 0xbb, 0x79, 0x78, 0xf0,
	0xa8, 0x03, 0xfa, 0xb0, 0x9d, 0xe7, 0x3b, 0x9b, 0x6a, 0x76, 0x44, 0x0d, 0x1f, 0xb5, 0xdb, 0xff,
	0x60, 0x1d, 0x6a, 0x66, 0xe0, 0xa4, 0xc6, 0x8f, 0xdb, 0xed, 0x7f, 0xb4, 0x92, 0xa6, 0xd1, 0xfc,
	0x1b, 0x35, 0x7f, 0x02, 0xd2, 0x46, 0x4c, 0xd4, 0xf0, 0x29, 0x48, 0x55, 0xc3, 0x94, 0xa8, 0xcf,
	0xda, 0xed, 0xc3, 0xac, 0x05, 0xaa, 0x71, 0x52, 0xbe, 0xcf, 0xdb, 0x79, 0x39, 0x18, 0xaa, 0x08,
	0xfe, 0xa2, 0x9d, 0x27, 0x0c, 0x77, 0x8f, 0xbe, 0xc4, 0xe7, 0x6a, 0xbf, 0x1e, 0xd0, 0x57, 0xed,
	0x78, 0x0a, 0xb8, 0x5e, 0x5d, 0x0a, 0xfa, 0xba, 0x5d, 0x9d, 0x95, 0x45, 0xdf, 0x2b, 0xd1, 0xdf,
	0x50, 0xa0, 0x7e, 0xb7, 0x18, 0xf8, 0x1a, 0x39, 0x2e, 0xcd, 0xcb, 0xb4, 0xdf, 0xf7, 0xe4, 0x28,
	0x1d, 0x9f, 0xc6, 0xeb, 0x88, 0xbf, 0x07, 0x9c, 0xaa, 0xa0, 0x13, 0xd2, 0x78, 0x6d, 0xf9, 0x1b,
	0x79, 0x07, 0xe0, 0x5b, 0xe2, 0x89, 0x69, 0xbc, 0xe5, 0x14, 0xe0, 0xd7, 0x25, 0x63, 0x27, 0xa5,
	0x71, 0x2b, 0x74, 0x26, 0x10, 0x72, 0x32, 0x42, 0xba, 0x9d, 0x89, 0x35, 0x23, 0x8a, 0xf3, 0x14,
	0x70, 0x02, 0x38, 0x5a, 0x88, 0x0d, 0x74, 0x6a, 0xc3, 0xfe, 0x6f, 0xe1, 0x04, 0x74, 0x5a, 0x9a,
	0x47, 0x84, 0x9b, 0x98, 0xb3, 0xdf, 0x2f, 0x09, 0x3a, 0x3d, 0xcd, 0xe3, 0x6d, 0x20, 0xbf, 0x2e,
	0x81, 0x9e, 0x81, 0x3c, 0x8c, 0x76, 0x3b, 0x13, 0x74, 0x26, 0xf2, 0xb0, 0xa5, 0x79, 0x36, 0xa5,
	0xb9, 0xfb, 0xf8, 0xdc, 0x9c, 0xe6, 0x5a, 0xf1, 0x67, 0x13, 0xed, 0x96, 0x34, 0xbf, 0x89, 0xe2,
	0xb0, 0xa1, 0xde, 0x0a, 0x4d, 0xbd, 0x42, 0xaa, 0x99, 0x44, 0xdb, 0xd2, 0xd8, 0x2c, 0x26, 0x42,
	0x2e, 0x2c, 0xee, 0xf4, 0x61, 0x8d, 0xb6, 0xa7, 0xf9, 0x56, 0x18, 0x03, 0xfd, 0xba, 0x64, 0xfc,
	0xac, 0x74, 0x6c, 0xcb, 0xc5, 0x48, 0x9c, 0x0d, 0xfd, 0x1a, 0xe1, 0xa1, 0xfa, 0x2e, 0xd7, 0xe9,
	0x9c, 0xc9, 0x28, 0xee, 0xdd, 0xe7, 0x42, 0x36, 0x0e, 0xa8, 0xf3, 0xd2, 0x6a, 0x47, 0xad, 0x46,
	0x93, 0xf7, 0x7c, 0x74, 0x79, 0xa8, 0xd0, 0x05, 0xda, 0x0b, 0xa0, 0x7f, 0xa8, 0xd0, 0xc5, 0x2e,
	0xa1, 0x74, 0xaa, 0x35, 0x33, 0x2c, 0x17, 0xa6, 0x79, 0x52, 0x4d, 0x6e, 0xd1, 0xe3, 0x73, 0x11,
	0x1a, 0xb3, 0xa5, 0x12, 0x93, 0x48, 0xec, 0x75, 0xa5, 0xc6, 0x53, 0x3e, 0xcd, 0x33, 0xae, 0xb9,
	0x51, 0x1f, 0xa1, 0x17, 0x23, 0x5d, 0xb6, 0x54, 0xc2, 0x64, 0x73, 0x24, 0x26, 0x1d, 0x2e, 0xa2,
	0x97, 0x98, 0x20, 0xb3, 0x9d, 0x36, 0xf8, 0x2e, 0x4d, 0xf3, 0xbc, 0x8f, 0x37, 0x69, 0xb6, 0x9f,
	0xa0, 0x7a, 0x9a, 0x4d, 0x61, 0xe0, 0xba, 0x2c, 0x52, 0x17, 0xed, 0xf4, 0x0d, 0xb6, 0xcb, 0x23,
	0x75, 0x8d, 0x46, 0xcd, 0x77, 0x45, 0x93, 0x3a, 0xdd, 0x0c, 0xc6, 0x2b, 0x8d, 0x04, 0xd6, 0x1c,
	0x67, 0xbb, 0x0a, 0xd3, 0xa2, 0xd1, 0xa0, 0x99, 0xae, 0x86, 0x82, 0x7c, 0x7d, 0xf8, 0x9b, 0xea,
	0x73, 0x0d, 0x14, 0x34, 0x37, 0xea, 0xb8, 0x6b, 0xa1, 0x20, 0x5f, 0x1f, 0x9e, 0x52, 0x9f, 0x9f,
	0x9a, 0xa0, 0xa9, 0xf5, 0xb9, 0x0e, 0xe2, 0xe2, 0x4d, 0x9a, 0xed, 0x7a, 0x35, 0xbb, 0x14, 0x5b,
	0xac, 0x3e, 0x37, 0x44, 0xea, 0xbe, 0xa1, 0x3e, 0x37, 0x46, 0xea, 0xa6, 0xd4, 0xe7, 0xa6, 0x26,
	0x75, 0xf1, 0xfa, 0xdc, 0x6c, 0x24, 0x4c, 0xae, 0xcf, 0x2d, 0xa8, 0x4f, 0xa3, 0x41, 0x33, 0xdd,
	0x8a, 0x24, 0x43, 0x9e, 0x3b, 0x1e, 0xcd, 0x2e, 0x3d, 0x89, 0xe9, 0x36, 0x44, 0x34, 0x35, 0xf1,
	0xd5, 0xed, 0xf6, 0xa9, 0x30, 0x3f, 0x88, 0x7f, 0x96, 0x56, 0xff, 0x59, 0xe6, 0x8d, 0x89, 0x40,
	0x16, 0x7e, 0x44, 0x3f, 0x4f, 0xe3, 0x87, 0x16, 0x67, 0x03, 0xaa, 0x47, 0x77, 0x44, 0x26, 0x56,
	0xc3, 0x9d, 0xf0, 0x5e, 0x2b, 0x02, 0xd7, 0x2f, 0x65, 0x4b, 0x25, 0xba, 0x0b, 0x0b, 0x5e, 0xd9,
	0xd8, 0xfa, 0xee, 0xc6, 0xe2, 0x58, 0x57, 0x77, 0x02, 0x29, 0x02, 0xba, 0x07, 0xee, 0x79, 0x51,
	0x2c, 0xf8, 0x08, 0xbf, 0x17, 0x36, 0xf6, 0x4a, 0xde, 0xe9, 0xe8, 0xbe, 0xb4, 0x39, 0xea, 0xa1,
	0x87, 0x19, 0xef, 0x4f, 0xf3, 0xc6, 0x58, 0xf0, 0xbb, 0x9d, 0x89, 0x90, 0x1e, 0x50, 0xfe, 0x7a,
	0x57, 0x0c, 0xe9, 0x41, 0x6c, 0x01, 0x7a, 0x49, 0x99, 0x75, 0xf6, 0x10, 0x06, 0x29, 0x06, 0xea,
	0x25, 0xf6, 0x30, 0xb6, 0xc5, 0x88, 0x1c, 0x0b, 0xfb, 0x11, 0x10, 0x44, 0x98, 0x7a, 0x55, 0x3f,
	0x9a, 0x36, 0xbb, 0x38, 0x40, 0xb3, 0xce, 0x1f, 0x43, 0x57, 0xf8, 0xca, 0xc5, 0x5b, 0xdb, 0xe3,
	0x60, 0xcb, 0xcb, 0x80, 0xa5, 0x49, 0x55, 0x9c, 0x27, 0xd4, 0xf4, 0x88, 0x63, 0x3c, 0x1b, 0xe9,
	0x17, 0x93, 0x70, 0x33, 0x96, 0x4f, 0x22, 0xd1, 0xaa, 0xc0, 0xaf, 0x9a, 0x61, 0x80, 0xa8, 0x1d,
	0x53, 0x60, 0xd6, 0x45, 0x3b, 0xb1, 0x35, 0xe9, 0x3b, 0x43, 0xc4, 0xfd, 0x54, 0x13, 0x6a, 0x98,
	0x9f, 0x36, 0x0b, 0x8f, 0xfd, 0xe2, 0x47, 0x15, 0x3d, 0x13, 0x5f, 0x5f, 0xfa, 0xad, 0xeb, 0x49,
	0x7a, 0x36, 0xbe, 0xc5, 0xe8, 0x83, 0x4f, 0x5f, 0xdd, 0x9f, 0x8b, 0x47, 0xe4, 0x3c, 0xf3, 0x83,
	0xed, 0xf3, 0x28, 0x40, 0x03, 0x66, 0x96, 0x17, 0xd2, 0xf6, 0xe1, 0xd6, 0x42, 0x8d, 0x19, 0x89,
	0xda, 0xff, 0xc5, 0xf8, 0x8a, 0x37, 0x6d, 0xf8, 0x01, 0xce, 0x2c, 0x82, 0x29, 0x5a, 0x5f, 0x8a,
	0xcf, 0xf5, 0x86, 0xd6, 0x5d, 0xf1, 0xe5, 0xde, 0xac, 0xf5, 0xe5, 0x78, 0x44, 0x43, 0xeb, 0x6e,
	0x35, 0x58, 0x11, 0xcc, 0x2c, 0x7b, 0xa0, 0x55, 0x63, 0x93, 0xb4, 0xee, 0x8d, 0xaf, 0xbe, 0xb8,
	0xd6, 0x7d, 0x98, 0xfe, 0x3c, 0x34, 0x98, 0x8f, 0xaf, 0xa4, 0xcd, 0xcf, 0x03, 0xfa, 0x4c, 0x7a,
	0xb5, 0x79, 0x8e, 0x61, 0x09, 0xbc, 0x96, 0xd6, 0x4f, 0x7c, 0xfd, 0x38, 0xd8, 0x97, 0xe1, 0x77,
	0x48, 0xa7, 0xeb, 0xd1, 0x2b, 0x19, 0x3e, 0xd5, 0xb3, 0xf9, 0xae, 0x5c, 0x8e, 0x5e, 0xcd, 0xe0,
	0xc7, 0xa2, 0x51, 0x27, 0xa0, 0xd7, 0x32, 0xcc, 0xca, 0x9f, 0x3a, 0xe2, 0x57, 0x19, 0x5e, 0x03,
	0xfa, 0xff, 0x9a, 0x5f, 0xcf, 0xa8, 0x57, 0x0d, 0x1b, 0x47, 0xe7, 0xe9, 0xd7, 0x19, 0x9e, 0x95,
	0x7a, 0xbd, 0xd2, 0x1b, 0xe0, 0xee, 0xa9, 0x48, 0xfa, 0x4d, 0x86, 0x95, 0xf4, 0x8c, 0xd7, 0xfc,
	0x40, 0xe6, 0x85, 0x5c, 0xc1, 0x33, 0x68, 0x7f, 0x33, 0xb6, 0x92, 0xb1, 0x37, 0x9b, 0xb1, 0xa3,
	0x18, 0xfb, 0x2d, 0x52, 0xe0, 0xef, 0x0e, 0xb8, 0xd3, 0xbf, 0xcb, 0xe0, 0xf9, 0xc2, 0x26, 0x5e,
	0x78, 0xbf, 0xcf, 0xf0, 0x11, 0x08, 0x5b, 0xd7, 0xeb, 0x0f, 0xda, 0xc3, 0x2b, 0xe5, 0xf8, 0x62,
	0x4a, 0x7f, 0x84, 0x60, 0x5d, 0x93, 0xb7, 0x32, 0x98, 0xce, 0x30, 0x78, 0x39, 0xf6, 0xf9, 0x45,
	0xa7, 0x22, 0xe8, 0x6d, 0xf4, 0x92, 0x4b, 0xd9, 0xe9, 0x84, 0x22, 0xb3, 0x92, 0xde, 0x01, 0xc9,
	0x6a, 0x31, 0xce, 0xef, 0x86, 0xa0, 0x4c, 0xef, 0x1a, 0x3b, 0x2f, 0x03, 0xb6, 0xff, 0x94, 0x51,
	0x8f, 0x6d, 0xbe, 0xe6, 0xd2, 0x9f, 0x33, 0xea, 0x07, 0x59, 0x36, 0xd4, 0x55, 0x9b, 0xde, 0xcb,
	0xa8, 0x27, 0x7e, 0x28, 0x03, 0xfa, 0x4b, 0x46, 0x3d, 0x40, 0x42, 0x19, 0xe8, 0xd6, 0xf7, 0xd1,
	0xda, 0x57, 0x08, 0xdc, 0x2a, 0xfd, 0x15, 0xb5, 0xee, 0x13, 0x23, 0x92, 0x3e, 0x80, 0x0a, 0xfe,
	0xd4, 0x7e, 0x1f, 0x22, 0x8b, 0x2e, 0xfc, 0x47, 0xa0, 0x61, 0xc1, 0x52, 0xa8, 0xbd, 0xe1, 0xe3,
	0x18, 0xb2, 0x02, 0xc8, 0x27, 0x19, 0x5e, 0xdc, 0x0a, 0x51, 0x1c, 0xca, 0xf3, 0xd3, 0x29, 0xb8,
	0xf2, 0xff, 0x4c, 0x09, 0xf1, 0x37, 0x8a, 0x80, 0x3e, 0x57, 0x42, 0x6a, 0x4e, 0x89, 0xbe, 0x50,
	0x42, 0x6a, 0x4e, 0x49, 0x0b, 0xf9, 0x12, 0x03, 0xcb, 0x3b, 0x2d, 0x57, 0xf4, 0x2b, 0xc8, 0x5a,
	0x53, 0xc4, 0xd4, 0xfd, 0x1a, 0x95, 0x59, 0x53, 0x8c, 0xfe, 0xef, 0x04, 0xa3, 0xbe, 0x26, 0x28,
	0xd1, 0x71, 0x1d, 0x4c, 0xbe, 0x8e, 0x1f, 0x10, 0x74, 0x3c, 0xbe, 0x07, 0xd1, 0xe3, 0x13, 0x3a,
	0xf0, 0xbb, 0x8c, 0xa8, 0x09, 0x47, 0xd2, 0x89, 0x1d, 0xf8, 0x01, 0x50, 0xbd, 0x0d, 0xe8, 0x24,
	0x6d, 0x8d, 0x89, 0x20, 0x14, 0x74, 0x72, 0x07, 0x4f, 0x07, 0x6d, 0x69, 0x25, 0xa7, 0x28, 0x22,
	0xb7, 0x3c, 0x2a, 0xe9, 0xd4, 0x0e, 0x3c, 0x0c, 0xf9, 0x5b, 0xb7, 0x9e, 0xd6, 0x81, 0x5f, 0x43,
	0xb9, 0x0f, 0xa7, 0x77, 0xe0, 0xf7, 0xa3, 0x46, 0x1f, 0xce, 0x40, 0x64, 0xbe, 0xc6, 0x79, 0xce,
	0xec, 0x50, 0x7f, 0xe7, 0x10, 0x14, 0xab, 0x35, 0xda, 0xd4, 0x81, 0xbb, 0x5b, 0x7d, 0x38, 0x44,
	0x0f, 0x54, 0xc5, 0x36, 0x37, 0x83, 0xaa, 0x5c, 0x5b, 0x3a, 0xf4, 0x62, 0x57, 0x60, 0xbc, 0xc2,
	0x5b, 0xbf, 0xa9, 0x49, 0x45, 0x6d, 0x6b, 0xa6, 0xca, 0x79, 0x25, 0x31, 0x4e, 0xdb, 0x3b, 0x78,
	0x5a, 0x17, 0x7c, 0x3d, 0xdf, 0xce, 0x52, 0x66, 0xe0, 0x56, 0xb1, 0xeb, 0x9e, 0xdd, 0x81, 0xb3,
	0x25, 0x70, 0xab, 0x8a, 0xfd, 0x9c, 0xc8, 0x56, 0x94, 0xe7, 0xa2, 0x2f, 0x43, 0xde, 0x6a, 0x31,
	0x4e, 0xe7, 0xa9, 0xef, 0x5a, 0x4d, 0x04, 0x74, 0x7e, 0x47, 0xe7, 0xb7, 0x77, 0xec, 0x5f, 0x94,
	0x78, 0x61, 0xff, 0xa2, 0xc4, 0x1b, 0xfb, 0x17, 0x25, 0x2e, 0x78, 0x73, 0xd1, 0x01, 0xd6, 0xc2,
	0xa2, 0x5f, 0x6d, 0xaf, 0xb9, 0x5e, 0xb9, 0xe8, 0xd4, 0xda, 0xa5, 0x5b, 0x1a, 0xc6, 0x9f, 0xe5,
	0xac, 0x4d, 0xfc, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x84, 0x9c, 0x23, 0x87, 0x64, 0x25, 0x00, 0x00,
}
