// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/br/pkg/lightning/checkpoints/glue_checkpoint.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ast "github.com/pingcap/tidb/parser/ast"
	types "github.com/pingcap/tidb/types"
	sqlexec "github.com/pingcap/tidb/util/sqlexec"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// Execute mocks base method
func (m *MockSession) Execute(arg0 context.Context, arg1 string) ([]sqlexec.RecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].([]sqlexec.RecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSessionMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSession)(nil).Execute), arg0, arg1)
}

// CommitTxn mocks base method
func (m *MockSession) CommitTxn(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTxn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTxn indicates an expected call of CommitTxn
func (mr *MockSessionMockRecorder) CommitTxn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTxn", reflect.TypeOf((*MockSession)(nil).CommitTxn), arg0)
}

// RollbackTxn mocks base method
func (m *MockSession) RollbackTxn(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTxn", arg0)
}

// RollbackTxn indicates an expected call of RollbackTxn
func (mr *MockSessionMockRecorder) RollbackTxn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxn", reflect.TypeOf((*MockSession)(nil).RollbackTxn), arg0)
}

// PrepareStmt mocks base method
func (m *MockSession) PrepareStmt(sql string) (uint32, int, []*ast.ResultField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStmt", sql)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].([]*ast.ResultField)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PrepareStmt indicates an expected call of PrepareStmt
func (mr *MockSessionMockRecorder) PrepareStmt(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStmt", reflect.TypeOf((*MockSession)(nil).PrepareStmt), sql)
}

// ExecutePreparedStmt mocks base method
func (m *MockSession) ExecutePreparedStmt(ctx context.Context, stmtID uint32, param []types.Datum) (sqlexec.RecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutePreparedStmt", ctx, stmtID, param)
	ret0, _ := ret[0].(sqlexec.RecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePreparedStmt indicates an expected call of ExecutePreparedStmt
func (mr *MockSessionMockRecorder) ExecutePreparedStmt(ctx, stmtID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePreparedStmt", reflect.TypeOf((*MockSession)(nil).ExecutePreparedStmt), ctx, stmtID, param)
}

// DropPreparedStmt mocks base method
func (m *MockSession) DropPreparedStmt(stmtID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropPreparedStmt", stmtID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropPreparedStmt indicates an expected call of DropPreparedStmt
func (mr *MockSessionMockRecorder) DropPreparedStmt(stmtID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropPreparedStmt", reflect.TypeOf((*MockSession)(nil).DropPreparedStmt), stmtID)
}
