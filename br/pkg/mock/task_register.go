// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/br/pkg/utils (interfaces: TaskRegister)
//
// Generated by this command:
//
//	mockgen -package mock github.com/pingcap/tidb/br/pkg/utils TaskRegister
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskRegister is a mock of TaskRegister interface.
type MockTaskRegister struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRegisterMockRecorder
	isgomock struct{}
}

// MockTaskRegisterMockRecorder is the mock recorder for MockTaskRegister.
type MockTaskRegisterMockRecorder struct {
	mock *MockTaskRegister
}

// NewMockTaskRegister creates a new mock instance.
func NewMockTaskRegister(ctrl *gomock.Controller) *MockTaskRegister {
	mock := &MockTaskRegister{ctrl: ctrl}
	mock.recorder = &MockTaskRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRegister) EXPECT() *MockTaskRegisterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTaskRegister) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskRegisterMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskRegister)(nil).Close), ctx)
}

// RegisterTask mocks base method.
func (m *MockTaskRegister) RegisterTask(c context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTask", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTask indicates an expected call of RegisterTask.
func (mr *MockTaskRegisterMockRecorder) RegisterTask(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTask", reflect.TypeOf((*MockTaskRegister)(nil).RegisterTask), c)
}

// RegisterTaskOnce mocks base method.
func (m *MockTaskRegister) RegisterTaskOnce(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTaskOnce", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTaskOnce indicates an expected call of RegisterTaskOnce.
func (mr *MockTaskRegisterMockRecorder) RegisterTaskOnce(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTaskOnce", reflect.TypeOf((*MockTaskRegister)(nil).RegisterTaskOnce), ctx)
}
