// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/br/pkg/utils (interfaces: TaskRegister)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskRegister is a mock of TaskRegister interface.
type MockTaskRegister struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRegisterMockRecorder
}

// MockTaskRegisterMockRecorder is the mock recorder for MockTaskRegister.
type MockTaskRegisterMockRecorder struct {
	mock *MockTaskRegister
}

// NewMockTaskRegister creates a new mock instance.
func NewMockTaskRegister(ctrl *gomock.Controller) *MockTaskRegister {
	mock := &MockTaskRegister{ctrl: ctrl}
	mock.recorder = &MockTaskRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRegister) EXPECT() *MockTaskRegisterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTaskRegister) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskRegisterMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskRegister)(nil).Close), arg0)
}

// RegisterTask mocks base method.
func (m *MockTaskRegister) RegisterTask(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTask indicates an expected call of RegisterTask.
func (mr *MockTaskRegisterMockRecorder) RegisterTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTask", reflect.TypeOf((*MockTaskRegister)(nil).RegisterTask), arg0)
}

// RegisterTaskOnce mocks base method.
func (m *MockTaskRegister) RegisterTaskOnce(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTaskOnce", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTaskOnce indicates an expected call of RegisterTaskOnce.
func (mr *MockTaskRegisterMockRecorder) RegisterTaskOnce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTaskOnce", reflect.TypeOf((*MockTaskRegister)(nil).RegisterTaskOnce), arg0)
}
