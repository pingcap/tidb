// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb/pkg/lightning/backend/local (interfaces: DiskUsage,TiKVModeSwitcher,StoreHelper)
//
// Generated by this command:
//
//	mockgen -package mocklocal github.com/pingcap/tidb/pkg/lightning/backend/local DiskUsage,TiKVModeSwitcher,StoreHelper
//
// Package mocklocal is a generated GoMock package.
package mocklocal

import (
	context "context"
	reflect "reflect"

	import_sstpb "github.com/pingcap/kvproto/pkg/import_sstpb"
	backend "github.com/pingcap/tidb/pkg/lightning/backend"
	"github.com/tikv/client-go/v2/tikv"
	gomock "go.uber.org/mock/gomock"
)

// MockDiskUsage is a mock of DiskUsage interface.
type MockDiskUsage struct {
	ctrl     *gomock.Controller
	recorder *MockDiskUsageMockRecorder
}

// MockDiskUsageMockRecorder is the mock recorder for MockDiskUsage.
type MockDiskUsageMockRecorder struct {
	mock *MockDiskUsage
}

// NewMockDiskUsage creates a new mock instance.
func NewMockDiskUsage(ctrl *gomock.Controller) *MockDiskUsage {
	mock := &MockDiskUsage{ctrl: ctrl}
	mock.recorder = &MockDiskUsageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskUsage) EXPECT() *MockDiskUsageMockRecorder {
	return m.recorder
}

// EngineFileSizes mocks base method.
func (m *MockDiskUsage) EngineFileSizes() []backend.EngineFileSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineFileSizes")
	ret0, _ := ret[0].([]backend.EngineFileSize)
	return ret0
}

// EngineFileSizes indicates an expected call of EngineFileSizes.
func (mr *MockDiskUsageMockRecorder) EngineFileSizes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineFileSizes", reflect.TypeOf((*MockDiskUsage)(nil).EngineFileSizes))
}

// MockTiKVModeSwitcher is a mock of TiKVModeSwitcher interface.
type MockTiKVModeSwitcher struct {
	ctrl     *gomock.Controller
	recorder *MockTiKVModeSwitcherMockRecorder
}

// MockTiKVModeSwitcherMockRecorder is the mock recorder for MockTiKVModeSwitcher.
type MockTiKVModeSwitcherMockRecorder struct {
	mock *MockTiKVModeSwitcher
}

// NewMockTiKVModeSwitcher creates a new mock instance.
func NewMockTiKVModeSwitcher(ctrl *gomock.Controller) *MockTiKVModeSwitcher {
	mock := &MockTiKVModeSwitcher{ctrl: ctrl}
	mock.recorder = &MockTiKVModeSwitcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiKVModeSwitcher) EXPECT() *MockTiKVModeSwitcherMockRecorder {
	return m.recorder
}

// ToImportMode mocks base method.
func (m *MockTiKVModeSwitcher) ToImportMode(arg0 context.Context, arg1 ...*import_sstpb.Range) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ToImportMode", varargs...)
}

// ToImportMode indicates an expected call of ToImportMode.
func (mr *MockTiKVModeSwitcherMockRecorder) ToImportMode(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToImportMode", reflect.TypeOf((*MockTiKVModeSwitcher)(nil).ToImportMode), varargs...)
}

// ToNormalMode mocks base method.
func (m *MockTiKVModeSwitcher) ToNormalMode(arg0 context.Context, arg1 ...*import_sstpb.Range) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ToNormalMode", varargs...)
}

// ToNormalMode indicates an expected call of ToNormalMode.
func (mr *MockTiKVModeSwitcherMockRecorder) ToNormalMode(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToNormalMode", reflect.TypeOf((*MockTiKVModeSwitcher)(nil).ToNormalMode), varargs...)
}

// MockStoreHelper is a mock of StoreHelper interface.
type MockStoreHelper struct {
	ctrl     *gomock.Controller
	recorder *MockStoreHelperMockRecorder
}

// MockStoreHelperMockRecorder is the mock recorder for MockStoreHelper.
type MockStoreHelperMockRecorder struct {
	mock *MockStoreHelper
}

// NewMockStoreHelper creates a new mock instance.
func NewMockStoreHelper(ctrl *gomock.Controller) *MockStoreHelper {
	mock := &MockStoreHelper{ctrl: ctrl}
	mock.recorder = &MockStoreHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreHelper) EXPECT() *MockStoreHelperMockRecorder {
	return m.recorder
}

// GetTS mocks base method.
func (m *MockStoreHelper) GetTS(arg0 context.Context) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTS", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTS indicates an expected call of GetTS.
func (mr *MockStoreHelperMockRecorder) GetTS(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTS", reflect.TypeOf((*MockStoreHelper)(nil).GetTS), arg0)
}

// GetTiKVCodec mocks base method.
func (m *MockStoreHelper) GetTiKVCodec() tikv.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTiKVCodec")
	ret0, _ := ret[0].(tikv.Codec)
	return ret0
}

// GetTiKVCodec indicates an expected call of GetTiKVCodec.
func (mr *MockStoreHelperMockRecorder) GetTiKVCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTiKVCodec", reflect.TypeOf((*MockStoreHelper)(nil).GetTiKVCodec))
}
