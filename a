cat checklist.md
# Following the checklist saves the reviewers' time and gets your PR reviewed faster.

# Self Review
Have you reviewed every line of your changes by yourself?

# Test
Have you added enough test cases to cover the new feature or bug fix?
Also, add comments to describe your test cases.

# Naming
Do function names keep consistent with its behavior?
Is it easy to infer the function's behavior by its name?

# Comment
Is there any code that confuses the reviewer?
Add comments on them! You'll be asked to do so anyway.
Make sure there is no syntax or spelling error in your comments.
Some online syntax checking tools like Grammarly may be helpful.

# Refactor
Is there any way to refactor the code to make it more readable?
If the refactoring touches a lot of existing code, send another PR to do it.

# Single Purpose
Make sure the PR does only one thing and nothing else.

# Diff Size
Make sure the diff size is no more than 500, split it into small PRs if it is too large.
GO111MODULE=on go build  -tags codes  -ldflags '-X "github.com/pingcap/parser/mysql.TiDBReleaseVersion=v5.2.0-alpha-223-g22628ab1f-dirty" -X "github.com/pingcap/tidb/util/versioninfo.TiDBBuildTS=2021-07-07 06:43:25" -X "github.com/pingcap/tidb/util/versioninfo.TiDBGitHash=22628ab1f50d109d8993055b0c2a786f9ce899f9" -X "github.com/pingcap/tidb/util/versioninfo.TiDBGitBranch=expridx_agg" -X "github.com/pingcap/tidb/util/versioninfo.TiDBEdition=Community" -X "github.com/pingcap/tidb/config.checkBeforeDropLDFlag=1"' -o bin/tidb-server tidb-server/main.go
extracting statistics: s
skip building tidb-server, using existing binary: ../../bin/tidb-server
building portgenerator binary: ./portgenerator
building explain-test binary: ./explain_test
start tidb-server, log file: ./explain-test.out
tidb-server(PID: 42867) started
run all explain test cases
explaintest end
cd tools/check; \
	GO111MODULE=on go build -o ../bin/failpoint-ctl github.com/pingcap/failpoint/failpoint-ctl
Running in native mode.
ok  	github.com/pingcap/tidb/bindinfo	5.122s	coverage: 86.1% of statements
ok  	github.com/pingcap/tidb/config	0.911s	coverage: 67.6% of statements
ok  	github.com/pingcap/tidb/ddl	151.484s	coverage: 85.5% of statements
ok  	github.com/pingcap/tidb/ddl/failtest	141.709s	coverage: [no statements]
ok  	github.com/pingcap/tidb/ddl/placement	0.582s	coverage: 95.6% of statements
?   	github.com/pingcap/tidb/ddl/testutil	[no test files]
ok  	github.com/pingcap/tidb/ddl/util	2.982s	coverage: 45.3% of statements
ok  	github.com/pingcap/tidb/distsql	0.863s	coverage: 59.8% of statements
ok  	github.com/pingcap/tidb/domain	5.729s	coverage: 74.5% of statements
ok  	github.com/pingcap/tidb/domain/infosync	1.713s	coverage: 18.3% of statements
ok  	github.com/pingcap/tidb/errno	0.588s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/executor	265.599s	coverage: 77.7% of statements
ok  	github.com/pingcap/tidb/executor/aggfuncs	4.522s	coverage: 76.4% of statements
ok  	github.com/pingcap/tidb/executor/oomtest	1.890s	coverage: [no statements] [no tests to run]
ok  	github.com/pingcap/tidb/executor/seqtest	10.332s	coverage: [no statements]
ok  	github.com/pingcap/tidb/expression	21.592s	coverage: 81.8% of statements
ok  	github.com/pingcap/tidb/expression/aggregation	1.405s	coverage: 42.6% of statements
?   	github.com/pingcap/tidb/expression/generator/helper	[no test files]
ok  	github.com/pingcap/tidb/infoschema	5.251s	coverage: 67.3% of statements
ok  	github.com/pingcap/tidb/infoschema/perfschema	1.689s	coverage: 70.6% of statements
ok  	github.com/pingcap/tidb/kv	0.664s	coverage: 60.8% of statements
?   	github.com/pingcap/tidb/lock	[no test files]
ok  	github.com/pingcap/tidb/meta	1.986s	coverage: 73.3% of statements
ok  	github.com/pingcap/tidb/meta/autoid	2.508s	coverage: 70.2% of statements
ok  	github.com/pingcap/tidb/metrics	0.430s	coverage: 90.2% of statements
ok  	github.com/pingcap/tidb/owner	21.382s	coverage: 68.4% of statements
?   	github.com/pingcap/tidb/planner	[no test files]
ok  	github.com/pingcap/tidb/planner/cascades	2.910s	coverage: 94.7% of statements
ok  	github.com/pingcap/tidb/planner/core	81.923s	coverage: 78.2% of statements
ok  	github.com/pingcap/tidb/planner/implementation	0.791s	coverage: 3.7% of statements
ok  	github.com/pingcap/tidb/planner/memo	0.738s	coverage: 86.9% of statements
?   	github.com/pingcap/tidb/planner/property	[no test files]
?   	github.com/pingcap/tidb/planner/util	[no test files]
ok  	github.com/pingcap/tidb/plugin	0.907s	coverage: 58.7% of statements
ok  	github.com/pingcap/tidb/plugin/conn_ip_example	0.731s	coverage: 81.8% of statements
?   	github.com/pingcap/tidb/privilege	[no test files]
ok  	github.com/pingcap/tidb/privilege/privileges	92.394s	coverage: 80.1% of statements
ok  	github.com/pingcap/tidb/server	63.215s	coverage: 68.5% of statements
ok  	github.com/pingcap/tidb/session	51.847s	coverage: 79.3% of statements
?   	github.com/pingcap/tidb/session/txninfo	[no test files]
ok  	github.com/pingcap/tidb/sessionctx	0.579s	coverage: 20.8% of statements
ok  	github.com/pingcap/tidb/sessionctx/binloginfo	2.691s	coverage: 74.8% of statements
ok  	github.com/pingcap/tidb/sessionctx/stmtctx	0.487s	coverage: 29.9% of statements
ok  	github.com/pingcap/tidb/sessionctx/variable	0.614s	coverage: 49.5% of statements
ok  	github.com/pingcap/tidb/statistics	6.332s	coverage: 74.9% of statements
ok  	github.com/pingcap/tidb/statistics/handle	27.557s	coverage: 82.4% of statements
ok  	github.com/pingcap/tidb/store	87.173s	coverage: 95.5% of statements
ok  	github.com/pingcap/tidb/store/copr	0.669s	coverage: 13.7% of statements
ok  	github.com/pingcap/tidb/store/driver	1.979s	coverage: 26.8% of statements
?   	github.com/pingcap/tidb/store/driver/backoff	[no test files]
?   	github.com/pingcap/tidb/store/driver/error	[no test files]
?   	github.com/pingcap/tidb/store/driver/options	[no test files]
ok  	github.com/pingcap/tidb/store/driver/txn	0.861s	coverage: 16.5% of statements
ok  	github.com/pingcap/tidb/store/gcworker	28.135s	coverage: 76.2% of statements
ok  	github.com/pingcap/tidb/store/helper	0.926s	coverage: 45.1% of statements
ok  	github.com/pingcap/tidb/store/mockstore	0.613s	coverage: 43.2% of statements
ok  	github.com/pingcap/tidb/store/mockstore/mockcopr	1.015s	coverage: 34.8% of statements
?   	github.com/pingcap/tidb/store/mockstore/mockstorage	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore	0.535s	coverage: 14.8% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/client	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/config	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/cophandler	1.056s	coverage: 12.4% of statements
ok  	github.com/pingcap/tidb/store/mockstore/unistore/lockstore	11.210s	coverage: 77.1% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/metrics	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/pd	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/server	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/tikv	2.764s	coverage: 33.9% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/tikv/dbreader	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/tikv/mvcc	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/tikv/pberror	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/util/lockwaiter	0.469s	coverage: 84.0% of statements
ok  	github.com/pingcap/tidb/structure	0.841s	coverage: 79.6% of statements
ok  	github.com/pingcap/tidb/table	0.562s	coverage: 69.8% of statements
ok  	github.com/pingcap/tidb/table/tables	2.977s	coverage: 55.5% of statements
ok  	github.com/pingcap/tidb/tablecodec	0.509s	coverage: 32.7% of statements
ok  	github.com/pingcap/tidb/telemetry	9.515s	coverage: 55.0% of statements
ok  	github.com/pingcap/tidb/tidb-server	0.948s	coverage: 22.2% of statements
ok  	github.com/pingcap/tidb/types	2.800s	coverage: 82.6% of statements
ok  	github.com/pingcap/tidb/types/json	0.396s	coverage: 80.6% of statements
ok  	github.com/pingcap/tidb/types/parser_driver	0.531s	coverage: 28.7% of statements
ok  	github.com/pingcap/tidb/util	1.508s	coverage: 53.2% of statements
ok  	github.com/pingcap/tidb/util/admin	2.303s	coverage: 55.6% of statements
ok  	github.com/pingcap/tidb/util/arena	0.445s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/bitmap	0.667s	coverage: 85.7% of statements
ok  	github.com/pingcap/tidb/util/checksum	0.431s	coverage: 84.3% of statements
ok  	github.com/pingcap/tidb/util/chunk	3.211s	coverage: 82.3% of statements
ok  	github.com/pingcap/tidb/util/codec	1.276s	coverage: 82.5% of statements
ok  	github.com/pingcap/tidb/util/collate	1.093s	coverage: 69.4% of statements
ok  	github.com/pingcap/tidb/util/cteutil	0.580s	coverage: 69.7% of statements
ok  	github.com/pingcap/tidb/util/dbterror	0.358s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/deadlockhistory	1.293s	coverage: 95.7% of statements
ok  	github.com/pingcap/tidb/util/disjointset	0.738s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/disk	1.279s	coverage: 50.0% of statements
?   	github.com/pingcap/tidb/util/domainutil	[no test files]
ok  	github.com/pingcap/tidb/util/encrypt	0.929s	coverage: 91.9% of statements
ok  	github.com/pingcap/tidb/util/execdetails	0.922s	coverage: 71.2% of statements
ok  	github.com/pingcap/tidb/util/expensivequery	0.544s	coverage: 13.5% of statements
ok  	github.com/pingcap/tidb/util/fastrand	0.440s	coverage: 93.3% of statements
ok  	github.com/pingcap/tidb/util/filesort	1.623s	coverage: 86.3% of statements
ok  	github.com/pingcap/tidb/util/format	0.472s	coverage: 83.6% of statements
?   	github.com/pingcap/tidb/util/gcutil	[no test files]
ok  	github.com/pingcap/tidb/util/generatedexpr	1.330s	coverage: 0.0% of statements [no tests to run]
ok  	github.com/pingcap/tidb/util/hack	0.847s	coverage: 92.3% of statements
?   	github.com/pingcap/tidb/util/hint	[no test files]
?   	github.com/pingcap/tidb/util/israce	[no test files]
ok  	github.com/pingcap/tidb/util/kvcache	0.685s	coverage: 63.5% of statements
ok  	github.com/pingcap/tidb/util/localpool	0.942s	coverage: 96.8% of statements
ok  	github.com/pingcap/tidb/util/logutil	0.557s	coverage: 60.2% of statements
ok  	github.com/pingcap/tidb/util/math	2.032s	coverage: 27.3% of statements
ok  	github.com/pingcap/tidb/util/memory	0.667s	coverage: 64.6% of statements
ok  	github.com/pingcap/tidb/util/mock	0.568s	coverage: 14.7% of statements
ok  	github.com/pingcap/tidb/util/mvmap	0.886s	coverage: 86.6% of statements
ok  	github.com/pingcap/tidb/util/parser	0.771s	coverage: 60.0% of statements
?   	github.com/pingcap/tidb/util/pdapi	[no test files]
ok  	github.com/pingcap/tidb/util/plancodec	0.677s	coverage: 8.2% of statements
ok  	github.com/pingcap/tidb/util/printer	1.081s	coverage: 88.3% of statements
ok  	github.com/pingcap/tidb/util/profile	1.735s	coverage: 55.4% of statements
ok  	github.com/pingcap/tidb/util/ranger	4.121s	coverage: 81.4% of statements
ok  	github.com/pingcap/tidb/util/resourcegrouptag	0.498s	coverage: 77.8% of statements
ok  	github.com/pingcap/tidb/util/rowDecoder	0.706s	coverage: 59.8% of statements
ok  	github.com/pingcap/tidb/util/rowcodec	0.634s	coverage: 88.0% of statements
ok  	github.com/pingcap/tidb/util/selection	2.477s	coverage: 86.8% of statements
ok  	github.com/pingcap/tidb/util/sem	1.386s	coverage: 65.4% of statements
ok  	github.com/pingcap/tidb/util/set	0.475s	coverage: 48.6% of statements
?   	github.com/pingcap/tidb/util/signal	[no test files]
?   	github.com/pingcap/tidb/util/sli	[no test files]
ok  	github.com/pingcap/tidb/util/slice	0.705s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/sqlexec	0.497s	coverage: 89.7% of statements
ok  	github.com/pingcap/tidb/util/stmtsummary	0.547s	coverage: 94.4% of statements
ok  	github.com/pingcap/tidb/util/stringutil	0.617s	coverage: 87.7% of statements
ok  	github.com/pingcap/tidb/util/sys/linux	0.694s	coverage: 66.7% of statements
ok  	github.com/pingcap/tidb/util/sys/storage	0.853s	coverage: 83.3% of statements
ok  	github.com/pingcap/tidb/util/systimemon	1.410s	coverage: 100.0% of statements
?   	github.com/pingcap/tidb/util/tableutil	[no test files]
ok  	github.com/pingcap/tidb/util/testkit	1.172s	coverage: 5.6% of statements
?   	github.com/pingcap/tidb/util/testleak	[no test files]
ok  	github.com/pingcap/tidb/util/testutil	0.549s	coverage: 19.2% of statements
ok  	github.com/pingcap/tidb/util/texttree	0.768s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/timeutil	0.384s	coverage: 48.7% of statements
ok  	github.com/pingcap/tidb/util/topsql	4.247s	coverage: 51.9% of statements
ok  	github.com/pingcap/tidb/util/topsql/reporter	4.228s	coverage: 80.2% of statements
?   	github.com/pingcap/tidb/util/topsql/reporter/mock	[no test files]
?   	github.com/pingcap/tidb/util/topsql/tracecpu	[no test files]
?   	github.com/pingcap/tidb/util/topsql/tracecpu/mock	[no test files]
ok  	github.com/pingcap/tidb/util/tracing	0.389s	coverage: 93.3% of statements
?   	github.com/pingcap/tidb/util/versioninfo	[no test files]
ok  	github.com/pingcap/tidb/util/vitess	0.636s	coverage: 88.9% of statements
go generate ./...
./tools/check/check-gogenerate.sh
