cat checklist.md
# Following the checklist saves the reviewers' time and gets your PR reviewed faster.

# Self Review
Have you reviewed every line of your changes by yourself?

# Test
Have you added enough test cases to cover the new feature or bug fix?
Also, add comments to describe your test cases.

# Naming
Do function names keep consistent with its behavior?
Is it easy to infer the function's behavior by its name?

# Comment
Is there any code that confuses the reviewer?
Add comments on them! You'll be asked to do so anyway.
Make sure there is no syntax or spelling error in your comments.
Some online syntax checking tools like Grammarly may be helpful.

# Refactor
Is there any way to refactor the code to make it more readable?
If the refactoring touches a lot of existing code, send another PR to do it.

# Single Purpose
Make sure the PR does only one thing and nothing else.

# Diff Size
Make sure the diff size is no more than 500, split it into small PRs if it is too large.
GO111MODULE=on go build  -tags codes  -ldflags '-X "github.com/pingcap/parser/mysql.TiDBReleaseVersion=v5.1.0-alpha-189-g75388187f-dirty" -X "github.com/pingcap/tidb/util/versioninfo.TiDBBuildTS=2021-06-08 13:12:27" -X "github.com/pingcap/tidb/util/versioninfo.TiDBGitHash=75388187f3865db18bc70ca1ef30260d85dba2e2" -X "github.com/pingcap/tidb/util/versioninfo.TiDBGitBranch=master" -X "github.com/pingcap/tidb/util/versioninfo.TiDBEdition=Community" -X "github.com/pingcap/tidb/config.checkBeforeDropLDFlag=1"' -o bin/tidb-server tidb-server/main.go
extracting statistics: s
skip building tidb-server, using existing binary: ../../bin/tidb-server
building portgenerator binary: ./portgenerator
building explain-test binary: ./explain_test
start tidb-server, log file: ./explain-test.out
tidb-server(PID: 79478) started
run all explain test cases
[2021/06/08 21:12:58.225 +08:00] [INFO] [data_slow_query.go:144] ["Telemetry slow query stats initialized"] [currentSQBInfo={0.001:0,0.512:0,65.536:0,16777.217:0,33554.434:0,134217.734:0,+Inf:0,262.144:0,2097.152:0,0.016:0,0.032:0,8.192:0,16.384:0,1048.576:0,8388.608:0,0.064:0,0.128:0,2.048:0,524.288:0,0.002:0,0.256:0,0.004:0,0.008:0,4.096:0,32.768:0,131.072:0,1.024:0,4194.304:0,67108.867:0] [lastSQBInfo={0.032:0,0.128:0,1.024:0,8388.608:0,16777.217:0,33554.434:0,0.002:0,0.004:0,262.144:0,67108.867:0,0.256:0,4.096:0,32.768:0,65.536:0,524.288:0,0.001:0,2.048:0,131.072:0,1048.576:0,0.064:0,8.192:0,0.512:0,+Inf:0,0.016:0,4194.304:0,2097.152:0,134217.734:0,0.008:0,16.384:0]
explaintest end
GO111MODULE=on go list -f '{{ join .Imports "\n" }}' github.com/pingcap/tidb/store/tikv | grep ^github.com/pingcap/parser$ || exit 0; exit 1
Running in native mode.
ok  	github.com/pingcap/tidb/bindinfo	7.027s	coverage: 86.1% of statements
ok  	github.com/pingcap/tidb/config	0.843s	coverage: 67.6% of statements
ok  	github.com/pingcap/tidb/ddl	116.331s	coverage: 85.6% of statements
ok  	github.com/pingcap/tidb/ddl/failtest	145.685s	coverage: [no statements]
ok  	github.com/pingcap/tidb/ddl/placement	0.515s	coverage: 86.5% of statements
?   	github.com/pingcap/tidb/ddl/testutil	[no test files]
ok  	github.com/pingcap/tidb/ddl/util	4.698s	coverage: 45.9% of statements
ok  	github.com/pingcap/tidb/distsql	1.155s	coverage: 62.4% of statements
ok  	github.com/pingcap/tidb/domain	5.227s	coverage: 74.5% of statements
ok  	github.com/pingcap/tidb/domain/infosync	4.506s	coverage: 18.3% of statements
ok  	github.com/pingcap/tidb/errno	0.353s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/executor	225.359s	coverage: 78.2% of statements
ok  	github.com/pingcap/tidb/executor/aggfuncs	4.844s	coverage: 76.4% of statements
ok  	github.com/pingcap/tidb/executor/oomtest	1.357s	coverage: [no statements] [no tests to run]
ok  	github.com/pingcap/tidb/executor/seqtest	11.478s	coverage: [no statements]
ok  	github.com/pingcap/tidb/expression	19.578s	coverage: 81.8% of statements
ok  	github.com/pingcap/tidb/expression/aggregation	1.637s	coverage: 42.6% of statements
?   	github.com/pingcap/tidb/expression/generator/helper	[no test files]
ok  	github.com/pingcap/tidb/infoschema	6.395s	coverage: 64.8% of statements
ok  	github.com/pingcap/tidb/infoschema/perfschema	2.112s	coverage: 70.6% of statements
ok  	github.com/pingcap/tidb/kv	2.200s	coverage: 60.7% of statements
?   	github.com/pingcap/tidb/lock	[no test files]
ok  	github.com/pingcap/tidb/meta	1.791s	coverage: 73.3% of statements
ok  	github.com/pingcap/tidb/meta/autoid	4.001s	coverage: 70.2% of statements
ok  	github.com/pingcap/tidb/metrics	1.894s	coverage: 89.8% of statements
ok  	github.com/pingcap/tidb/owner	23.846s	coverage: 66.7% of statements
?   	github.com/pingcap/tidb/planner	[no test files]
ok  	github.com/pingcap/tidb/planner/cascades	1.549s	coverage: 94.7% of statements
ok  	github.com/pingcap/tidb/planner/core	81.236s	coverage: 77.9% of statements
ok  	github.com/pingcap/tidb/planner/implementation	1.110s	coverage: 3.7% of statements
ok  	github.com/pingcap/tidb/planner/memo	1.178s	coverage: 86.9% of statements
?   	github.com/pingcap/tidb/planner/property	[no test files]
?   	github.com/pingcap/tidb/planner/util	[no test files]
ok  	github.com/pingcap/tidb/plugin	0.804s	coverage: 58.7% of statements
ok  	github.com/pingcap/tidb/plugin/conn_ip_example	0.968s	coverage: 81.8% of statements
?   	github.com/pingcap/tidb/privilege	[no test files]
ok  	github.com/pingcap/tidb/privilege/privileges	86.236s	coverage: 81.0% of statements
ok  	github.com/pingcap/tidb/server	49.926s	coverage: 68.8% of statements
ok  	github.com/pingcap/tidb/session	48.514s	coverage: 79.7% of statements
?   	github.com/pingcap/tidb/session/txninfo	[no test files]
ok  	github.com/pingcap/tidb/sessionctx	0.558s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/sessionctx/binloginfo	2.574s	coverage: 74.8% of statements
ok  	github.com/pingcap/tidb/sessionctx/stmtctx	0.419s	coverage: 29.9% of statements
ok  	github.com/pingcap/tidb/sessionctx/variable	0.457s	coverage: 49.8% of statements
ok  	github.com/pingcap/tidb/statistics	5.970s	coverage: 75.1% of statements
ok  	github.com/pingcap/tidb/statistics/handle	26.501s	coverage: 82.3% of statements
ok  	github.com/pingcap/tidb/store	87.229s	coverage: 95.5% of statements
ok  	github.com/pingcap/tidb/store/copr	0.502s	coverage: 13.7% of statements
ok  	github.com/pingcap/tidb/store/driver	1.861s	coverage: 26.8% of statements
?   	github.com/pingcap/tidb/store/driver/backoff	[no test files]
?   	github.com/pingcap/tidb/store/driver/error	[no test files]
?   	github.com/pingcap/tidb/store/driver/options	[no test files]
ok  	github.com/pingcap/tidb/store/driver/txn	0.529s	coverage: 16.6% of statements
ok  	github.com/pingcap/tidb/store/gcworker	16.397s	coverage: 76.2% of statements
ok  	github.com/pingcap/tidb/store/helper	0.873s	coverage: 45.1% of statements
ok  	github.com/pingcap/tidb/store/mockstore	0.620s	coverage: 43.5% of statements
ok  	github.com/pingcap/tidb/store/mockstore/mockcopr	0.856s	coverage: 34.8% of statements
?   	github.com/pingcap/tidb/store/mockstore/mockstorage	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore	0.823s	coverage: 14.4% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/client	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/config	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/cophandler	0.959s	coverage: 12.4% of statements
ok  	github.com/pingcap/tidb/store/mockstore/unistore/lockstore	11.590s	coverage: 77.1% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/metrics	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/pd	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/server	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/tikv	2.291s	coverage: 33.9% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/tikv/dbreader	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/tikv/mvcc	[no test files]
?   	github.com/pingcap/tidb/store/mockstore/unistore/tikv/pberror	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/util/lockwaiter	0.429s	coverage: 84.0% of statements
ok  	github.com/pingcap/tidb/store/tikv	23.171s	coverage: 21.5% of statements
ok  	github.com/pingcap/tidb/store/tikv/client	4.504s	coverage: 70.5% of statements
ok  	github.com/pingcap/tidb/store/tikv/config	0.341s	coverage: 43.7% of statements
?   	github.com/pingcap/tidb/store/tikv/error	[no test files]
?   	github.com/pingcap/tidb/store/tikv/kv	[no test files]
ok  	github.com/pingcap/tidb/store/tikv/latch	0.372s	coverage: 95.2% of statements
?   	github.com/pingcap/tidb/store/tikv/logutil	[no test files]
?   	github.com/pingcap/tidb/store/tikv/metrics	[no test files]
?   	github.com/pingcap/tidb/store/tikv/mockstore	[no test files]
?   	github.com/pingcap/tidb/store/tikv/mockstore/cluster	[no test files]
ok  	github.com/pingcap/tidb/store/tikv/mockstore/deadlock	0.321s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/store/tikv/mockstore/mocktikv	0.471s	coverage: 33.6% of statements
?   	github.com/pingcap/tidb/store/tikv/oracle	[no test files]
ok  	github.com/pingcap/tidb/store/tikv/oracle/oracles	0.415s	coverage: 31.0% of statements
ok  	github.com/pingcap/tidb/store/tikv/retry	0.671s	coverage: 1.8% of statements [no tests to run]
ok  	github.com/pingcap/tidb/store/tikv/tests	49.498s	coverage: [no statements]
ok  	github.com/pingcap/tidb/store/tikv/tikvrpc	0.889s	coverage: 0.5% of statements
ok  	github.com/pingcap/tidb/store/tikv/unionstore	27.544s	coverage: 82.1% of statements
ok  	github.com/pingcap/tidb/store/tikv/util	0.821s	coverage: 7.0% of statements
?   	github.com/pingcap/tidb/store/tikv/util/codec	[no test files]
?   	github.com/pingcap/tidb/store/tikv/util/testleak	[no test files]
ok  	github.com/pingcap/tidb/structure	1.037s	coverage: 81.2% of statements
ok  	github.com/pingcap/tidb/table	0.639s	coverage: 70.3% of statements
ok  	github.com/pingcap/tidb/table/tables	2.813s	coverage: 55.9% of statements
ok  	github.com/pingcap/tidb/tablecodec	0.429s	coverage: 32.7% of statements
ok  	github.com/pingcap/tidb/telemetry	9.398s	coverage: 56.5% of statements
ok  	github.com/pingcap/tidb/tidb-server	0.829s	coverage: 22.3% of statements
ok  	github.com/pingcap/tidb/types	1.937s	coverage: 82.4% of statements
ok  	github.com/pingcap/tidb/types/json	0.360s	coverage: 80.6% of statements
ok  	github.com/pingcap/tidb/types/parser_driver	0.408s	coverage: 28.7% of statements
ok  	github.com/pingcap/tidb/util	0.789s	coverage: 53.2% of statements
ok  	github.com/pingcap/tidb/util/admin	1.981s	coverage: 55.6% of statements
ok  	github.com/pingcap/tidb/util/arena	0.324s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/bitmap	0.590s	coverage: 85.7% of statements
ok  	github.com/pingcap/tidb/util/checksum	0.361s	coverage: 84.3% of statements
ok  	github.com/pingcap/tidb/util/chunk	3.127s	coverage: 82.3% of statements
ok  	github.com/pingcap/tidb/util/codec	1.215s	coverage: 82.4% of statements
ok  	github.com/pingcap/tidb/util/collate	0.363s	coverage: 69.4% of statements
ok  	github.com/pingcap/tidb/util/cteutil	0.433s	coverage: 69.7% of statements
ok  	github.com/pingcap/tidb/util/dbterror	0.631s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/deadlockhistory	0.414s	coverage: 95.7% of statements
ok  	github.com/pingcap/tidb/util/disjointset	0.341s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/disk	0.722s	coverage: 50.0% of statements
?   	github.com/pingcap/tidb/util/domainutil	[no test files]
ok  	github.com/pingcap/tidb/util/encrypt	0.573s	coverage: 91.9% of statements
ok  	github.com/pingcap/tidb/util/execdetails	0.667s	coverage: 71.2% of statements
ok  	github.com/pingcap/tidb/util/expensivequery	0.493s	coverage: 13.5% of statements
ok  	github.com/pingcap/tidb/util/fastrand	0.592s	coverage: 86.7% of statements
ok  	github.com/pingcap/tidb/util/filesort	1.246s	coverage: 86.3% of statements
ok  	github.com/pingcap/tidb/util/format	0.562s	coverage: 83.6% of statements
?   	github.com/pingcap/tidb/util/gcutil	[no test files]
ok  	github.com/pingcap/tidb/util/generatedexpr	1.440s	coverage: 0.0% of statements [no tests to run]
ok  	github.com/pingcap/tidb/util/hack	0.712s	coverage: 92.3% of statements
?   	github.com/pingcap/tidb/util/hint	[no test files]
?   	github.com/pingcap/tidb/util/israce	[no test files]
ok  	github.com/pingcap/tidb/util/kvcache	0.824s	coverage: 63.5% of statements
ok  	github.com/pingcap/tidb/util/localpool	1.056s	coverage: 96.8% of statements
ok  	github.com/pingcap/tidb/util/logutil	0.938s	coverage: 60.2% of statements
ok  	github.com/pingcap/tidb/util/math	1.025s	coverage: 30.0% of statements
ok  	github.com/pingcap/tidb/util/memory	1.206s	coverage: 64.6% of statements
ok  	github.com/pingcap/tidb/util/mock	0.954s	coverage: 14.7% of statements
ok  	github.com/pingcap/tidb/util/mvmap	1.130s	coverage: 86.6% of statements
ok  	github.com/pingcap/tidb/util/parser	0.890s	coverage: 60.0% of statements
?   	github.com/pingcap/tidb/util/pdapi	[no test files]
ok  	github.com/pingcap/tidb/util/plancodec	1.143s	coverage: 3.8% of statements
ok  	github.com/pingcap/tidb/util/printer	0.469s	coverage: 88.3% of statements
ok  	github.com/pingcap/tidb/util/profile	1.510s	coverage: 55.4% of statements
ok  	github.com/pingcap/tidb/util/ranger	7.445s	coverage: 81.4% of statements
ok  	github.com/pingcap/tidb/util/resourcegrouptag	0.498s	coverage: 77.8% of statements
ok  	github.com/pingcap/tidb/util/rowDecoder	0.577s	coverage: 59.8% of statements
ok  	github.com/pingcap/tidb/util/rowcodec	0.453s	coverage: 88.0% of statements
ok  	github.com/pingcap/tidb/util/selection	1.328s	coverage: 85.5% of statements
ok  	github.com/pingcap/tidb/util/sem	0.429s	coverage: 65.4% of statements
ok  	github.com/pingcap/tidb/util/set	0.787s	coverage: 48.6% of statements
?   	github.com/pingcap/tidb/util/signal	[no test files]
?   	github.com/pingcap/tidb/util/sli	[no test files]
ok  	github.com/pingcap/tidb/util/sqlexec	0.517s	coverage: 96.3% of statements
ok  	github.com/pingcap/tidb/util/stmtsummary	1.205s	coverage: 92.2% of statements
ok  	github.com/pingcap/tidb/util/stringutil	0.520s	coverage: 87.9% of statements
ok  	github.com/pingcap/tidb/util/sys/linux	1.382s	coverage: 66.7% of statements
ok  	github.com/pingcap/tidb/util/sys/storage	1.437s	coverage: 83.3% of statements
ok  	github.com/pingcap/tidb/util/systimemon	2.589s	coverage: 100.0% of statements
?   	github.com/pingcap/tidb/util/tableutil	[no test files]
ok  	github.com/pingcap/tidb/util/testkit	0.754s	coverage: 5.6% of statements
?   	github.com/pingcap/tidb/util/testleak	[no test files]
ok  	github.com/pingcap/tidb/util/testutil	0.782s	coverage: 19.2% of statements
ok  	github.com/pingcap/tidb/util/texttree	0.368s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/timeutil	0.356s	coverage: 48.7% of statements
ok  	github.com/pingcap/tidb/util/topsql	3.876s	coverage: 70.0% of statements
ok  	github.com/pingcap/tidb/util/topsql/reporter	2.677s	coverage: 86.5% of statements
?   	github.com/pingcap/tidb/util/topsql/reporter/mock	[no test files]
?   	github.com/pingcap/tidb/util/topsql/tracecpu	[no test files]
?   	github.com/pingcap/tidb/util/topsql/tracecpu/mock	[no test files]
ok  	github.com/pingcap/tidb/util/tracing	0.341s	coverage: 93.3% of statements
?   	github.com/pingcap/tidb/util/versioninfo	[no test files]
ok  	github.com/pingcap/tidb/util/vitess	0.333s	coverage: 88.9% of statements
go generate ./...
./tools/check/check-gogenerate.sh
