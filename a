cat checklist.md
# Following the checklist saves the reviewers' time and gets your PR reviewed faster.

# Self Review
Have you reviewed every line of your changes by yourself?

# Test
Have you added enough test cases to cover the new feature or bug fix?
Also, add comments to describe your test cases.

# Naming
Do function names keep consistent with its behavior?
Is it easy to infer the function's behavior by its name?

# Comment
Is there any code that confuses the reviewer?
Add comments on them! You'll be asked to do so anyway.
Make sure there is no syntax or spelling error in your comments.
Some online syntax checking tools like Grammarly may be helpful.

# Refactor
Is there any way to refactor the code to make it more readable?
If the refactoring touches a lot of existing code, send another PR to do it.

# Single Purpose
Make sure the PR does only one thing and nothing else.

# Diff Size
Make sure the diff size is no more than 500, split it into small PRs if it is too large.
GO111MODULE=on go build  -tags codes  -ldflags '-X "github.com/pingcap/parser/mysql.TiDBReleaseVersion=v4.0.0-beta.2-2510-g3ed4a23b9-dirty" -X "github.com/pingcap/tidb/util/versioninfo.TiDBBuildTS=2021-03-31 09:01:44" -X "github.com/pingcap/tidb/util/versioninfo.TiDBGitHash=3ed4a23b956da63c95a5665432fef687a096601c" -X "github.com/pingcap/tidb/util/versioninfo.TiDBGitBranch=master" -X "github.com/pingcap/tidb/util/versioninfo.TiDBEdition=Community" -X "github.com/pingcap/tidb/config.checkBeforeDropLDFlag=1"' -o bin/tidb-server tidb-server/main.go
extracting statistics: s
skip building tidb-server, using existing binary: ../../bin/tidb-server
building portgenerator binary: ./portgenerator
building explain-test binary: ./explain_test
start tidb-server, log file: ./explain-test.out
tidb-server(PID: 89099) started
run all explain test cases
explaintest end
GO111MODULE=on go list -f '{{ join .Imports "\n" }}' github.com/pingcap/tidb/store/tikv | grep ^github.com/pingcap/parser$ || exit 0; exit 1
GO111MODULE=on go build -o tools/bin/failpoint-ctl github.com/pingcap/failpoint/failpoint-ctl
Running in native mode.
ok  	github.com/pingcap/tidb/bindinfo	9.010s	coverage: 86.1% of statements
ok  	github.com/pingcap/tidb/config	0.637s	coverage: 66.2% of statements
ok  	github.com/pingcap/tidb/ddl	207.065s	coverage: 85.7% of statements
ok  	github.com/pingcap/tidb/ddl/failtest	141.271s	coverage: [no statements]
ok  	github.com/pingcap/tidb/ddl/placement	0.654s	coverage: 41.7% of statements
?   	github.com/pingcap/tidb/ddl/testutil	[no test files]
ok  	github.com/pingcap/tidb/ddl/util	3.193s	coverage: 45.5% of statements
ok  	github.com/pingcap/tidb/distsql	0.989s	coverage: 63.3% of statements
ok  	github.com/pingcap/tidb/domain	6.174s	coverage: 75.9% of statements
ok  	github.com/pingcap/tidb/domain/infosync	1.585s	coverage: 18.3% of statements
ok  	github.com/pingcap/tidb/errno	0.403s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/executor	351.998s	coverage: 78.5% of statements
ok  	github.com/pingcap/tidb/executor/aggfuncs	5.283s	coverage: 76.0% of statements
ok  	github.com/pingcap/tidb/executor/oomtest	1.382s	coverage: [no statements] [no tests to run]
ok  	github.com/pingcap/tidb/executor/seqtest	12.221s	coverage: [no statements]
ok  	github.com/pingcap/tidb/expression	19.111s	coverage: 81.8% of statements
ok  	github.com/pingcap/tidb/expression/aggregation	1.340s	coverage: 42.8% of statements
?   	github.com/pingcap/tidb/expression/generator/helper	[no test files]
ok  	github.com/pingcap/tidb/infoschema	6.086s	coverage: 62.7% of statements
ok  	github.com/pingcap/tidb/infoschema/perfschema	2.282s	coverage: 70.6% of statements
ok  	github.com/pingcap/tidb/kv	0.536s	coverage: 0.3% of statements [no tests to run]
?   	github.com/pingcap/tidb/lock	[no test files]
ok  	github.com/pingcap/tidb/meta	1.994s	coverage: 74.0% of statements
ok  	github.com/pingcap/tidb/meta/autoid	2.111s	coverage: 72.2% of statements
ok  	github.com/pingcap/tidb/metrics	0.414s	coverage: 99.0% of statements
ok  	github.com/pingcap/tidb/owner	21.902s	coverage: 69.6% of statements
?   	github.com/pingcap/tidb/planner	[no test files]
ok  	github.com/pingcap/tidb/planner/cascades	2.563s	coverage: 94.6% of statements
ok  	github.com/pingcap/tidb/planner/core	69.995s	coverage: 78.9% of statements
ok  	github.com/pingcap/tidb/planner/implementation	0.719s	coverage: 3.7% of statements
ok  	github.com/pingcap/tidb/planner/memo	0.770s	coverage: 86.9% of statements
?   	github.com/pingcap/tidb/planner/property	[no test files]
?   	github.com/pingcap/tidb/planner/util	[no test files]
ok  	github.com/pingcap/tidb/plugin	0.719s	coverage: 59.0% of statements
ok  	github.com/pingcap/tidb/plugin/conn_ip_example	1.734s	coverage: 0.0% of statements
?   	github.com/pingcap/tidb/privilege	[no test files]
ok  	github.com/pingcap/tidb/privilege/privileges	5.530s	coverage: 81.9% of statements
ok  	github.com/pingcap/tidb/server	248.217s	coverage: 69.1% of statements
ok  	github.com/pingcap/tidb/session	48.880s	coverage: 78.8% of statements
ok  	github.com/pingcap/tidb/sessionctx	0.652s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/sessionctx/binloginfo	2.566s	coverage: 74.8% of statements
ok  	github.com/pingcap/tidb/sessionctx/stmtctx	0.650s	coverage: 31.1% of statements
ok  	github.com/pingcap/tidb/sessionctx/variable	0.850s	coverage: 45.6% of statements
ok  	github.com/pingcap/tidb/statistics	7.743s	coverage: 77.9% of statements
ok  	github.com/pingcap/tidb/statistics/handle	22.845s	coverage: 83.3% of statements
ok  	github.com/pingcap/tidb/store	86.851s	coverage: 95.5% of statements
ok  	github.com/pingcap/tidb/store/copr	0.583s	coverage: 0.2% of statements [no tests to run]
ok  	github.com/pingcap/tidb/store/driver	0.873s	coverage: 1.7% of statements [no tests to run]
?   	github.com/pingcap/tidb/store/driver/txn	[no test files]
ok  	github.com/pingcap/tidb/store/gcworker	17.465s	coverage: 76.1% of statements
ok  	github.com/pingcap/tidb/store/helper	1.198s	coverage: 49.5% of statements
ok  	github.com/pingcap/tidb/store/mockstore	0.964s	coverage: 36.7% of statements
ok  	github.com/pingcap/tidb/store/mockstore/mocktikv	1.507s	coverage: 44.0% of statements
ok  	github.com/pingcap/tidb/store/mockstore/unistore	2.196s	coverage: 14.6% of statements
?   	github.com/pingcap/tidb/store/mockstore/unistore/client	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore/unistore/cophandler	0.770s	coverage: 12.8% of statements
ok  	github.com/pingcap/tidb/store/tikv	27.972s	coverage: 59.3% of statements
ok  	github.com/pingcap/tidb/store/tikv/config	0.692s	coverage: 32.0% of statements
?   	github.com/pingcap/tidb/store/tikv/kv	[no test files]
ok  	github.com/pingcap/tidb/store/tikv/latch	0.659s	coverage: 95.2% of statements
?   	github.com/pingcap/tidb/store/tikv/logutil	[no test files]
?   	github.com/pingcap/tidb/store/tikv/metrics	[no test files]
?   	github.com/pingcap/tidb/store/tikv/mockstore/cluster	[no test files]
?   	github.com/pingcap/tidb/store/tikv/oracle	[no test files]
ok  	github.com/pingcap/tidb/store/tikv/oracle/oracles	0.888s	coverage: 30.5% of statements
ok  	github.com/pingcap/tidb/store/tikv/tests	27.770s	coverage: [no statements]
ok  	github.com/pingcap/tidb/store/tikv/tikvrpc	0.542s	coverage: 0.6% of statements
ok  	github.com/pingcap/tidb/store/tikv/unionstore	33.479s	coverage: 82.7% of statements
ok  	github.com/pingcap/tidb/store/tikv/util	0.580s	coverage: 38.9% of statements
?   	github.com/pingcap/tidb/store/tikv/util/codec	[no test files]
ok  	github.com/pingcap/tidb/structure	0.795s	coverage: 81.2% of statements
ok  	github.com/pingcap/tidb/table	0.641s	coverage: 70.3% of statements
ok  	github.com/pingcap/tidb/table/tables	3.014s	coverage: 55.1% of statements
ok  	github.com/pingcap/tidb/tablecodec	0.443s	coverage: 31.9% of statements
ok  	github.com/pingcap/tidb/telemetry	4.847s	coverage: 68.7% of statements
ok  	github.com/pingcap/tidb/tidb-server	1.215s	coverage: 22.2% of statements
ok  	github.com/pingcap/tidb/types	2.184s	coverage: 82.1% of statements
ok  	github.com/pingcap/tidb/types/json	0.494s	coverage: 80.6% of statements
ok  	github.com/pingcap/tidb/types/parser_driver	0.575s	coverage: 28.7% of statements
ok  	github.com/pingcap/tidb/util	1.432s	coverage: 54.3% of statements
ok  	github.com/pingcap/tidb/util/admin	2.940s	coverage: 55.6% of statements
ok  	github.com/pingcap/tidb/util/arena	0.422s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/bitmap	0.601s	coverage: 85.7% of statements
ok  	github.com/pingcap/tidb/util/checksum	0.474s	coverage: 85.1% of statements
ok  	github.com/pingcap/tidb/util/chunk	4.336s	coverage: 82.0% of statements
ok  	github.com/pingcap/tidb/util/codec	0.716s	coverage: 82.9% of statements
ok  	github.com/pingcap/tidb/util/collate	0.719s	coverage: 72.0% of statements
ok  	github.com/pingcap/tidb/util/dbterror	0.477s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/deadlock	0.364s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/disjointset	0.544s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/disk	0.482s	coverage: 50.0% of statements
?   	github.com/pingcap/tidb/util/domainutil	[no test files]
ok  	github.com/pingcap/tidb/util/encrypt	0.414s	coverage: 92.6% of statements
ok  	github.com/pingcap/tidb/util/execdetails	0.561s	coverage: 63.2% of statements
ok  	github.com/pingcap/tidb/util/expensivequery	0.796s	coverage: 13.4% of statements
ok  	github.com/pingcap/tidb/util/fastrand	0.357s	coverage: 0.0% of statements [no tests to run]
ok  	github.com/pingcap/tidb/util/filesort	0.978s	coverage: 86.3% of statements
ok  	github.com/pingcap/tidb/util/format	0.447s	coverage: 83.6% of statements
?   	github.com/pingcap/tidb/util/gcutil	[no test files]
ok  	github.com/pingcap/tidb/util/generatedexpr	0.862s	coverage: 0.0% of statements [no tests to run]
ok  	github.com/pingcap/tidb/util/hack	0.552s	coverage: 92.3% of statements
?   	github.com/pingcap/tidb/util/hint	[no test files]
?   	github.com/pingcap/tidb/util/israce	[no test files]
ok  	github.com/pingcap/tidb/util/kvcache	0.405s	coverage: 56.2% of statements
ok  	github.com/pingcap/tidb/util/localpool	0.394s	coverage: 96.8% of statements
ok  	github.com/pingcap/tidb/util/logutil	0.865s	coverage: 77.8% of statements
ok  	github.com/pingcap/tidb/util/math	2.085s	coverage: 33.3% of statements
ok  	github.com/pingcap/tidb/util/memory	0.798s	coverage: 65.0% of statements
ok  	github.com/pingcap/tidb/util/mock	0.861s	coverage: 15.6% of statements
ok  	github.com/pingcap/tidb/util/mvmap	0.413s	coverage: 86.6% of statements
ok  	github.com/pingcap/tidb/util/parser	0.599s	coverage: 60.0% of statements
?   	github.com/pingcap/tidb/util/pdapi	[no test files]
ok  	github.com/pingcap/tidb/util/plancodec	0.811s	coverage: 3.9% of statements
ok  	github.com/pingcap/tidb/util/printer	0.435s	coverage: 88.3% of statements
ok  	github.com/pingcap/tidb/util/profile	2.298s	coverage: 55.4% of statements
ok  	github.com/pingcap/tidb/util/ranger	5.579s	coverage: 82.0% of statements
ok  	github.com/pingcap/tidb/util/rowDecoder	0.962s	coverage: 77.6% of statements
ok  	github.com/pingcap/tidb/util/rowcodec	0.684s	coverage: 87.6% of statements
ok  	github.com/pingcap/tidb/util/selection	2.504s	coverage: 85.5% of statements
ok  	github.com/pingcap/tidb/util/set	1.739s	coverage: 48.6% of statements
?   	github.com/pingcap/tidb/util/signal	[no test files]
?   	github.com/pingcap/tidb/util/sli	[no test files]
ok  	github.com/pingcap/tidb/util/sqlexec	0.555s	coverage: 96.3% of statements
ok  	github.com/pingcap/tidb/util/stmtsummary	1.648s	coverage: 91.4% of statements
ok  	github.com/pingcap/tidb/util/stringutil	0.485s	coverage: 87.9% of statements
ok  	github.com/pingcap/tidb/util/sys/linux	0.655s	coverage: 66.7% of statements
ok  	github.com/pingcap/tidb/util/sys/storage	1.218s	coverage: 83.3% of statements
ok  	github.com/pingcap/tidb/util/systimemon	3.234s	coverage: 85.7% of statements
ok  	github.com/pingcap/tidb/util/testkit	0.853s	coverage: 6.2% of statements
?   	github.com/pingcap/tidb/util/testleak	[no test files]
ok  	github.com/pingcap/tidb/util/testutil	0.643s	coverage: 19.2% of statements
ok  	github.com/pingcap/tidb/util/texttree	0.386s	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/timeutil	0.402s	coverage: 48.7% of statements
ok  	github.com/pingcap/tidb/util/tracing	0.420s	coverage: 93.3% of statements
?   	github.com/pingcap/tidb/util/versioninfo	[no test files]
go generate ./...
./tools/check/check-gogenerate.sh
