cat checklist.md
# Following the checklist saves the reviewers' time and gets your PR reviewed faster.

# Self Review
Have you reviewed every line of your changes by yourself?

# Test
Have you added enough test cases to cover the new feature or bug fix?
Also, add comments to describe your test cases.

# Naming
Do function names keep consistent with its behavior?
Is it easy to infer the function's behavior by its name?

# Comment
Is there any code that confuses the reviewer?
Add comments on them! You'll be asked to do so anyway.
Make sure there is no syntax or spelling error in your comments.
Some online syntax checking tools like Grammarly may be helpful.

# Refactor
Is there any way to refactor the code to make it more readable?
If the refactoring touches a lot of existing code, send another PR to do it.

# Single Purpose
Make sure the PR does only one thing and nothing else.

# Diff Size
Make sure the diff size is no more than 500, split it into small PRs if it is too large.
gofmt (simplify)
errcheck
linting
go mod tidy
./tools/check/check-tidy.sh
testSuite
./tools/check/check_testSuite.sh
GO111MODULE=on go get -u github.com/client9/misspell/cmd/misspell
tools/bin/gometalinter --disable-all --deadline 120s \
  --enable misspell \
  --enable ineffassign \
  $(go list ./...| grep -vE "cmd" | grep -vE "test" | sed 's|github.com/pingcap/tidb/||')
vet
GO111MODULE=on go vet -all $(go list ./...| grep -vE "cmd" | grep -vE "test") 2>&1 | awk '{ print } END { if (NR > 0) { exit 1 } }'
GO111MODULE=on go list -f '{{ join .Imports "\n" }}' github.com/pingcap/tidb/store/tikv | grep ^github.com/pingcap/parser$ || exit 0; exit 1
Running in native mode.
ok  	github.com/pingcap/tidb/bindinfo	0.504s	coverage: 74.0% of statements
ok  	github.com/pingcap/tidb/config	(cached)	coverage: 60.8% of statements
ok  	github.com/pingcap/tidb/ddl	13.881s	coverage: 84.7% of statements
ok  	github.com/pingcap/tidb/ddl/util	0.287s	coverage: 54.5% of statements
ok  	github.com/pingcap/tidb/distsql	(cached)	coverage: 86.5% of statements
ok  	github.com/pingcap/tidb/domain	0.798s	coverage: 80.2% of statements
ok  	github.com/pingcap/tidb/executor	30.239s	coverage: 82.5% of statements
ok  	github.com/pingcap/tidb/executor/aggfuncs	(cached)	coverage: 87.9% of statements
ok  	github.com/pingcap/tidb/expression	9.829s	coverage: 87.3% of statements
ok  	github.com/pingcap/tidb/expression/aggregation	(cached)	coverage: 53.3% of statements
ok  	github.com/pingcap/tidb/infoschema	0.583s	coverage: 73.2% of statements
ok  	github.com/pingcap/tidb/infoschema/perfschema	0.143s	coverage: 77.1% of statements
ok  	github.com/pingcap/tidb/kv	(cached)	coverage: 86.8% of statements
?   	github.com/pingcap/tidb/lock	[no test files]
ok  	github.com/pingcap/tidb/meta	(cached)	coverage: 86.1% of statements
ok  	github.com/pingcap/tidb/meta/autoid	(cached)	coverage: 91.4% of statements
ok  	github.com/pingcap/tidb/metrics	(cached)	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/owner	4.967s	coverage: 67.9% of statements
?   	github.com/pingcap/tidb/planner	[no test files]
ok  	github.com/pingcap/tidb/planner/cascades	0.177s	coverage: 66.9% of statements
ok  	github.com/pingcap/tidb/planner/core	7.526s	coverage: 82.1% of statements
ok  	github.com/pingcap/tidb/planner/implementation	0.008s	coverage: 38.5% of statements
ok  	github.com/pingcap/tidb/planner/memo	0.012s	coverage: 88.4% of statements
?   	github.com/pingcap/tidb/planner/property	[no test files]
ok  	github.com/pingcap/tidb/plugin	0.009s	coverage: 61.4% of statements
ok  	github.com/pingcap/tidb/plugin/conn_ip_example	0.012s	coverage: 0.0% of statements [no tests to run]
?   	github.com/pingcap/tidb/privilege	[no test files]
ok  	github.com/pingcap/tidb/privilege/privileges	1.377s	coverage: 82.9% of statements
ok  	github.com/pingcap/tidb/server	21.132s	coverage: 59.4% of statements
ok  	github.com/pingcap/tidb/session	16.333s	coverage: 79.6% of statements
ok  	github.com/pingcap/tidb/sessionctx	(cached)	coverage: 83.3% of statements
ok  	github.com/pingcap/tidb/sessionctx/binloginfo	1.230s	coverage: 92.6% of statements
ok  	github.com/pingcap/tidb/sessionctx/stmtctx	(cached)	coverage: 30.6% of statements
ok  	github.com/pingcap/tidb/sessionctx/variable	(cached)	coverage: 53.8% of statements
ok  	github.com/pingcap/tidb/statistics	3.534s	coverage: 77.5% of statements
ok  	github.com/pingcap/tidb/statistics/handle	4.099s	coverage: 86.3% of statements
ok  	github.com/pingcap/tidb/store	(cached)	coverage: 95.5% of statements
ok  	github.com/pingcap/tidb/store/helper	(cached)	coverage: 49.3% of statements
?   	github.com/pingcap/tidb/store/mockoracle	[no test files]
ok  	github.com/pingcap/tidb/store/mockstore	(cached)	coverage: 74.1% of statements
ok  	github.com/pingcap/tidb/store/mockstore/mocktikv	(cached)	coverage: 28.6% of statements
ok  	github.com/pingcap/tidb/store/tikv	36.332s	coverage: 72.9% of statements
ok  	github.com/pingcap/tidb/store/tikv/gcworker	7.255s	coverage: 72.5% of statements
ok  	github.com/pingcap/tidb/store/tikv/latch	(cached)	coverage: 95.2% of statements
?   	github.com/pingcap/tidb/store/tikv/oracle	[no test files]
ok  	github.com/pingcap/tidb/store/tikv/oracle/oracles	(cached)	coverage: 30.0% of statements
?   	github.com/pingcap/tidb/store/tikv/tikvrpc	[no test files]
ok  	github.com/pingcap/tidb/structure	(cached)	coverage: 85.7% of statements
ok  	github.com/pingcap/tidb/table	(cached)	coverage: 86.4% of statements
ok  	github.com/pingcap/tidb/table/tables	0.584s	coverage: 82.9% of statements
ok  	github.com/pingcap/tidb/tablecodec	(cached)	coverage: 79.1% of statements
?   	github.com/pingcap/tidb/tidb-server	[no test files]
ok  	github.com/pingcap/tidb/types	0.390s	coverage: 85.5% of statements
ok  	github.com/pingcap/tidb/types/json	(cached)	coverage: 83.7% of statements
ok  	github.com/pingcap/tidb/types/parser_driver	(cached)	coverage: 24.7% of statements
ok  	github.com/pingcap/tidb/util	(cached)	coverage: 87.3% of statements
ok  	github.com/pingcap/tidb/util/admin	0.377s	coverage: 81.5% of statements
ok  	github.com/pingcap/tidb/util/arena	(cached)	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/chunk	(cached)	coverage: 85.4% of statements
ok  	github.com/pingcap/tidb/util/codec	(cached)	coverage: 86.0% of statements
ok  	github.com/pingcap/tidb/util/deadlock	(cached)	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/disjointset	(cached)	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/encrypt	(cached)	coverage: 95.2% of statements
ok  	github.com/pingcap/tidb/util/execdetails	(cached)	coverage: 68.3% of statements
?   	github.com/pingcap/tidb/util/expensivequery	[no test files]
ok  	github.com/pingcap/tidb/util/filesort	0.309s	coverage: 86.4% of statements
ok  	github.com/pingcap/tidb/util/format	(cached)	coverage: 83.6% of statements
?   	github.com/pingcap/tidb/util/gcutil	[no test files]
ok  	github.com/pingcap/tidb/util/hack	(cached)	coverage: 100.0% of statements
?   	github.com/pingcap/tidb/util/israce	[no test files]
ok  	github.com/pingcap/tidb/util/kvcache	0.004s	coverage: 80.0% of statements
ok  	github.com/pingcap/tidb/util/kvencoder	1.954s	coverage: 88.6% of statements
ok  	github.com/pingcap/tidb/util/logutil	(cached)	coverage: 84.8% of statements
ok  	github.com/pingcap/tidb/util/math	(cached)	coverage: 33.3% of statements
ok  	github.com/pingcap/tidb/util/memory	(cached)	coverage: 67.6% of statements
ok  	github.com/pingcap/tidb/util/mock	(cached)	coverage: 16.7% of statements
ok  	github.com/pingcap/tidb/util/mvmap	(cached)	coverage: 86.6% of statements
?   	github.com/pingcap/tidb/util/pdapi	[no test files]
ok  	github.com/pingcap/tidb/util/printer	(cached)	coverage: 88.3% of statements
ok  	github.com/pingcap/tidb/util/ranger	0.545s	coverage: 80.3% of statements
ok  	github.com/pingcap/tidb/util/rowDecoder	(cached)	coverage: 45.5% of statements
ok  	github.com/pingcap/tidb/util/rowcodec	(cached)	coverage: 88.6% of statements
ok  	github.com/pingcap/tidb/util/set	(cached)	coverage: 100.0% of statements
?   	github.com/pingcap/tidb/util/signal	[no test files]
?   	github.com/pingcap/tidb/util/sqlexec	[no test files]
ok  	github.com/pingcap/tidb/util/stringutil	(cached)	coverage: 95.5% of statements
ok  	github.com/pingcap/tidb/util/sys/linux	(cached)	coverage: 68.4% of statements
ok  	github.com/pingcap/tidb/util/systimemon	(cached)	coverage: 100.0% of statements
ok  	github.com/pingcap/tidb/util/timeutil	(cached)	coverage: 63.3% of statements
ok  	github.com/pingcap/tidb/util/tracing	(cached)	coverage: 93.3% of statements
CGO_ENABLED=1 GO111MODULE=on go build  -tags codes  -ldflags '-X "github.com/pingcap/parser/mysql.TiDBReleaseVersion=v4.0.0-alpha-118-g396b09467-dirty" -X "github.com/pingcap/tidb/util/printer.TiDBBuildTS=2019-08-23 05:27:02" -X "github.com/pingcap/tidb/util/printer.TiDBGitHash=396b094675d8641994856a82285098c39ee708bb" -X "github.com/pingcap/tidb/util/printer.TiDBGitBranch=fix_constitem" -X "github.com/pingcap/tidb/util/printer.GoVersion=go version go1.12.4 linux/amd64" ' -o bin/tidb-server tidb-server/main.go
skip building tidb-server, using existing binary: ../../bin/tidb-server
skip building importer, using existing binary: 
building explain-test binary: ./explain_test
start tidb-server, log file: ./explain-test.out
tidb-server(PID: 7500) started
run all explain test cases
explaintest end
